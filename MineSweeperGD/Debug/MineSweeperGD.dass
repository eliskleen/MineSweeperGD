
Debug/MineSweeperGD:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:


__attribute__((naked)) __attribute__((section (".start_section")) )
void startup ( void )
{
__asm__ volatile(" LDR R0,=0x2001C000\n");    
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <startup+0xc>)
__asm__ volatile(" MOV SP,R0\n");
20000002:	4685      	mov	sp, r0
//__asm__ volatile(" BL _crt_init\n");            
__asm__ volatile(" BL main\n");                    
20000004:	f001 fc3e 	bl	20001884 <main>
//__asm__ volatile(" BL _crt_deinit\n");            
__asm__ volatile(" B .\n");               
20000008:	e7fe      	b.n	20000008 <startup+0x8>
2000000a:	c0000000 	andgt	r0, r0, r0
2000000e:	46c02001 	strbmi	r2, [r0], r1
20000012:	46c0      	nop			; (mov r8, r8)

20000014 <timer6_init>:
#ifndef TIMER6INC
	#define TIMER6INC
	#include "timer6_declarations.h"
#endif
void timer6_init()
{
20000014:	b580      	push	{r7, lr}
20000016:	af00      	add	r7, sp, #0
	ticks = 0; 
20000018:	4b1b      	ldr	r3, [pc, #108]	; (20000088 <timer6_init+0x74>)
2000001a:	2200      	movs	r2, #0
2000001c:	601a      	str	r2, [r3, #0]
	seconds = 0;
2000001e:	4b1b      	ldr	r3, [pc, #108]	; (2000008c <timer6_init+0x78>)
20000020:	2200      	movs	r2, #0
20000022:	601a      	str	r2, [r3, #0]
	*TIM6_CR1 &= ~CEN; //stoppa räknare
20000024:	4b1a      	ldr	r3, [pc, #104]	; (20000090 <timer6_init+0x7c>)
20000026:	881b      	ldrh	r3, [r3, #0]
20000028:	b29b      	uxth	r3, r3
2000002a:	4a19      	ldr	r2, [pc, #100]	; (20000090 <timer6_init+0x7c>)
2000002c:	2101      	movs	r1, #1
2000002e:	438b      	bics	r3, r1
20000030:	b29b      	uxth	r3, r3
20000032:	8013      	strh	r3, [r2, #0]
	//*SCB_VTOR = REALLOC;
	*TIM6_IRQVEC = timer6_interrupt;
20000034:	4b17      	ldr	r3, [pc, #92]	; (20000094 <timer6_init+0x80>)
20000036:	681b      	ldr	r3, [r3, #0]
20000038:	3319      	adds	r3, #25
2000003a:	33ff      	adds	r3, #255	; 0xff
2000003c:	4a16      	ldr	r2, [pc, #88]	; (20000098 <timer6_init+0x84>)
2000003e:	601a      	str	r2, [r3, #0]
	*NVIC_TIM6_ISER |= NVIC_TIM6_IRQ_BPOS;
20000040:	4b16      	ldr	r3, [pc, #88]	; (2000009c <timer6_init+0x88>)
20000042:	681a      	ldr	r2, [r3, #0]
20000044:	4b15      	ldr	r3, [pc, #84]	; (2000009c <timer6_init+0x88>)
20000046:	2180      	movs	r1, #128	; 0x80
20000048:	03c9      	lsls	r1, r1, #15
2000004a:	430a      	orrs	r2, r1
2000004c:	601a      	str	r2, [r3, #0]
	
	//100ms tidbas
	*TIM6_PSC = 839;
2000004e:	4b14      	ldr	r3, [pc, #80]	; (200000a0 <timer6_init+0x8c>)
20000050:	4a14      	ldr	r2, [pc, #80]	; (200000a4 <timer6_init+0x90>)
20000052:	801a      	strh	r2, [r3, #0]
    *TIM6_ARR = 9999;
20000054:	4b14      	ldr	r3, [pc, #80]	; (200000a8 <timer6_init+0x94>)
20000056:	4a15      	ldr	r2, [pc, #84]	; (200000ac <timer6_init+0x98>)
20000058:	801a      	strh	r2, [r3, #0]
	*TIM6_DIER |= UIE;
2000005a:	4b15      	ldr	r3, [pc, #84]	; (200000b0 <timer6_init+0x9c>)
2000005c:	881b      	ldrh	r3, [r3, #0]
2000005e:	b29b      	uxth	r3, r3
20000060:	4a13      	ldr	r2, [pc, #76]	; (200000b0 <timer6_init+0x9c>)
20000062:	2101      	movs	r1, #1
20000064:	430b      	orrs	r3, r1
20000066:	b29b      	uxth	r3, r3
20000068:	8013      	strh	r3, [r2, #0]
	*TIM6_CR1 |= CEN; //starta räknare
2000006a:	4b09      	ldr	r3, [pc, #36]	; (20000090 <timer6_init+0x7c>)
2000006c:	881b      	ldrh	r3, [r3, #0]
2000006e:	b29b      	uxth	r3, r3
20000070:	4a07      	ldr	r2, [pc, #28]	; (20000090 <timer6_init+0x7c>)
20000072:	2101      	movs	r1, #1
20000074:	430b      	orrs	r3, r1
20000076:	b29b      	uxth	r3, r3
20000078:	8013      	strh	r3, [r2, #0]
	timer_running = 1;
2000007a:	4b0e      	ldr	r3, [pc, #56]	; (200000b4 <timer6_init+0xa0>)
2000007c:	2201      	movs	r2, #1
2000007e:	601a      	str	r2, [r3, #0]
}
20000080:	46c0      	nop			; (mov r8, r8)
20000082:	46bd      	mov	sp, r7
20000084:	bd80      	pop	{r7, pc}
20000086:	46c0      	nop			; (mov r8, r8)
20000088:	20001ebc 			; <UNDEFINED> instruction: 0x20001ebc
2000008c:	20001eb8 			; <UNDEFINED> instruction: 0x20001eb8
20000090:	40001000 	andmi	r1, r0, r0
20000094:	e000ed08 	and	lr, r0, r8, lsl #26
20000098:	200000b9 	strhcs	r0, [r0], -r9
2000009c:	e000e104 	and	lr, r0, r4, lsl #2
200000a0:	40001028 	andmi	r1, r0, r8, lsr #32
200000a4:	00000347 	andeq	r0, r0, r7, asr #6
200000a8:	4000102c 	andmi	r1, r0, ip, lsr #32
200000ac:	0000270f 	andeq	r2, r0, pc, lsl #14
200000b0:	4000100c 	andmi	r1, r0, ip
200000b4:	20001ec0 	andcs	r1, r0, r0, asr #29

200000b8 <timer6_interrupt>:


void timer6_interrupt()
{
200000b8:	b580      	push	{r7, lr}
200000ba:	af00      	add	r7, sp, #0
	*TIM6_SR &= ~UIF;
200000bc:	4b0d      	ldr	r3, [pc, #52]	; (200000f4 <timer6_interrupt+0x3c>)
200000be:	881b      	ldrh	r3, [r3, #0]
200000c0:	b29b      	uxth	r3, r3
200000c2:	4a0c      	ldr	r2, [pc, #48]	; (200000f4 <timer6_interrupt+0x3c>)
200000c4:	2101      	movs	r1, #1
200000c6:	438b      	bics	r3, r1
200000c8:	b29b      	uxth	r3, r3
200000ca:	8013      	strh	r3, [r2, #0]
	ticks++;
200000cc:	4b0a      	ldr	r3, [pc, #40]	; (200000f8 <timer6_interrupt+0x40>)
200000ce:	681b      	ldr	r3, [r3, #0]
200000d0:	1c5a      	adds	r2, r3, #1
200000d2:	4b09      	ldr	r3, [pc, #36]	; (200000f8 <timer6_interrupt+0x40>)
200000d4:	601a      	str	r2, [r3, #0]
	if(ticks > 9)
200000d6:	4b08      	ldr	r3, [pc, #32]	; (200000f8 <timer6_interrupt+0x40>)
200000d8:	681b      	ldr	r3, [r3, #0]
200000da:	2b09      	cmp	r3, #9
200000dc:	dd07      	ble.n	200000ee <timer6_interrupt+0x36>
	{
		ticks = 0;
200000de:	4b06      	ldr	r3, [pc, #24]	; (200000f8 <timer6_interrupt+0x40>)
200000e0:	2200      	movs	r2, #0
200000e2:	601a      	str	r2, [r3, #0]
		seconds ++;
200000e4:	4b05      	ldr	r3, [pc, #20]	; (200000fc <timer6_interrupt+0x44>)
200000e6:	681b      	ldr	r3, [r3, #0]
200000e8:	1c5a      	adds	r2, r3, #1
200000ea:	4b04      	ldr	r3, [pc, #16]	; (200000fc <timer6_interrupt+0x44>)
200000ec:	601a      	str	r2, [r3, #0]
	}
}
200000ee:	46c0      	nop			; (mov r8, r8)
200000f0:	46bd      	mov	sp, r7
200000f2:	bd80      	pop	{r7, pc}
200000f4:	40001010 	andmi	r1, r0, r0, lsl r0
200000f8:	20001ebc 			; <UNDEFINED> instruction: 0x20001ebc
200000fc:	20001eb8 			; <UNDEFINED> instruction: 0x20001eb8

20000100 <toggle_timer_running>:

void toggle_timer_running()
{
20000100:	b580      	push	{r7, lr}
20000102:	af00      	add	r7, sp, #0
	timer_running = !timer_running;
20000104:	4b07      	ldr	r3, [pc, #28]	; (20000124 <toggle_timer_running+0x24>)
20000106:	681b      	ldr	r3, [r3, #0]
20000108:	425a      	negs	r2, r3
2000010a:	4153      	adcs	r3, r2
2000010c:	b2db      	uxtb	r3, r3
2000010e:	001a      	movs	r2, r3
20000110:	4b04      	ldr	r3, [pc, #16]	; (20000124 <toggle_timer_running+0x24>)
20000112:	601a      	str	r2, [r3, #0]
	set_running(timer_running);
20000114:	4b03      	ldr	r3, [pc, #12]	; (20000124 <toggle_timer_running+0x24>)
20000116:	681b      	ldr	r3, [r3, #0]
20000118:	0018      	movs	r0, r3
2000011a:	f000 f805 	bl	20000128 <set_running>
}
2000011e:	46c0      	nop			; (mov r8, r8)
20000120:	46bd      	mov	sp, r7
20000122:	bd80      	pop	{r7, pc}
20000124:	20001ec0 	andcs	r1, r0, r0, asr #29

20000128 <set_running>:

void set_running(int r)
{
20000128:	b580      	push	{r7, lr}
2000012a:	b082      	sub	sp, #8
2000012c:	af00      	add	r7, sp, #0
2000012e:	6078      	str	r0, [r7, #4]
	if(r)
20000130:	687b      	ldr	r3, [r7, #4]
20000132:	2b00      	cmp	r3, #0
20000134:	d008      	beq.n	20000148 <set_running+0x20>
		*TIM6_CR1 |= CEN; //starta räknare
20000136:	4b0c      	ldr	r3, [pc, #48]	; (20000168 <set_running+0x40>)
20000138:	881b      	ldrh	r3, [r3, #0]
2000013a:	b29b      	uxth	r3, r3
2000013c:	4a0a      	ldr	r2, [pc, #40]	; (20000168 <set_running+0x40>)
2000013e:	2101      	movs	r1, #1
20000140:	430b      	orrs	r3, r1
20000142:	b29b      	uxth	r3, r3
20000144:	8013      	strh	r3, [r2, #0]
20000146:	e007      	b.n	20000158 <set_running+0x30>
	else
		*TIM6_CR1 &= ~CEN; //stoppa räknare
20000148:	4b07      	ldr	r3, [pc, #28]	; (20000168 <set_running+0x40>)
2000014a:	881b      	ldrh	r3, [r3, #0]
2000014c:	b29b      	uxth	r3, r3
2000014e:	4a06      	ldr	r2, [pc, #24]	; (20000168 <set_running+0x40>)
20000150:	2101      	movs	r1, #1
20000152:	438b      	bics	r3, r1
20000154:	b29b      	uxth	r3, r3
20000156:	8013      	strh	r3, [r2, #0]
	timer_running = r;
20000158:	4b04      	ldr	r3, [pc, #16]	; (2000016c <set_running+0x44>)
2000015a:	687a      	ldr	r2, [r7, #4]
2000015c:	601a      	str	r2, [r3, #0]
}
2000015e:	46c0      	nop			; (mov r8, r8)
20000160:	46bd      	mov	sp, r7
20000162:	b002      	add	sp, #8
20000164:	bd80      	pop	{r7, pc}
20000166:	46c0      	nop			; (mov r8, r8)
20000168:	40001000 	andmi	r1, r0, r0
2000016c:	20001ec0 	andcs	r1, r0, r0, asr #29

20000170 <reset_timer>:
void reset_timer()
{
20000170:	b580      	push	{r7, lr}
20000172:	af00      	add	r7, sp, #0
	ticks = 0;
20000174:	4b04      	ldr	r3, [pc, #16]	; (20000188 <reset_timer+0x18>)
20000176:	2200      	movs	r2, #0
20000178:	601a      	str	r2, [r3, #0]
	seconds = 0;
2000017a:	4b04      	ldr	r3, [pc, #16]	; (2000018c <reset_timer+0x1c>)
2000017c:	2200      	movs	r2, #0
2000017e:	601a      	str	r2, [r3, #0]
20000180:	46c0      	nop			; (mov r8, r8)
20000182:	46bd      	mov	sp, r7
20000184:	bd80      	pop	{r7, pc}
20000186:	46c0      	nop			; (mov r8, r8)
20000188:	20001ebc 			; <UNDEFINED> instruction: 0x20001ebc
2000018c:	20001eb8 			; <UNDEFINED> instruction: 0x20001eb8

20000190 <start_rand>:


void systick_irq_handler( void );

void start_rand()
{
20000190:	b580      	push	{r7, lr}
20000192:	af00      	add	r7, sp, #0
	if(counting) return; // kan inte göra båda samtidigt
20000194:	4b0b      	ldr	r3, [pc, #44]	; (200001c4 <start_rand+0x34>)
20000196:	681b      	ldr	r3, [r3, #0]
20000198:	2b00      	cmp	r3, #0
2000019a:	d10f      	bne.n	200001bc <start_rand+0x2c>
	used_for_rand = 1;
2000019c:	4b0a      	ldr	r3, [pc, #40]	; (200001c8 <start_rand+0x38>)
2000019e:	2201      	movs	r2, #1
200001a0:	601a      	str	r2, [r3, #0]
	*STK_CTRL = 0;
200001a2:	4b0a      	ldr	r3, [pc, #40]	; (200001cc <start_rand+0x3c>)
200001a4:	2200      	movs	r2, #0
200001a6:	601a      	str	r2, [r3, #0]
	*STK_LOAD = LOAD_MAX;
200001a8:	4b09      	ldr	r3, [pc, #36]	; (200001d0 <start_rand+0x40>)
200001aa:	22ff      	movs	r2, #255	; 0xff
200001ac:	601a      	str	r2, [r3, #0]
	*STK_VAL = 0;
200001ae:	4b09      	ldr	r3, [pc, #36]	; (200001d4 <start_rand+0x44>)
200001b0:	2200      	movs	r2, #0
200001b2:	601a      	str	r2, [r3, #0]
	*STK_CTRL = 7;
200001b4:	4b05      	ldr	r3, [pc, #20]	; (200001cc <start_rand+0x3c>)
200001b6:	2207      	movs	r2, #7
200001b8:	601a      	str	r2, [r3, #0]
200001ba:	e000      	b.n	200001be <start_rand+0x2e>
	if(counting) return; // kan inte göra båda samtidigt
200001bc:	46c0      	nop			; (mov r8, r8)
}
200001be:	46bd      	mov	sp, r7
200001c0:	bd80      	pop	{r7, pc}
200001c2:	46c0      	nop			; (mov r8, r8)
200001c4:	20001ea0 	andcs	r1, r0, r0, lsr #29
200001c8:	20001ea4 	andcs	r1, r0, r4, lsr #29
200001cc:	e000e010 	and	lr, r0, r0, lsl r0
200001d0:	e000e014 	and	lr, r0, r4, lsl r0
200001d4:	e000e018 	and	lr, r0, r8, lsl r0

200001d8 <get_rand_val>:
int get_rand_val()
{
200001d8:	b580      	push	{r7, lr}
200001da:	af00      	add	r7, sp, #0
	if(used_for_rand)
200001dc:	4b05      	ldr	r3, [pc, #20]	; (200001f4 <get_rand_val+0x1c>)
200001de:	681b      	ldr	r3, [r3, #0]
200001e0:	2b00      	cmp	r3, #0
200001e2:	d002      	beq.n	200001ea <get_rand_val+0x12>
		return *STK_VAL;
200001e4:	4b04      	ldr	r3, [pc, #16]	; (200001f8 <get_rand_val+0x20>)
200001e6:	681b      	ldr	r3, [r3, #0]
200001e8:	e000      	b.n	200001ec <get_rand_val+0x14>
	else return 0;
200001ea:	2300      	movs	r3, #0
}
200001ec:	0018      	movs	r0, r3
200001ee:	46bd      	mov	sp, r7
200001f0:	bd80      	pop	{r7, pc}
200001f2:	46c0      	nop			; (mov r8, r8)
200001f4:	20001ea4 	andcs	r1, r0, r4, lsr #29
200001f8:	e000e018 	and	lr, r0, r8, lsl r0

200001fc <end_rand>:
void end_rand()
{
200001fc:	b580      	push	{r7, lr}
200001fe:	af00      	add	r7, sp, #0
	*STK_CTRL = 0;
20000200:	4b04      	ldr	r3, [pc, #16]	; (20000214 <end_rand+0x18>)
20000202:	2200      	movs	r2, #0
20000204:	601a      	str	r2, [r3, #0]
	used_for_rand = 0;
20000206:	4b04      	ldr	r3, [pc, #16]	; (20000218 <end_rand+0x1c>)
20000208:	2200      	movs	r2, #0
2000020a:	601a      	str	r2, [r3, #0]
}
2000020c:	46c0      	nop			; (mov r8, r8)
2000020e:	46bd      	mov	sp, r7
20000210:	bd80      	pop	{r7, pc}
20000212:	46c0      	nop			; (mov r8, r8)
20000214:	e000e010 	and	lr, r0, r0, lsl r0
20000218:	20001ea4 	andcs	r1, r0, r4, lsr #29

2000021c <sysTick_init>:

void sysTick_init()
{
2000021c:	b580      	push	{r7, lr}
2000021e:	af00      	add	r7, sp, #0
	//*SCB_VTOR = REALLOC;
	*((void (**)(void) ) 0x2001C03C) = &systick_irq_handler;
20000220:	4b02      	ldr	r3, [pc, #8]	; (2000022c <sysTick_init+0x10>)
20000222:	4a03      	ldr	r2, [pc, #12]	; (20000230 <sysTick_init+0x14>)
20000224:	601a      	str	r2, [r3, #0]
}
20000226:	46c0      	nop			; (mov r8, r8)
20000228:	46bd      	mov	sp, r7
2000022a:	bd80      	pop	{r7, pc}
2000022c:	2001c03c 	andcs	ip, r1, ip, lsr r0
20000230:	20000265 	andcs	r0, r0, r5, ror #4

20000234 <delay_1mikro>:

void delay_1mikro( void )
{
20000234:	b580      	push	{r7, lr}
20000236:	af00      	add	r7, sp, #0
	*STK_CTRL = 0;
20000238:	4b07      	ldr	r3, [pc, #28]	; (20000258 <delay_1mikro+0x24>)
2000023a:	2200      	movs	r2, #0
2000023c:	601a      	str	r2, [r3, #0]
	*STK_LOAD = (168 - 1);
2000023e:	4b07      	ldr	r3, [pc, #28]	; (2000025c <delay_1mikro+0x28>)
20000240:	22a7      	movs	r2, #167	; 0xa7
20000242:	601a      	str	r2, [r3, #0]
	*STK_VAL = 0;
20000244:	4b06      	ldr	r3, [pc, #24]	; (20000260 <delay_1mikro+0x2c>)
20000246:	2200      	movs	r2, #0
20000248:	601a      	str	r2, [r3, #0]
	*STK_CTRL = 7;
2000024a:	4b03      	ldr	r3, [pc, #12]	; (20000258 <delay_1mikro+0x24>)
2000024c:	2207      	movs	r2, #7
2000024e:	601a      	str	r2, [r3, #0]
}
20000250:	46c0      	nop			; (mov r8, r8)
20000252:	46bd      	mov	sp, r7
20000254:	bd80      	pop	{r7, pc}
20000256:	46c0      	nop			; (mov r8, r8)
20000258:	e000e010 	and	lr, r0, r0, lsl r0
2000025c:	e000e014 	and	lr, r0, r4, lsl r0
20000260:	e000e018 	and	lr, r0, r8, lsl r0

20000264 <systick_irq_handler>:

void systick_irq_handler( void )
{
20000264:	b580      	push	{r7, lr}
20000266:	af00      	add	r7, sp, #0
	if(used_for_rand) systick_irq_handler_rand();
20000268:	4b05      	ldr	r3, [pc, #20]	; (20000280 <systick_irq_handler+0x1c>)
2000026a:	681b      	ldr	r3, [r3, #0]
2000026c:	2b00      	cmp	r3, #0
2000026e:	d002      	beq.n	20000276 <systick_irq_handler+0x12>
20000270:	f000 f82a 	bl	200002c8 <systick_irq_handler_rand>
	else systick_irq_handler_counting();
}
20000274:	e001      	b.n	2000027a <systick_irq_handler+0x16>
	else systick_irq_handler_counting();
20000276:	f000 f805 	bl	20000284 <systick_irq_handler_counting>
}
2000027a:	46c0      	nop			; (mov r8, r8)
2000027c:	46bd      	mov	sp, r7
2000027e:	bd80      	pop	{r7, pc}
20000280:	20001ea4 	andcs	r1, r0, r4, lsr #29

20000284 <systick_irq_handler_counting>:

void systick_irq_handler_counting( void )
{
20000284:	b580      	push	{r7, lr}
20000286:	af00      	add	r7, sp, #0
	*STK_CTRL = 0;
20000288:	4b0b      	ldr	r3, [pc, #44]	; (200002b8 <systick_irq_handler_counting+0x34>)
2000028a:	2200      	movs	r2, #0
2000028c:	601a      	str	r2, [r3, #0]
	delay_count -- ;
2000028e:	4b0b      	ldr	r3, [pc, #44]	; (200002bc <systick_irq_handler_counting+0x38>)
20000290:	681b      	ldr	r3, [r3, #0]
20000292:	1e5a      	subs	r2, r3, #1
20000294:	4b09      	ldr	r3, [pc, #36]	; (200002bc <systick_irq_handler_counting+0x38>)
20000296:	601a      	str	r2, [r3, #0]
	if( delay_count > 0 ) delay_1mikro();
20000298:	4b08      	ldr	r3, [pc, #32]	; (200002bc <systick_irq_handler_counting+0x38>)
2000029a:	681b      	ldr	r3, [r3, #0]
2000029c:	2b00      	cmp	r3, #0
2000029e:	dd02      	ble.n	200002a6 <systick_irq_handler_counting+0x22>
200002a0:	f7ff ffc8 	bl	20000234 <delay_1mikro>
	else 
		{
			systick_flag = 1;
			counting = 0;
		}
}
200002a4:	e005      	b.n	200002b2 <systick_irq_handler_counting+0x2e>
			systick_flag = 1;
200002a6:	4b06      	ldr	r3, [pc, #24]	; (200002c0 <systick_irq_handler_counting+0x3c>)
200002a8:	2201      	movs	r2, #1
200002aa:	601a      	str	r2, [r3, #0]
			counting = 0;
200002ac:	4b05      	ldr	r3, [pc, #20]	; (200002c4 <systick_irq_handler_counting+0x40>)
200002ae:	2200      	movs	r2, #0
200002b0:	601a      	str	r2, [r3, #0]
}
200002b2:	46c0      	nop			; (mov r8, r8)
200002b4:	46bd      	mov	sp, r7
200002b6:	bd80      	pop	{r7, pc}
200002b8:	e000e010 	and	lr, r0, r0, lsl r0
200002bc:	20001e9c 	mulcs	r0, ip, lr
200002c0:	20001e98 	mulcs	r0, r8, lr
200002c4:	20001ea0 	andcs	r1, r0, r0, lsr #29

200002c8 <systick_irq_handler_rand>:
void systick_irq_handler_rand( void )
{
200002c8:	b580      	push	{r7, lr}
200002ca:	af00      	add	r7, sp, #0
	*STK_CTRL = 0;
200002cc:	4b07      	ldr	r3, [pc, #28]	; (200002ec <systick_irq_handler_rand+0x24>)
200002ce:	2200      	movs	r2, #0
200002d0:	601a      	str	r2, [r3, #0]
	*STK_LOAD = LOAD_MAX;
200002d2:	4b07      	ldr	r3, [pc, #28]	; (200002f0 <systick_irq_handler_rand+0x28>)
200002d4:	22ff      	movs	r2, #255	; 0xff
200002d6:	601a      	str	r2, [r3, #0]
	*STK_VAL = 0;
200002d8:	4b06      	ldr	r3, [pc, #24]	; (200002f4 <systick_irq_handler_rand+0x2c>)
200002da:	2200      	movs	r2, #0
200002dc:	601a      	str	r2, [r3, #0]
	*STK_CTRL = 7;
200002de:	4b03      	ldr	r3, [pc, #12]	; (200002ec <systick_irq_handler_rand+0x24>)
200002e0:	2207      	movs	r2, #7
200002e2:	601a      	str	r2, [r3, #0]
}
200002e4:	46c0      	nop			; (mov r8, r8)
200002e6:	46bd      	mov	sp, r7
200002e8:	bd80      	pop	{r7, pc}
200002ea:	46c0      	nop			; (mov r8, r8)
200002ec:	e000e010 	and	lr, r0, r0, lsl r0
200002f0:	e000e014 	and	lr, r0, r4, lsl r0
200002f4:	e000e018 	and	lr, r0, r8, lsl r0

200002f8 <delay>:
void delay( unsigned int count )
{
200002f8:	b580      	push	{r7, lr}
200002fa:	b082      	sub	sp, #8
200002fc:	af00      	add	r7, sp, #0
200002fe:	6078      	str	r0, [r7, #4]
	if(used_for_rand) return;
20000300:	4b0c      	ldr	r3, [pc, #48]	; (20000334 <delay+0x3c>)
20000302:	681b      	ldr	r3, [r3, #0]
20000304:	2b00      	cmp	r3, #0
20000306:	d10e      	bne.n	20000326 <delay+0x2e>
	counting = 1;
20000308:	4b0b      	ldr	r3, [pc, #44]	; (20000338 <delay+0x40>)
2000030a:	2201      	movs	r2, #1
2000030c:	601a      	str	r2, [r3, #0]
	if( count == 0 ) return;
2000030e:	687b      	ldr	r3, [r7, #4]
20000310:	2b00      	cmp	r3, #0
20000312:	d00a      	beq.n	2000032a <delay+0x32>
	delay_count = count;
20000314:	687a      	ldr	r2, [r7, #4]
20000316:	4b09      	ldr	r3, [pc, #36]	; (2000033c <delay+0x44>)
20000318:	601a      	str	r2, [r3, #0]
	systick_flag = 0;
2000031a:	4b09      	ldr	r3, [pc, #36]	; (20000340 <delay+0x48>)
2000031c:	2200      	movs	r2, #0
2000031e:	601a      	str	r2, [r3, #0]
	delay_1mikro();
20000320:	f7ff ff88 	bl	20000234 <delay_1mikro>
20000324:	e002      	b.n	2000032c <delay+0x34>
	if(used_for_rand) return;
20000326:	46c0      	nop			; (mov r8, r8)
20000328:	e000      	b.n	2000032c <delay+0x34>
	if( count == 0 ) return;
2000032a:	46c0      	nop			; (mov r8, r8)
}
2000032c:	46bd      	mov	sp, r7
2000032e:	b002      	add	sp, #8
20000330:	bd80      	pop	{r7, pc}
20000332:	46c0      	nop			; (mov r8, r8)
20000334:	20001ea4 	andcs	r1, r0, r4, lsr #29
20000338:	20001ea0 	andcs	r1, r0, r0, lsr #29
2000033c:	20001e9c 	mulcs	r0, ip, lr
20000340:	20001e98 	mulcs	r0, r8, lr

20000344 <init_disp>:
	#include "chars_for_disp.h"
#endif

#include "systick.h"
void init_disp(int use_ascii)
{
20000344:	b580      	push	{r7, lr}
20000346:	b082      	sub	sp, #8
20000348:	af00      	add	r7, sp, #0
2000034a:	6078      	str	r0, [r7, #4]
	if(use_ascii)
2000034c:	687b      	ldr	r3, [r7, #4]
2000034e:	2b00      	cmp	r3, #0
20000350:	d002      	beq.n	20000358 <init_disp+0x14>
		ascii_init();
20000352:	f000 f987 	bl	20000664 <ascii_init>
	else
		*portModer = 0x55555555;
}
20000356:	e002      	b.n	2000035e <init_disp+0x1a>
		*portModer = 0x55555555;
20000358:	4b03      	ldr	r3, [pc, #12]	; (20000368 <init_disp+0x24>)
2000035a:	4a04      	ldr	r2, [pc, #16]	; (2000036c <init_disp+0x28>)
2000035c:	601a      	str	r2, [r3, #0]
}
2000035e:	46c0      	nop			; (mov r8, r8)
20000360:	46bd      	mov	sp, r7
20000362:	b002      	add	sp, #8
20000364:	bd80      	pop	{r7, pc}
20000366:	46c0      	nop			; (mov r8, r8)
20000368:	40021000 	andmi	r1, r2, r0
2000036c:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000370 <print_to_gd>:

void print_to_gd(int x, int y,char ch)
{
20000370:	b5f0      	push	{r4, r5, r6, r7, lr}
20000372:	b0b7      	sub	sp, #220	; 0xdc
20000374:	af18      	add	r7, sp, #96	; 0x60
20000376:	60f8      	str	r0, [r7, #12]
20000378:	60b9      	str	r1, [r7, #8]
2000037a:	1dfb      	adds	r3, r7, #7
2000037c:	701a      	strb	r2, [r3, #0]
	DISPCHAR print_ch;
	switch(ch)
2000037e:	1dfb      	adds	r3, r7, #7
20000380:	781b      	ldrb	r3, [r3, #0]
20000382:	3b24      	subs	r3, #36	; 0x24
20000384:	2b3a      	cmp	r3, #58	; 0x3a
20000386:	d854      	bhi.n	20000432 <print_to_gd+0xc2>
20000388:	009a      	lsls	r2, r3, #2
2000038a:	4b3d      	ldr	r3, [pc, #244]	; (20000480 <print_to_gd+0x110>)
2000038c:	18d3      	adds	r3, r2, r3
2000038e:	681b      	ldr	r3, [r3, #0]
20000390:	469f      	mov	pc, r3
	{
		case '0':
		print_ch = zero;
20000392:	2314      	movs	r3, #20
20000394:	18fa      	adds	r2, r7, r3
20000396:	4b3b      	ldr	r3, [pc, #236]	; (20000484 <print_to_gd+0x114>)
20000398:	0010      	movs	r0, r2
2000039a:	0019      	movs	r1, r3
2000039c:	2361      	movs	r3, #97	; 0x61
2000039e:	001a      	movs	r2, r3
200003a0:	f001 fd66 	bl	20001e70 <memcpy>
		break;
200003a4:	e04f      	b.n	20000446 <print_to_gd+0xd6>
		case '1':
		print_ch = one;
200003a6:	2314      	movs	r3, #20
200003a8:	18fa      	adds	r2, r7, r3
200003aa:	4b37      	ldr	r3, [pc, #220]	; (20000488 <print_to_gd+0x118>)
200003ac:	0010      	movs	r0, r2
200003ae:	0019      	movs	r1, r3
200003b0:	2361      	movs	r3, #97	; 0x61
200003b2:	001a      	movs	r2, r3
200003b4:	f001 fd5c 	bl	20001e70 <memcpy>
		break;
200003b8:	e045      	b.n	20000446 <print_to_gd+0xd6>
		case '2':
		print_ch = two;
200003ba:	2314      	movs	r3, #20
200003bc:	18fa      	adds	r2, r7, r3
200003be:	4b33      	ldr	r3, [pc, #204]	; (2000048c <print_to_gd+0x11c>)
200003c0:	0010      	movs	r0, r2
200003c2:	0019      	movs	r1, r3
200003c4:	2361      	movs	r3, #97	; 0x61
200003c6:	001a      	movs	r2, r3
200003c8:	f001 fd52 	bl	20001e70 <memcpy>
		break;
200003cc:	e03b      	b.n	20000446 <print_to_gd+0xd6>
		case '3':
		print_ch = three;
200003ce:	2314      	movs	r3, #20
200003d0:	18fa      	adds	r2, r7, r3
200003d2:	4b2f      	ldr	r3, [pc, #188]	; (20000490 <print_to_gd+0x120>)
200003d4:	0010      	movs	r0, r2
200003d6:	0019      	movs	r1, r3
200003d8:	2361      	movs	r3, #97	; 0x61
200003da:	001a      	movs	r2, r3
200003dc:	f001 fd48 	bl	20001e70 <memcpy>
		break;
200003e0:	e031      	b.n	20000446 <print_to_gd+0xd6>
		case '4':
		print_ch = four;
200003e2:	2314      	movs	r3, #20
200003e4:	18fa      	adds	r2, r7, r3
200003e6:	4b2b      	ldr	r3, [pc, #172]	; (20000494 <print_to_gd+0x124>)
200003e8:	0010      	movs	r0, r2
200003ea:	0019      	movs	r1, r3
200003ec:	2361      	movs	r3, #97	; 0x61
200003ee:	001a      	movs	r2, r3
200003f0:	f001 fd3e 	bl	20001e70 <memcpy>
		break;
200003f4:	e027      	b.n	20000446 <print_to_gd+0xd6>
		case '$':
		print_ch = doll;
200003f6:	2314      	movs	r3, #20
200003f8:	18fa      	adds	r2, r7, r3
200003fa:	4b27      	ldr	r3, [pc, #156]	; (20000498 <print_to_gd+0x128>)
200003fc:	0010      	movs	r0, r2
200003fe:	0019      	movs	r1, r3
20000400:	2361      	movs	r3, #97	; 0x61
20000402:	001a      	movs	r2, r3
20000404:	f001 fd34 	bl	20001e70 <memcpy>
		break;
20000408:	e01d      	b.n	20000446 <print_to_gd+0xd6>
		case bombCh:
		print_ch = star;
2000040a:	2314      	movs	r3, #20
2000040c:	18fa      	adds	r2, r7, r3
2000040e:	4b23      	ldr	r3, [pc, #140]	; (2000049c <print_to_gd+0x12c>)
20000410:	0010      	movs	r0, r2
20000412:	0019      	movs	r1, r3
20000414:	2361      	movs	r3, #97	; 0x61
20000416:	001a      	movs	r2, r3
20000418:	f001 fd2a 	bl	20001e70 <memcpy>
		break;
2000041c:	e013      	b.n	20000446 <print_to_gd+0xd6>
		case flagCh:
		print_ch = flag;
2000041e:	2314      	movs	r3, #20
20000420:	18fa      	adds	r2, r7, r3
20000422:	4b1f      	ldr	r3, [pc, #124]	; (200004a0 <print_to_gd+0x130>)
20000424:	0010      	movs	r0, r2
20000426:	0019      	movs	r1, r3
20000428:	2361      	movs	r3, #97	; 0x61
2000042a:	001a      	movs	r2, r3
2000042c:	f001 fd20 	bl	20001e70 <memcpy>
		break;
20000430:	e009      	b.n	20000446 <print_to_gd+0xd6>
		default:
		print_ch = space;
20000432:	2314      	movs	r3, #20
20000434:	18fa      	adds	r2, r7, r3
20000436:	4b1b      	ldr	r3, [pc, #108]	; (200004a4 <print_to_gd+0x134>)
20000438:	0010      	movs	r0, r2
2000043a:	0019      	movs	r1, r3
2000043c:	2361      	movs	r3, #97	; 0x61
2000043e:	001a      	movs	r2, r3
20000440:	f001 fd16 	bl	20001e70 <memcpy>
		break;
20000444:	46c0      	nop			; (mov r8, r8)
	}
	print_num_at(x*CHAR_X, y*CHAR_Y, print_ch);
20000446:	68fb      	ldr	r3, [r7, #12]
20000448:	00dd      	lsls	r5, r3, #3
2000044a:	68ba      	ldr	r2, [r7, #8]
2000044c:	0013      	movs	r3, r2
2000044e:	005b      	lsls	r3, r3, #1
20000450:	189b      	adds	r3, r3, r2
20000452:	009b      	lsls	r3, r3, #2
20000454:	001e      	movs	r6, r3
20000456:	2314      	movs	r3, #20
20000458:	18fc      	adds	r4, r7, r3
2000045a:	466b      	mov	r3, sp
2000045c:	0018      	movs	r0, r3
2000045e:	0023      	movs	r3, r4
20000460:	3308      	adds	r3, #8
20000462:	2259      	movs	r2, #89	; 0x59
20000464:	0019      	movs	r1, r3
20000466:	f001 fd03 	bl	20001e70 <memcpy>
2000046a:	6822      	ldr	r2, [r4, #0]
2000046c:	6863      	ldr	r3, [r4, #4]
2000046e:	0031      	movs	r1, r6
20000470:	0028      	movs	r0, r5
20000472:	f000 f819 	bl	200004a8 <print_num_at>
}
20000476:	46c0      	nop			; (mov r8, r8)
20000478:	46bd      	mov	sp, r7
2000047a:	b01f      	add	sp, #124	; 0x7c
2000047c:	bdf0      	pop	{r4, r5, r6, r7, pc}
2000047e:	46c0      	nop			; (mov r8, r8)
20000480:	20002a64 	andcs	r2, r0, r4, ror #20
20000484:	2000267c 	andcs	r2, r0, ip, ror r6
20000488:	200026e0 	andcs	r2, r0, r0, ror #13
2000048c:	20002744 	andcs	r2, r0, r4, asr #14
20000490:	200027a8 	andcs	r2, r0, r8, lsr #15
20000494:	2000280c 	andcs	r2, r0, ip, lsl #16
20000498:	20002870 	andcs	r2, r0, r0, ror r8
2000049c:	200028d4 	ldrdcs	r2, [r0], -r4
200004a0:	2000299c 	mulcs	r0, ip, r9
200004a4:	20002a00 	andcs	r2, r0, r0, lsl #20

200004a8 <print_num_at>:

void print_num_at(int x, int y, DISPCHAR ch)
{
200004a8:	b082      	sub	sp, #8
200004aa:	b580      	push	{r7, lr}
200004ac:	b084      	sub	sp, #16
200004ae:	af00      	add	r7, sp, #0
200004b0:	6078      	str	r0, [r7, #4]
200004b2:	6039      	str	r1, [r7, #0]
200004b4:	2118      	movs	r1, #24
200004b6:	1879      	adds	r1, r7, r1
200004b8:	600a      	str	r2, [r1, #0]
200004ba:	604b      	str	r3, [r1, #4]
	for(int i = 0; i < CHAR_Y; i++)
200004bc:	2300      	movs	r3, #0
200004be:	60fb      	str	r3, [r7, #12]
200004c0:	e029      	b.n	20000516 <print_num_at+0x6e>
		for(int j = 0; j < CHAR_X; j++)
200004c2:	2300      	movs	r3, #0
200004c4:	60bb      	str	r3, [r7, #8]
200004c6:	e020      	b.n	2000050a <print_num_at+0x62>
		if(ch.pattern[i][j])
200004c8:	2318      	movs	r3, #24
200004ca:	18fb      	adds	r3, r7, r3
200004cc:	68fa      	ldr	r2, [r7, #12]
200004ce:	00d2      	lsls	r2, r2, #3
200004d0:	189a      	adds	r2, r3, r2
200004d2:	68bb      	ldr	r3, [r7, #8]
200004d4:	18d3      	adds	r3, r2, r3
200004d6:	3301      	adds	r3, #1
200004d8:	781b      	ldrb	r3, [r3, #0]
200004da:	2b00      	cmp	r3, #0
200004dc:	d009      	beq.n	200004f2 <print_num_at+0x4a>
			graphic_pixel_set(j+x, i+y);
200004de:	68ba      	ldr	r2, [r7, #8]
200004e0:	687b      	ldr	r3, [r7, #4]
200004e2:	18d0      	adds	r0, r2, r3
200004e4:	68fa      	ldr	r2, [r7, #12]
200004e6:	683b      	ldr	r3, [r7, #0]
200004e8:	18d3      	adds	r3, r2, r3
200004ea:	0019      	movs	r1, r3
200004ec:	f000 f824 	bl	20000538 <graphic_pixel_set>
200004f0:	e008      	b.n	20000504 <print_num_at+0x5c>
		else
			graphic_pixel_clear(j+x, i+y);
200004f2:	68ba      	ldr	r2, [r7, #8]
200004f4:	687b      	ldr	r3, [r7, #4]
200004f6:	18d0      	adds	r0, r2, r3
200004f8:	68fa      	ldr	r2, [r7, #12]
200004fa:	683b      	ldr	r3, [r7, #0]
200004fc:	18d3      	adds	r3, r2, r3
200004fe:	0019      	movs	r1, r3
20000500:	f000 f81d 	bl	2000053e <graphic_pixel_clear>
		for(int j = 0; j < CHAR_X; j++)
20000504:	68bb      	ldr	r3, [r7, #8]
20000506:	3301      	adds	r3, #1
20000508:	60bb      	str	r3, [r7, #8]
2000050a:	68bb      	ldr	r3, [r7, #8]
2000050c:	2b07      	cmp	r3, #7
2000050e:	dddb      	ble.n	200004c8 <print_num_at+0x20>
	for(int i = 0; i < CHAR_Y; i++)
20000510:	68fb      	ldr	r3, [r7, #12]
20000512:	3301      	adds	r3, #1
20000514:	60fb      	str	r3, [r7, #12]
20000516:	68fb      	ldr	r3, [r7, #12]
20000518:	2b0b      	cmp	r3, #11
2000051a:	ddd2      	ble.n	200004c2 <print_num_at+0x1a>
}
2000051c:	46c0      	nop			; (mov r8, r8)
2000051e:	46c0      	nop			; (mov r8, r8)
20000520:	46bd      	mov	sp, r7
20000522:	b004      	add	sp, #16
20000524:	bc80      	pop	{r7}
20000526:	bc08      	pop	{r3}
20000528:	b002      	add	sp, #8
2000052a:	4718      	bx	r3

2000052c <graphic_initialize>:


__attribute__((naked))
void graphic_initialize(void)
{
2000052c:	4770dff0 			; <UNDEFINED> instruction: 0x4770dff0
	__asm volatile(" .HWORD 0xDFF0\n");
	__asm volatile(" BX LR\n");
}
20000530:	46c0      	nop			; (mov r8, r8)

20000532 <graphic_clear_screen>:
__attribute__((naked))
void graphic_clear_screen(void)
{
20000532:	4770dff1 			; <UNDEFINED> instruction: 0x4770dff1
	__asm volatile(" .HWORD 0xDFF1\n");
	__asm volatile(" BX LR\n");
}
20000536:	46c0      	nop			; (mov r8, r8)

20000538 <graphic_pixel_set>:
__attribute__((naked))
void graphic_pixel_set(int x, int y)
{
20000538:	4770dff2 			; <UNDEFINED> instruction: 0x4770dff2
	__asm volatile(" .HWORD 0xDFF2\n");
	__asm volatile(" BX LR\n");
}
2000053c:	46c0      	nop			; (mov r8, r8)

2000053e <graphic_pixel_clear>:
__attribute__((naked))
void graphic_pixel_clear(int x, int y)
{
2000053e:	4770dff3 			; <UNDEFINED> instruction: 0x4770dff3
	__asm volatile(" .HWORD 0xDFF3\n");
	__asm volatile(" BX LR\n");
}
20000542:	46c0      	nop			; (mov r8, r8)

20000544 <print_start_text_ascii>:


//ascii
void print_start_text_ascii()
{
20000544:	b5b0      	push	{r4, r5, r7, lr}
20000546:	b088      	sub	sp, #32
20000548:	af00      	add	r7, sp, #0
	ascii_gotoxy(1,1);
2000054a:	2101      	movs	r1, #1
2000054c:	2001      	movs	r0, #1
2000054e:	f000 f89f 	bl	20000690 <ascii_gotoxy>
	char upper[] = "Flags left: ";
20000552:	2110      	movs	r1, #16
20000554:	187b      	adds	r3, r7, r1
20000556:	4a0d      	ldr	r2, [pc, #52]	; (2000058c <print_start_text_ascii+0x48>)
20000558:	ca31      	ldmia	r2!, {r0, r4, r5}
2000055a:	c331      	stmia	r3!, {r0, r4, r5}
2000055c:	7812      	ldrb	r2, [r2, #0]
2000055e:	701a      	strb	r2, [r3, #0]
	char lower[] = "Time: 		";
20000560:	1d3b      	adds	r3, r7, #4
20000562:	4a0b      	ldr	r2, [pc, #44]	; (20000590 <print_start_text_ascii+0x4c>)
20000564:	ca11      	ldmia	r2!, {r0, r4}
20000566:	c311      	stmia	r3!, {r0, r4}
20000568:	7812      	ldrb	r2, [r2, #0]
2000056a:	701a      	strb	r2, [r3, #0]
	ascii_write_string(upper);
2000056c:	187b      	adds	r3, r7, r1
2000056e:	0018      	movs	r0, r3
20000570:	f000 f8ac 	bl	200006cc <ascii_write_string>
	ascii_gotoxy(1,2);
20000574:	2102      	movs	r1, #2
20000576:	2001      	movs	r0, #1
20000578:	f000 f88a 	bl	20000690 <ascii_gotoxy>
	ascii_write_string(lower);
2000057c:	1d3b      	adds	r3, r7, #4
2000057e:	0018      	movs	r0, r3
20000580:	f000 f8a4 	bl	200006cc <ascii_write_string>
}
20000584:	46c0      	nop			; (mov r8, r8)
20000586:	46bd      	mov	sp, r7
20000588:	b008      	add	sp, #32
2000058a:	bdb0      	pop	{r4, r5, r7, pc}
2000058c:	20002b50 	andcs	r2, r0, r0, asr fp
20000590:	20002b60 	andcs	r2, r0, r0, ror #22

20000594 <print_win_loose_msg>:

void print_win_loose_msg(int won)
{
20000594:	b580      	push	{r7, lr}
20000596:	b084      	sub	sp, #16
20000598:	af00      	add	r7, sp, #0
2000059a:	6078      	str	r0, [r7, #4]
	ascii_gotoxy(1,1);
2000059c:	2101      	movs	r1, #1
2000059e:	2001      	movs	r0, #1
200005a0:	f000 f876 	bl	20000690 <ascii_gotoxy>
	char * str = won != 0 ? "Congrats!! Well played <3" : "Thats to bad...";
200005a4:	687b      	ldr	r3, [r7, #4]
200005a6:	2b00      	cmp	r3, #0
200005a8:	d001      	beq.n	200005ae <print_win_loose_msg+0x1a>
200005aa:	4b06      	ldr	r3, [pc, #24]	; (200005c4 <print_win_loose_msg+0x30>)
200005ac:	e000      	b.n	200005b0 <print_win_loose_msg+0x1c>
200005ae:	4b06      	ldr	r3, [pc, #24]	; (200005c8 <print_win_loose_msg+0x34>)
200005b0:	60fb      	str	r3, [r7, #12]
	ascii_write_string(str);
200005b2:	68fb      	ldr	r3, [r7, #12]
200005b4:	0018      	movs	r0, r3
200005b6:	f000 f889 	bl	200006cc <ascii_write_string>
}
200005ba:	46c0      	nop			; (mov r8, r8)
200005bc:	46bd      	mov	sp, r7
200005be:	b004      	add	sp, #16
200005c0:	bd80      	pop	{r7, pc}
200005c2:	46c0      	nop			; (mov r8, r8)
200005c4:	20002b6c 	andcs	r2, r0, ip, ror #22
200005c8:	20002b88 	andcs	r2, r0, r8, lsl #23

200005cc <print_flags>:

void print_flags(int f)
{
200005cc:	b580      	push	{r7, lr}
200005ce:	b084      	sub	sp, #16
200005d0:	af00      	add	r7, sp, #0
200005d2:	6078      	str	r0, [r7, #4]
	if(f >= 0)
200005d4:	687b      	ldr	r3, [r7, #4]
200005d6:	2b00      	cmp	r3, #0
200005d8:	db17      	blt.n	2000060a <print_flags+0x3e>
	{
		ascii_gotoxy(FLAGSOFFSET, 1);
200005da:	2101      	movs	r1, #1
200005dc:	200c      	movs	r0, #12
200005de:	f000 f857 	bl	20000690 <ascii_gotoxy>
		char clear[] = "  ";
200005e2:	200c      	movs	r0, #12
200005e4:	183b      	adds	r3, r7, r0
200005e6:	4a12      	ldr	r2, [pc, #72]	; (20000630 <print_flags+0x64>)
200005e8:	8811      	ldrh	r1, [r2, #0]
200005ea:	8019      	strh	r1, [r3, #0]
200005ec:	7892      	ldrb	r2, [r2, #2]
200005ee:	709a      	strb	r2, [r3, #2]
		ascii_write_string(clear);
200005f0:	183b      	adds	r3, r7, r0
200005f2:	0018      	movs	r0, r3
200005f4:	f000 f86a 	bl	200006cc <ascii_write_string>
	
		ascii_gotoxy(FLAGSOFFSET, 1);
200005f8:	2101      	movs	r1, #1
200005fa:	200c      	movs	r0, #12
200005fc:	f000 f848 	bl	20000690 <ascii_gotoxy>
		ascii_write_number(f);	
20000600:	687b      	ldr	r3, [r7, #4]
20000602:	0018      	movs	r0, r3
20000604:	f000 f877 	bl	200006f6 <ascii_write_number>
		ascii_write_char(45); // - = 45
		f *= (-1);
		ascii_write_number(f);
	}
	
}
20000608:	e00d      	b.n	20000626 <print_flags+0x5a>
		ascii_gotoxy(FLAGSOFFSET, 1);
2000060a:	2101      	movs	r1, #1
2000060c:	200c      	movs	r0, #12
2000060e:	f000 f83f 	bl	20000690 <ascii_gotoxy>
		ascii_write_char(45); // - = 45
20000612:	202d      	movs	r0, #45	; 0x2d
20000614:	f000 f89e 	bl	20000754 <ascii_write_char>
		f *= (-1);
20000618:	687b      	ldr	r3, [r7, #4]
2000061a:	425b      	negs	r3, r3
2000061c:	607b      	str	r3, [r7, #4]
		ascii_write_number(f);
2000061e:	687b      	ldr	r3, [r7, #4]
20000620:	0018      	movs	r0, r3
20000622:	f000 f868 	bl	200006f6 <ascii_write_number>
}
20000626:	46c0      	nop			; (mov r8, r8)
20000628:	46bd      	mov	sp, r7
2000062a:	b004      	add	sp, #16
2000062c:	bd80      	pop	{r7, pc}
2000062e:	46c0      	nop			; (mov r8, r8)
20000630:	20002b98 	mulcs	r0, r8, fp

20000634 <print_timer>:

void print_timer(int secs, int tenths)
{
20000634:	b580      	push	{r7, lr}
20000636:	b082      	sub	sp, #8
20000638:	af00      	add	r7, sp, #0
2000063a:	6078      	str	r0, [r7, #4]
2000063c:	6039      	str	r1, [r7, #0]
	ascii_gotoxy(TIMEROFFSET, 2);
2000063e:	2102      	movs	r1, #2
20000640:	2007      	movs	r0, #7
20000642:	f000 f825 	bl	20000690 <ascii_gotoxy>
	ascii_write_number(secs);
20000646:	687b      	ldr	r3, [r7, #4]
20000648:	0018      	movs	r0, r3
2000064a:	f000 f854 	bl	200006f6 <ascii_write_number>
	ascii_write_char(46); // . = 46
2000064e:	202e      	movs	r0, #46	; 0x2e
20000650:	f000 f880 	bl	20000754 <ascii_write_char>
	ascii_write_number(tenths);
20000654:	683b      	ldr	r3, [r7, #0]
20000656:	0018      	movs	r0, r3
20000658:	f000 f84d 	bl	200006f6 <ascii_write_number>
}
2000065c:	46c0      	nop			; (mov r8, r8)
2000065e:	46bd      	mov	sp, r7
20000660:	b002      	add	sp, #8
20000662:	bd80      	pop	{r7, pc}

20000664 <ascii_init>:


void ascii_init()
{
20000664:	b580      	push	{r7, lr}
20000666:	af00      	add	r7, sp, #0
	*portModer = 0x55555555;
20000668:	4b07      	ldr	r3, [pc, #28]	; (20000688 <ascii_init+0x24>)
2000066a:	4a08      	ldr	r2, [pc, #32]	; (2000068c <ascii_init+0x28>)
2000066c:	601a      	str	r2, [r3, #0]
	ascii_command(1); //clear display
2000066e:	2001      	movs	r0, #1
20000670:	f000 f88e 	bl	20000790 <ascii_command>
	ascii_command(0xF); //display på, markör: på, blinkande markör: på
20000674:	200f      	movs	r0, #15
20000676:	f000 f88b 	bl	20000790 <ascii_command>
	ascii_gotoxy(1,1);
2000067a:	2101      	movs	r1, #1
2000067c:	2001      	movs	r0, #1
2000067e:	f000 f807 	bl	20000690 <ascii_gotoxy>
}
20000682:	46c0      	nop			; (mov r8, r8)
20000684:	46bd      	mov	sp, r7
20000686:	bd80      	pop	{r7, pc}
20000688:	40021000 	andmi	r1, r2, r0
2000068c:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000690 <ascii_gotoxy>:
void ascii_gotoxy(int x, int y)
{
20000690:	b580      	push	{r7, lr}
20000692:	b084      	sub	sp, #16
20000694:	af00      	add	r7, sp, #0
20000696:	6078      	str	r0, [r7, #4]
20000698:	6039      	str	r1, [r7, #0]
	int address = x-1;
2000069a:	687b      	ldr	r3, [r7, #4]
2000069c:	3b01      	subs	r3, #1
2000069e:	60fb      	str	r3, [r7, #12]
	address = y == 2 ? address + 0x40 : address;
200006a0:	683b      	ldr	r3, [r7, #0]
200006a2:	2b02      	cmp	r3, #2
200006a4:	d102      	bne.n	200006ac <ascii_gotoxy+0x1c>
200006a6:	68fb      	ldr	r3, [r7, #12]
200006a8:	3340      	adds	r3, #64	; 0x40
200006aa:	e000      	b.n	200006ae <ascii_gotoxy+0x1e>
200006ac:	68fb      	ldr	r3, [r7, #12]
200006ae:	60fb      	str	r3, [r7, #12]
	ascii_write_command(STATUS_FLAG | address);
200006b0:	68fb      	ldr	r3, [r7, #12]
200006b2:	b25b      	sxtb	r3, r3
200006b4:	2280      	movs	r2, #128	; 0x80
200006b6:	4252      	negs	r2, r2
200006b8:	4313      	orrs	r3, r2
200006ba:	b25b      	sxtb	r3, r3
200006bc:	b2db      	uxtb	r3, r3
200006be:	0018      	movs	r0, r3
200006c0:	f000 f8f3 	bl	200008aa <ascii_write_command>
}
200006c4:	46c0      	nop			; (mov r8, r8)
200006c6:	46bd      	mov	sp, r7
200006c8:	b004      	add	sp, #16
200006ca:	bd80      	pop	{r7, pc}

200006cc <ascii_write_string>:
void ascii_write_string(char * p)
{
200006cc:	b580      	push	{r7, lr}
200006ce:	b082      	sub	sp, #8
200006d0:	af00      	add	r7, sp, #0
200006d2:	6078      	str	r0, [r7, #4]
	while(* p!= 0)
200006d4:	e006      	b.n	200006e4 <ascii_write_string+0x18>
		ascii_write_char(*p++);
200006d6:	687b      	ldr	r3, [r7, #4]
200006d8:	1c5a      	adds	r2, r3, #1
200006da:	607a      	str	r2, [r7, #4]
200006dc:	781b      	ldrb	r3, [r3, #0]
200006de:	0018      	movs	r0, r3
200006e0:	f000 f838 	bl	20000754 <ascii_write_char>
	while(* p!= 0)
200006e4:	687b      	ldr	r3, [r7, #4]
200006e6:	781b      	ldrb	r3, [r3, #0]
200006e8:	2b00      	cmp	r3, #0
200006ea:	d1f4      	bne.n	200006d6 <ascii_write_string+0xa>
}
200006ec:	46c0      	nop			; (mov r8, r8)
200006ee:	46c0      	nop			; (mov r8, r8)
200006f0:	46bd      	mov	sp, r7
200006f2:	b002      	add	sp, #8
200006f4:	bd80      	pop	{r7, pc}

200006f6 <ascii_write_number>:
void ascii_write_number(int num)
{
200006f6:	b580      	push	{r7, lr}
200006f8:	b084      	sub	sp, #16
200006fa:	af00      	add	r7, sp, #0
200006fc:	6078      	str	r0, [r7, #4]
	if(num < 10)
200006fe:	687b      	ldr	r3, [r7, #4]
20000700:	2b09      	cmp	r3, #9
20000702:	dc07      	bgt.n	20000714 <ascii_write_number+0x1e>
		ascii_write_char(48 + num);
20000704:	687b      	ldr	r3, [r7, #4]
20000706:	b2db      	uxtb	r3, r3
20000708:	3330      	adds	r3, #48	; 0x30
2000070a:	b2db      	uxtb	r3, r3
2000070c:	0018      	movs	r0, r3
2000070e:	f000 f821 	bl	20000754 <ascii_write_char>
		int tens = num / 10;
		int ones = num % 10;
		ascii_write_char(48 + tens);
		ascii_write_char(48 + ones);
	}
}
20000712:	e01b      	b.n	2000074c <ascii_write_number+0x56>
		int tens = num / 10;
20000714:	687b      	ldr	r3, [r7, #4]
20000716:	210a      	movs	r1, #10
20000718:	0018      	movs	r0, r3
2000071a:	f001 fabd 	bl	20001c98 <__divsi3>
2000071e:	0003      	movs	r3, r0
20000720:	60fb      	str	r3, [r7, #12]
		int ones = num % 10;
20000722:	687b      	ldr	r3, [r7, #4]
20000724:	210a      	movs	r1, #10
20000726:	0018      	movs	r0, r3
20000728:	f001 fb9c 	bl	20001e64 <__aeabi_idivmod>
2000072c:	000b      	movs	r3, r1
2000072e:	60bb      	str	r3, [r7, #8]
		ascii_write_char(48 + tens);
20000730:	68fb      	ldr	r3, [r7, #12]
20000732:	b2db      	uxtb	r3, r3
20000734:	3330      	adds	r3, #48	; 0x30
20000736:	b2db      	uxtb	r3, r3
20000738:	0018      	movs	r0, r3
2000073a:	f000 f80b 	bl	20000754 <ascii_write_char>
		ascii_write_char(48 + ones);
2000073e:	68bb      	ldr	r3, [r7, #8]
20000740:	b2db      	uxtb	r3, r3
20000742:	3330      	adds	r3, #48	; 0x30
20000744:	b2db      	uxtb	r3, r3
20000746:	0018      	movs	r0, r3
20000748:	f000 f804 	bl	20000754 <ascii_write_char>
}
2000074c:	46c0      	nop			; (mov r8, r8)
2000074e:	46bd      	mov	sp, r7
20000750:	b004      	add	sp, #16
20000752:	bd80      	pop	{r7, pc}

20000754 <ascii_write_char>:
void ascii_write_char(char ch)
{
20000754:	b580      	push	{r7, lr}
20000756:	b082      	sub	sp, #8
20000758:	af00      	add	r7, sp, #0
2000075a:	0002      	movs	r2, r0
2000075c:	1dfb      	adds	r3, r7, #7
2000075e:	701a      	strb	r2, [r3, #0]
	while((ascii_read_status() & STATUS_FLAG) == STATUS_FLAG);
20000760:	46c0      	nop			; (mov r8, r8)
20000762:	f000 f853 	bl	2000080c <ascii_read_status>
20000766:	0003      	movs	r3, r0
20000768:	001a      	movs	r2, r3
2000076a:	2380      	movs	r3, #128	; 0x80
2000076c:	4013      	ands	r3, r2
2000076e:	2b80      	cmp	r3, #128	; 0x80
20000770:	d0f7      	beq.n	20000762 <ascii_write_char+0xe>
	delay_micro(8);
20000772:	2008      	movs	r0, #8
20000774:	f000 f928 	bl	200009c8 <delay_micro>
	ascii_write_data(ch);
20000778:	1dfb      	adds	r3, r7, #7
2000077a:	781b      	ldrb	r3, [r3, #0]
2000077c:	0018      	movs	r0, r3
2000077e:	f000 f87f 	bl	20000880 <ascii_write_data>
	delay_micro(45);
20000782:	202d      	movs	r0, #45	; 0x2d
20000784:	f000 f920 	bl	200009c8 <delay_micro>
}
20000788:	46c0      	nop			; (mov r8, r8)
2000078a:	46bd      	mov	sp, r7
2000078c:	b002      	add	sp, #8
2000078e:	bd80      	pop	{r7, pc}

20000790 <ascii_command>:
void ascii_command(char cmd)
{
20000790:	b580      	push	{r7, lr}
20000792:	b082      	sub	sp, #8
20000794:	af00      	add	r7, sp, #0
20000796:	0002      	movs	r2, r0
20000798:	1dfb      	adds	r3, r7, #7
2000079a:	701a      	strb	r2, [r3, #0]
	while((ascii_read_status() & STATUS_FLAG) == STATUS_FLAG);
2000079c:	46c0      	nop			; (mov r8, r8)
2000079e:	f000 f835 	bl	2000080c <ascii_read_status>
200007a2:	0003      	movs	r3, r0
200007a4:	001a      	movs	r2, r3
200007a6:	2380      	movs	r3, #128	; 0x80
200007a8:	4013      	ands	r3, r2
200007aa:	2b80      	cmp	r3, #128	; 0x80
200007ac:	d0f7      	beq.n	2000079e <ascii_command+0xe>
	delay_micro(8);
200007ae:	2008      	movs	r0, #8
200007b0:	f000 f90a 	bl	200009c8 <delay_micro>
	ascii_write_command(cmd);
200007b4:	1dfb      	adds	r3, r7, #7
200007b6:	781b      	ldrb	r3, [r3, #0]
200007b8:	0018      	movs	r0, r3
200007ba:	f000 f876 	bl	200008aa <ascii_write_command>
	delay_milli(2);
200007be:	2002      	movs	r0, #2
200007c0:	f000 f925 	bl	20000a0e <delay_milli>
}
200007c4:	46c0      	nop			; (mov r8, r8)
200007c6:	46bd      	mov	sp, r7
200007c8:	b002      	add	sp, #8
200007ca:	bd80      	pop	{r7, pc}

200007cc <ascii_read_data>:

unsigned char ascii_read_data()
{
200007cc:	b590      	push	{r4, r7, lr}
200007ce:	b083      	sub	sp, #12
200007d0:	af00      	add	r7, sp, #0
	*portModer = 0x00005555;
200007d2:	4b0b      	ldr	r3, [pc, #44]	; (20000800 <ascii_read_data+0x34>)
200007d4:	4a0b      	ldr	r2, [pc, #44]	; (20000804 <ascii_read_data+0x38>)
200007d6:	601a      	str	r2, [r3, #0]
	ascii_ctrl_bit_set(B_RW);
200007d8:	2002      	movs	r0, #2
200007da:	f000 f893 	bl	20000904 <ascii_ctrl_bit_set>
	ascii_ctrl_bit_set(B_RS);
200007de:	2001      	movs	r0, #1
200007e0:	f000 f890 	bl	20000904 <ascii_ctrl_bit_set>
	unsigned char rv = ascii_read_controller();
200007e4:	1dfc      	adds	r4, r7, #7
200007e6:	f000 f831 	bl	2000084c <ascii_read_controller>
200007ea:	0003      	movs	r3, r0
200007ec:	7023      	strb	r3, [r4, #0]
	*portModer = 0x55555555;
200007ee:	4b04      	ldr	r3, [pc, #16]	; (20000800 <ascii_read_data+0x34>)
200007f0:	4a05      	ldr	r2, [pc, #20]	; (20000808 <ascii_read_data+0x3c>)
200007f2:	601a      	str	r2, [r3, #0]
	return rv;
200007f4:	1dfb      	adds	r3, r7, #7
200007f6:	781b      	ldrb	r3, [r3, #0]
}
200007f8:	0018      	movs	r0, r3
200007fa:	46bd      	mov	sp, r7
200007fc:	b003      	add	sp, #12
200007fe:	bd90      	pop	{r4, r7, pc}
20000800:	40021000 	andmi	r1, r2, r0
20000804:	00005555 	andeq	r5, r0, r5, asr r5
20000808:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

2000080c <ascii_read_status>:

unsigned char ascii_read_status()
{
2000080c:	b590      	push	{r4, r7, lr}
2000080e:	b083      	sub	sp, #12
20000810:	af00      	add	r7, sp, #0
	*portModer = 0x00005555;
20000812:	4b0b      	ldr	r3, [pc, #44]	; (20000840 <ascii_read_status+0x34>)
20000814:	4a0b      	ldr	r2, [pc, #44]	; (20000844 <ascii_read_status+0x38>)
20000816:	601a      	str	r2, [r3, #0]
	ascii_ctrl_bit_set(B_RW);
20000818:	2002      	movs	r0, #2
2000081a:	f000 f873 	bl	20000904 <ascii_ctrl_bit_set>
	ascii_ctrl_bit_clear(B_RS);
2000081e:	2001      	movs	r0, #1
20000820:	f000 f88c 	bl	2000093c <ascii_ctrl_bit_clear>
	unsigned char rv = ascii_read_controller();
20000824:	1dfc      	adds	r4, r7, #7
20000826:	f000 f811 	bl	2000084c <ascii_read_controller>
2000082a:	0003      	movs	r3, r0
2000082c:	7023      	strb	r3, [r4, #0]
	*portModer = 0x55555555;
2000082e:	4b04      	ldr	r3, [pc, #16]	; (20000840 <ascii_read_status+0x34>)
20000830:	4a05      	ldr	r2, [pc, #20]	; (20000848 <ascii_read_status+0x3c>)
20000832:	601a      	str	r2, [r3, #0]
	return rv;
20000834:	1dfb      	adds	r3, r7, #7
20000836:	781b      	ldrb	r3, [r3, #0]
}
20000838:	0018      	movs	r0, r3
2000083a:	46bd      	mov	sp, r7
2000083c:	b003      	add	sp, #12
2000083e:	bd90      	pop	{r4, r7, pc}
20000840:	40021000 	andmi	r1, r2, r0
20000844:	00005555 	andeq	r5, r0, r5, asr r5
20000848:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

2000084c <ascii_read_controller>:
unsigned char ascii_read_controller()
{
2000084c:	b580      	push	{r7, lr}
2000084e:	b082      	sub	sp, #8
20000850:	af00      	add	r7, sp, #0
	ascii_ctrl_bit_set(B_E);
20000852:	2040      	movs	r0, #64	; 0x40
20000854:	f000 f856 	bl	20000904 <ascii_ctrl_bit_set>
	delay_250ns();
20000858:	f000 f894 	bl	20000984 <delay_250ns>
	delay_250ns();
2000085c:	f000 f892 	bl	20000984 <delay_250ns>
	unsigned char rv = *portIdrHigh;
20000860:	4a06      	ldr	r2, [pc, #24]	; (2000087c <ascii_read_controller+0x30>)
20000862:	1dfb      	adds	r3, r7, #7
20000864:	7812      	ldrb	r2, [r2, #0]
20000866:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_clear(B_E);
20000868:	2040      	movs	r0, #64	; 0x40
2000086a:	f000 f867 	bl	2000093c <ascii_ctrl_bit_clear>
	return rv;
2000086e:	1dfb      	adds	r3, r7, #7
20000870:	781b      	ldrb	r3, [r3, #0]
}
20000872:	0018      	movs	r0, r3
20000874:	46bd      	mov	sp, r7
20000876:	b002      	add	sp, #8
20000878:	bd80      	pop	{r7, pc}
2000087a:	46c0      	nop			; (mov r8, r8)
2000087c:	40021011 	andmi	r1, r2, r1, lsl r0

20000880 <ascii_write_data>:
void ascii_write_data(char data)
{
20000880:	b580      	push	{r7, lr}
20000882:	b082      	sub	sp, #8
20000884:	af00      	add	r7, sp, #0
20000886:	0002      	movs	r2, r0
20000888:	1dfb      	adds	r3, r7, #7
2000088a:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_set(B_RS);
2000088c:	2001      	movs	r0, #1
2000088e:	f000 f839 	bl	20000904 <ascii_ctrl_bit_set>
	ascii_ctrl_bit_clear(B_RW);
20000892:	2002      	movs	r0, #2
20000894:	f000 f852 	bl	2000093c <ascii_ctrl_bit_clear>
	ascii_write_controller(data);
20000898:	1dfb      	adds	r3, r7, #7
2000089a:	781b      	ldrb	r3, [r3, #0]
2000089c:	0018      	movs	r0, r3
2000089e:	f000 f819 	bl	200008d4 <ascii_write_controller>
}
200008a2:	46c0      	nop			; (mov r8, r8)
200008a4:	46bd      	mov	sp, r7
200008a6:	b002      	add	sp, #8
200008a8:	bd80      	pop	{r7, pc}

200008aa <ascii_write_command>:
void ascii_write_command(char cmd)
{
200008aa:	b580      	push	{r7, lr}
200008ac:	b082      	sub	sp, #8
200008ae:	af00      	add	r7, sp, #0
200008b0:	0002      	movs	r2, r0
200008b2:	1dfb      	adds	r3, r7, #7
200008b4:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_clear(B_RW);
200008b6:	2002      	movs	r0, #2
200008b8:	f000 f840 	bl	2000093c <ascii_ctrl_bit_clear>
	ascii_ctrl_bit_clear(B_RS);
200008bc:	2001      	movs	r0, #1
200008be:	f000 f83d 	bl	2000093c <ascii_ctrl_bit_clear>
	ascii_write_controller(cmd);
200008c2:	1dfb      	adds	r3, r7, #7
200008c4:	781b      	ldrb	r3, [r3, #0]
200008c6:	0018      	movs	r0, r3
200008c8:	f000 f804 	bl	200008d4 <ascii_write_controller>
}
200008cc:	46c0      	nop			; (mov r8, r8)
200008ce:	46bd      	mov	sp, r7
200008d0:	b002      	add	sp, #8
200008d2:	bd80      	pop	{r7, pc}

200008d4 <ascii_write_controller>:
void ascii_write_controller(char cmd)
{
200008d4:	b580      	push	{r7, lr}
200008d6:	b082      	sub	sp, #8
200008d8:	af00      	add	r7, sp, #0
200008da:	0002      	movs	r2, r0
200008dc:	1dfb      	adds	r3, r7, #7
200008de:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_set(B_E);
200008e0:	2040      	movs	r0, #64	; 0x40
200008e2:	f000 f80f 	bl	20000904 <ascii_ctrl_bit_set>
	*portOdrHigh = cmd;
200008e6:	4a06      	ldr	r2, [pc, #24]	; (20000900 <ascii_write_controller+0x2c>)
200008e8:	1dfb      	adds	r3, r7, #7
200008ea:	781b      	ldrb	r3, [r3, #0]
200008ec:	7013      	strb	r3, [r2, #0]
	delay_250ns();
200008ee:	f000 f849 	bl	20000984 <delay_250ns>
	ascii_ctrl_bit_clear(B_E);
200008f2:	2040      	movs	r0, #64	; 0x40
200008f4:	f000 f822 	bl	2000093c <ascii_ctrl_bit_clear>
}
200008f8:	46c0      	nop			; (mov r8, r8)
200008fa:	46bd      	mov	sp, r7
200008fc:	b002      	add	sp, #8
200008fe:	bd80      	pop	{r7, pc}
20000900:	40021015 	andmi	r1, r2, r5, lsl r0

20000904 <ascii_ctrl_bit_set>:
void ascii_ctrl_bit_set( char x )
{ /* x: bitmask bits are 1 to set */
20000904:	b580      	push	{r7, lr}
20000906:	b084      	sub	sp, #16
20000908:	af00      	add	r7, sp, #0
2000090a:	0002      	movs	r2, r0
2000090c:	1dfb      	adds	r3, r7, #7
2000090e:	701a      	strb	r2, [r3, #0]
	char c;
	c = *portOdrLow;
20000910:	4a09      	ldr	r2, [pc, #36]	; (20000938 <ascii_ctrl_bit_set+0x34>)
20000912:	210f      	movs	r1, #15
20000914:	187b      	adds	r3, r7, r1
20000916:	7812      	ldrb	r2, [r2, #0]
20000918:	701a      	strb	r2, [r3, #0]
	*portOdrLow = B_SELECT | x | c;
2000091a:	1dfa      	adds	r2, r7, #7
2000091c:	187b      	adds	r3, r7, r1
2000091e:	7812      	ldrb	r2, [r2, #0]
20000920:	781b      	ldrb	r3, [r3, #0]
20000922:	4313      	orrs	r3, r2
20000924:	b2db      	uxtb	r3, r3
20000926:	4a04      	ldr	r2, [pc, #16]	; (20000938 <ascii_ctrl_bit_set+0x34>)
20000928:	2104      	movs	r1, #4
2000092a:	430b      	orrs	r3, r1
2000092c:	b2db      	uxtb	r3, r3
2000092e:	7013      	strb	r3, [r2, #0]
}
20000930:	46c0      	nop			; (mov r8, r8)
20000932:	46bd      	mov	sp, r7
20000934:	b004      	add	sp, #16
20000936:	bd80      	pop	{r7, pc}
20000938:	40021014 	andmi	r1, r2, r4, lsl r0

2000093c <ascii_ctrl_bit_clear>:
void ascii_ctrl_bit_clear( char x )
{ /* x: bitmask bits are 1 to clear */
2000093c:	b580      	push	{r7, lr}
2000093e:	b084      	sub	sp, #16
20000940:	af00      	add	r7, sp, #0
20000942:	0002      	movs	r2, r0
20000944:	1dfb      	adds	r3, r7, #7
20000946:	701a      	strb	r2, [r3, #0]
	char c;
	c = *portOdrLow;
20000948:	4a0d      	ldr	r2, [pc, #52]	; (20000980 <ascii_ctrl_bit_clear+0x44>)
2000094a:	210f      	movs	r1, #15
2000094c:	187b      	adds	r3, r7, r1
2000094e:	7812      	ldrb	r2, [r2, #0]
20000950:	701a      	strb	r2, [r3, #0]
	c = c & ~x;
20000952:	1dfb      	adds	r3, r7, #7
20000954:	781b      	ldrb	r3, [r3, #0]
20000956:	b25b      	sxtb	r3, r3
20000958:	43db      	mvns	r3, r3
2000095a:	b25b      	sxtb	r3, r3
2000095c:	187a      	adds	r2, r7, r1
2000095e:	7812      	ldrb	r2, [r2, #0]
20000960:	b252      	sxtb	r2, r2
20000962:	4013      	ands	r3, r2
20000964:	b25a      	sxtb	r2, r3
20000966:	187b      	adds	r3, r7, r1
20000968:	701a      	strb	r2, [r3, #0]
	*portOdrLow = B_SELECT | c;
2000096a:	4a05      	ldr	r2, [pc, #20]	; (20000980 <ascii_ctrl_bit_clear+0x44>)
2000096c:	187b      	adds	r3, r7, r1
2000096e:	781b      	ldrb	r3, [r3, #0]
20000970:	2104      	movs	r1, #4
20000972:	430b      	orrs	r3, r1
20000974:	b2db      	uxtb	r3, r3
20000976:	7013      	strb	r3, [r2, #0]
}
20000978:	46c0      	nop			; (mov r8, r8)
2000097a:	46bd      	mov	sp, r7
2000097c:	b004      	add	sp, #16
2000097e:	bd80      	pop	{r7, pc}
20000980:	40021014 	andmi	r1, r2, r4, lsl r0

20000984 <delay_250ns>:


void delay_250ns()
{
20000984:	b580      	push	{r7, lr}
20000986:	af00      	add	r7, sp, #0
	//ett tick från klockan var 6:e nanosekund 
	//för att få 250 ns behöver vi vänta 6*42 ns
	*STK_CTRL = 0;
20000988:	4b0c      	ldr	r3, [pc, #48]	; (200009bc <delay_250ns+0x38>)
2000098a:	2200      	movs	r2, #0
2000098c:	601a      	str	r2, [r3, #0]
	*STK_LOAD = 41; // 250/6 =ca 42, -1 för att klockan är ett tick försenat att märka att val = 0 
2000098e:	4b0c      	ldr	r3, [pc, #48]	; (200009c0 <delay_250ns+0x3c>)
20000990:	2229      	movs	r2, #41	; 0x29
20000992:	601a      	str	r2, [r3, #0]
	*STK_VAL = 0;
20000994:	4b0b      	ldr	r3, [pc, #44]	; (200009c4 <delay_250ns+0x40>)
20000996:	2200      	movs	r2, #0
20000998:	601a      	str	r2, [r3, #0]
	*STK_CTRL = 5;	// 101 systemklocka, inget avbrott, starta räknare
2000099a:	4b08      	ldr	r3, [pc, #32]	; (200009bc <delay_250ns+0x38>)
2000099c:	2205      	movs	r2, #5
2000099e:	601a      	str	r2, [r3, #0]
	while((*STK_CTRL & 0x10000) == 0); // vänta på bit 16 = 1
200009a0:	46c0      	nop			; (mov r8, r8)
200009a2:	4b06      	ldr	r3, [pc, #24]	; (200009bc <delay_250ns+0x38>)
200009a4:	681a      	ldr	r2, [r3, #0]
200009a6:	2380      	movs	r3, #128	; 0x80
200009a8:	025b      	lsls	r3, r3, #9
200009aa:	4013      	ands	r3, r2
200009ac:	d0f9      	beq.n	200009a2 <delay_250ns+0x1e>
	*STK_CTRL = 0; // stoppa räknaren
200009ae:	4b03      	ldr	r3, [pc, #12]	; (200009bc <delay_250ns+0x38>)
200009b0:	2200      	movs	r2, #0
200009b2:	601a      	str	r2, [r3, #0]
}
200009b4:	46c0      	nop			; (mov r8, r8)
200009b6:	46bd      	mov	sp, r7
200009b8:	bd80      	pop	{r7, pc}
200009ba:	46c0      	nop			; (mov r8, r8)
200009bc:	e000e010 	and	lr, r0, r0, lsl r0
200009c0:	e000e014 	and	lr, r0, r4, lsl r0
200009c4:	e000e018 	and	lr, r0, r8, lsl r0

200009c8 <delay_micro>:

#define SIMULATED
void delay_micro(unsigned int us)
{
200009c8:	b580      	push	{r7, lr}
200009ca:	b082      	sub	sp, #8
200009cc:	af00      	add	r7, sp, #0
200009ce:	6078      	str	r0, [r7, #4]
#ifdef SIMULATED
	us /= 1000;
200009d0:	687b      	ldr	r3, [r7, #4]
200009d2:	22fa      	movs	r2, #250	; 0xfa
200009d4:	0091      	lsls	r1, r2, #2
200009d6:	0018      	movs	r0, r3
200009d8:	f001 f8d4 	bl	20001b84 <__udivsi3>
200009dc:	0003      	movs	r3, r0
200009de:	607b      	str	r3, [r7, #4]
	us++;
200009e0:	687b      	ldr	r3, [r7, #4]
200009e2:	3301      	adds	r3, #1
200009e4:	607b      	str	r3, [r7, #4]
#endif
	while(us > 0)
200009e6:	e00a      	b.n	200009fe <delay_micro+0x36>
	{
		delay_250ns();
200009e8:	f7ff ffcc 	bl	20000984 <delay_250ns>
		delay_250ns();
200009ec:	f7ff ffca 	bl	20000984 <delay_250ns>
		delay_250ns();
200009f0:	f7ff ffc8 	bl	20000984 <delay_250ns>
		delay_250ns();
200009f4:	f7ff ffc6 	bl	20000984 <delay_250ns>
		us--;
200009f8:	687b      	ldr	r3, [r7, #4]
200009fa:	3b01      	subs	r3, #1
200009fc:	607b      	str	r3, [r7, #4]
	while(us > 0)
200009fe:	687b      	ldr	r3, [r7, #4]
20000a00:	2b00      	cmp	r3, #0
20000a02:	d1f1      	bne.n	200009e8 <delay_micro+0x20>
	}
}
20000a04:	46c0      	nop			; (mov r8, r8)
20000a06:	46c0      	nop			; (mov r8, r8)
20000a08:	46bd      	mov	sp, r7
20000a0a:	b002      	add	sp, #8
20000a0c:	bd80      	pop	{r7, pc}

20000a0e <delay_milli>:

void delay_milli(unsigned int ms)
{
20000a0e:	b580      	push	{r7, lr}
20000a10:	b082      	sub	sp, #8
20000a12:	af00      	add	r7, sp, #0
20000a14:	6078      	str	r0, [r7, #4]
	delay_micro(ms*1000);
20000a16:	687a      	ldr	r2, [r7, #4]
20000a18:	0013      	movs	r3, r2
20000a1a:	015b      	lsls	r3, r3, #5
20000a1c:	1a9b      	subs	r3, r3, r2
20000a1e:	009b      	lsls	r3, r3, #2
20000a20:	189b      	adds	r3, r3, r2
20000a22:	00db      	lsls	r3, r3, #3
20000a24:	0018      	movs	r0, r3
20000a26:	f7ff ffcf 	bl	200009c8 <delay_micro>
}
20000a2a:	46c0      	nop			; (mov r8, r8)
20000a2c:	46bd      	mov	sp, r7
20000a2e:	b002      	add	sp, #8
20000a30:	bd80      	pop	{r7, pc}
20000a32:	46c0      	nop			; (mov r8, r8)

20000a34 <reset_game>:
#ifndef GAME_LOGIC_DEC
	#define GAME_LOGIC_DEC 
	#include "game_logic_declarations.h"
#endif
void reset_game(int * game_started, int * n_same_key, struct Player * p)
{
20000a34:	b580      	push	{r7, lr}
20000a36:	b086      	sub	sp, #24
20000a38:	af00      	add	r7, sp, #0
20000a3a:	60f8      	str	r0, [r7, #12]
20000a3c:	60b9      	str	r1, [r7, #8]
20000a3e:	607a      	str	r2, [r7, #4]
	for(int i = 0; i<=7; i++)
20000a40:	2300      	movs	r3, #0
20000a42:	617b      	str	r3, [r7, #20]
20000a44:	e012      	b.n	20000a6c <reset_game+0x38>
		move_keys[i] = i < 4 ? i+1 : i+2;
20000a46:	697b      	ldr	r3, [r7, #20]
20000a48:	2b03      	cmp	r3, #3
20000a4a:	dc04      	bgt.n	20000a56 <reset_game+0x22>
20000a4c:	697b      	ldr	r3, [r7, #20]
20000a4e:	b2db      	uxtb	r3, r3
20000a50:	3301      	adds	r3, #1
20000a52:	b2db      	uxtb	r3, r3
20000a54:	e003      	b.n	20000a5e <reset_game+0x2a>
20000a56:	697b      	ldr	r3, [r7, #20]
20000a58:	b2db      	uxtb	r3, r3
20000a5a:	3302      	adds	r3, #2
20000a5c:	b2db      	uxtb	r3, r3
20000a5e:	4926      	ldr	r1, [pc, #152]	; (20000af8 <reset_game+0xc4>)
20000a60:	697a      	ldr	r2, [r7, #20]
20000a62:	188a      	adds	r2, r1, r2
20000a64:	7013      	strb	r3, [r2, #0]
	for(int i = 0; i<=7; i++)
20000a66:	697b      	ldr	r3, [r7, #20]
20000a68:	3301      	adds	r3, #1
20000a6a:	617b      	str	r3, [r7, #20]
20000a6c:	697b      	ldr	r3, [r7, #20]
20000a6e:	2b07      	cmp	r3, #7
20000a70:	dde9      	ble.n	20000a46 <reset_game+0x12>
	is_bomb_ptr = is_bomb;
20000a72:	4b22      	ldr	r3, [pc, #136]	; (20000afc <reset_game+0xc8>)
20000a74:	4a22      	ldr	r2, [pc, #136]	; (20000b00 <reset_game+0xcc>)
20000a76:	601a      	str	r2, [r3, #0]
	is_flag_ptr = is_flag;
20000a78:	4b22      	ldr	r3, [pc, #136]	; (20000b04 <reset_game+0xd0>)
20000a7a:	4a23      	ldr	r2, [pc, #140]	; (20000b08 <reset_game+0xd4>)
20000a7c:	601a      	str	r2, [r3, #0]
	graphic_clear_screen();
20000a7e:	f7ff fd58 	bl	20000532 <graphic_clear_screen>
	create_board(&board);
20000a82:	4b22      	ldr	r3, [pc, #136]	; (20000b0c <reset_game+0xd8>)
20000a84:	0018      	movs	r0, r3
20000a86:	f000 fd89 	bl	2000159c <create_board>
	*game_started = 0;	
20000a8a:	68fb      	ldr	r3, [r7, #12]
20000a8c:	2200      	movs	r2, #0
20000a8e:	601a      	str	r2, [r3, #0]
	p->x = 0;
20000a90:	687b      	ldr	r3, [r7, #4]
20000a92:	2200      	movs	r2, #0
20000a94:	601a      	str	r2, [r3, #0]
	p->y = 0;
20000a96:	687b      	ldr	r3, [r7, #4]
20000a98:	2200      	movs	r2, #0
20000a9a:	605a      	str	r2, [r3, #4]
	*n_same_key = 0;
20000a9c:	68bb      	ldr	r3, [r7, #8]
20000a9e:	2200      	movs	r2, #0
20000aa0:	601a      	str	r2, [r3, #0]
	gameover = 0;
20000aa2:	4b1b      	ldr	r3, [pc, #108]	; (20000b10 <reset_game+0xdc>)
20000aa4:	2200      	movs	r2, #0
20000aa6:	601a      	str	r2, [r3, #0]
	curr_x = 0;
20000aa8:	4b1a      	ldr	r3, [pc, #104]	; (20000b14 <reset_game+0xe0>)
20000aaa:	2200      	movs	r2, #0
20000aac:	601a      	str	r2, [r3, #0]
	curr_y = 0;
20000aae:	4b1a      	ldr	r3, [pc, #104]	; (20000b18 <reset_game+0xe4>)
20000ab0:	2200      	movs	r2, #0
20000ab2:	601a      	str	r2, [r3, #0]
	running = 0;
20000ab4:	4b19      	ldr	r3, [pc, #100]	; (20000b1c <reset_game+0xe8>)
20000ab6:	2200      	movs	r2, #0
20000ab8:	601a      	str	r2, [r3, #0]
	gameover = 0;	
20000aba:	4b15      	ldr	r3, [pc, #84]	; (20000b10 <reset_game+0xdc>)
20000abc:	2200      	movs	r2, #0
20000abe:	601a      	str	r2, [r3, #0]
	p->placed_flaggs = 0;
20000ac0:	687b      	ldr	r3, [r7, #4]
20000ac2:	2200      	movs	r2, #0
20000ac4:	609a      	str	r2, [r3, #8]
	gotoxy(0,0);
20000ac6:	2100      	movs	r1, #0
20000ac8:	2000      	movs	r0, #0
20000aca:	f000 fde6 	bl	2000169a <gotoxy>
	print_to_gd(curr_x, curr_y, PLAYERCH);
20000ace:	4b11      	ldr	r3, [pc, #68]	; (20000b14 <reset_game+0xe0>)
20000ad0:	6818      	ldr	r0, [r3, #0]
20000ad2:	4b11      	ldr	r3, [pc, #68]	; (20000b18 <reset_game+0xe4>)
20000ad4:	681b      	ldr	r3, [r3, #0]
20000ad6:	2224      	movs	r2, #36	; 0x24
20000ad8:	0019      	movs	r1, r3
20000ada:	f7ff fc49 	bl	20000370 <print_to_gd>
	print_start_text_ascii();
20000ade:	f7ff fd31 	bl	20000544 <print_start_text_ascii>
	print_flags(BOMBS - p->placed_flaggs);
20000ae2:	687b      	ldr	r3, [r7, #4]
20000ae4:	689b      	ldr	r3, [r3, #8]
20000ae6:	220a      	movs	r2, #10
20000ae8:	1ad3      	subs	r3, r2, r3
20000aea:	0018      	movs	r0, r3
20000aec:	f7ff fd6e 	bl	200005cc <print_flags>
}
20000af0:	46c0      	nop			; (mov r8, r8)
20000af2:	46bd      	mov	sp, r7
20000af4:	b006      	add	sp, #24
20000af6:	bd80      	pop	{r7, pc}
20000af8:	20002674 	andcs	r2, r0, r4, ror r6
20000afc:	20002650 	andcs	r2, r0, r0, asr r6
20000b00:	200011b9 			; <UNDEFINED> instruction: 0x200011b9
20000b04:	20001ec4 	andcs	r1, r0, r4, asr #29
20000b08:	200011df 	ldrdcs	r1, [r0], -pc	; <UNPREDICTABLE>
20000b0c:	20001ed0 	ldrdcs	r1, [r0], -r0
20000b10:	2000266c 	andcs	r2, r0, ip, ror #12
20000b14:	20001ecc 	andcs	r1, r0, ip, asr #29
20000b18:	20002670 	andcs	r2, r0, r0, ror r6
20000b1c:	20001ec8 	andcs	r1, r0, r8, asr #29

20000b20 <check_win>:

int check_win()
{
20000b20:	b580      	push	{r7, lr}
20000b22:	b084      	sub	sp, #16
20000b24:	af00      	add	r7, sp, #0
	int squares_to_open = SIZEX*SIZEY - BOMBS;
20000b26:	2346      	movs	r3, #70	; 0x46
20000b28:	603b      	str	r3, [r7, #0]
	int opened_squares = 0;
20000b2a:	2300      	movs	r3, #0
20000b2c:	60fb      	str	r3, [r7, #12]
	for(int x = 0; x < SIZEX; x++)
20000b2e:	2300      	movs	r3, #0
20000b30:	60bb      	str	r3, [r7, #8]
20000b32:	e032      	b.n	20000b9a <check_win+0x7a>
		for(int y = 0; y < SIZEY; y++)
20000b34:	2300      	movs	r3, #0
20000b36:	607b      	str	r3, [r7, #4]
20000b38:	e029      	b.n	20000b8e <check_win+0x6e>
		{
			if(board[x][y].opened && board[x][y].bomb == 0)
20000b3a:	481f      	ldr	r0, [pc, #124]	; (20000bb8 <check_win+0x98>)
20000b3c:	687b      	ldr	r3, [r7, #4]
20000b3e:	68b9      	ldr	r1, [r7, #8]
20000b40:	001a      	movs	r2, r3
20000b42:	0052      	lsls	r2, r2, #1
20000b44:	18d2      	adds	r2, r2, r3
20000b46:	00d3      	lsls	r3, r2, #3
20000b48:	001a      	movs	r2, r3
20000b4a:	000b      	movs	r3, r1
20000b4c:	011b      	lsls	r3, r3, #4
20000b4e:	1a5b      	subs	r3, r3, r1
20000b50:	00db      	lsls	r3, r3, #3
20000b52:	18d3      	adds	r3, r2, r3
20000b54:	18c3      	adds	r3, r0, r3
20000b56:	3314      	adds	r3, #20
20000b58:	681b      	ldr	r3, [r3, #0]
20000b5a:	2b00      	cmp	r3, #0
20000b5c:	d014      	beq.n	20000b88 <check_win+0x68>
20000b5e:	4816      	ldr	r0, [pc, #88]	; (20000bb8 <check_win+0x98>)
20000b60:	687b      	ldr	r3, [r7, #4]
20000b62:	68b9      	ldr	r1, [r7, #8]
20000b64:	001a      	movs	r2, r3
20000b66:	0052      	lsls	r2, r2, #1
20000b68:	18d2      	adds	r2, r2, r3
20000b6a:	00d3      	lsls	r3, r2, #3
20000b6c:	001a      	movs	r2, r3
20000b6e:	000b      	movs	r3, r1
20000b70:	011b      	lsls	r3, r3, #4
20000b72:	1a5b      	subs	r3, r3, r1
20000b74:	00db      	lsls	r3, r3, #3
20000b76:	18d3      	adds	r3, r2, r3
20000b78:	18c3      	adds	r3, r0, r3
20000b7a:	3310      	adds	r3, #16
20000b7c:	681b      	ldr	r3, [r3, #0]
20000b7e:	2b00      	cmp	r3, #0
20000b80:	d102      	bne.n	20000b88 <check_win+0x68>
				opened_squares++;
20000b82:	68fb      	ldr	r3, [r7, #12]
20000b84:	3301      	adds	r3, #1
20000b86:	60fb      	str	r3, [r7, #12]
		for(int y = 0; y < SIZEY; y++)
20000b88:	687b      	ldr	r3, [r7, #4]
20000b8a:	3301      	adds	r3, #1
20000b8c:	607b      	str	r3, [r7, #4]
20000b8e:	687b      	ldr	r3, [r7, #4]
20000b90:	2b04      	cmp	r3, #4
20000b92:	ddd2      	ble.n	20000b3a <check_win+0x1a>
	for(int x = 0; x < SIZEX; x++)
20000b94:	68bb      	ldr	r3, [r7, #8]
20000b96:	3301      	adds	r3, #1
20000b98:	60bb      	str	r3, [r7, #8]
20000b9a:	68bb      	ldr	r3, [r7, #8]
20000b9c:	2b0f      	cmp	r3, #15
20000b9e:	ddc9      	ble.n	20000b34 <check_win+0x14>
		}
	if(opened_squares == SIZEX*SIZEY - BOMBS)
20000ba0:	68fb      	ldr	r3, [r7, #12]
20000ba2:	2b46      	cmp	r3, #70	; 0x46
20000ba4:	d102      	bne.n	20000bac <check_win+0x8c>
		gameover = 1;
20000ba6:	4b05      	ldr	r3, [pc, #20]	; (20000bbc <check_win+0x9c>)
20000ba8:	2201      	movs	r2, #1
20000baa:	601a      	str	r2, [r3, #0]
	return gameover;	
20000bac:	4b03      	ldr	r3, [pc, #12]	; (20000bbc <check_win+0x9c>)
20000bae:	681b      	ldr	r3, [r3, #0]
}
20000bb0:	0018      	movs	r0, r3
20000bb2:	46bd      	mov	sp, r7
20000bb4:	b004      	add	sp, #16
20000bb6:	bd80      	pop	{r7, pc}
20000bb8:	20001ed0 	ldrdcs	r1, [r0], -r0
20000bbc:	2000266c 	andcs	r2, r0, ip, ror #12

20000bc0 <place_bombs>:
void place_bombs(struct Player p)
{
20000bc0:	b590      	push	{r4, r7, lr}
20000bc2:	b08b      	sub	sp, #44	; 0x2c
20000bc4:	af00      	add	r7, sp, #0
20000bc6:	1d3b      	adds	r3, r7, #4
20000bc8:	6018      	str	r0, [r3, #0]
20000bca:	6059      	str	r1, [r3, #4]
20000bcc:	609a      	str	r2, [r3, #8]
	 // du kan göra en räknarkrets som du kan läsa av värdet på!!!
	int placed_bombs = 0;
20000bce:	2300      	movs	r3, #0
20000bd0:	627b      	str	r3, [r7, #36]	; 0x24
	while(placed_bombs < BOMBS)
20000bd2:	e040      	b.n	20000c56 <place_bombs+0x96>
	{
		int rx = *TIM6_CNT % SIZEX;
20000bd4:	4b39      	ldr	r3, [pc, #228]	; (20000cbc <place_bombs+0xfc>)
20000bd6:	881b      	ldrh	r3, [r3, #0]
20000bd8:	b29b      	uxth	r3, r3
20000bda:	001a      	movs	r2, r3
20000bdc:	230f      	movs	r3, #15
20000bde:	4013      	ands	r3, r2
20000be0:	61bb      	str	r3, [r7, #24]
		int ry = *TIM6_CNT % SIZEY;
20000be2:	4b36      	ldr	r3, [pc, #216]	; (20000cbc <place_bombs+0xfc>)
20000be4:	881b      	ldrh	r3, [r3, #0]
20000be6:	b29b      	uxth	r3, r3
20000be8:	2105      	movs	r1, #5
20000bea:	0018      	movs	r0, r3
20000bec:	f001 f850 	bl	20001c90 <__aeabi_uidivmod>
20000bf0:	000b      	movs	r3, r1
20000bf2:	b29b      	uxth	r3, r3
20000bf4:	617b      	str	r3, [r7, #20]
		if(board[rx][ry].bomb == 0 && (rx != p.x || ry != p.y))
20000bf6:	4832      	ldr	r0, [pc, #200]	; (20000cc0 <place_bombs+0x100>)
20000bf8:	697b      	ldr	r3, [r7, #20]
20000bfa:	69b9      	ldr	r1, [r7, #24]
20000bfc:	001a      	movs	r2, r3
20000bfe:	0052      	lsls	r2, r2, #1
20000c00:	18d2      	adds	r2, r2, r3
20000c02:	00d3      	lsls	r3, r2, #3
20000c04:	001a      	movs	r2, r3
20000c06:	000b      	movs	r3, r1
20000c08:	011b      	lsls	r3, r3, #4
20000c0a:	1a5b      	subs	r3, r3, r1
20000c0c:	00db      	lsls	r3, r3, #3
20000c0e:	18d3      	adds	r3, r2, r3
20000c10:	18c3      	adds	r3, r0, r3
20000c12:	3310      	adds	r3, #16
20000c14:	681b      	ldr	r3, [r3, #0]
20000c16:	2b00      	cmp	r3, #0
20000c18:	d11d      	bne.n	20000c56 <place_bombs+0x96>
20000c1a:	1d3b      	adds	r3, r7, #4
20000c1c:	681b      	ldr	r3, [r3, #0]
20000c1e:	69ba      	ldr	r2, [r7, #24]
20000c20:	429a      	cmp	r2, r3
20000c22:	d104      	bne.n	20000c2e <place_bombs+0x6e>
20000c24:	1d3b      	adds	r3, r7, #4
20000c26:	685b      	ldr	r3, [r3, #4]
20000c28:	697a      	ldr	r2, [r7, #20]
20000c2a:	429a      	cmp	r2, r3
20000c2c:	d013      	beq.n	20000c56 <place_bombs+0x96>
		{
			board[rx][ry].bomb = 1;
20000c2e:	4824      	ldr	r0, [pc, #144]	; (20000cc0 <place_bombs+0x100>)
20000c30:	697b      	ldr	r3, [r7, #20]
20000c32:	69b9      	ldr	r1, [r7, #24]
20000c34:	001a      	movs	r2, r3
20000c36:	0052      	lsls	r2, r2, #1
20000c38:	18d2      	adds	r2, r2, r3
20000c3a:	00d3      	lsls	r3, r2, #3
20000c3c:	001a      	movs	r2, r3
20000c3e:	000b      	movs	r3, r1
20000c40:	011b      	lsls	r3, r3, #4
20000c42:	1a5b      	subs	r3, r3, r1
20000c44:	00db      	lsls	r3, r3, #3
20000c46:	18d3      	adds	r3, r2, r3
20000c48:	18c3      	adds	r3, r0, r3
20000c4a:	3310      	adds	r3, #16
20000c4c:	2201      	movs	r2, #1
20000c4e:	601a      	str	r2, [r3, #0]
			placed_bombs++;
20000c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20000c52:	3301      	adds	r3, #1
20000c54:	627b      	str	r3, [r7, #36]	; 0x24
	while(placed_bombs < BOMBS)
20000c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20000c58:	2b09      	cmp	r3, #9
20000c5a:	ddbb      	ble.n	20000bd4 <place_bombs+0x14>
		}
	}
	for(int i = 0; i<SIZEX; i++)
20000c5c:	2300      	movs	r3, #0
20000c5e:	623b      	str	r3, [r7, #32]
20000c60:	e023      	b.n	20000caa <place_bombs+0xea>
		for(int j = 0; j < SIZEY; j++)
20000c62:	2300      	movs	r3, #0
20000c64:	61fb      	str	r3, [r7, #28]
20000c66:	e01a      	b.n	20000c9e <place_bombs+0xde>
			board[i][j].number_of_bombs = count_bomb_or_flag(i, j, is_bomb_ptr);
20000c68:	4b16      	ldr	r3, [pc, #88]	; (20000cc4 <place_bombs+0x104>)
20000c6a:	681a      	ldr	r2, [r3, #0]
20000c6c:	69f9      	ldr	r1, [r7, #28]
20000c6e:	6a3b      	ldr	r3, [r7, #32]
20000c70:	0018      	movs	r0, r3
20000c72:	f000 fa47 	bl	20001104 <count_bomb_or_flag>
20000c76:	0004      	movs	r4, r0
20000c78:	4811      	ldr	r0, [pc, #68]	; (20000cc0 <place_bombs+0x100>)
20000c7a:	69fb      	ldr	r3, [r7, #28]
20000c7c:	6a39      	ldr	r1, [r7, #32]
20000c7e:	001a      	movs	r2, r3
20000c80:	0052      	lsls	r2, r2, #1
20000c82:	18d2      	adds	r2, r2, r3
20000c84:	00d3      	lsls	r3, r2, #3
20000c86:	001a      	movs	r2, r3
20000c88:	000b      	movs	r3, r1
20000c8a:	011b      	lsls	r3, r3, #4
20000c8c:	1a5b      	subs	r3, r3, r1
20000c8e:	00db      	lsls	r3, r3, #3
20000c90:	18d3      	adds	r3, r2, r3
20000c92:	18c3      	adds	r3, r0, r3
20000c94:	3308      	adds	r3, #8
20000c96:	601c      	str	r4, [r3, #0]
		for(int j = 0; j < SIZEY; j++)
20000c98:	69fb      	ldr	r3, [r7, #28]
20000c9a:	3301      	adds	r3, #1
20000c9c:	61fb      	str	r3, [r7, #28]
20000c9e:	69fb      	ldr	r3, [r7, #28]
20000ca0:	2b04      	cmp	r3, #4
20000ca2:	dde1      	ble.n	20000c68 <place_bombs+0xa8>
	for(int i = 0; i<SIZEX; i++)
20000ca4:	6a3b      	ldr	r3, [r7, #32]
20000ca6:	3301      	adds	r3, #1
20000ca8:	623b      	str	r3, [r7, #32]
20000caa:	6a3b      	ldr	r3, [r7, #32]
20000cac:	2b0f      	cmp	r3, #15
20000cae:	ddd8      	ble.n	20000c62 <place_bombs+0xa2>
}
20000cb0:	46c0      	nop			; (mov r8, r8)
20000cb2:	46c0      	nop			; (mov r8, r8)
20000cb4:	46bd      	mov	sp, r7
20000cb6:	b00b      	add	sp, #44	; 0x2c
20000cb8:	bd90      	pop	{r4, r7, pc}
20000cba:	46c0      	nop			; (mov r8, r8)
20000cbc:	40001024 	andmi	r1, r0, r4, lsr #32
20000cc0:	20001ed0 	ldrdcs	r1, [r0], -r0
20000cc4:	20002650 	andcs	r2, r0, r0, asr r6

20000cc8 <make_first_open>:
void make_first_open(struct Player p)
{
20000cc8:	b580      	push	{r7, lr}
20000cca:	b084      	sub	sp, #16
20000ccc:	af00      	add	r7, sp, #0
20000cce:	1d3b      	adds	r3, r7, #4
20000cd0:	6018      	str	r0, [r3, #0]
20000cd2:	6059      	str	r1, [r3, #4]
20000cd4:	609a      	str	r2, [r3, #8]
	place_bombs(p);
20000cd6:	1d3b      	adds	r3, r7, #4
20000cd8:	6818      	ldr	r0, [r3, #0]
20000cda:	6859      	ldr	r1, [r3, #4]
20000cdc:	689a      	ldr	r2, [r3, #8]
20000cde:	f7ff ff6f 	bl	20000bc0 <place_bombs>
	open_pos(p.x, p.y);
20000ce2:	1d3b      	adds	r3, r7, #4
20000ce4:	681a      	ldr	r2, [r3, #0]
20000ce6:	1d3b      	adds	r3, r7, #4
20000ce8:	685b      	ldr	r3, [r3, #4]
20000cea:	0019      	movs	r1, r3
20000cec:	0010      	movs	r0, r2
20000cee:	f000 f8db 	bl	20000ea8 <open_pos>
}
20000cf2:	46c0      	nop			; (mov r8, r8)
20000cf4:	46bd      	mov	sp, r7
20000cf6:	b004      	add	sp, #16
20000cf8:	bd80      	pop	{r7, pc}

20000cfa <show_bombs>:
void show_bombs()
{
20000cfa:	b580      	push	{r7, lr}
20000cfc:	b082      	sub	sp, #8
20000cfe:	af00      	add	r7, sp, #0
	for(int i = 0; i<SIZEX; i++)
20000d00:	2300      	movs	r3, #0
20000d02:	607b      	str	r3, [r7, #4]
20000d04:	e02b      	b.n	20000d5e <show_bombs+0x64>
		for(int j = 0; j < SIZEY; j++)
20000d06:	2300      	movs	r3, #0
20000d08:	603b      	str	r3, [r7, #0]
20000d0a:	e022      	b.n	20000d52 <show_bombs+0x58>
			if(board[i][j].bomb)
20000d0c:	4818      	ldr	r0, [pc, #96]	; (20000d70 <show_bombs+0x76>)
20000d0e:	683b      	ldr	r3, [r7, #0]
20000d10:	6879      	ldr	r1, [r7, #4]
20000d12:	001a      	movs	r2, r3
20000d14:	0052      	lsls	r2, r2, #1
20000d16:	18d2      	adds	r2, r2, r3
20000d18:	00d3      	lsls	r3, r2, #3
20000d1a:	001a      	movs	r2, r3
20000d1c:	000b      	movs	r3, r1
20000d1e:	011b      	lsls	r3, r3, #4
20000d20:	1a5b      	subs	r3, r3, r1
20000d22:	00db      	lsls	r3, r3, #3
20000d24:	18d3      	adds	r3, r2, r3
20000d26:	18c3      	adds	r3, r0, r3
20000d28:	3310      	adds	r3, #16
20000d2a:	681b      	ldr	r3, [r3, #0]
20000d2c:	2b00      	cmp	r3, #0
20000d2e:	d00d      	beq.n	20000d4c <show_bombs+0x52>
				{
					gotoxy(STARTX + i, STARTY + j);
20000d30:	683a      	ldr	r2, [r7, #0]
20000d32:	687b      	ldr	r3, [r7, #4]
20000d34:	0011      	movs	r1, r2
20000d36:	0018      	movs	r0, r3
20000d38:	f000 fcaf 	bl	2000169a <gotoxy>
					print_to_gd(curr_x, curr_y, BOMBCH);
20000d3c:	4b0d      	ldr	r3, [pc, #52]	; (20000d74 <show_bombs+0x7a>)
20000d3e:	6818      	ldr	r0, [r3, #0]
20000d40:	4b0d      	ldr	r3, [pc, #52]	; (20000d78 <show_bombs+0x7e>)
20000d42:	681b      	ldr	r3, [r3, #0]
20000d44:	222a      	movs	r2, #42	; 0x2a
20000d46:	0019      	movs	r1, r3
20000d48:	f7ff fb12 	bl	20000370 <print_to_gd>
		for(int j = 0; j < SIZEY; j++)
20000d4c:	683b      	ldr	r3, [r7, #0]
20000d4e:	3301      	adds	r3, #1
20000d50:	603b      	str	r3, [r7, #0]
20000d52:	683b      	ldr	r3, [r7, #0]
20000d54:	2b04      	cmp	r3, #4
20000d56:	ddd9      	ble.n	20000d0c <show_bombs+0x12>
	for(int i = 0; i<SIZEX; i++)
20000d58:	687b      	ldr	r3, [r7, #4]
20000d5a:	3301      	adds	r3, #1
20000d5c:	607b      	str	r3, [r7, #4]
20000d5e:	687b      	ldr	r3, [r7, #4]
20000d60:	2b0f      	cmp	r3, #15
20000d62:	ddd0      	ble.n	20000d06 <show_bombs+0xc>
				}
}
20000d64:	46c0      	nop			; (mov r8, r8)
20000d66:	46c0      	nop			; (mov r8, r8)
20000d68:	46bd      	mov	sp, r7
20000d6a:	b002      	add	sp, #8
20000d6c:	bd80      	pop	{r7, pc}
20000d6e:	46c0      	nop			; (mov r8, r8)
20000d70:	20001ed0 	ldrdcs	r1, [r0], -r0
20000d74:	20001ecc 	andcs	r1, r0, ip, asr #29
20000d78:	20002670 	andcs	r2, r0, r0, ror r6

20000d7c <place_flag>:
void place_flag(struct Player * p)
{
20000d7c:	b5b0      	push	{r4, r5, r7, lr}
20000d7e:	b084      	sub	sp, #16
20000d80:	af02      	add	r7, sp, #8
20000d82:	6078      	str	r0, [r7, #4]
	if(board[p->x][p->y].opened)
20000d84:	687b      	ldr	r3, [r7, #4]
20000d86:	6819      	ldr	r1, [r3, #0]
20000d88:	687b      	ldr	r3, [r7, #4]
20000d8a:	685b      	ldr	r3, [r3, #4]
20000d8c:	483e      	ldr	r0, [pc, #248]	; (20000e88 <place_flag+0x10c>)
20000d8e:	001a      	movs	r2, r3
20000d90:	0052      	lsls	r2, r2, #1
20000d92:	18d2      	adds	r2, r2, r3
20000d94:	00d3      	lsls	r3, r2, #3
20000d96:	001a      	movs	r2, r3
20000d98:	000b      	movs	r3, r1
20000d9a:	011b      	lsls	r3, r3, #4
20000d9c:	1a5b      	subs	r3, r3, r1
20000d9e:	00db      	lsls	r3, r3, #3
20000da0:	18d3      	adds	r3, r2, r3
20000da2:	18c3      	adds	r3, r0, r3
20000da4:	3314      	adds	r3, #20
20000da6:	681b      	ldr	r3, [r3, #0]
20000da8:	2b00      	cmp	r3, #0
20000daa:	d169      	bne.n	20000e80 <place_flag+0x104>
		return;
	board[p->x][p->y].flagged = (board[p->x][p->y].flagged + 1) % 2;
20000dac:	687b      	ldr	r3, [r7, #4]
20000dae:	6819      	ldr	r1, [r3, #0]
20000db0:	687b      	ldr	r3, [r7, #4]
20000db2:	685b      	ldr	r3, [r3, #4]
20000db4:	4834      	ldr	r0, [pc, #208]	; (20000e88 <place_flag+0x10c>)
20000db6:	001a      	movs	r2, r3
20000db8:	0052      	lsls	r2, r2, #1
20000dba:	18d2      	adds	r2, r2, r3
20000dbc:	00d3      	lsls	r3, r2, #3
20000dbe:	001a      	movs	r2, r3
20000dc0:	000b      	movs	r3, r1
20000dc2:	011b      	lsls	r3, r3, #4
20000dc4:	1a5b      	subs	r3, r3, r1
20000dc6:	00db      	lsls	r3, r3, #3
20000dc8:	18d3      	adds	r3, r2, r3
20000dca:	18c3      	adds	r3, r0, r3
20000dcc:	330c      	adds	r3, #12
20000dce:	681b      	ldr	r3, [r3, #0]
20000dd0:	1c5a      	adds	r2, r3, #1
20000dd2:	687b      	ldr	r3, [r7, #4]
20000dd4:	6819      	ldr	r1, [r3, #0]
20000dd6:	687b      	ldr	r3, [r7, #4]
20000dd8:	6858      	ldr	r0, [r3, #4]
20000dda:	4b2c      	ldr	r3, [pc, #176]	; (20000e8c <place_flag+0x110>)
20000ddc:	4013      	ands	r3, r2
20000dde:	d504      	bpl.n	20000dea <place_flag+0x6e>
20000de0:	3b01      	subs	r3, #1
20000de2:	2202      	movs	r2, #2
20000de4:	4252      	negs	r2, r2
20000de6:	4313      	orrs	r3, r2
20000de8:	3301      	adds	r3, #1
20000dea:	001d      	movs	r5, r3
20000dec:	4c26      	ldr	r4, [pc, #152]	; (20000e88 <place_flag+0x10c>)
20000dee:	0002      	movs	r2, r0
20000df0:	0052      	lsls	r2, r2, #1
20000df2:	1812      	adds	r2, r2, r0
20000df4:	00d3      	lsls	r3, r2, #3
20000df6:	001a      	movs	r2, r3
20000df8:	000b      	movs	r3, r1
20000dfa:	011b      	lsls	r3, r3, #4
20000dfc:	1a5b      	subs	r3, r3, r1
20000dfe:	00db      	lsls	r3, r3, #3
20000e00:	18d3      	adds	r3, r2, r3
20000e02:	18e3      	adds	r3, r4, r3
20000e04:	330c      	adds	r3, #12
20000e06:	601d      	str	r5, [r3, #0]
	p->placed_flaggs = board[p->x][p->y].flagged ? p->placed_flaggs + 1 : p->placed_flaggs -1;
20000e08:	687b      	ldr	r3, [r7, #4]
20000e0a:	6819      	ldr	r1, [r3, #0]
20000e0c:	687b      	ldr	r3, [r7, #4]
20000e0e:	685b      	ldr	r3, [r3, #4]
20000e10:	481d      	ldr	r0, [pc, #116]	; (20000e88 <place_flag+0x10c>)
20000e12:	001a      	movs	r2, r3
20000e14:	0052      	lsls	r2, r2, #1
20000e16:	18d2      	adds	r2, r2, r3
20000e18:	00d3      	lsls	r3, r2, #3
20000e1a:	001a      	movs	r2, r3
20000e1c:	000b      	movs	r3, r1
20000e1e:	011b      	lsls	r3, r3, #4
20000e20:	1a5b      	subs	r3, r3, r1
20000e22:	00db      	lsls	r3, r3, #3
20000e24:	18d3      	adds	r3, r2, r3
20000e26:	18c3      	adds	r3, r0, r3
20000e28:	330c      	adds	r3, #12
20000e2a:	681b      	ldr	r3, [r3, #0]
20000e2c:	2b00      	cmp	r3, #0
20000e2e:	d003      	beq.n	20000e38 <place_flag+0xbc>
20000e30:	687b      	ldr	r3, [r7, #4]
20000e32:	689b      	ldr	r3, [r3, #8]
20000e34:	1c5a      	adds	r2, r3, #1
20000e36:	e002      	b.n	20000e3e <place_flag+0xc2>
20000e38:	687b      	ldr	r3, [r7, #4]
20000e3a:	689b      	ldr	r3, [r3, #8]
20000e3c:	1e5a      	subs	r2, r3, #1
20000e3e:	687b      	ldr	r3, [r7, #4]
20000e40:	609a      	str	r2, [r3, #8]
	draw_pos(board[p->x][p->y]);
20000e42:	687b      	ldr	r3, [r7, #4]
20000e44:	6819      	ldr	r1, [r3, #0]
20000e46:	687b      	ldr	r3, [r7, #4]
20000e48:	685b      	ldr	r3, [r3, #4]
20000e4a:	4c0f      	ldr	r4, [pc, #60]	; (20000e88 <place_flag+0x10c>)
20000e4c:	001a      	movs	r2, r3
20000e4e:	0052      	lsls	r2, r2, #1
20000e50:	18d2      	adds	r2, r2, r3
20000e52:	00d3      	lsls	r3, r2, #3
20000e54:	001a      	movs	r2, r3
20000e56:	000b      	movs	r3, r1
20000e58:	011b      	lsls	r3, r3, #4
20000e5a:	1a5b      	subs	r3, r3, r1
20000e5c:	00db      	lsls	r3, r3, #3
20000e5e:	18d3      	adds	r3, r2, r3
20000e60:	2110      	movs	r1, #16
20000e62:	18e2      	adds	r2, r4, r3
20000e64:	1851      	adds	r1, r2, r1
20000e66:	466a      	mov	r2, sp
20000e68:	c921      	ldmia	r1!, {r0, r5}
20000e6a:	c221      	stmia	r2!, {r0, r5}
20000e6c:	5918      	ldr	r0, [r3, r4]
20000e6e:	18e2      	adds	r2, r4, r3
20000e70:	6851      	ldr	r1, [r2, #4]
20000e72:	18e2      	adds	r2, r4, r3
20000e74:	6892      	ldr	r2, [r2, #8]
20000e76:	18e3      	adds	r3, r4, r3
20000e78:	68db      	ldr	r3, [r3, #12]
20000e7a:	f000 fb03 	bl	20001484 <draw_pos>
20000e7e:	e000      	b.n	20000e82 <place_flag+0x106>
		return;
20000e80:	46c0      	nop			; (mov r8, r8)
}
20000e82:	46bd      	mov	sp, r7
20000e84:	b002      	add	sp, #8
20000e86:	bdb0      	pop	{r4, r5, r7, pc}
20000e88:	20001ed0 	ldrdcs	r1, [r0], -r0
20000e8c:	80000001 	andhi	r0, r0, r1

20000e90 <game_over>:
void game_over()
{
20000e90:	b580      	push	{r7, lr}
20000e92:	af00      	add	r7, sp, #0
	show_bombs();
20000e94:	f7ff ff31 	bl	20000cfa <show_bombs>
	gameover = 1;
20000e98:	4b02      	ldr	r3, [pc, #8]	; (20000ea4 <game_over+0x14>)
20000e9a:	2201      	movs	r2, #1
20000e9c:	601a      	str	r2, [r3, #0]
}
20000e9e:	46c0      	nop			; (mov r8, r8)
20000ea0:	46bd      	mov	sp, r7
20000ea2:	bd80      	pop	{r7, pc}
20000ea4:	2000266c 	andcs	r2, r0, ip, ror #12

20000ea8 <open_pos>:

void open_pos(int x, int y)
{
20000ea8:	b5b0      	push	{r4, r5, r7, lr}
20000eaa:	b08a      	sub	sp, #40	; 0x28
20000eac:	af02      	add	r7, sp, #8
20000eae:	6078      	str	r0, [r7, #4]
20000eb0:	6039      	str	r1, [r7, #0]
	if(board[x][y].flagged)
20000eb2:	4891      	ldr	r0, [pc, #580]	; (200010f8 <open_pos+0x250>)
20000eb4:	683b      	ldr	r3, [r7, #0]
20000eb6:	6879      	ldr	r1, [r7, #4]
20000eb8:	001a      	movs	r2, r3
20000eba:	0052      	lsls	r2, r2, #1
20000ebc:	18d2      	adds	r2, r2, r3
20000ebe:	00d3      	lsls	r3, r2, #3
20000ec0:	001a      	movs	r2, r3
20000ec2:	000b      	movs	r3, r1
20000ec4:	011b      	lsls	r3, r3, #4
20000ec6:	1a5b      	subs	r3, r3, r1
20000ec8:	00db      	lsls	r3, r3, #3
20000eca:	18d3      	adds	r3, r2, r3
20000ecc:	18c3      	adds	r3, r0, r3
20000ece:	330c      	adds	r3, #12
20000ed0:	681b      	ldr	r3, [r3, #0]
20000ed2:	2b00      	cmp	r3, #0
20000ed4:	d000      	beq.n	20000ed8 <open_pos+0x30>
20000ed6:	e10b      	b.n	200010f0 <open_pos+0x248>
		return;
	
	if(board[x][y].opened && (count_bomb_or_flag(x,y, is_bomb_ptr) == count_bomb_or_flag(x,y,is_flag_ptr))) //open all connected positions
20000ed8:	4887      	ldr	r0, [pc, #540]	; (200010f8 <open_pos+0x250>)
20000eda:	683b      	ldr	r3, [r7, #0]
20000edc:	6879      	ldr	r1, [r7, #4]
20000ede:	001a      	movs	r2, r3
20000ee0:	0052      	lsls	r2, r2, #1
20000ee2:	18d2      	adds	r2, r2, r3
20000ee4:	00d3      	lsls	r3, r2, #3
20000ee6:	001a      	movs	r2, r3
20000ee8:	000b      	movs	r3, r1
20000eea:	011b      	lsls	r3, r3, #4
20000eec:	1a5b      	subs	r3, r3, r1
20000eee:	00db      	lsls	r3, r3, #3
20000ef0:	18d3      	adds	r3, r2, r3
20000ef2:	18c3      	adds	r3, r0, r3
20000ef4:	3314      	adds	r3, #20
20000ef6:	681b      	ldr	r3, [r3, #0]
20000ef8:	2b00      	cmp	r3, #0
20000efa:	d056      	beq.n	20000faa <open_pos+0x102>
20000efc:	4b7f      	ldr	r3, [pc, #508]	; (200010fc <open_pos+0x254>)
20000efe:	681a      	ldr	r2, [r3, #0]
20000f00:	6839      	ldr	r1, [r7, #0]
20000f02:	687b      	ldr	r3, [r7, #4]
20000f04:	0018      	movs	r0, r3
20000f06:	f000 f8fd 	bl	20001104 <count_bomb_or_flag>
20000f0a:	0004      	movs	r4, r0
20000f0c:	4b7c      	ldr	r3, [pc, #496]	; (20001100 <open_pos+0x258>)
20000f0e:	681a      	ldr	r2, [r3, #0]
20000f10:	6839      	ldr	r1, [r7, #0]
20000f12:	687b      	ldr	r3, [r7, #4]
20000f14:	0018      	movs	r0, r3
20000f16:	f000 f8f5 	bl	20001104 <count_bomb_or_flag>
20000f1a:	0003      	movs	r3, r0
20000f1c:	429c      	cmp	r4, r3
20000f1e:	d144      	bne.n	20000faa <open_pos+0x102>
	{
		for(int i = -1; i<= 1; i++)
20000f20:	2301      	movs	r3, #1
20000f22:	425b      	negs	r3, r3
20000f24:	61fb      	str	r3, [r7, #28]
20000f26:	e03c      	b.n	20000fa2 <open_pos+0xfa>
			for(int j = -1; j <= 1; j++)
20000f28:	2301      	movs	r3, #1
20000f2a:	425b      	negs	r3, r3
20000f2c:	61bb      	str	r3, [r7, #24]
20000f2e:	e032      	b.n	20000f96 <open_pos+0xee>
				if(board[x+i][y+j].opened == 0 && valid_pos(x+i, y+j) && !(i == 0 && j == 0))
20000f30:	687a      	ldr	r2, [r7, #4]
20000f32:	69fb      	ldr	r3, [r7, #28]
20000f34:	18d1      	adds	r1, r2, r3
20000f36:	683a      	ldr	r2, [r7, #0]
20000f38:	69bb      	ldr	r3, [r7, #24]
20000f3a:	18d3      	adds	r3, r2, r3
20000f3c:	486e      	ldr	r0, [pc, #440]	; (200010f8 <open_pos+0x250>)
20000f3e:	001a      	movs	r2, r3
20000f40:	0052      	lsls	r2, r2, #1
20000f42:	18d2      	adds	r2, r2, r3
20000f44:	00d3      	lsls	r3, r2, #3
20000f46:	001a      	movs	r2, r3
20000f48:	000b      	movs	r3, r1
20000f4a:	011b      	lsls	r3, r3, #4
20000f4c:	1a5b      	subs	r3, r3, r1
20000f4e:	00db      	lsls	r3, r3, #3
20000f50:	18d3      	adds	r3, r2, r3
20000f52:	18c3      	adds	r3, r0, r3
20000f54:	3314      	adds	r3, #20
20000f56:	681b      	ldr	r3, [r3, #0]
20000f58:	2b00      	cmp	r3, #0
20000f5a:	d119      	bne.n	20000f90 <open_pos+0xe8>
20000f5c:	687a      	ldr	r2, [r7, #4]
20000f5e:	69fb      	ldr	r3, [r7, #28]
20000f60:	18d0      	adds	r0, r2, r3
20000f62:	683a      	ldr	r2, [r7, #0]
20000f64:	69bb      	ldr	r3, [r7, #24]
20000f66:	18d3      	adds	r3, r2, r3
20000f68:	0019      	movs	r1, r3
20000f6a:	f000 fa71 	bl	20001450 <valid_pos>
20000f6e:	1e03      	subs	r3, r0, #0
20000f70:	d00e      	beq.n	20000f90 <open_pos+0xe8>
20000f72:	69fb      	ldr	r3, [r7, #28]
20000f74:	2b00      	cmp	r3, #0
20000f76:	d102      	bne.n	20000f7e <open_pos+0xd6>
20000f78:	69bb      	ldr	r3, [r7, #24]
20000f7a:	2b00      	cmp	r3, #0
20000f7c:	d008      	beq.n	20000f90 <open_pos+0xe8>
				{
					open_pos(x+i, y+j);
20000f7e:	687a      	ldr	r2, [r7, #4]
20000f80:	69fb      	ldr	r3, [r7, #28]
20000f82:	18d0      	adds	r0, r2, r3
20000f84:	683a      	ldr	r2, [r7, #0]
20000f86:	69bb      	ldr	r3, [r7, #24]
20000f88:	18d3      	adds	r3, r2, r3
20000f8a:	0019      	movs	r1, r3
20000f8c:	f7ff ff8c 	bl	20000ea8 <open_pos>
			for(int j = -1; j <= 1; j++)
20000f90:	69bb      	ldr	r3, [r7, #24]
20000f92:	3301      	adds	r3, #1
20000f94:	61bb      	str	r3, [r7, #24]
20000f96:	69bb      	ldr	r3, [r7, #24]
20000f98:	2b01      	cmp	r3, #1
20000f9a:	ddc9      	ble.n	20000f30 <open_pos+0x88>
		for(int i = -1; i<= 1; i++)
20000f9c:	69fb      	ldr	r3, [r7, #28]
20000f9e:	3301      	adds	r3, #1
20000fa0:	61fb      	str	r3, [r7, #28]
20000fa2:	69fb      	ldr	r3, [r7, #28]
20000fa4:	2b01      	cmp	r3, #1
20000fa6:	ddbf      	ble.n	20000f28 <open_pos+0x80>
				}
		return;
20000fa8:	e0a3      	b.n	200010f2 <open_pos+0x24a>
	}
	int nBombs = count_bomb_or_flag(x, y,is_bomb_ptr);
20000faa:	4b54      	ldr	r3, [pc, #336]	; (200010fc <open_pos+0x254>)
20000fac:	681a      	ldr	r2, [r3, #0]
20000fae:	6839      	ldr	r1, [r7, #0]
20000fb0:	687b      	ldr	r3, [r7, #4]
20000fb2:	0018      	movs	r0, r3
20000fb4:	f000 f8a6 	bl	20001104 <count_bomb_or_flag>
20000fb8:	0003      	movs	r3, r0
20000fba:	60fb      	str	r3, [r7, #12]
	if(board[x][y].bomb)
20000fbc:	484e      	ldr	r0, [pc, #312]	; (200010f8 <open_pos+0x250>)
20000fbe:	683b      	ldr	r3, [r7, #0]
20000fc0:	6879      	ldr	r1, [r7, #4]
20000fc2:	001a      	movs	r2, r3
20000fc4:	0052      	lsls	r2, r2, #1
20000fc6:	18d2      	adds	r2, r2, r3
20000fc8:	00d3      	lsls	r3, r2, #3
20000fca:	001a      	movs	r2, r3
20000fcc:	000b      	movs	r3, r1
20000fce:	011b      	lsls	r3, r3, #4
20000fd0:	1a5b      	subs	r3, r3, r1
20000fd2:	00db      	lsls	r3, r3, #3
20000fd4:	18d3      	adds	r3, r2, r3
20000fd6:	18c3      	adds	r3, r0, r3
20000fd8:	3310      	adds	r3, #16
20000fda:	681b      	ldr	r3, [r3, #0]
20000fdc:	2b00      	cmp	r3, #0
20000fde:	d002      	beq.n	20000fe6 <open_pos+0x13e>
	{
		game_over();
20000fe0:	f7ff ff56 	bl	20000e90 <game_over>
		return;
20000fe4:	e085      	b.n	200010f2 <open_pos+0x24a>
	}
	board[x][y].opened = 1;
20000fe6:	4844      	ldr	r0, [pc, #272]	; (200010f8 <open_pos+0x250>)
20000fe8:	683b      	ldr	r3, [r7, #0]
20000fea:	6879      	ldr	r1, [r7, #4]
20000fec:	001a      	movs	r2, r3
20000fee:	0052      	lsls	r2, r2, #1
20000ff0:	18d2      	adds	r2, r2, r3
20000ff2:	00d3      	lsls	r3, r2, #3
20000ff4:	001a      	movs	r2, r3
20000ff6:	000b      	movs	r3, r1
20000ff8:	011b      	lsls	r3, r3, #4
20000ffa:	1a5b      	subs	r3, r3, r1
20000ffc:	00db      	lsls	r3, r3, #3
20000ffe:	18d3      	adds	r3, r2, r3
20001000:	18c3      	adds	r3, r0, r3
20001002:	3314      	adds	r3, #20
20001004:	2201      	movs	r2, #1
20001006:	601a      	str	r2, [r3, #0]
	draw_pos(board[x][y]);
20001008:	4c3b      	ldr	r4, [pc, #236]	; (200010f8 <open_pos+0x250>)
2000100a:	683b      	ldr	r3, [r7, #0]
2000100c:	6879      	ldr	r1, [r7, #4]
2000100e:	001a      	movs	r2, r3
20001010:	0052      	lsls	r2, r2, #1
20001012:	18d2      	adds	r2, r2, r3
20001014:	00d3      	lsls	r3, r2, #3
20001016:	001a      	movs	r2, r3
20001018:	000b      	movs	r3, r1
2000101a:	011b      	lsls	r3, r3, #4
2000101c:	1a5b      	subs	r3, r3, r1
2000101e:	00db      	lsls	r3, r3, #3
20001020:	18d3      	adds	r3, r2, r3
20001022:	2110      	movs	r1, #16
20001024:	18e2      	adds	r2, r4, r3
20001026:	1851      	adds	r1, r2, r1
20001028:	466a      	mov	r2, sp
2000102a:	c921      	ldmia	r1!, {r0, r5}
2000102c:	c221      	stmia	r2!, {r0, r5}
2000102e:	5918      	ldr	r0, [r3, r4]
20001030:	18e2      	adds	r2, r4, r3
20001032:	6851      	ldr	r1, [r2, #4]
20001034:	18e2      	adds	r2, r4, r3
20001036:	6892      	ldr	r2, [r2, #8]
20001038:	18e3      	adds	r3, r4, r3
2000103a:	68db      	ldr	r3, [r3, #12]
2000103c:	f000 fa22 	bl	20001484 <draw_pos>
	if(nBombs == 0)
20001040:	68fb      	ldr	r3, [r7, #12]
20001042:	2b00      	cmp	r3, #0
20001044:	d155      	bne.n	200010f2 <open_pos+0x24a>
		for(int i = -1; i <= 1; i++)
20001046:	2301      	movs	r3, #1
20001048:	425b      	negs	r3, r3
2000104a:	617b      	str	r3, [r7, #20]
2000104c:	e04c      	b.n	200010e8 <open_pos+0x240>
			for(int j = -1; j <= 1; j++)
2000104e:	2301      	movs	r3, #1
20001050:	425b      	negs	r3, r3
20001052:	613b      	str	r3, [r7, #16]
20001054:	e042      	b.n	200010dc <open_pos+0x234>
				if(valid_pos(x+i, y+j) && board[x+i][y+j].opened == 0 && board[x+i][y+j].bomb == 0)
20001056:	687a      	ldr	r2, [r7, #4]
20001058:	697b      	ldr	r3, [r7, #20]
2000105a:	18d0      	adds	r0, r2, r3
2000105c:	683a      	ldr	r2, [r7, #0]
2000105e:	693b      	ldr	r3, [r7, #16]
20001060:	18d3      	adds	r3, r2, r3
20001062:	0019      	movs	r1, r3
20001064:	f000 f9f4 	bl	20001450 <valid_pos>
20001068:	1e03      	subs	r3, r0, #0
2000106a:	d034      	beq.n	200010d6 <open_pos+0x22e>
2000106c:	687a      	ldr	r2, [r7, #4]
2000106e:	697b      	ldr	r3, [r7, #20]
20001070:	18d1      	adds	r1, r2, r3
20001072:	683a      	ldr	r2, [r7, #0]
20001074:	693b      	ldr	r3, [r7, #16]
20001076:	18d3      	adds	r3, r2, r3
20001078:	481f      	ldr	r0, [pc, #124]	; (200010f8 <open_pos+0x250>)
2000107a:	001a      	movs	r2, r3
2000107c:	0052      	lsls	r2, r2, #1
2000107e:	18d2      	adds	r2, r2, r3
20001080:	00d3      	lsls	r3, r2, #3
20001082:	001a      	movs	r2, r3
20001084:	000b      	movs	r3, r1
20001086:	011b      	lsls	r3, r3, #4
20001088:	1a5b      	subs	r3, r3, r1
2000108a:	00db      	lsls	r3, r3, #3
2000108c:	18d3      	adds	r3, r2, r3
2000108e:	18c3      	adds	r3, r0, r3
20001090:	3314      	adds	r3, #20
20001092:	681b      	ldr	r3, [r3, #0]
20001094:	2b00      	cmp	r3, #0
20001096:	d11e      	bne.n	200010d6 <open_pos+0x22e>
20001098:	687a      	ldr	r2, [r7, #4]
2000109a:	697b      	ldr	r3, [r7, #20]
2000109c:	18d1      	adds	r1, r2, r3
2000109e:	683a      	ldr	r2, [r7, #0]
200010a0:	693b      	ldr	r3, [r7, #16]
200010a2:	18d3      	adds	r3, r2, r3
200010a4:	4814      	ldr	r0, [pc, #80]	; (200010f8 <open_pos+0x250>)
200010a6:	001a      	movs	r2, r3
200010a8:	0052      	lsls	r2, r2, #1
200010aa:	18d2      	adds	r2, r2, r3
200010ac:	00d3      	lsls	r3, r2, #3
200010ae:	001a      	movs	r2, r3
200010b0:	000b      	movs	r3, r1
200010b2:	011b      	lsls	r3, r3, #4
200010b4:	1a5b      	subs	r3, r3, r1
200010b6:	00db      	lsls	r3, r3, #3
200010b8:	18d3      	adds	r3, r2, r3
200010ba:	18c3      	adds	r3, r0, r3
200010bc:	3310      	adds	r3, #16
200010be:	681b      	ldr	r3, [r3, #0]
200010c0:	2b00      	cmp	r3, #0
200010c2:	d108      	bne.n	200010d6 <open_pos+0x22e>
				{
					//Sleep(10);
					open_pos(x+i, y+j);
200010c4:	687a      	ldr	r2, [r7, #4]
200010c6:	697b      	ldr	r3, [r7, #20]
200010c8:	18d0      	adds	r0, r2, r3
200010ca:	683a      	ldr	r2, [r7, #0]
200010cc:	693b      	ldr	r3, [r7, #16]
200010ce:	18d3      	adds	r3, r2, r3
200010d0:	0019      	movs	r1, r3
200010d2:	f7ff fee9 	bl	20000ea8 <open_pos>
			for(int j = -1; j <= 1; j++)
200010d6:	693b      	ldr	r3, [r7, #16]
200010d8:	3301      	adds	r3, #1
200010da:	613b      	str	r3, [r7, #16]
200010dc:	693b      	ldr	r3, [r7, #16]
200010de:	2b01      	cmp	r3, #1
200010e0:	ddb9      	ble.n	20001056 <open_pos+0x1ae>
		for(int i = -1; i <= 1; i++)
200010e2:	697b      	ldr	r3, [r7, #20]
200010e4:	3301      	adds	r3, #1
200010e6:	617b      	str	r3, [r7, #20]
200010e8:	697b      	ldr	r3, [r7, #20]
200010ea:	2b01      	cmp	r3, #1
200010ec:	ddaf      	ble.n	2000104e <open_pos+0x1a6>
200010ee:	e000      	b.n	200010f2 <open_pos+0x24a>
		return;
200010f0:	46c0      	nop			; (mov r8, r8)
				}

}
200010f2:	46bd      	mov	sp, r7
200010f4:	b008      	add	sp, #32
200010f6:	bdb0      	pop	{r4, r5, r7, pc}
200010f8:	20001ed0 	ldrdcs	r1, [r0], -r0
200010fc:	20002650 	andcs	r2, r0, r0, asr r6
20001100:	20001ec4 	andcs	r1, r0, r4, asr #29

20001104 <count_bomb_or_flag>:
int count_bomb_or_flag(int x, int y, int (*func)(struct Positions))
{
20001104:	b5b0      	push	{r4, r5, r7, lr}
20001106:	b08a      	sub	sp, #40	; 0x28
20001108:	af02      	add	r7, sp, #8
2000110a:	60f8      	str	r0, [r7, #12]
2000110c:	60b9      	str	r1, [r7, #8]
2000110e:	607a      	str	r2, [r7, #4]
	int found = 0;
20001110:	2300      	movs	r3, #0
20001112:	61fb      	str	r3, [r7, #28]
	for(int i = -1; i <= 1; i++)
20001114:	2301      	movs	r3, #1
20001116:	425b      	negs	r3, r3
20001118:	61bb      	str	r3, [r7, #24]
2000111a:	e043      	b.n	200011a4 <count_bomb_or_flag+0xa0>
		for(int j = -1; j <= 1; j++)
2000111c:	2301      	movs	r3, #1
2000111e:	425b      	negs	r3, r3
20001120:	617b      	str	r3, [r7, #20]
20001122:	e039      	b.n	20001198 <count_bomb_or_flag+0x94>
			if(valid_pos(x+i, y+j))
20001124:	68fa      	ldr	r2, [r7, #12]
20001126:	69bb      	ldr	r3, [r7, #24]
20001128:	18d0      	adds	r0, r2, r3
2000112a:	68ba      	ldr	r2, [r7, #8]
2000112c:	697b      	ldr	r3, [r7, #20]
2000112e:	18d3      	adds	r3, r2, r3
20001130:	0019      	movs	r1, r3
20001132:	f000 f98d 	bl	20001450 <valid_pos>
20001136:	1e03      	subs	r3, r0, #0
20001138:	d02b      	beq.n	20001192 <count_bomb_or_flag+0x8e>
				if(func(board[x+i][y+j]) == 1 && !(i == 0 && j == 0))
2000113a:	68fa      	ldr	r2, [r7, #12]
2000113c:	69bb      	ldr	r3, [r7, #24]
2000113e:	18d1      	adds	r1, r2, r3
20001140:	68ba      	ldr	r2, [r7, #8]
20001142:	697b      	ldr	r3, [r7, #20]
20001144:	18d3      	adds	r3, r2, r3
20001146:	4c1b      	ldr	r4, [pc, #108]	; (200011b4 <count_bomb_or_flag+0xb0>)
20001148:	001a      	movs	r2, r3
2000114a:	0052      	lsls	r2, r2, #1
2000114c:	18d2      	adds	r2, r2, r3
2000114e:	00d3      	lsls	r3, r2, #3
20001150:	001a      	movs	r2, r3
20001152:	000b      	movs	r3, r1
20001154:	011b      	lsls	r3, r3, #4
20001156:	1a5b      	subs	r3, r3, r1
20001158:	00db      	lsls	r3, r3, #3
2000115a:	18d3      	adds	r3, r2, r3
2000115c:	2110      	movs	r1, #16
2000115e:	18e2      	adds	r2, r4, r3
20001160:	1851      	adds	r1, r2, r1
20001162:	466a      	mov	r2, sp
20001164:	c921      	ldmia	r1!, {r0, r5}
20001166:	c221      	stmia	r2!, {r0, r5}
20001168:	5918      	ldr	r0, [r3, r4]
2000116a:	18e2      	adds	r2, r4, r3
2000116c:	6851      	ldr	r1, [r2, #4]
2000116e:	18e2      	adds	r2, r4, r3
20001170:	6892      	ldr	r2, [r2, #8]
20001172:	18e3      	adds	r3, r4, r3
20001174:	68db      	ldr	r3, [r3, #12]
20001176:	687c      	ldr	r4, [r7, #4]
20001178:	47a0      	blx	r4
2000117a:	0003      	movs	r3, r0
2000117c:	2b01      	cmp	r3, #1
2000117e:	d108      	bne.n	20001192 <count_bomb_or_flag+0x8e>
20001180:	69bb      	ldr	r3, [r7, #24]
20001182:	2b00      	cmp	r3, #0
20001184:	d102      	bne.n	2000118c <count_bomb_or_flag+0x88>
20001186:	697b      	ldr	r3, [r7, #20]
20001188:	2b00      	cmp	r3, #0
2000118a:	d002      	beq.n	20001192 <count_bomb_or_flag+0x8e>
					found++;
2000118c:	69fb      	ldr	r3, [r7, #28]
2000118e:	3301      	adds	r3, #1
20001190:	61fb      	str	r3, [r7, #28]
		for(int j = -1; j <= 1; j++)
20001192:	697b      	ldr	r3, [r7, #20]
20001194:	3301      	adds	r3, #1
20001196:	617b      	str	r3, [r7, #20]
20001198:	697b      	ldr	r3, [r7, #20]
2000119a:	2b01      	cmp	r3, #1
2000119c:	ddc2      	ble.n	20001124 <count_bomb_or_flag+0x20>
	for(int i = -1; i <= 1; i++)
2000119e:	69bb      	ldr	r3, [r7, #24]
200011a0:	3301      	adds	r3, #1
200011a2:	61bb      	str	r3, [r7, #24]
200011a4:	69bb      	ldr	r3, [r7, #24]
200011a6:	2b01      	cmp	r3, #1
200011a8:	ddb8      	ble.n	2000111c <count_bomb_or_flag+0x18>
	return found;
200011aa:	69fb      	ldr	r3, [r7, #28]
}
200011ac:	0018      	movs	r0, r3
200011ae:	46bd      	mov	sp, r7
200011b0:	b008      	add	sp, #32
200011b2:	bdb0      	pop	{r4, r5, r7, pc}
200011b4:	20001ed0 	ldrdcs	r1, [r0], -r0

200011b8 <is_bomb>:
int is_bomb(struct Positions pos)
{
200011b8:	b084      	sub	sp, #16
200011ba:	b5b0      	push	{r4, r5, r7, lr}
200011bc:	af00      	add	r7, sp, #0
200011be:	250c      	movs	r5, #12
200011c0:	1d3c      	adds	r4, r7, #4
200011c2:	1964      	adds	r4, r4, r5
200011c4:	6020      	str	r0, [r4, #0]
200011c6:	6061      	str	r1, [r4, #4]
200011c8:	60a2      	str	r2, [r4, #8]
200011ca:	60e3      	str	r3, [r4, #12]
	return pos.bomb;
200011cc:	1d3b      	adds	r3, r7, #4
200011ce:	195b      	adds	r3, r3, r5
200011d0:	691b      	ldr	r3, [r3, #16]
}
200011d2:	0018      	movs	r0, r3
200011d4:	46bd      	mov	sp, r7
200011d6:	bcb0      	pop	{r4, r5, r7}
200011d8:	bc08      	pop	{r3}
200011da:	b004      	add	sp, #16
200011dc:	4718      	bx	r3

200011de <is_flag>:
int is_flag(struct Positions pos)
{
200011de:	b084      	sub	sp, #16
200011e0:	b5b0      	push	{r4, r5, r7, lr}
200011e2:	af00      	add	r7, sp, #0
200011e4:	250c      	movs	r5, #12
200011e6:	1d3c      	adds	r4, r7, #4
200011e8:	1964      	adds	r4, r4, r5
200011ea:	6020      	str	r0, [r4, #0]
200011ec:	6061      	str	r1, [r4, #4]
200011ee:	60a2      	str	r2, [r4, #8]
200011f0:	60e3      	str	r3, [r4, #12]
	return pos.flagged;
200011f2:	1d3b      	adds	r3, r7, #4
200011f4:	195b      	adds	r3, r3, r5
200011f6:	68db      	ldr	r3, [r3, #12]
}
200011f8:	0018      	movs	r0, r3
200011fa:	46bd      	mov	sp, r7
200011fc:	bcb0      	pop	{r4, r5, r7}
200011fe:	bc08      	pop	{r3}
20001200:	b004      	add	sp, #16
20001202:	4718      	bx	r3

20001204 <print_player>:

void print_player(struct Player p)
{
20001204:	b580      	push	{r7, lr}
20001206:	b084      	sub	sp, #16
20001208:	af00      	add	r7, sp, #0
2000120a:	1d3b      	adds	r3, r7, #4
2000120c:	6018      	str	r0, [r3, #0]
2000120e:	6059      	str	r1, [r3, #4]
20001210:	609a      	str	r2, [r3, #8]
	gotoxy(STARTX + p.x, STARTY + p.y);
20001212:	1d3b      	adds	r3, r7, #4
20001214:	681a      	ldr	r2, [r3, #0]
20001216:	1d3b      	adds	r3, r7, #4
20001218:	685b      	ldr	r3, [r3, #4]
2000121a:	0019      	movs	r1, r3
2000121c:	0010      	movs	r0, r2
2000121e:	f000 fa3c 	bl	2000169a <gotoxy>
	print_to_gd(curr_x, curr_y, PLAYERCH);
20001222:	4b06      	ldr	r3, [pc, #24]	; (2000123c <print_player+0x38>)
20001224:	6818      	ldr	r0, [r3, #0]
20001226:	4b06      	ldr	r3, [pc, #24]	; (20001240 <print_player+0x3c>)
20001228:	681b      	ldr	r3, [r3, #0]
2000122a:	2224      	movs	r2, #36	; 0x24
2000122c:	0019      	movs	r1, r3
2000122e:	f7ff f89f 	bl	20000370 <print_to_gd>
}
20001232:	46c0      	nop			; (mov r8, r8)
20001234:	46bd      	mov	sp, r7
20001236:	b004      	add	sp, #16
20001238:	bd80      	pop	{r7, pc}
2000123a:	46c0      	nop			; (mov r8, r8)
2000123c:	20001ecc 	andcs	r1, r0, ip, asr #29
20001240:	20002670 	andcs	r2, r0, r0, ror r6

20001244 <move_player>:
struct Player move_player(struct Player p, char moveCh)
{
20001244:	b5b0      	push	{r4, r5, r7, lr}
20001246:	b08a      	sub	sp, #40	; 0x28
20001248:	af02      	add	r7, sp, #8
2000124a:	60f8      	str	r0, [r7, #12]
2000124c:	0038      	movs	r0, r7
2000124e:	6001      	str	r1, [r0, #0]
20001250:	6042      	str	r2, [r0, #4]
20001252:	6083      	str	r3, [r0, #8]
	//TODO: diagonal movement, kan göra i två steg för att fixa valid move problemet
	if(moveCh == 0x1 || moveCh == 0x3 || moveCh == 0x7 || moveCh == 0x9)
20001254:	2230      	movs	r2, #48	; 0x30
20001256:	18bb      	adds	r3, r7, r2
20001258:	781b      	ldrb	r3, [r3, #0]
2000125a:	2b01      	cmp	r3, #1
2000125c:	d00b      	beq.n	20001276 <move_player+0x32>
2000125e:	18bb      	adds	r3, r7, r2
20001260:	781b      	ldrb	r3, [r3, #0]
20001262:	2b03      	cmp	r3, #3
20001264:	d007      	beq.n	20001276 <move_player+0x32>
20001266:	18bb      	adds	r3, r7, r2
20001268:	781b      	ldrb	r3, [r3, #0]
2000126a:	2b07      	cmp	r3, #7
2000126c:	d003      	beq.n	20001276 <move_player+0x32>
2000126e:	18bb      	adds	r3, r7, r2
20001270:	781b      	ldrb	r3, [r3, #0]
20001272:	2b09      	cmp	r3, #9
20001274:	d10b      	bne.n	2000128e <move_player+0x4a>
		return move_player_diagonal(p, moveCh);
20001276:	68f8      	ldr	r0, [r7, #12]
20001278:	003b      	movs	r3, r7
2000127a:	2230      	movs	r2, #48	; 0x30
2000127c:	18ba      	adds	r2, r7, r2
2000127e:	7812      	ldrb	r2, [r2, #0]
20001280:	9200      	str	r2, [sp, #0]
20001282:	6819      	ldr	r1, [r3, #0]
20001284:	685a      	ldr	r2, [r3, #4]
20001286:	689b      	ldr	r3, [r3, #8]
20001288:	f000 f84c 	bl	20001324 <move_player_diagonal>
2000128c:	e044      	b.n	20001318 <move_player+0xd4>
		
	draw_pos(board[p.x][p.y]);
2000128e:	003b      	movs	r3, r7
20001290:	6819      	ldr	r1, [r3, #0]
20001292:	003b      	movs	r3, r7
20001294:	685b      	ldr	r3, [r3, #4]
20001296:	4c22      	ldr	r4, [pc, #136]	; (20001320 <move_player+0xdc>)
20001298:	001a      	movs	r2, r3
2000129a:	0052      	lsls	r2, r2, #1
2000129c:	18d2      	adds	r2, r2, r3
2000129e:	00d3      	lsls	r3, r2, #3
200012a0:	001a      	movs	r2, r3
200012a2:	000b      	movs	r3, r1
200012a4:	011b      	lsls	r3, r3, #4
200012a6:	1a5b      	subs	r3, r3, r1
200012a8:	00db      	lsls	r3, r3, #3
200012aa:	18d3      	adds	r3, r2, r3
200012ac:	2110      	movs	r1, #16
200012ae:	18e2      	adds	r2, r4, r3
200012b0:	1851      	adds	r1, r2, r1
200012b2:	466a      	mov	r2, sp
200012b4:	c921      	ldmia	r1!, {r0, r5}
200012b6:	c221      	stmia	r2!, {r0, r5}
200012b8:	5918      	ldr	r0, [r3, r4]
200012ba:	18e2      	adds	r2, r4, r3
200012bc:	6851      	ldr	r1, [r2, #4]
200012be:	18e2      	adds	r2, r4, r3
200012c0:	6892      	ldr	r2, [r2, #8]
200012c2:	18e3      	adds	r3, r4, r3
200012c4:	68db      	ldr	r3, [r3, #12]
200012c6:	f000 f8dd 	bl	20001484 <draw_pos>
	int *newXY;
	newXY = get_new_xy_from_ch(moveCh);
200012ca:	2330      	movs	r3, #48	; 0x30
200012cc:	18fb      	adds	r3, r7, r3
200012ce:	781b      	ldrb	r3, [r3, #0]
200012d0:	0018      	movs	r0, r3
200012d2:	f000 f923 	bl	2000151c <get_new_xy_from_ch>
200012d6:	0003      	movs	r3, r0
200012d8:	61fb      	str	r3, [r7, #28]
	//TODO:
	//check if valid move
	int nextX = p.x + *newXY;
200012da:	003b      	movs	r3, r7
200012dc:	681a      	ldr	r2, [r3, #0]
200012de:	69fb      	ldr	r3, [r7, #28]
200012e0:	681b      	ldr	r3, [r3, #0]
200012e2:	18d3      	adds	r3, r2, r3
200012e4:	61bb      	str	r3, [r7, #24]
	int nextY = p.y + *(newXY +1);
200012e6:	003b      	movs	r3, r7
200012e8:	685a      	ldr	r2, [r3, #4]
200012ea:	69fb      	ldr	r3, [r7, #28]
200012ec:	3304      	adds	r3, #4
200012ee:	681b      	ldr	r3, [r3, #0]
200012f0:	18d3      	adds	r3, r2, r3
200012f2:	617b      	str	r3, [r7, #20]
	if(valid_pos(nextX, nextY))
200012f4:	697a      	ldr	r2, [r7, #20]
200012f6:	69bb      	ldr	r3, [r7, #24]
200012f8:	0011      	movs	r1, r2
200012fa:	0018      	movs	r0, r3
200012fc:	f000 f8a8 	bl	20001450 <valid_pos>
20001300:	1e03      	subs	r3, r0, #0
20001302:	d005      	beq.n	20001310 <move_player+0xcc>
	{
		p.x = nextX;
20001304:	003b      	movs	r3, r7
20001306:	69ba      	ldr	r2, [r7, #24]
20001308:	601a      	str	r2, [r3, #0]
		p.y = nextY;
2000130a:	003b      	movs	r3, r7
2000130c:	697a      	ldr	r2, [r7, #20]
2000130e:	605a      	str	r2, [r3, #4]
	}
	return p;
20001310:	68fb      	ldr	r3, [r7, #12]
20001312:	003a      	movs	r2, r7
20001314:	ca13      	ldmia	r2!, {r0, r1, r4}
20001316:	c313      	stmia	r3!, {r0, r1, r4}
}
20001318:	68f8      	ldr	r0, [r7, #12]
2000131a:	46bd      	mov	sp, r7
2000131c:	b008      	add	sp, #32
2000131e:	bdb0      	pop	{r4, r5, r7, pc}
20001320:	20001ed0 	ldrdcs	r1, [r0], -r0

20001324 <move_player_diagonal>:
struct Player move_player_diagonal(struct Player p, char moveCh)
{
20001324:	b5b0      	push	{r4, r5, r7, lr}
20001326:	b08a      	sub	sp, #40	; 0x28
20001328:	af02      	add	r7, sp, #8
2000132a:	61f8      	str	r0, [r7, #28]
2000132c:	2010      	movs	r0, #16
2000132e:	1838      	adds	r0, r7, r0
20001330:	6001      	str	r1, [r0, #0]
20001332:	6042      	str	r2, [r0, #4]
20001334:	6083      	str	r3, [r0, #8]
	switch(moveCh)
20001336:	2330      	movs	r3, #48	; 0x30
20001338:	18fb      	adds	r3, r7, r3
2000133a:	781b      	ldrb	r3, [r3, #0]
2000133c:	2b09      	cmp	r3, #9
2000133e:	d060      	beq.n	20001402 <move_player_diagonal+0xde>
20001340:	dd00      	ble.n	20001344 <move_player_diagonal+0x20>
20001342:	e07c      	b.n	2000143e <move_player_diagonal+0x11a>
20001344:	2b07      	cmp	r3, #7
20001346:	d03e      	beq.n	200013c6 <move_player_diagonal+0xa2>
20001348:	dd00      	ble.n	2000134c <move_player_diagonal+0x28>
2000134a:	e078      	b.n	2000143e <move_player_diagonal+0x11a>
2000134c:	2b01      	cmp	r3, #1
2000134e:	d002      	beq.n	20001356 <move_player_diagonal+0x32>
20001350:	2b03      	cmp	r3, #3
20001352:	d01a      	beq.n	2000138a <move_player_diagonal+0x66>
20001354:	e073      	b.n	2000143e <move_player_diagonal+0x11a>
	{
		case 0x1: // upp and left
		 p = move_player(p, 0x4); // left
20001356:	2410      	movs	r4, #16
20001358:	1938      	adds	r0, r7, r4
2000135a:	193b      	adds	r3, r7, r4
2000135c:	2204      	movs	r2, #4
2000135e:	9200      	str	r2, [sp, #0]
20001360:	6819      	ldr	r1, [r3, #0]
20001362:	685a      	ldr	r2, [r3, #4]
20001364:	689b      	ldr	r3, [r3, #8]
20001366:	f7ff ff6d 	bl	20001244 <move_player>
		 p = move_player(p, 0x2); // upp
2000136a:	0023      	movs	r3, r4
2000136c:	18fc      	adds	r4, r7, r3
2000136e:	0038      	movs	r0, r7
20001370:	18fb      	adds	r3, r7, r3
20001372:	2202      	movs	r2, #2
20001374:	9200      	str	r2, [sp, #0]
20001376:	6819      	ldr	r1, [r3, #0]
20001378:	685a      	ldr	r2, [r3, #4]
2000137a:	689b      	ldr	r3, [r3, #8]
2000137c:	f7ff ff62 	bl	20001244 <move_player>
20001380:	003a      	movs	r2, r7
20001382:	0023      	movs	r3, r4
20001384:	ca13      	ldmia	r2!, {r0, r1, r4}
20001386:	c313      	stmia	r3!, {r0, r1, r4}
		 break;
20001388:	e059      	b.n	2000143e <move_player_diagonal+0x11a>
		case 0x3: // upp and right
		 p = move_player(p, 0x6); // right
2000138a:	2510      	movs	r5, #16
2000138c:	197c      	adds	r4, r7, r5
2000138e:	0038      	movs	r0, r7
20001390:	197b      	adds	r3, r7, r5
20001392:	2206      	movs	r2, #6
20001394:	9200      	str	r2, [sp, #0]
20001396:	6819      	ldr	r1, [r3, #0]
20001398:	685a      	ldr	r2, [r3, #4]
2000139a:	689b      	ldr	r3, [r3, #8]
2000139c:	f7ff ff52 	bl	20001244 <move_player>
200013a0:	003a      	movs	r2, r7
200013a2:	0023      	movs	r3, r4
200013a4:	ca13      	ldmia	r2!, {r0, r1, r4}
200013a6:	c313      	stmia	r3!, {r0, r1, r4}
		 p = move_player(p, 0x2); // upp
200013a8:	197c      	adds	r4, r7, r5
200013aa:	0038      	movs	r0, r7
200013ac:	197b      	adds	r3, r7, r5
200013ae:	2202      	movs	r2, #2
200013b0:	9200      	str	r2, [sp, #0]
200013b2:	6819      	ldr	r1, [r3, #0]
200013b4:	685a      	ldr	r2, [r3, #4]
200013b6:	689b      	ldr	r3, [r3, #8]
200013b8:	f7ff ff44 	bl	20001244 <move_player>
200013bc:	003a      	movs	r2, r7
200013be:	0023      	movs	r3, r4
200013c0:	ca13      	ldmia	r2!, {r0, r1, r4}
200013c2:	c313      	stmia	r3!, {r0, r1, r4}
		 break;
200013c4:	e03b      	b.n	2000143e <move_player_diagonal+0x11a>
		case 0x7: // down and right
		 p = move_player(p, 0x8); // down
200013c6:	2510      	movs	r5, #16
200013c8:	197c      	adds	r4, r7, r5
200013ca:	0038      	movs	r0, r7
200013cc:	197b      	adds	r3, r7, r5
200013ce:	2208      	movs	r2, #8
200013d0:	9200      	str	r2, [sp, #0]
200013d2:	6819      	ldr	r1, [r3, #0]
200013d4:	685a      	ldr	r2, [r3, #4]
200013d6:	689b      	ldr	r3, [r3, #8]
200013d8:	f7ff ff34 	bl	20001244 <move_player>
200013dc:	003a      	movs	r2, r7
200013de:	0023      	movs	r3, r4
200013e0:	ca13      	ldmia	r2!, {r0, r1, r4}
200013e2:	c313      	stmia	r3!, {r0, r1, r4}
		 p = move_player(p, 0x4); // left
200013e4:	197c      	adds	r4, r7, r5
200013e6:	0038      	movs	r0, r7
200013e8:	197b      	adds	r3, r7, r5
200013ea:	2204      	movs	r2, #4
200013ec:	9200      	str	r2, [sp, #0]
200013ee:	6819      	ldr	r1, [r3, #0]
200013f0:	685a      	ldr	r2, [r3, #4]
200013f2:	689b      	ldr	r3, [r3, #8]
200013f4:	f7ff ff26 	bl	20001244 <move_player>
200013f8:	003a      	movs	r2, r7
200013fa:	0023      	movs	r3, r4
200013fc:	ca13      	ldmia	r2!, {r0, r1, r4}
200013fe:	c313      	stmia	r3!, {r0, r1, r4}
		 break;
20001400:	e01d      	b.n	2000143e <move_player_diagonal+0x11a>
		case 0x9: // down and right
		 p = move_player(p, 0x8); // down
20001402:	2510      	movs	r5, #16
20001404:	197c      	adds	r4, r7, r5
20001406:	0038      	movs	r0, r7
20001408:	197b      	adds	r3, r7, r5
2000140a:	2208      	movs	r2, #8
2000140c:	9200      	str	r2, [sp, #0]
2000140e:	6819      	ldr	r1, [r3, #0]
20001410:	685a      	ldr	r2, [r3, #4]
20001412:	689b      	ldr	r3, [r3, #8]
20001414:	f7ff ff16 	bl	20001244 <move_player>
20001418:	003a      	movs	r2, r7
2000141a:	0023      	movs	r3, r4
2000141c:	ca13      	ldmia	r2!, {r0, r1, r4}
2000141e:	c313      	stmia	r3!, {r0, r1, r4}
		 p = move_player(p, 0x6); // right
20001420:	197c      	adds	r4, r7, r5
20001422:	0038      	movs	r0, r7
20001424:	197b      	adds	r3, r7, r5
20001426:	2206      	movs	r2, #6
20001428:	9200      	str	r2, [sp, #0]
2000142a:	6819      	ldr	r1, [r3, #0]
2000142c:	685a      	ldr	r2, [r3, #4]
2000142e:	689b      	ldr	r3, [r3, #8]
20001430:	f7ff ff08 	bl	20001244 <move_player>
20001434:	003a      	movs	r2, r7
20001436:	0023      	movs	r3, r4
20001438:	ca13      	ldmia	r2!, {r0, r1, r4}
2000143a:	c313      	stmia	r3!, {r0, r1, r4}
		 break;
2000143c:	46c0      	nop			; (mov r8, r8)
	}
	return p;
2000143e:	69fb      	ldr	r3, [r7, #28]
20001440:	2210      	movs	r2, #16
20001442:	18ba      	adds	r2, r7, r2
20001444:	ca13      	ldmia	r2!, {r0, r1, r4}
20001446:	c313      	stmia	r3!, {r0, r1, r4}
}
20001448:	69f8      	ldr	r0, [r7, #28]
2000144a:	46bd      	mov	sp, r7
2000144c:	b008      	add	sp, #32
2000144e:	bdb0      	pop	{r4, r5, r7, pc}

20001450 <valid_pos>:


int valid_pos(int x, int y)
{
20001450:	b580      	push	{r7, lr}
20001452:	b082      	sub	sp, #8
20001454:	af00      	add	r7, sp, #0
20001456:	6078      	str	r0, [r7, #4]
20001458:	6039      	str	r1, [r7, #0]
	if(x < 0 || x >= SIZEX)
2000145a:	687b      	ldr	r3, [r7, #4]
2000145c:	2b00      	cmp	r3, #0
2000145e:	db02      	blt.n	20001466 <valid_pos+0x16>
20001460:	687b      	ldr	r3, [r7, #4]
20001462:	2b0f      	cmp	r3, #15
20001464:	dd01      	ble.n	2000146a <valid_pos+0x1a>
		return 0;
20001466:	2300      	movs	r3, #0
20001468:	e008      	b.n	2000147c <valid_pos+0x2c>
	else if(y < 0 || y >= SIZEY)
2000146a:	683b      	ldr	r3, [r7, #0]
2000146c:	2b00      	cmp	r3, #0
2000146e:	db02      	blt.n	20001476 <valid_pos+0x26>
20001470:	683b      	ldr	r3, [r7, #0]
20001472:	2b04      	cmp	r3, #4
20001474:	dd01      	ble.n	2000147a <valid_pos+0x2a>
		return 0;
20001476:	2300      	movs	r3, #0
20001478:	e000      	b.n	2000147c <valid_pos+0x2c>
	else
		return 1;
2000147a:	2301      	movs	r3, #1
}
2000147c:	0018      	movs	r0, r3
2000147e:	46bd      	mov	sp, r7
20001480:	b002      	add	sp, #8
20001482:	bd80      	pop	{r7, pc}

20001484 <draw_pos>:
void draw_pos(struct Positions p)
{
20001484:	b084      	sub	sp, #16
20001486:	b5b0      	push	{r4, r5, r7, lr}
20001488:	b084      	sub	sp, #16
2000148a:	af00      	add	r7, sp, #0
2000148c:	2520      	movs	r5, #32
2000148e:	197c      	adds	r4, r7, r5
20001490:	6020      	str	r0, [r4, #0]
20001492:	6061      	str	r1, [r4, #4]
20001494:	60a2      	str	r2, [r4, #8]
20001496:	60e3      	str	r3, [r4, #12]
	gotoxy(STARTX + p.x, STARTY + p.y);
20001498:	002c      	movs	r4, r5
2000149a:	193b      	adds	r3, r7, r4
2000149c:	681a      	ldr	r2, [r3, #0]
2000149e:	193b      	adds	r3, r7, r4
200014a0:	685b      	ldr	r3, [r3, #4]
200014a2:	0019      	movs	r1, r3
200014a4:	0010      	movs	r0, r2
200014a6:	f000 f8f8 	bl	2000169a <gotoxy>
	if(p.opened)
200014aa:	193b      	adds	r3, r7, r4
200014ac:	695b      	ldr	r3, [r3, #20]
200014ae:	2b00      	cmp	r3, #0
200014b0:	d011      	beq.n	200014d6 <draw_pos+0x52>
	{
		char chs[] = {'0','1','2','3','4','5','6','7','8','9'};
200014b2:	1d3b      	adds	r3, r7, #4
200014b4:	4a16      	ldr	r2, [pc, #88]	; (20001510 <draw_pos+0x8c>)
200014b6:	ca03      	ldmia	r2!, {r0, r1}
200014b8:	c303      	stmia	r3!, {r0, r1}
200014ba:	8812      	ldrh	r2, [r2, #0]
200014bc:	801a      	strh	r2, [r3, #0]
		print_to_gd(curr_x, curr_y, chs[p.number_of_bombs]);
200014be:	4b15      	ldr	r3, [pc, #84]	; (20001514 <draw_pos+0x90>)
200014c0:	6818      	ldr	r0, [r3, #0]
200014c2:	4b15      	ldr	r3, [pc, #84]	; (20001518 <draw_pos+0x94>)
200014c4:	6819      	ldr	r1, [r3, #0]
200014c6:	193b      	adds	r3, r7, r4
200014c8:	689b      	ldr	r3, [r3, #8]
200014ca:	1d3a      	adds	r2, r7, #4
200014cc:	5cd3      	ldrb	r3, [r2, r3]
200014ce:	001a      	movs	r2, r3
200014d0:	f7fe ff4e 	bl	20000370 <print_to_gd>
		print_to_gd(curr_x, curr_y, FLAGCH);
	}
	else
		print_to_gd(curr_x, curr_y, ' ');
		
}
200014d4:	e015      	b.n	20001502 <draw_pos+0x7e>
	else if(p.flagged)
200014d6:	2320      	movs	r3, #32
200014d8:	18fb      	adds	r3, r7, r3
200014da:	68db      	ldr	r3, [r3, #12]
200014dc:	2b00      	cmp	r3, #0
200014de:	d008      	beq.n	200014f2 <draw_pos+0x6e>
		print_to_gd(curr_x, curr_y, FLAGCH);
200014e0:	4b0c      	ldr	r3, [pc, #48]	; (20001514 <draw_pos+0x90>)
200014e2:	6818      	ldr	r0, [r3, #0]
200014e4:	4b0c      	ldr	r3, [pc, #48]	; (20001518 <draw_pos+0x94>)
200014e6:	681b      	ldr	r3, [r3, #0]
200014e8:	225e      	movs	r2, #94	; 0x5e
200014ea:	0019      	movs	r1, r3
200014ec:	f7fe ff40 	bl	20000370 <print_to_gd>
}
200014f0:	e007      	b.n	20001502 <draw_pos+0x7e>
		print_to_gd(curr_x, curr_y, ' ');
200014f2:	4b08      	ldr	r3, [pc, #32]	; (20001514 <draw_pos+0x90>)
200014f4:	6818      	ldr	r0, [r3, #0]
200014f6:	4b08      	ldr	r3, [pc, #32]	; (20001518 <draw_pos+0x94>)
200014f8:	681b      	ldr	r3, [r3, #0]
200014fa:	2220      	movs	r2, #32
200014fc:	0019      	movs	r1, r3
200014fe:	f7fe ff37 	bl	20000370 <print_to_gd>
}
20001502:	46c0      	nop			; (mov r8, r8)
20001504:	46bd      	mov	sp, r7
20001506:	b004      	add	sp, #16
20001508:	bcb0      	pop	{r4, r5, r7}
2000150a:	bc08      	pop	{r3}
2000150c:	b004      	add	sp, #16
2000150e:	4718      	bx	r3
20001510:	20002b9c 	mulcs	r0, ip, fp
20001514:	20001ecc 	andcs	r1, r0, ip, asr #29
20001518:	20002670 	andcs	r2, r0, r0, ror r6

2000151c <get_new_xy_from_ch>:
int * get_new_xy_from_ch(char ch)
{
2000151c:	b580      	push	{r7, lr}
2000151e:	b082      	sub	sp, #8
20001520:	af00      	add	r7, sp, #0
20001522:	0002      	movs	r2, r0
20001524:	1dfb      	adds	r3, r7, #7
20001526:	701a      	strb	r2, [r3, #0]
	ch = tolower(ch);
20001528:	1dfb      	adds	r3, r7, #7
2000152a:	781b      	ldrb	r3, [r3, #0]
2000152c:	0018      	movs	r0, r3
2000152e:	f000 fca9 	bl	20001e84 <tolower>
20001532:	0002      	movs	r2, r0
20001534:	1dfb      	adds	r3, r7, #7
20001536:	701a      	strb	r2, [r3, #0]
	static int r[2];
	switch(ch)
20001538:	1dfb      	adds	r3, r7, #7
2000153a:	781b      	ldrb	r3, [r3, #0]
2000153c:	2b08      	cmp	r3, #8
2000153e:	d010      	beq.n	20001562 <get_new_xy_from_ch+0x46>
20001540:	dc25      	bgt.n	2000158e <get_new_xy_from_ch+0x72>
20001542:	2b06      	cmp	r3, #6
20001544:	d01c      	beq.n	20001580 <get_new_xy_from_ch+0x64>
20001546:	dc22      	bgt.n	2000158e <get_new_xy_from_ch+0x72>
20001548:	2b02      	cmp	r3, #2
2000154a:	d002      	beq.n	20001552 <get_new_xy_from_ch+0x36>
2000154c:	2b04      	cmp	r3, #4
2000154e:	d00f      	beq.n	20001570 <get_new_xy_from_ch+0x54>
20001550:	e01d      	b.n	2000158e <get_new_xy_from_ch+0x72>
	{
		case 0x2:
		 r[0] = 0;
20001552:	4b11      	ldr	r3, [pc, #68]	; (20001598 <get_new_xy_from_ch+0x7c>)
20001554:	2200      	movs	r2, #0
20001556:	601a      	str	r2, [r3, #0]
		 r[1] = -1;
20001558:	4b0f      	ldr	r3, [pc, #60]	; (20001598 <get_new_xy_from_ch+0x7c>)
2000155a:	2201      	movs	r2, #1
2000155c:	4252      	negs	r2, r2
2000155e:	605a      	str	r2, [r3, #4]
		 break;
20001560:	e015      	b.n	2000158e <get_new_xy_from_ch+0x72>
		case 0x8:
		 r[0] = 0;
20001562:	4b0d      	ldr	r3, [pc, #52]	; (20001598 <get_new_xy_from_ch+0x7c>)
20001564:	2200      	movs	r2, #0
20001566:	601a      	str	r2, [r3, #0]
		 r[1] = 1;
20001568:	4b0b      	ldr	r3, [pc, #44]	; (20001598 <get_new_xy_from_ch+0x7c>)
2000156a:	2201      	movs	r2, #1
2000156c:	605a      	str	r2, [r3, #4]
		 break;
2000156e:	e00e      	b.n	2000158e <get_new_xy_from_ch+0x72>
		case 0x4:
		 r[0] = -1;
20001570:	4b09      	ldr	r3, [pc, #36]	; (20001598 <get_new_xy_from_ch+0x7c>)
20001572:	2201      	movs	r2, #1
20001574:	4252      	negs	r2, r2
20001576:	601a      	str	r2, [r3, #0]
		 r[1] = 0;
20001578:	4b07      	ldr	r3, [pc, #28]	; (20001598 <get_new_xy_from_ch+0x7c>)
2000157a:	2200      	movs	r2, #0
2000157c:	605a      	str	r2, [r3, #4]
		 break;
2000157e:	e006      	b.n	2000158e <get_new_xy_from_ch+0x72>
		case 0x6:
		 r[0] = 1;
20001580:	4b05      	ldr	r3, [pc, #20]	; (20001598 <get_new_xy_from_ch+0x7c>)
20001582:	2201      	movs	r2, #1
20001584:	601a      	str	r2, [r3, #0]
		 r[1] = 0;
20001586:	4b04      	ldr	r3, [pc, #16]	; (20001598 <get_new_xy_from_ch+0x7c>)
20001588:	2200      	movs	r2, #0
2000158a:	605a      	str	r2, [r3, #4]
		 break;
2000158c:	46c0      	nop			; (mov r8, r8)
	}
	return r;
2000158e:	4b02      	ldr	r3, [pc, #8]	; (20001598 <get_new_xy_from_ch+0x7c>)
}
20001590:	0018      	movs	r0, r3
20001592:	46bd      	mov	sp, r7
20001594:	b002      	add	sp, #8
20001596:	bd80      	pop	{r7, pc}
20001598:	20001ea8 	andcs	r1, r0, r8, lsr #29

2000159c <create_board>:

void create_board(struct Positions b[SIZEX][SIZEY])
{
2000159c:	b580      	push	{r7, lr}
2000159e:	b084      	sub	sp, #16
200015a0:	af00      	add	r7, sp, #0
200015a2:	6078      	str	r0, [r7, #4]
	for(int x = 0; x < SIZEX; x++)
200015a4:	2300      	movs	r3, #0
200015a6:	60fb      	str	r3, [r7, #12]
200015a8:	e06f      	b.n	2000168a <create_board+0xee>
	{
		for(int y = 0; y < SIZEY; y++) 
200015aa:	2300      	movs	r3, #0
200015ac:	60bb      	str	r3, [r7, #8]
200015ae:	e066      	b.n	2000167e <create_board+0xe2>
		{
			b[x][y].x = x;
200015b0:	68fa      	ldr	r2, [r7, #12]
200015b2:	0013      	movs	r3, r2
200015b4:	011b      	lsls	r3, r3, #4
200015b6:	1a9b      	subs	r3, r3, r2
200015b8:	00db      	lsls	r3, r3, #3
200015ba:	001a      	movs	r2, r3
200015bc:	687b      	ldr	r3, [r7, #4]
200015be:	1899      	adds	r1, r3, r2
200015c0:	68ba      	ldr	r2, [r7, #8]
200015c2:	0013      	movs	r3, r2
200015c4:	005b      	lsls	r3, r3, #1
200015c6:	189b      	adds	r3, r3, r2
200015c8:	00db      	lsls	r3, r3, #3
200015ca:	68fa      	ldr	r2, [r7, #12]
200015cc:	505a      	str	r2, [r3, r1]
			b[x][y].y = y;
200015ce:	68fa      	ldr	r2, [r7, #12]
200015d0:	0013      	movs	r3, r2
200015d2:	011b      	lsls	r3, r3, #4
200015d4:	1a9b      	subs	r3, r3, r2
200015d6:	00db      	lsls	r3, r3, #3
200015d8:	001a      	movs	r2, r3
200015da:	687b      	ldr	r3, [r7, #4]
200015dc:	1899      	adds	r1, r3, r2
200015de:	68ba      	ldr	r2, [r7, #8]
200015e0:	0013      	movs	r3, r2
200015e2:	005b      	lsls	r3, r3, #1
200015e4:	189b      	adds	r3, r3, r2
200015e6:	00db      	lsls	r3, r3, #3
200015e8:	18cb      	adds	r3, r1, r3
200015ea:	3304      	adds	r3, #4
200015ec:	68ba      	ldr	r2, [r7, #8]
200015ee:	601a      	str	r2, [r3, #0]
			b[x][y].number_of_bombs =  0;
200015f0:	68fa      	ldr	r2, [r7, #12]
200015f2:	0013      	movs	r3, r2
200015f4:	011b      	lsls	r3, r3, #4
200015f6:	1a9b      	subs	r3, r3, r2
200015f8:	00db      	lsls	r3, r3, #3
200015fa:	001a      	movs	r2, r3
200015fc:	687b      	ldr	r3, [r7, #4]
200015fe:	1899      	adds	r1, r3, r2
20001600:	68ba      	ldr	r2, [r7, #8]
20001602:	0013      	movs	r3, r2
20001604:	005b      	lsls	r3, r3, #1
20001606:	189b      	adds	r3, r3, r2
20001608:	00db      	lsls	r3, r3, #3
2000160a:	18cb      	adds	r3, r1, r3
2000160c:	3308      	adds	r3, #8
2000160e:	2200      	movs	r2, #0
20001610:	601a      	str	r2, [r3, #0]
			b[x][y].flagged = 0;
20001612:	68fa      	ldr	r2, [r7, #12]
20001614:	0013      	movs	r3, r2
20001616:	011b      	lsls	r3, r3, #4
20001618:	1a9b      	subs	r3, r3, r2
2000161a:	00db      	lsls	r3, r3, #3
2000161c:	001a      	movs	r2, r3
2000161e:	687b      	ldr	r3, [r7, #4]
20001620:	1899      	adds	r1, r3, r2
20001622:	68ba      	ldr	r2, [r7, #8]
20001624:	0013      	movs	r3, r2
20001626:	005b      	lsls	r3, r3, #1
20001628:	189b      	adds	r3, r3, r2
2000162a:	00db      	lsls	r3, r3, #3
2000162c:	18cb      	adds	r3, r1, r3
2000162e:	330c      	adds	r3, #12
20001630:	2200      	movs	r2, #0
20001632:	601a      	str	r2, [r3, #0]
			b[x][y].opened = 0;
20001634:	68fa      	ldr	r2, [r7, #12]
20001636:	0013      	movs	r3, r2
20001638:	011b      	lsls	r3, r3, #4
2000163a:	1a9b      	subs	r3, r3, r2
2000163c:	00db      	lsls	r3, r3, #3
2000163e:	001a      	movs	r2, r3
20001640:	687b      	ldr	r3, [r7, #4]
20001642:	1899      	adds	r1, r3, r2
20001644:	68ba      	ldr	r2, [r7, #8]
20001646:	0013      	movs	r3, r2
20001648:	005b      	lsls	r3, r3, #1
2000164a:	189b      	adds	r3, r3, r2
2000164c:	00db      	lsls	r3, r3, #3
2000164e:	18cb      	adds	r3, r1, r3
20001650:	3314      	adds	r3, #20
20001652:	2200      	movs	r2, #0
20001654:	601a      	str	r2, [r3, #0]
			b[x][y].bomb = 0;
20001656:	68fa      	ldr	r2, [r7, #12]
20001658:	0013      	movs	r3, r2
2000165a:	011b      	lsls	r3, r3, #4
2000165c:	1a9b      	subs	r3, r3, r2
2000165e:	00db      	lsls	r3, r3, #3
20001660:	001a      	movs	r2, r3
20001662:	687b      	ldr	r3, [r7, #4]
20001664:	1899      	adds	r1, r3, r2
20001666:	68ba      	ldr	r2, [r7, #8]
20001668:	0013      	movs	r3, r2
2000166a:	005b      	lsls	r3, r3, #1
2000166c:	189b      	adds	r3, r3, r2
2000166e:	00db      	lsls	r3, r3, #3
20001670:	18cb      	adds	r3, r1, r3
20001672:	3310      	adds	r3, #16
20001674:	2200      	movs	r2, #0
20001676:	601a      	str	r2, [r3, #0]
		for(int y = 0; y < SIZEY; y++) 
20001678:	68bb      	ldr	r3, [r7, #8]
2000167a:	3301      	adds	r3, #1
2000167c:	60bb      	str	r3, [r7, #8]
2000167e:	68bb      	ldr	r3, [r7, #8]
20001680:	2b04      	cmp	r3, #4
20001682:	dd95      	ble.n	200015b0 <create_board+0x14>
	for(int x = 0; x < SIZEX; x++)
20001684:	68fb      	ldr	r3, [r7, #12]
20001686:	3301      	adds	r3, #1
20001688:	60fb      	str	r3, [r7, #12]
2000168a:	68fb      	ldr	r3, [r7, #12]
2000168c:	2b0f      	cmp	r3, #15
2000168e:	dd8c      	ble.n	200015aa <create_board+0xe>
		} 
	}
}
20001690:	46c0      	nop			; (mov r8, r8)
20001692:	46c0      	nop			; (mov r8, r8)
20001694:	46bd      	mov	sp, r7
20001696:	b004      	add	sp, #16
20001698:	bd80      	pop	{r7, pc}

2000169a <gotoxy>:


void gotoxy(int x, int y)
{
2000169a:	b580      	push	{r7, lr}
2000169c:	b082      	sub	sp, #8
2000169e:	af00      	add	r7, sp, #0
200016a0:	6078      	str	r0, [r7, #4]
200016a2:	6039      	str	r1, [r7, #0]
  curr_x = x;
200016a4:	4b04      	ldr	r3, [pc, #16]	; (200016b8 <gotoxy+0x1e>)
200016a6:	687a      	ldr	r2, [r7, #4]
200016a8:	601a      	str	r2, [r3, #0]
  curr_y = y;
200016aa:	4b04      	ldr	r3, [pc, #16]	; (200016bc <gotoxy+0x22>)
200016ac:	683a      	ldr	r2, [r7, #0]
200016ae:	601a      	str	r2, [r3, #0]
}
200016b0:	46c0      	nop			; (mov r8, r8)
200016b2:	46bd      	mov	sp, r7
200016b4:	b002      	add	sp, #8
200016b6:	bd80      	pop	{r7, pc}
200016b8:	20001ecc 	andcs	r1, r0, ip, asr #29
200016bc:	20002670 	andcs	r2, r0, r0, ror r6

200016c0 <init_keypad>:
unsigned char current_state = INITSTATE;

static volatile GPIO * port;

void init_keypad(GPIO * p)
{
200016c0:	b580      	push	{r7, lr}
200016c2:	b082      	sub	sp, #8
200016c4:	af00      	add	r7, sp, #0
200016c6:	6078      	str	r0, [r7, #4]
	port = p;
200016c8:	4b0a      	ldr	r3, [pc, #40]	; (200016f4 <init_keypad+0x34>)
200016ca:	687a      	ldr	r2, [r7, #4]
200016cc:	601a      	str	r2, [r3, #0]
	port->moder = 0x55000000; //*GPIO_MODER = 0x55000000;
200016ce:	4b09      	ldr	r3, [pc, #36]	; (200016f4 <init_keypad+0x34>)
200016d0:	681b      	ldr	r3, [r3, #0]
200016d2:	22aa      	movs	r2, #170	; 0xaa
200016d4:	05d2      	lsls	r2, r2, #23
200016d6:	601a      	str	r2, [r3, #0]
	port->otyper = 0xFFAA0000; // *GPIO_OTYPER = 0xFFAA0000;
200016d8:	4b06      	ldr	r3, [pc, #24]	; (200016f4 <init_keypad+0x34>)
200016da:	681b      	ldr	r3, [r3, #0]
200016dc:	4a06      	ldr	r2, [pc, #24]	; (200016f8 <init_keypad+0x38>)
200016de:	605a      	str	r2, [r3, #4]
	port->pupdr = 0x0F0000; //	*GPIO_PUPDR = 0x0F0000;
200016e0:	4b04      	ldr	r3, [pc, #16]	; (200016f4 <init_keypad+0x34>)
200016e2:	681b      	ldr	r3, [r3, #0]
200016e4:	22f0      	movs	r2, #240	; 0xf0
200016e6:	0312      	lsls	r2, r2, #12
200016e8:	60da      	str	r2, [r3, #12]
}
200016ea:	46c0      	nop			; (mov r8, r8)
200016ec:	46bd      	mov	sp, r7
200016ee:	b002      	add	sp, #8
200016f0:	bd80      	pop	{r7, pc}
200016f2:	46c0      	nop			; (mov r8, r8)
200016f4:	20001eb4 			; <UNDEFINED> instruction: 0x20001eb4
200016f8:	ffaa0000 			; <UNDEFINED> instruction: 0xffaa0000

200016fc <readKey>:

unsigned char readKey(void)
{
200016fc:	b590      	push	{r4, r7, lr}
200016fe:	b087      	sub	sp, #28
20001700:	af00      	add	r7, sp, #0
	unsigned char keyValue[] = {1,2,3,0xA,4,5,6,0xB,7,8,9,0xC,0xE,0,0xF,0xD};
20001702:	003b      	movs	r3, r7
20001704:	4a16      	ldr	r2, [pc, #88]	; (20001760 <readKey+0x64>)
20001706:	ca13      	ldmia	r2!, {r0, r1, r4}
20001708:	c313      	stmia	r3!, {r0, r1, r4}
2000170a:	6812      	ldr	r2, [r2, #0]
2000170c:	601a      	str	r2, [r3, #0]
	for(int row = 0; row< 4; row++)
2000170e:	2300      	movs	r3, #0
20001710:	617b      	str	r3, [r7, #20]
20001712:	e019      	b.n	20001748 <readKey+0x4c>
	{
		activateRow(row+1);
20001714:	697b      	ldr	r3, [r7, #20]
20001716:	3301      	adds	r3, #1
20001718:	0018      	movs	r0, r3
2000171a:	f000 f853 	bl	200017c4 <activateRow>
		int col = readColumn();
2000171e:	f000 f885 	bl	2000182c <readColumn>
20001722:	0003      	movs	r3, r0
20001724:	613b      	str	r3, [r7, #16]
		if(col != 0)
20001726:	693b      	ldr	r3, [r7, #16]
20001728:	2b00      	cmp	r3, #0
2000172a:	d00a      	beq.n	20001742 <readKey+0x46>
		{
			activateRow(0);
2000172c:	2000      	movs	r0, #0
2000172e:	f000 f849 	bl	200017c4 <activateRow>
			return keyValue[row*4 + (col-1)];
20001732:	697b      	ldr	r3, [r7, #20]
20001734:	009a      	lsls	r2, r3, #2
20001736:	693b      	ldr	r3, [r7, #16]
20001738:	3b01      	subs	r3, #1
2000173a:	18d3      	adds	r3, r2, r3
2000173c:	003a      	movs	r2, r7
2000173e:	5cd3      	ldrb	r3, [r2, r3]
20001740:	e009      	b.n	20001756 <readKey+0x5a>
	for(int row = 0; row< 4; row++)
20001742:	697b      	ldr	r3, [r7, #20]
20001744:	3301      	adds	r3, #1
20001746:	617b      	str	r3, [r7, #20]
20001748:	697b      	ldr	r3, [r7, #20]
2000174a:	2b03      	cmp	r3, #3
2000174c:	dde2      	ble.n	20001714 <readKey+0x18>
		}
	}
	activateRow(0);
2000174e:	2000      	movs	r0, #0
20001750:	f000 f838 	bl	200017c4 <activateRow>
	return NOKEYRETURN;
20001754:	23ff      	movs	r3, #255	; 0xff
}
20001756:	0018      	movs	r0, r3
20001758:	46bd      	mov	sp, r7
2000175a:	b007      	add	sp, #28
2000175c:	bd90      	pop	{r4, r7, pc}
2000175e:	46c0      	nop			; (mov r8, r8)
20001760:	20002ba8 	andcs	r2, r0, r8, lsr #23

20001764 <keyb_enhanced>:

unsigned char keyb_enhanced(void)
{
20001764:	b590      	push	{r4, r7, lr}
20001766:	b083      	sub	sp, #12
20001768:	af00      	add	r7, sp, #0
	if(current_state == WAITSTATE)
2000176a:	4b14      	ldr	r3, [pc, #80]	; (200017bc <keyb_enhanced+0x58>)
2000176c:	781b      	ldrb	r3, [r3, #0]
2000176e:	2b01      	cmp	r3, #1
20001770:	d10d      	bne.n	2000178e <keyb_enhanced+0x2a>
	{
		activateRow(5);
20001772:	2005      	movs	r0, #5
20001774:	f000 f826 	bl	200017c4 <activateRow>
		if(port->idrHigh == 0)//if(*GPIO_IDR_HIGH == 0)
20001778:	4b11      	ldr	r3, [pc, #68]	; (200017c0 <keyb_enhanced+0x5c>)
2000177a:	681b      	ldr	r3, [r3, #0]
2000177c:	7c5b      	ldrb	r3, [r3, #17]
2000177e:	b2db      	uxtb	r3, r3
20001780:	2b00      	cmp	r3, #0
20001782:	d102      	bne.n	2000178a <keyb_enhanced+0x26>
		{ current_state = INITSTATE; }
20001784:	4b0d      	ldr	r3, [pc, #52]	; (200017bc <keyb_enhanced+0x58>)
20001786:	2200      	movs	r2, #0
20001788:	701a      	strb	r2, [r3, #0]
		return SAMEKEYRETURN;
2000178a:	23fe      	movs	r3, #254	; 0xfe
2000178c:	e012      	b.n	200017b4 <keyb_enhanced+0x50>
	}
	if(current_state == INITSTATE)
2000178e:	4b0b      	ldr	r3, [pc, #44]	; (200017bc <keyb_enhanced+0x58>)
20001790:	781b      	ldrb	r3, [r3, #0]
20001792:	2b00      	cmp	r3, #0
20001794:	d10e      	bne.n	200017b4 <keyb_enhanced+0x50>
	{
		unsigned char c = readKey();
20001796:	1dfc      	adds	r4, r7, #7
20001798:	f7ff ffb0 	bl	200016fc <readKey>
2000179c:	0003      	movs	r3, r0
2000179e:	7023      	strb	r3, [r4, #0]
		if(c != NOKEYRETURN)
200017a0:	1dfb      	adds	r3, r7, #7
200017a2:	781b      	ldrb	r3, [r3, #0]
200017a4:	2bff      	cmp	r3, #255	; 0xff
200017a6:	d002      	beq.n	200017ae <keyb_enhanced+0x4a>
			current_state = WAITSTATE;
200017a8:	4b04      	ldr	r3, [pc, #16]	; (200017bc <keyb_enhanced+0x58>)
200017aa:	2201      	movs	r2, #1
200017ac:	701a      	strb	r2, [r3, #0]
		return c;
200017ae:	1dfb      	adds	r3, r7, #7
200017b0:	781b      	ldrb	r3, [r3, #0]
200017b2:	e7ff      	b.n	200017b4 <keyb_enhanced+0x50>
	}

}
200017b4:	0018      	movs	r0, r3
200017b6:	46bd      	mov	sp, r7
200017b8:	b003      	add	sp, #12
200017ba:	bd90      	pop	{r4, r7, pc}
200017bc:	20001eb0 			; <UNDEFINED> instruction: 0x20001eb0
200017c0:	20001eb4 			; <UNDEFINED> instruction: 0x20001eb4

200017c4 <activateRow>:

void activateRow(int row)
{ /* Aktivera angiven rad hos tangentbordet, eller
200017c4:	b580      	push	{r7, lr}
200017c6:	b082      	sub	sp, #8
200017c8:	af00      	add	r7, sp, #0
200017ca:	6078      	str	r0, [r7, #4]
200017cc:	687b      	ldr	r3, [r7, #4]
200017ce:	2b05      	cmp	r3, #5
200017d0:	d823      	bhi.n	2000181a <activateRow+0x56>
200017d2:	687b      	ldr	r3, [r7, #4]
200017d4:	009a      	lsls	r2, r3, #2
200017d6:	4b13      	ldr	r3, [pc, #76]	; (20001824 <activateRow+0x60>)
200017d8:	18d3      	adds	r3, r2, r3
200017da:	681b      	ldr	r3, [r3, #0]
200017dc:	469f      	mov	pc, r3
* deaktivera samtliga */
	switch( row )
	{
		//port.odrHigh
		case 1: port->odrHigh = 0x10; break;
200017de:	4b12      	ldr	r3, [pc, #72]	; (20001828 <activateRow+0x64>)
200017e0:	681b      	ldr	r3, [r3, #0]
200017e2:	2210      	movs	r2, #16
200017e4:	755a      	strb	r2, [r3, #21]
200017e6:	e018      	b.n	2000181a <activateRow+0x56>
		case 2: port->odrHigh = 0x20; break;
200017e8:	4b0f      	ldr	r3, [pc, #60]	; (20001828 <activateRow+0x64>)
200017ea:	681b      	ldr	r3, [r3, #0]
200017ec:	2220      	movs	r2, #32
200017ee:	755a      	strb	r2, [r3, #21]
200017f0:	e013      	b.n	2000181a <activateRow+0x56>
		case 3: port->odrHigh = 0x40; break;
200017f2:	4b0d      	ldr	r3, [pc, #52]	; (20001828 <activateRow+0x64>)
200017f4:	681b      	ldr	r3, [r3, #0]
200017f6:	2240      	movs	r2, #64	; 0x40
200017f8:	755a      	strb	r2, [r3, #21]
200017fa:	e00e      	b.n	2000181a <activateRow+0x56>
		case 4: port->odrHigh = 0x80; break;
200017fc:	4b0a      	ldr	r3, [pc, #40]	; (20001828 <activateRow+0x64>)
200017fe:	681b      	ldr	r3, [r3, #0]
20001800:	2280      	movs	r2, #128	; 0x80
20001802:	755a      	strb	r2, [r3, #21]
20001804:	e009      	b.n	2000181a <activateRow+0x56>
		case 5: port->odrHigh = 0xF0; break; 
20001806:	4b08      	ldr	r3, [pc, #32]	; (20001828 <activateRow+0x64>)
20001808:	681b      	ldr	r3, [r3, #0]
2000180a:	22f0      	movs	r2, #240	; 0xf0
2000180c:	755a      	strb	r2, [r3, #21]
2000180e:	e004      	b.n	2000181a <activateRow+0x56>
		case 0: port->odrHigh = 0x00; break;
20001810:	4b05      	ldr	r3, [pc, #20]	; (20001828 <activateRow+0x64>)
20001812:	681b      	ldr	r3, [r3, #0]
20001814:	2200      	movs	r2, #0
20001816:	755a      	strb	r2, [r3, #21]
20001818:	46c0      	nop			; (mov r8, r8)
	}
}
2000181a:	46c0      	nop			; (mov r8, r8)
2000181c:	46bd      	mov	sp, r7
2000181e:	b002      	add	sp, #8
20001820:	bd80      	pop	{r7, pc}
20001822:	46c0      	nop			; (mov r8, r8)
20001824:	20002bb8 			; <UNDEFINED> instruction: 0x20002bb8
20001828:	20001eb4 			; <UNDEFINED> instruction: 0x20001eb4

2000182c <readColumn>:
int readColumn(void)
{
2000182c:	b580      	push	{r7, lr}
2000182e:	b082      	sub	sp, #8
20001830:	af00      	add	r7, sp, #0
	/* Om någon tangent (i aktiverad rad)
	* är nedtryckt, returnera dess kolumnnummer,
	* annars, returnera 0 */
	unsigned char c;
	c = port->idrHigh; //*GPIO_IDR_HIGH;
20001832:	4b13      	ldr	r3, [pc, #76]	; (20001880 <readColumn+0x54>)
20001834:	681a      	ldr	r2, [r3, #0]
20001836:	1dfb      	adds	r3, r7, #7
20001838:	7c52      	ldrb	r2, [r2, #17]
2000183a:	701a      	strb	r2, [r3, #0]
	if (c & 0x8) return 4;
2000183c:	1dfb      	adds	r3, r7, #7
2000183e:	781b      	ldrb	r3, [r3, #0]
20001840:	2208      	movs	r2, #8
20001842:	4013      	ands	r3, r2
20001844:	d001      	beq.n	2000184a <readColumn+0x1e>
20001846:	2304      	movs	r3, #4
20001848:	e015      	b.n	20001876 <readColumn+0x4a>
	if (c & 0x4) return 3;
2000184a:	1dfb      	adds	r3, r7, #7
2000184c:	781b      	ldrb	r3, [r3, #0]
2000184e:	2204      	movs	r2, #4
20001850:	4013      	ands	r3, r2
20001852:	d001      	beq.n	20001858 <readColumn+0x2c>
20001854:	2303      	movs	r3, #3
20001856:	e00e      	b.n	20001876 <readColumn+0x4a>
	if (c & 0x2) return 2;
20001858:	1dfb      	adds	r3, r7, #7
2000185a:	781b      	ldrb	r3, [r3, #0]
2000185c:	2202      	movs	r2, #2
2000185e:	4013      	ands	r3, r2
20001860:	d001      	beq.n	20001866 <readColumn+0x3a>
20001862:	2302      	movs	r3, #2
20001864:	e007      	b.n	20001876 <readColumn+0x4a>
	if (c & 0x1) return 1;
20001866:	1dfb      	adds	r3, r7, #7
20001868:	781b      	ldrb	r3, [r3, #0]
2000186a:	2201      	movs	r2, #1
2000186c:	4013      	ands	r3, r2
2000186e:	d001      	beq.n	20001874 <readColumn+0x48>
20001870:	2301      	movs	r3, #1
20001872:	e000      	b.n	20001876 <readColumn+0x4a>
	return 0;
20001874:	2300      	movs	r3, #0
20001876:	0018      	movs	r0, r3
20001878:	46bd      	mov	sp, r7
2000187a:	b002      	add	sp, #8
2000187c:	bd80      	pop	{r7, pc}
2000187e:	46c0      	nop			; (mov r8, r8)
20001880:	20001eb4 			; <UNDEFINED> instruction: 0x20001eb4

20001884 <main>:
void init_app();
int contains(char * arr, char ch);


int main(void)
{   
20001884:	b5f0      	push	{r4, r5, r6, r7, lr}
20001886:	b08f      	sub	sp, #60	; 0x3c
20001888:	af02      	add	r7, sp, #8
	init_app();
2000188a:	f000 f8fd 	bl	20001a88 <init_app>
	
	running = 1;
2000188e:	4b78      	ldr	r3, [pc, #480]	; (20001a70 <main+0x1ec>)
20001890:	2201      	movs	r2, #1
20001892:	601a      	str	r2, [r3, #0]
	int game_started = 0;	
20001894:	2300      	movs	r3, #0
20001896:	627b      	str	r3, [r7, #36]	; 0x24
	struct Player p;
	char hit_ch;
	char last_key = 0;
20001898:	232e      	movs	r3, #46	; 0x2e
2000189a:	18fb      	adds	r3, r7, r3
2000189c:	2200      	movs	r2, #0
2000189e:	701a      	strb	r2, [r3, #0]
	int n_same_key = 0;
200018a0:	2300      	movs	r3, #0
200018a2:	617b      	str	r3, [r7, #20]
	int won = 0;
200018a4:	2300      	movs	r3, #0
200018a6:	62bb      	str	r3, [r7, #40]	; 0x28
	
	
	while(running)	// loop som körs hela tiden programmet är igånh
200018a8:	e0cf      	b.n	20001a4a <main+0x1c6>
	{
		set_running(1);
200018aa:	2001      	movs	r0, #1
200018ac:	f7fe fc3c 	bl	20000128 <set_running>
		reset_game(&game_started, &n_same_key, &p);
200018b0:	2318      	movs	r3, #24
200018b2:	18fa      	adds	r2, r7, r3
200018b4:	2314      	movs	r3, #20
200018b6:	18f9      	adds	r1, r7, r3
200018b8:	2324      	movs	r3, #36	; 0x24
200018ba:	18fb      	adds	r3, r7, r3
200018bc:	0018      	movs	r0, r3
200018be:	f7ff f8b9 	bl	20000a34 <reset_game>
		while(!gameover) // loop för varje spel
200018c2:	e0a4      	b.n	20001a0e <main+0x18a>
		{
			if(game_started)
200018c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200018c6:	2b00      	cmp	r3, #0
200018c8:	d007      	beq.n	200018da <main+0x56>
				print_timer(seconds, ticks);
200018ca:	4b6a      	ldr	r3, [pc, #424]	; (20001a74 <main+0x1f0>)
200018cc:	681a      	ldr	r2, [r3, #0]
200018ce:	4b6a      	ldr	r3, [pc, #424]	; (20001a78 <main+0x1f4>)
200018d0:	681b      	ldr	r3, [r3, #0]
200018d2:	0019      	movs	r1, r3
200018d4:	0010      	movs	r0, r2
200018d6:	f7fe fead 	bl	20000634 <print_timer>
			won = check_win();
200018da:	f7ff f921 	bl	20000b20 <check_win>
200018de:	0003      	movs	r3, r0
200018e0:	62bb      	str	r3, [r7, #40]	; 0x28
			hit_ch = keyb_enhanced();
200018e2:	252f      	movs	r5, #47	; 0x2f
200018e4:	197c      	adds	r4, r7, r5
200018e6:	f7ff ff3d 	bl	20001764 <keyb_enhanced>
200018ea:	0003      	movs	r3, r0
200018ec:	7023      	strb	r3, [r4, #0]
			if( hit_ch != NOKEYRETURN)
200018ee:	002a      	movs	r2, r5
200018f0:	18bb      	adds	r3, r7, r2
200018f2:	781b      	ldrb	r3, [r3, #0]
200018f4:	2bff      	cmp	r3, #255	; 0xff
200018f6:	d064      	beq.n	200019c2 <main+0x13e>
			{
				if(n_same_key >= SAMEKEYMAX) //ska vi ge samma input igen?
200018f8:	697b      	ldr	r3, [r7, #20]
200018fa:	2b13      	cmp	r3, #19
200018fc:	dd06      	ble.n	2000190c <main+0x88>
				{
					hit_ch = last_key;
200018fe:	18bb      	adds	r3, r7, r2
20001900:	222e      	movs	r2, #46	; 0x2e
20001902:	18ba      	adds	r2, r7, r2
20001904:	7812      	ldrb	r2, [r2, #0]
20001906:	701a      	strb	r2, [r3, #0]
					n_same_key = SAMEKEYMAX / 3;
20001908:	2306      	movs	r3, #6
2000190a:	617b      	str	r3, [r7, #20]
				}
				
				if(hit_ch != SAMEKEYRETURN)// vi har en ny knapp, spara i lastkey 
2000190c:	222f      	movs	r2, #47	; 0x2f
2000190e:	18bb      	adds	r3, r7, r2
20001910:	781b      	ldrb	r3, [r3, #0]
20001912:	2bfe      	cmp	r3, #254	; 0xfe
20001914:	d006      	beq.n	20001924 <main+0xa0>
				{
					last_key = hit_ch; 
20001916:	232e      	movs	r3, #46	; 0x2e
20001918:	18fb      	adds	r3, r7, r3
2000191a:	18ba      	adds	r2, r7, r2
2000191c:	7812      	ldrb	r2, [r2, #0]
2000191e:	701a      	strb	r2, [r3, #0]
					n_same_key = 0;
20001920:	2300      	movs	r3, #0
20001922:	617b      	str	r3, [r7, #20]
				}
				switch(hit_ch)
20001924:	232f      	movs	r3, #47	; 0x2f
20001926:	18fb      	adds	r3, r7, r3
20001928:	781b      	ldrb	r3, [r3, #0]
2000192a:	2b0a      	cmp	r3, #10
2000192c:	d002      	beq.n	20001934 <main+0xb0>
2000192e:	2b0b      	cmp	r3, #11
20001930:	d019      	beq.n	20001966 <main+0xe2>
20001932:	e025      	b.n	20001980 <main+0xfc>
				{
					case 0xA: // open
					if(!game_started)
20001934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001936:	2b00      	cmp	r3, #0
20001938:	d10b      	bne.n	20001952 <main+0xce>
					{
						make_first_open(p);
2000193a:	2318      	movs	r3, #24
2000193c:	18fb      	adds	r3, r7, r3
2000193e:	6818      	ldr	r0, [r3, #0]
20001940:	6859      	ldr	r1, [r3, #4]
20001942:	689a      	ldr	r2, [r3, #8]
20001944:	f7ff f9c0 	bl	20000cc8 <make_first_open>
						game_started = 1;
20001948:	2301      	movs	r3, #1
2000194a:	627b      	str	r3, [r7, #36]	; 0x24
						reset_timer(); // eftersom vi använder timer6 för att få randomtal när vi sätter ut bomberna 
2000194c:	f7fe fc10 	bl	20000170 <reset_timer>
					}				   // måste vi starta om den när vi öppnar
					else
						open_pos(p.x, p.y);
					break;
20001950:	e03a      	b.n	200019c8 <main+0x144>
						open_pos(p.x, p.y);
20001952:	2118      	movs	r1, #24
20001954:	187b      	adds	r3, r7, r1
20001956:	681a      	ldr	r2, [r3, #0]
20001958:	187b      	adds	r3, r7, r1
2000195a:	685b      	ldr	r3, [r3, #4]
2000195c:	0019      	movs	r1, r3
2000195e:	0010      	movs	r0, r2
20001960:	f7ff faa2 	bl	20000ea8 <open_pos>
					break;
20001964:	e030      	b.n	200019c8 <main+0x144>
					case 0xB: // place flag
					place_flag(&p);
20001966:	2418      	movs	r4, #24
20001968:	193b      	adds	r3, r7, r4
2000196a:	0018      	movs	r0, r3
2000196c:	f7ff fa06 	bl	20000d7c <place_flag>
					print_flags(BOMBS - p.placed_flaggs);
20001970:	193b      	adds	r3, r7, r4
20001972:	689b      	ldr	r3, [r3, #8]
20001974:	220a      	movs	r2, #10
20001976:	1ad3      	subs	r3, r2, r3
20001978:	0018      	movs	r0, r3
2000197a:	f7fe fe27 	bl	200005cc <print_flags>
					break;
2000197e:	e023      	b.n	200019c8 <main+0x144>
					default:	//move
					if(contains(move_keys, hit_ch))
20001980:	262f      	movs	r6, #47	; 0x2f
20001982:	19bb      	adds	r3, r7, r6
20001984:	781a      	ldrb	r2, [r3, #0]
20001986:	4b3d      	ldr	r3, [pc, #244]	; (20001a7c <main+0x1f8>)
20001988:	0011      	movs	r1, r2
2000198a:	0018      	movs	r0, r3
2000198c:	f000 f8de 	bl	20001b4c <contains>
20001990:	1e03      	subs	r3, r0, #0
20001992:	d018      	beq.n	200019c6 <main+0x142>
					{
						p = move_player(p, hit_ch);
20001994:	2518      	movs	r5, #24
20001996:	197c      	adds	r4, r7, r5
20001998:	0038      	movs	r0, r7
2000199a:	197b      	adds	r3, r7, r5
2000199c:	19ba      	adds	r2, r7, r6
2000199e:	7812      	ldrb	r2, [r2, #0]
200019a0:	9200      	str	r2, [sp, #0]
200019a2:	6819      	ldr	r1, [r3, #0]
200019a4:	685a      	ldr	r2, [r3, #4]
200019a6:	689b      	ldr	r3, [r3, #8]
200019a8:	f7ff fc4c 	bl	20001244 <move_player>
200019ac:	003a      	movs	r2, r7
200019ae:	0023      	movs	r3, r4
200019b0:	ca13      	ldmia	r2!, {r0, r1, r4}
200019b2:	c313      	stmia	r3!, {r0, r1, r4}
						print_player(p);
200019b4:	197b      	adds	r3, r7, r5
200019b6:	6818      	ldr	r0, [r3, #0]
200019b8:	6859      	ldr	r1, [r3, #4]
200019ba:	689a      	ldr	r2, [r3, #8]
200019bc:	f7ff fc22 	bl	20001204 <print_player>
					}
					break;
200019c0:	e001      	b.n	200019c6 <main+0x142>
				}
			}
200019c2:	46c0      	nop			; (mov r8, r8)
200019c4:	e000      	b.n	200019c8 <main+0x144>
					break;
200019c6:	46c0      	nop			; (mov r8, r8)
			if(hit_ch == NOKEYRETURN || !contains(move_keys, last_key)) // ingen knapp nedtryckt, samma i rad = 0
200019c8:	232f      	movs	r3, #47	; 0x2f
200019ca:	18fb      	adds	r3, r7, r3
200019cc:	781b      	ldrb	r3, [r3, #0]
200019ce:	2bff      	cmp	r3, #255	; 0xff
200019d0:	d009      	beq.n	200019e6 <main+0x162>
200019d2:	232e      	movs	r3, #46	; 0x2e
200019d4:	18fb      	adds	r3, r7, r3
200019d6:	781a      	ldrb	r2, [r3, #0]
200019d8:	4b28      	ldr	r3, [pc, #160]	; (20001a7c <main+0x1f8>)
200019da:	0011      	movs	r1, r2
200019dc:	0018      	movs	r0, r3
200019de:	f000 f8b5 	bl	20001b4c <contains>
200019e2:	1e03      	subs	r3, r0, #0
200019e4:	d101      	bne.n	200019ea <main+0x166>
					n_same_key = 0;
200019e6:	2300      	movs	r3, #0
200019e8:	617b      	str	r3, [r7, #20]
			if(hit_ch == SAMEKEYRETURN && contains(move_keys, last_key))
200019ea:	232f      	movs	r3, #47	; 0x2f
200019ec:	18fb      	adds	r3, r7, r3
200019ee:	781b      	ldrb	r3, [r3, #0]
200019f0:	2bfe      	cmp	r3, #254	; 0xfe
200019f2:	d10c      	bne.n	20001a0e <main+0x18a>
200019f4:	232e      	movs	r3, #46	; 0x2e
200019f6:	18fb      	adds	r3, r7, r3
200019f8:	781a      	ldrb	r2, [r3, #0]
200019fa:	4b20      	ldr	r3, [pc, #128]	; (20001a7c <main+0x1f8>)
200019fc:	0011      	movs	r1, r2
200019fe:	0018      	movs	r0, r3
20001a00:	f000 f8a4 	bl	20001b4c <contains>
20001a04:	1e03      	subs	r3, r0, #0
20001a06:	d002      	beq.n	20001a0e <main+0x18a>
				n_same_key++; 											// vi har samma knapp igen, och det är en "move" knapp, öka samma i rad
20001a08:	697b      	ldr	r3, [r7, #20]
20001a0a:	3301      	adds	r3, #1
20001a0c:	617b      	str	r3, [r7, #20]
		while(!gameover) // loop för varje spel
20001a0e:	4b1c      	ldr	r3, [pc, #112]	; (20001a80 <main+0x1fc>)
20001a10:	681b      	ldr	r3, [r3, #0]
20001a12:	2b00      	cmp	r3, #0
20001a14:	d100      	bne.n	20001a18 <main+0x194>
20001a16:	e755      	b.n	200018c4 <main+0x40>
		}
		print_win_loose_msg(won);
20001a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
20001a1a:	0018      	movs	r0, r3
20001a1c:	f7fe fdba 	bl	20000594 <print_win_loose_msg>
		toggle_timer_running();
20001a20:	f7fe fb6e 	bl	20000100 <toggle_timer_running>
		reset_timer();
20001a24:	f7fe fba4 	bl	20000170 <reset_timer>
		delay_milli(1000); // detta kan också behöva justeras för den riktiga hårdvaran...
20001a28:	23fa      	movs	r3, #250	; 0xfa
20001a2a:	009b      	lsls	r3, r3, #2
20001a2c:	0018      	movs	r0, r3
20001a2e:	f7fe ffee 	bl	20000a0e <delay_milli>
		running = play_again();
20001a32:	f000 f84b 	bl	20001acc <play_again>
20001a36:	0002      	movs	r2, r0
20001a38:	4b0d      	ldr	r3, [pc, #52]	; (20001a70 <main+0x1ec>)
20001a3a:	601a      	str	r2, [r3, #0]
		p.placed_flaggs = 0;
20001a3c:	2318      	movs	r3, #24
20001a3e:	18fb      	adds	r3, r7, r3
20001a40:	2200      	movs	r2, #0
20001a42:	609a      	str	r2, [r3, #8]
		gameover = 0;
20001a44:	4b0e      	ldr	r3, [pc, #56]	; (20001a80 <main+0x1fc>)
20001a46:	2200      	movs	r2, #0
20001a48:	601a      	str	r2, [r3, #0]
	while(running)	// loop som körs hela tiden programmet är igånh
20001a4a:	4b09      	ldr	r3, [pc, #36]	; (20001a70 <main+0x1ec>)
20001a4c:	681b      	ldr	r3, [r3, #0]
20001a4e:	2b00      	cmp	r3, #0
20001a50:	d000      	beq.n	20001a54 <main+0x1d0>
20001a52:	e72a      	b.n	200018aa <main+0x26>
	}
	ascii_gotoxy(1,1);
20001a54:	2101      	movs	r1, #1
20001a56:	2001      	movs	r0, #1
20001a58:	f7fe fe1a 	bl	20000690 <ascii_gotoxy>
	ascii_write_string("Well played! Bye :)           :");
20001a5c:	4b09      	ldr	r3, [pc, #36]	; (20001a84 <main+0x200>)
20001a5e:	0018      	movs	r0, r3
20001a60:	f7fe fe34 	bl	200006cc <ascii_write_string>
	return 0;
20001a64:	2300      	movs	r3, #0
}
20001a66:	0018      	movs	r0, r3
20001a68:	46bd      	mov	sp, r7
20001a6a:	b00d      	add	sp, #52	; 0x34
20001a6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
20001a6e:	46c0      	nop			; (mov r8, r8)
20001a70:	20001ec8 	andcs	r1, r0, r8, asr #29
20001a74:	20001eb8 			; <UNDEFINED> instruction: 0x20001eb8
20001a78:	20001ebc 			; <UNDEFINED> instruction: 0x20001ebc
20001a7c:	20002674 	andcs	r2, r0, r4, ror r6
20001a80:	2000266c 	andcs	r2, r0, ip, ror #12
20001a84:	20002bd0 	ldrdcs	r2, [r0], -r0

20001a88 <init_app>:

void init_app(void)
{
20001a88:	b580      	push	{r7, lr}
20001a8a:	af00      	add	r7, sp, #0
	init_keypad(&GPIO_D);
20001a8c:	4b0a      	ldr	r3, [pc, #40]	; (20001ab8 <init_app+0x30>)
20001a8e:	0018      	movs	r0, r3
20001a90:	f7ff fe16 	bl	200016c0 <init_keypad>
	*GPIO_E_MODER = 0x55555555; // setup för GD
20001a94:	4b09      	ldr	r3, [pc, #36]	; (20001abc <init_app+0x34>)
20001a96:	4a0a      	ldr	r2, [pc, #40]	; (20001ac0 <init_app+0x38>)
20001a98:	601a      	str	r2, [r3, #0]
	*SCB_VTOR = REALLOC;		
20001a9a:	4b0a      	ldr	r3, [pc, #40]	; (20001ac4 <init_app+0x3c>)
20001a9c:	4a0a      	ldr	r2, [pc, #40]	; (20001ac8 <init_app+0x40>)
20001a9e:	601a      	str	r2, [r3, #0]
	graphic_initialize();
20001aa0:	f7fe fd44 	bl	2000052c <graphic_initialize>
	sysTick_init();
20001aa4:	f7fe fbba 	bl	2000021c <sysTick_init>
	timer6_init();
20001aa8:	f7fe fab4 	bl	20000014 <timer6_init>
	ascii_init();
20001aac:	f7fe fdda 	bl	20000664 <ascii_init>
}
20001ab0:	46c0      	nop			; (mov r8, r8)
20001ab2:	46bd      	mov	sp, r7
20001ab4:	bd80      	pop	{r7, pc}
20001ab6:	46c0      	nop			; (mov r8, r8)
20001ab8:	40020c00 	andmi	r0, r2, r0, lsl #24
20001abc:	40021000 	andmi	r1, r2, r0
20001ac0:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab
20001ac4:	e000ed08 	and	lr, r0, r8, lsl #26
20001ac8:	2001c000 	andcs	ip, r1, r0

20001acc <play_again>:

int play_again()
{
20001acc:	b5b0      	push	{r4, r5, r7, lr}
20001ace:	b08e      	sub	sp, #56	; 0x38
20001ad0:	af00      	add	r7, sp, #0
	char upper[] = "Play again? yes -> D";
20001ad2:	2420      	movs	r4, #32
20001ad4:	193b      	adds	r3, r7, r4
20001ad6:	4a1b      	ldr	r2, [pc, #108]	; (20001b44 <play_again+0x78>)
20001ad8:	ca23      	ldmia	r2!, {r0, r1, r5}
20001ada:	c323      	stmia	r3!, {r0, r1, r5}
20001adc:	ca03      	ldmia	r2!, {r0, r1}
20001ade:	c303      	stmia	r3!, {r0, r1}
20001ae0:	7812      	ldrb	r2, [r2, #0]
20001ae2:	701a      	strb	r2, [r3, #0]
	char lower[] = "yes -> D, no -> anything";
20001ae4:	1d3b      	adds	r3, r7, #4
20001ae6:	4a18      	ldr	r2, [pc, #96]	; (20001b48 <play_again+0x7c>)
20001ae8:	ca23      	ldmia	r2!, {r0, r1, r5}
20001aea:	c323      	stmia	r3!, {r0, r1, r5}
20001aec:	ca23      	ldmia	r2!, {r0, r1, r5}
20001aee:	c323      	stmia	r3!, {r0, r1, r5}
20001af0:	7812      	ldrb	r2, [r2, #0]
20001af2:	701a      	strb	r2, [r3, #0]
	ascii_gotoxy(1,1);
20001af4:	2101      	movs	r1, #1
20001af6:	2001      	movs	r0, #1
20001af8:	f7fe fdca 	bl	20000690 <ascii_gotoxy>
	ascii_write_string(upper);
20001afc:	193b      	adds	r3, r7, r4
20001afe:	0018      	movs	r0, r3
20001b00:	f7fe fde4 	bl	200006cc <ascii_write_string>
	char hitch = 0xFF;
20001b04:	2337      	movs	r3, #55	; 0x37
20001b06:	18fb      	adds	r3, r7, r3
20001b08:	22ff      	movs	r2, #255	; 0xff
20001b0a:	701a      	strb	r2, [r3, #0]
	while(1)
	{
		hitch = keyb_enhanced();
20001b0c:	2537      	movs	r5, #55	; 0x37
20001b0e:	197c      	adds	r4, r7, r5
20001b10:	f7ff fe28 	bl	20001764 <keyb_enhanced>
20001b14:	0003      	movs	r3, r0
20001b16:	7023      	strb	r3, [r4, #0]
		if(hitch != SAMEKEYRETURN && hitch != NOKEYRETURN) // vänta på att man släppt upp efter man vann/förlorade
20001b18:	197b      	adds	r3, r7, r5
20001b1a:	781b      	ldrb	r3, [r3, #0]
20001b1c:	2bfe      	cmp	r3, #254	; 0xfe
20001b1e:	d0f5      	beq.n	20001b0c <play_again+0x40>
20001b20:	197b      	adds	r3, r7, r5
20001b22:	781b      	ldrb	r3, [r3, #0]
20001b24:	2bff      	cmp	r3, #255	; 0xff
20001b26:	d100      	bne.n	20001b2a <play_again+0x5e>
		hitch = keyb_enhanced();
20001b28:	e7f0      	b.n	20001b0c <play_again+0x40>
			break;
20001b2a:	46c0      	nop			; (mov r8, r8)
	}
	return hitch == 0xD;
20001b2c:	2337      	movs	r3, #55	; 0x37
20001b2e:	18fb      	adds	r3, r7, r3
20001b30:	781b      	ldrb	r3, [r3, #0]
20001b32:	3b0d      	subs	r3, #13
20001b34:	425a      	negs	r2, r3
20001b36:	4153      	adcs	r3, r2
20001b38:	b2db      	uxtb	r3, r3
	
}
20001b3a:	0018      	movs	r0, r3
20001b3c:	46bd      	mov	sp, r7
20001b3e:	b00e      	add	sp, #56	; 0x38
20001b40:	bdb0      	pop	{r4, r5, r7, pc}
20001b42:	46c0      	nop			; (mov r8, r8)
20001b44:	20002bf0 	strdcs	r2, [r0], -r0
20001b48:	20002c08 	andcs	r2, r0, r8, lsl #24

20001b4c <contains>:

int contains(char * arr, char ch)
{
20001b4c:	b580      	push	{r7, lr}
20001b4e:	b082      	sub	sp, #8
20001b50:	af00      	add	r7, sp, #0
20001b52:	6078      	str	r0, [r7, #4]
20001b54:	000a      	movs	r2, r1
20001b56:	1cfb      	adds	r3, r7, #3
20001b58:	701a      	strb	r2, [r3, #0]
	while(*arr != 0)
20001b5a:	e009      	b.n	20001b70 <contains+0x24>
		if(*arr++ == ch)
20001b5c:	687b      	ldr	r3, [r7, #4]
20001b5e:	1c5a      	adds	r2, r3, #1
20001b60:	607a      	str	r2, [r7, #4]
20001b62:	781b      	ldrb	r3, [r3, #0]
20001b64:	1cfa      	adds	r2, r7, #3
20001b66:	7812      	ldrb	r2, [r2, #0]
20001b68:	429a      	cmp	r2, r3
20001b6a:	d101      	bne.n	20001b70 <contains+0x24>
			return 1;
20001b6c:	2301      	movs	r3, #1
20001b6e:	e004      	b.n	20001b7a <contains+0x2e>
	while(*arr != 0)
20001b70:	687b      	ldr	r3, [r7, #4]
20001b72:	781b      	ldrb	r3, [r3, #0]
20001b74:	2b00      	cmp	r3, #0
20001b76:	d1f1      	bne.n	20001b5c <contains+0x10>
	return 0;
20001b78:	2300      	movs	r3, #0
20001b7a:	0018      	movs	r0, r3
20001b7c:	46bd      	mov	sp, r7
20001b7e:	b002      	add	sp, #8
20001b80:	bd80      	pop	{r7, pc}
20001b82:	46c0      	nop			; (mov r8, r8)

20001b84 <__udivsi3>:
20001b84:	2200      	movs	r2, #0
20001b86:	0843      	lsrs	r3, r0, #1
20001b88:	428b      	cmp	r3, r1
20001b8a:	d374      	bcc.n	20001c76 <__udivsi3+0xf2>
20001b8c:	0903      	lsrs	r3, r0, #4
20001b8e:	428b      	cmp	r3, r1
20001b90:	d35f      	bcc.n	20001c52 <__udivsi3+0xce>
20001b92:	0a03      	lsrs	r3, r0, #8
20001b94:	428b      	cmp	r3, r1
20001b96:	d344      	bcc.n	20001c22 <__udivsi3+0x9e>
20001b98:	0b03      	lsrs	r3, r0, #12
20001b9a:	428b      	cmp	r3, r1
20001b9c:	d328      	bcc.n	20001bf0 <__udivsi3+0x6c>
20001b9e:	0c03      	lsrs	r3, r0, #16
20001ba0:	428b      	cmp	r3, r1
20001ba2:	d30d      	bcc.n	20001bc0 <__udivsi3+0x3c>
20001ba4:	22ff      	movs	r2, #255	; 0xff
20001ba6:	0209      	lsls	r1, r1, #8
20001ba8:	ba12      	rev	r2, r2
20001baa:	0c03      	lsrs	r3, r0, #16
20001bac:	428b      	cmp	r3, r1
20001bae:	d302      	bcc.n	20001bb6 <__udivsi3+0x32>
20001bb0:	1212      	asrs	r2, r2, #8
20001bb2:	0209      	lsls	r1, r1, #8
20001bb4:	d065      	beq.n	20001c82 <__udivsi3+0xfe>
20001bb6:	0b03      	lsrs	r3, r0, #12
20001bb8:	428b      	cmp	r3, r1
20001bba:	d319      	bcc.n	20001bf0 <__udivsi3+0x6c>
20001bbc:	e000      	b.n	20001bc0 <__udivsi3+0x3c>
20001bbe:	0a09      	lsrs	r1, r1, #8
20001bc0:	0bc3      	lsrs	r3, r0, #15
20001bc2:	428b      	cmp	r3, r1
20001bc4:	d301      	bcc.n	20001bca <__udivsi3+0x46>
20001bc6:	03cb      	lsls	r3, r1, #15
20001bc8:	1ac0      	subs	r0, r0, r3
20001bca:	4152      	adcs	r2, r2
20001bcc:	0b83      	lsrs	r3, r0, #14
20001bce:	428b      	cmp	r3, r1
20001bd0:	d301      	bcc.n	20001bd6 <__udivsi3+0x52>
20001bd2:	038b      	lsls	r3, r1, #14
20001bd4:	1ac0      	subs	r0, r0, r3
20001bd6:	4152      	adcs	r2, r2
20001bd8:	0b43      	lsrs	r3, r0, #13
20001bda:	428b      	cmp	r3, r1
20001bdc:	d301      	bcc.n	20001be2 <__udivsi3+0x5e>
20001bde:	034b      	lsls	r3, r1, #13
20001be0:	1ac0      	subs	r0, r0, r3
20001be2:	4152      	adcs	r2, r2
20001be4:	0b03      	lsrs	r3, r0, #12
20001be6:	428b      	cmp	r3, r1
20001be8:	d301      	bcc.n	20001bee <__udivsi3+0x6a>
20001bea:	030b      	lsls	r3, r1, #12
20001bec:	1ac0      	subs	r0, r0, r3
20001bee:	4152      	adcs	r2, r2
20001bf0:	0ac3      	lsrs	r3, r0, #11
20001bf2:	428b      	cmp	r3, r1
20001bf4:	d301      	bcc.n	20001bfa <__udivsi3+0x76>
20001bf6:	02cb      	lsls	r3, r1, #11
20001bf8:	1ac0      	subs	r0, r0, r3
20001bfa:	4152      	adcs	r2, r2
20001bfc:	0a83      	lsrs	r3, r0, #10
20001bfe:	428b      	cmp	r3, r1
20001c00:	d301      	bcc.n	20001c06 <__udivsi3+0x82>
20001c02:	028b      	lsls	r3, r1, #10
20001c04:	1ac0      	subs	r0, r0, r3
20001c06:	4152      	adcs	r2, r2
20001c08:	0a43      	lsrs	r3, r0, #9
20001c0a:	428b      	cmp	r3, r1
20001c0c:	d301      	bcc.n	20001c12 <__udivsi3+0x8e>
20001c0e:	024b      	lsls	r3, r1, #9
20001c10:	1ac0      	subs	r0, r0, r3
20001c12:	4152      	adcs	r2, r2
20001c14:	0a03      	lsrs	r3, r0, #8
20001c16:	428b      	cmp	r3, r1
20001c18:	d301      	bcc.n	20001c1e <__udivsi3+0x9a>
20001c1a:	020b      	lsls	r3, r1, #8
20001c1c:	1ac0      	subs	r0, r0, r3
20001c1e:	4152      	adcs	r2, r2
20001c20:	d2cd      	bcs.n	20001bbe <__udivsi3+0x3a>
20001c22:	09c3      	lsrs	r3, r0, #7
20001c24:	428b      	cmp	r3, r1
20001c26:	d301      	bcc.n	20001c2c <__udivsi3+0xa8>
20001c28:	01cb      	lsls	r3, r1, #7
20001c2a:	1ac0      	subs	r0, r0, r3
20001c2c:	4152      	adcs	r2, r2
20001c2e:	0983      	lsrs	r3, r0, #6
20001c30:	428b      	cmp	r3, r1
20001c32:	d301      	bcc.n	20001c38 <__udivsi3+0xb4>
20001c34:	018b      	lsls	r3, r1, #6
20001c36:	1ac0      	subs	r0, r0, r3
20001c38:	4152      	adcs	r2, r2
20001c3a:	0943      	lsrs	r3, r0, #5
20001c3c:	428b      	cmp	r3, r1
20001c3e:	d301      	bcc.n	20001c44 <__udivsi3+0xc0>
20001c40:	014b      	lsls	r3, r1, #5
20001c42:	1ac0      	subs	r0, r0, r3
20001c44:	4152      	adcs	r2, r2
20001c46:	0903      	lsrs	r3, r0, #4
20001c48:	428b      	cmp	r3, r1
20001c4a:	d301      	bcc.n	20001c50 <__udivsi3+0xcc>
20001c4c:	010b      	lsls	r3, r1, #4
20001c4e:	1ac0      	subs	r0, r0, r3
20001c50:	4152      	adcs	r2, r2
20001c52:	08c3      	lsrs	r3, r0, #3
20001c54:	428b      	cmp	r3, r1
20001c56:	d301      	bcc.n	20001c5c <__udivsi3+0xd8>
20001c58:	00cb      	lsls	r3, r1, #3
20001c5a:	1ac0      	subs	r0, r0, r3
20001c5c:	4152      	adcs	r2, r2
20001c5e:	0883      	lsrs	r3, r0, #2
20001c60:	428b      	cmp	r3, r1
20001c62:	d301      	bcc.n	20001c68 <__udivsi3+0xe4>
20001c64:	008b      	lsls	r3, r1, #2
20001c66:	1ac0      	subs	r0, r0, r3
20001c68:	4152      	adcs	r2, r2
20001c6a:	0843      	lsrs	r3, r0, #1
20001c6c:	428b      	cmp	r3, r1
20001c6e:	d301      	bcc.n	20001c74 <__udivsi3+0xf0>
20001c70:	004b      	lsls	r3, r1, #1
20001c72:	1ac0      	subs	r0, r0, r3
20001c74:	4152      	adcs	r2, r2
20001c76:	1a41      	subs	r1, r0, r1
20001c78:	d200      	bcs.n	20001c7c <__udivsi3+0xf8>
20001c7a:	4601      	mov	r1, r0
20001c7c:	4152      	adcs	r2, r2
20001c7e:	4610      	mov	r0, r2
20001c80:	4770      	bx	lr
20001c82:	e7ff      	b.n	20001c84 <__udivsi3+0x100>
20001c84:	b501      	push	{r0, lr}
20001c86:	2000      	movs	r0, #0
20001c88:	f000 f8f0 	bl	20001e6c <__aeabi_idiv0>
20001c8c:	bd02      	pop	{r1, pc}
20001c8e:	46c0      	nop			; (mov r8, r8)

20001c90 <__aeabi_uidivmod>:
20001c90:	2900      	cmp	r1, #0
20001c92:	d0f7      	beq.n	20001c84 <__udivsi3+0x100>
20001c94:	e776      	b.n	20001b84 <__udivsi3>
20001c96:	4770      	bx	lr

20001c98 <__divsi3>:
20001c98:	4603      	mov	r3, r0
20001c9a:	430b      	orrs	r3, r1
20001c9c:	d47f      	bmi.n	20001d9e <__divsi3+0x106>
20001c9e:	2200      	movs	r2, #0
20001ca0:	0843      	lsrs	r3, r0, #1
20001ca2:	428b      	cmp	r3, r1
20001ca4:	d374      	bcc.n	20001d90 <__divsi3+0xf8>
20001ca6:	0903      	lsrs	r3, r0, #4
20001ca8:	428b      	cmp	r3, r1
20001caa:	d35f      	bcc.n	20001d6c <__divsi3+0xd4>
20001cac:	0a03      	lsrs	r3, r0, #8
20001cae:	428b      	cmp	r3, r1
20001cb0:	d344      	bcc.n	20001d3c <__divsi3+0xa4>
20001cb2:	0b03      	lsrs	r3, r0, #12
20001cb4:	428b      	cmp	r3, r1
20001cb6:	d328      	bcc.n	20001d0a <__divsi3+0x72>
20001cb8:	0c03      	lsrs	r3, r0, #16
20001cba:	428b      	cmp	r3, r1
20001cbc:	d30d      	bcc.n	20001cda <__divsi3+0x42>
20001cbe:	22ff      	movs	r2, #255	; 0xff
20001cc0:	0209      	lsls	r1, r1, #8
20001cc2:	ba12      	rev	r2, r2
20001cc4:	0c03      	lsrs	r3, r0, #16
20001cc6:	428b      	cmp	r3, r1
20001cc8:	d302      	bcc.n	20001cd0 <__divsi3+0x38>
20001cca:	1212      	asrs	r2, r2, #8
20001ccc:	0209      	lsls	r1, r1, #8
20001cce:	d065      	beq.n	20001d9c <__divsi3+0x104>
20001cd0:	0b03      	lsrs	r3, r0, #12
20001cd2:	428b      	cmp	r3, r1
20001cd4:	d319      	bcc.n	20001d0a <__divsi3+0x72>
20001cd6:	e000      	b.n	20001cda <__divsi3+0x42>
20001cd8:	0a09      	lsrs	r1, r1, #8
20001cda:	0bc3      	lsrs	r3, r0, #15
20001cdc:	428b      	cmp	r3, r1
20001cde:	d301      	bcc.n	20001ce4 <__divsi3+0x4c>
20001ce0:	03cb      	lsls	r3, r1, #15
20001ce2:	1ac0      	subs	r0, r0, r3
20001ce4:	4152      	adcs	r2, r2
20001ce6:	0b83      	lsrs	r3, r0, #14
20001ce8:	428b      	cmp	r3, r1
20001cea:	d301      	bcc.n	20001cf0 <__divsi3+0x58>
20001cec:	038b      	lsls	r3, r1, #14
20001cee:	1ac0      	subs	r0, r0, r3
20001cf0:	4152      	adcs	r2, r2
20001cf2:	0b43      	lsrs	r3, r0, #13
20001cf4:	428b      	cmp	r3, r1
20001cf6:	d301      	bcc.n	20001cfc <__divsi3+0x64>
20001cf8:	034b      	lsls	r3, r1, #13
20001cfa:	1ac0      	subs	r0, r0, r3
20001cfc:	4152      	adcs	r2, r2
20001cfe:	0b03      	lsrs	r3, r0, #12
20001d00:	428b      	cmp	r3, r1
20001d02:	d301      	bcc.n	20001d08 <__divsi3+0x70>
20001d04:	030b      	lsls	r3, r1, #12
20001d06:	1ac0      	subs	r0, r0, r3
20001d08:	4152      	adcs	r2, r2
20001d0a:	0ac3      	lsrs	r3, r0, #11
20001d0c:	428b      	cmp	r3, r1
20001d0e:	d301      	bcc.n	20001d14 <__divsi3+0x7c>
20001d10:	02cb      	lsls	r3, r1, #11
20001d12:	1ac0      	subs	r0, r0, r3
20001d14:	4152      	adcs	r2, r2
20001d16:	0a83      	lsrs	r3, r0, #10
20001d18:	428b      	cmp	r3, r1
20001d1a:	d301      	bcc.n	20001d20 <__divsi3+0x88>
20001d1c:	028b      	lsls	r3, r1, #10
20001d1e:	1ac0      	subs	r0, r0, r3
20001d20:	4152      	adcs	r2, r2
20001d22:	0a43      	lsrs	r3, r0, #9
20001d24:	428b      	cmp	r3, r1
20001d26:	d301      	bcc.n	20001d2c <__divsi3+0x94>
20001d28:	024b      	lsls	r3, r1, #9
20001d2a:	1ac0      	subs	r0, r0, r3
20001d2c:	4152      	adcs	r2, r2
20001d2e:	0a03      	lsrs	r3, r0, #8
20001d30:	428b      	cmp	r3, r1
20001d32:	d301      	bcc.n	20001d38 <__divsi3+0xa0>
20001d34:	020b      	lsls	r3, r1, #8
20001d36:	1ac0      	subs	r0, r0, r3
20001d38:	4152      	adcs	r2, r2
20001d3a:	d2cd      	bcs.n	20001cd8 <__divsi3+0x40>
20001d3c:	09c3      	lsrs	r3, r0, #7
20001d3e:	428b      	cmp	r3, r1
20001d40:	d301      	bcc.n	20001d46 <__divsi3+0xae>
20001d42:	01cb      	lsls	r3, r1, #7
20001d44:	1ac0      	subs	r0, r0, r3
20001d46:	4152      	adcs	r2, r2
20001d48:	0983      	lsrs	r3, r0, #6
20001d4a:	428b      	cmp	r3, r1
20001d4c:	d301      	bcc.n	20001d52 <__divsi3+0xba>
20001d4e:	018b      	lsls	r3, r1, #6
20001d50:	1ac0      	subs	r0, r0, r3
20001d52:	4152      	adcs	r2, r2
20001d54:	0943      	lsrs	r3, r0, #5
20001d56:	428b      	cmp	r3, r1
20001d58:	d301      	bcc.n	20001d5e <__divsi3+0xc6>
20001d5a:	014b      	lsls	r3, r1, #5
20001d5c:	1ac0      	subs	r0, r0, r3
20001d5e:	4152      	adcs	r2, r2
20001d60:	0903      	lsrs	r3, r0, #4
20001d62:	428b      	cmp	r3, r1
20001d64:	d301      	bcc.n	20001d6a <__divsi3+0xd2>
20001d66:	010b      	lsls	r3, r1, #4
20001d68:	1ac0      	subs	r0, r0, r3
20001d6a:	4152      	adcs	r2, r2
20001d6c:	08c3      	lsrs	r3, r0, #3
20001d6e:	428b      	cmp	r3, r1
20001d70:	d301      	bcc.n	20001d76 <__divsi3+0xde>
20001d72:	00cb      	lsls	r3, r1, #3
20001d74:	1ac0      	subs	r0, r0, r3
20001d76:	4152      	adcs	r2, r2
20001d78:	0883      	lsrs	r3, r0, #2
20001d7a:	428b      	cmp	r3, r1
20001d7c:	d301      	bcc.n	20001d82 <__divsi3+0xea>
20001d7e:	008b      	lsls	r3, r1, #2
20001d80:	1ac0      	subs	r0, r0, r3
20001d82:	4152      	adcs	r2, r2
20001d84:	0843      	lsrs	r3, r0, #1
20001d86:	428b      	cmp	r3, r1
20001d88:	d301      	bcc.n	20001d8e <__divsi3+0xf6>
20001d8a:	004b      	lsls	r3, r1, #1
20001d8c:	1ac0      	subs	r0, r0, r3
20001d8e:	4152      	adcs	r2, r2
20001d90:	1a41      	subs	r1, r0, r1
20001d92:	d200      	bcs.n	20001d96 <__divsi3+0xfe>
20001d94:	4601      	mov	r1, r0
20001d96:	4152      	adcs	r2, r2
20001d98:	4610      	mov	r0, r2
20001d9a:	4770      	bx	lr
20001d9c:	e05d      	b.n	20001e5a <__divsi3+0x1c2>
20001d9e:	0fca      	lsrs	r2, r1, #31
20001da0:	d000      	beq.n	20001da4 <__divsi3+0x10c>
20001da2:	4249      	negs	r1, r1
20001da4:	1003      	asrs	r3, r0, #32
20001da6:	d300      	bcc.n	20001daa <__divsi3+0x112>
20001da8:	4240      	negs	r0, r0
20001daa:	4053      	eors	r3, r2
20001dac:	2200      	movs	r2, #0
20001dae:	469c      	mov	ip, r3
20001db0:	0903      	lsrs	r3, r0, #4
20001db2:	428b      	cmp	r3, r1
20001db4:	d32d      	bcc.n	20001e12 <__divsi3+0x17a>
20001db6:	0a03      	lsrs	r3, r0, #8
20001db8:	428b      	cmp	r3, r1
20001dba:	d312      	bcc.n	20001de2 <__divsi3+0x14a>
20001dbc:	22fc      	movs	r2, #252	; 0xfc
20001dbe:	0189      	lsls	r1, r1, #6
20001dc0:	ba12      	rev	r2, r2
20001dc2:	0a03      	lsrs	r3, r0, #8
20001dc4:	428b      	cmp	r3, r1
20001dc6:	d30c      	bcc.n	20001de2 <__divsi3+0x14a>
20001dc8:	0189      	lsls	r1, r1, #6
20001dca:	1192      	asrs	r2, r2, #6
20001dcc:	428b      	cmp	r3, r1
20001dce:	d308      	bcc.n	20001de2 <__divsi3+0x14a>
20001dd0:	0189      	lsls	r1, r1, #6
20001dd2:	1192      	asrs	r2, r2, #6
20001dd4:	428b      	cmp	r3, r1
20001dd6:	d304      	bcc.n	20001de2 <__divsi3+0x14a>
20001dd8:	0189      	lsls	r1, r1, #6
20001dda:	d03a      	beq.n	20001e52 <__divsi3+0x1ba>
20001ddc:	1192      	asrs	r2, r2, #6
20001dde:	e000      	b.n	20001de2 <__divsi3+0x14a>
20001de0:	0989      	lsrs	r1, r1, #6
20001de2:	09c3      	lsrs	r3, r0, #7
20001de4:	428b      	cmp	r3, r1
20001de6:	d301      	bcc.n	20001dec <__divsi3+0x154>
20001de8:	01cb      	lsls	r3, r1, #7
20001dea:	1ac0      	subs	r0, r0, r3
20001dec:	4152      	adcs	r2, r2
20001dee:	0983      	lsrs	r3, r0, #6
20001df0:	428b      	cmp	r3, r1
20001df2:	d301      	bcc.n	20001df8 <__divsi3+0x160>
20001df4:	018b      	lsls	r3, r1, #6
20001df6:	1ac0      	subs	r0, r0, r3
20001df8:	4152      	adcs	r2, r2
20001dfa:	0943      	lsrs	r3, r0, #5
20001dfc:	428b      	cmp	r3, r1
20001dfe:	d301      	bcc.n	20001e04 <__divsi3+0x16c>
20001e00:	014b      	lsls	r3, r1, #5
20001e02:	1ac0      	subs	r0, r0, r3
20001e04:	4152      	adcs	r2, r2
20001e06:	0903      	lsrs	r3, r0, #4
20001e08:	428b      	cmp	r3, r1
20001e0a:	d301      	bcc.n	20001e10 <__divsi3+0x178>
20001e0c:	010b      	lsls	r3, r1, #4
20001e0e:	1ac0      	subs	r0, r0, r3
20001e10:	4152      	adcs	r2, r2
20001e12:	08c3      	lsrs	r3, r0, #3
20001e14:	428b      	cmp	r3, r1
20001e16:	d301      	bcc.n	20001e1c <__divsi3+0x184>
20001e18:	00cb      	lsls	r3, r1, #3
20001e1a:	1ac0      	subs	r0, r0, r3
20001e1c:	4152      	adcs	r2, r2
20001e1e:	0883      	lsrs	r3, r0, #2
20001e20:	428b      	cmp	r3, r1
20001e22:	d301      	bcc.n	20001e28 <__divsi3+0x190>
20001e24:	008b      	lsls	r3, r1, #2
20001e26:	1ac0      	subs	r0, r0, r3
20001e28:	4152      	adcs	r2, r2
20001e2a:	d2d9      	bcs.n	20001de0 <__divsi3+0x148>
20001e2c:	0843      	lsrs	r3, r0, #1
20001e2e:	428b      	cmp	r3, r1
20001e30:	d301      	bcc.n	20001e36 <__divsi3+0x19e>
20001e32:	004b      	lsls	r3, r1, #1
20001e34:	1ac0      	subs	r0, r0, r3
20001e36:	4152      	adcs	r2, r2
20001e38:	1a41      	subs	r1, r0, r1
20001e3a:	d200      	bcs.n	20001e3e <__divsi3+0x1a6>
20001e3c:	4601      	mov	r1, r0
20001e3e:	4663      	mov	r3, ip
20001e40:	4152      	adcs	r2, r2
20001e42:	105b      	asrs	r3, r3, #1
20001e44:	4610      	mov	r0, r2
20001e46:	d301      	bcc.n	20001e4c <__divsi3+0x1b4>
20001e48:	4240      	negs	r0, r0
20001e4a:	2b00      	cmp	r3, #0
20001e4c:	d500      	bpl.n	20001e50 <__divsi3+0x1b8>
20001e4e:	4249      	negs	r1, r1
20001e50:	4770      	bx	lr
20001e52:	4663      	mov	r3, ip
20001e54:	105b      	asrs	r3, r3, #1
20001e56:	d300      	bcc.n	20001e5a <__divsi3+0x1c2>
20001e58:	4240      	negs	r0, r0
20001e5a:	b501      	push	{r0, lr}
20001e5c:	2000      	movs	r0, #0
20001e5e:	f000 f805 	bl	20001e6c <__aeabi_idiv0>
20001e62:	bd02      	pop	{r1, pc}

20001e64 <__aeabi_idivmod>:
20001e64:	2900      	cmp	r1, #0
20001e66:	d0f8      	beq.n	20001e5a <__divsi3+0x1c2>
20001e68:	e716      	b.n	20001c98 <__divsi3>
20001e6a:	4770      	bx	lr

20001e6c <__aeabi_idiv0>:
20001e6c:	4770      	bx	lr
20001e6e:	46c0      	nop			; (mov r8, r8)

20001e70 <memcpy>:
20001e70:	2300      	movs	r3, #0
20001e72:	b510      	push	{r4, lr}
20001e74:	429a      	cmp	r2, r3
20001e76:	d100      	bne.n	20001e7a <memcpy+0xa>
20001e78:	bd10      	pop	{r4, pc}
20001e7a:	5ccc      	ldrb	r4, [r1, r3]
20001e7c:	54c4      	strb	r4, [r0, r3]
20001e7e:	3301      	adds	r3, #1
20001e80:	e7f8      	b.n	20001e74 <memcpy+0x4>
	...

20001e84 <tolower>:
20001e84:	2203      	movs	r2, #3
20001e86:	4b03      	ldr	r3, [pc, #12]	; (20001e94 <tolower+0x10>)
20001e88:	5c1b      	ldrb	r3, [r3, r0]
20001e8a:	4013      	ands	r3, r2
20001e8c:	2b01      	cmp	r3, #1
20001e8e:	d100      	bne.n	20001e92 <tolower+0xe>
20001e90:	3020      	adds	r0, #32
20001e92:	4770      	bx	lr
20001e94:	20002c22 	andcs	r2, r0, r2, lsr #24

20001e98 <systick_flag>:
20001e98:	00000000 	andeq	r0, r0, r0

20001e9c <delay_count>:
20001e9c:	00000000 	andeq	r0, r0, r0

20001ea0 <counting>:
20001ea0:	00000000 	andeq	r0, r0, r0

20001ea4 <used_for_rand>:
20001ea4:	00000000 	andeq	r0, r0, r0

20001ea8 <r.4217>:
	...

20001eb0 <current_state>:
20001eb0:	00000000 	andeq	r0, r0, r0

20001eb4 <port>:
20001eb4:	00000000 	andeq	r0, r0, r0

20001eb8 <seconds>:
20001eb8:	00000000 	andeq	r0, r0, r0

20001ebc <ticks>:
20001ebc:	00000000 	andeq	r0, r0, r0

20001ec0 <timer_running>:
20001ec0:	00000000 	andeq	r0, r0, r0

20001ec4 <is_flag_ptr>:
20001ec4:	00000000 	andeq	r0, r0, r0

20001ec8 <running>:
20001ec8:	00000000 	andeq	r0, r0, r0

20001ecc <curr_x>:
20001ecc:	00000000 	andeq	r0, r0, r0

20001ed0 <board>:
	...

20002650 <is_bomb_ptr>:
20002650:	00000000 	andeq	r0, r0, r0

20002654 <position>:
	...

2000266c <gameover>:
2000266c:	00000000 	andeq	r0, r0, r0

20002670 <curr_y>:
20002670:	00000000 	andeq	r0, r0, r0

20002674 <move_keys>:
	...

2000267c <zero>:
2000267c:	00000030 	andeq	r0, r0, r0, lsr r0
20002680:	00000000 	andeq	r0, r0, r0
20002684:	01000000 	mrseq	r0, (UNDEF: 0)
20002688:	00010101 	andeq	r0, r1, r1, lsl #2
2000268c:	01010000 	mrseq	r0, (UNDEF: 1)
20002690:	01010000 	mrseq	r0, (UNDEF: 1)
20002694:	00010000 	andeq	r0, r1, r0
20002698:	01000000 	mrseq	r0, (UNDEF: 0)
2000269c:	00010000 	andeq	r0, r1, r0
200026a0:	01010000 	mrseq	r0, (UNDEF: 1)
200026a4:	00010000 	andeq	r0, r1, r0
200026a8:	01000100 	mrseq	r0, (UNDEF: 16)
200026ac:	00010000 	andeq	r0, r1, r0
200026b0:	01000001 	tsteq	r0, r1
200026b4:	01010000 	mrseq	r0, (UNDEF: 1)
200026b8:	01000000 	mrseq	r0, (UNDEF: 0)
200026bc:	00010000 	andeq	r0, r1, r0
200026c0:	01000000 	mrseq	r0, (UNDEF: 0)
200026c4:	01010000 	mrseq	r0, (UNDEF: 1)
200026c8:	01010000 	mrseq	r0, (UNDEF: 1)
200026cc:	01000000 	mrseq	r0, (UNDEF: 0)
200026d0:	00010101 	andeq	r0, r1, r1, lsl #2
	...

200026e0 <one>:
200026e0:	00000031 	andeq	r0, r0, r1, lsr r0
	...
200026ec:	00000101 	andeq	r0, r0, r1, lsl #2
200026f0:	01000000 	mrseq	r0, (UNDEF: 0)
200026f4:	00000100 	andeq	r0, r0, r0, lsl #2
200026f8:	00010000 	andeq	r0, r1, r0
200026fc:	00000100 	andeq	r0, r0, r0, lsl #2
20002700:	00000000 	andeq	r0, r0, r0
20002704:	00000100 	andeq	r0, r0, r0, lsl #2
20002708:	00000000 	andeq	r0, r0, r0
2000270c:	00000100 	andeq	r0, r0, r0, lsl #2
20002710:	00000000 	andeq	r0, r0, r0
20002714:	00000100 	andeq	r0, r0, r0, lsl #2
20002718:	00000000 	andeq	r0, r0, r0
2000271c:	00000100 	andeq	r0, r0, r0, lsl #2
20002720:	00000000 	andeq	r0, r0, r0
20002724:	00000100 	andeq	r0, r0, r0, lsl #2
20002728:	00000000 	andeq	r0, r0, r0
2000272c:	00000100 	andeq	r0, r0, r0, lsl #2
20002730:	01010000 	mrseq	r0, (UNDEF: 1)
20002734:	01010101 	tsteq	r1, r1, lsl #2
	...

20002744 <two>:
20002744:	00000032 	andeq	r0, r0, r2, lsr r0
	...
20002750:	00010101 	andeq	r0, r1, r1, lsl #2
20002754:	01000000 	mrseq	r0, (UNDEF: 0)
20002758:	01010000 	mrseq	r0, (UNDEF: 1)
2000275c:	00010000 	andeq	r0, r1, r0
20002760:	01000000 	mrseq	r0, (UNDEF: 0)
20002764:	00000000 	andeq	r0, r0, r0
20002768:	01000000 	mrseq	r0, (UNDEF: 0)
2000276c:	00000000 	andeq	r0, r0, r0
20002770:	00010000 	andeq	r0, r1, r0
20002774:	00000000 	andeq	r0, r0, r0
20002778:	00000100 	andeq	r0, r0, r0, lsl #2
2000277c:	00000000 	andeq	r0, r0, r0
20002780:	00000001 	andeq	r0, r0, r1
20002784:	01000000 	mrseq	r0, (UNDEF: 0)
20002788:	00000000 	andeq	r0, r0, r0
2000278c:	01010000 	mrseq	r0, (UNDEF: 1)
20002790:	00000000 	andeq	r0, r0, r0
20002794:	01010000 	mrseq	r0, (UNDEF: 1)
20002798:	01010101 	tsteq	r1, r1, lsl #2
	...

200027a8 <three>:
200027a8:	00000033 	andeq	r0, r0, r3, lsr r0
200027ac:	00000000 	andeq	r0, r0, r0
200027b0:	01010000 	mrseq	r0, (UNDEF: 1)
200027b4:	00010101 	andeq	r0, r1, r1, lsl #2
200027b8:	00000000 	andeq	r0, r0, r0
200027bc:	01010000 	mrseq	r0, (UNDEF: 1)
200027c0:	00000000 	andeq	r0, r0, r0
200027c4:	01000000 	mrseq	r0, (UNDEF: 0)
200027c8:	00000000 	andeq	r0, r0, r0
200027cc:	01010000 	mrseq	r0, (UNDEF: 1)
200027d0:	01000000 	mrseq	r0, (UNDEF: 0)
200027d4:	00010101 	andeq	r0, r1, r1, lsl #2
200027d8:	00000000 	andeq	r0, r0, r0
200027dc:	01010000 	mrseq	r0, (UNDEF: 1)
200027e0:	00000000 	andeq	r0, r0, r0
200027e4:	01000000 	mrseq	r0, (UNDEF: 0)
200027e8:	00000000 	andeq	r0, r0, r0
200027ec:	01000000 	mrseq	r0, (UNDEF: 0)
200027f0:	00000000 	andeq	r0, r0, r0
200027f4:	01000000 	mrseq	r0, (UNDEF: 0)
200027f8:	01010000 	mrseq	r0, (UNDEF: 1)
200027fc:	00010101 	andeq	r0, r1, r1, lsl #2
	...

2000280c <four>:
2000280c:	00000034 	andeq	r0, r0, r4, lsr r0
	...
20002818:	01010000 	mrseq	r0, (UNDEF: 1)
2000281c:	00000000 	andeq	r0, r0, r0
20002820:	01000100 	mrseq	r0, (UNDEF: 16)
20002824:	00000000 	andeq	r0, r0, r0
20002828:	01000001 	tsteq	r0, r1
2000282c:	01000000 	mrseq	r0, (UNDEF: 0)
20002830:	01000000 	mrseq	r0, (UNDEF: 0)
20002834:	00010000 	andeq	r0, r1, r0
20002838:	01000000 	mrseq	r0, (UNDEF: 0)
2000283c:	01010000 	mrseq	r0, (UNDEF: 1)
20002840:	01010101 	tsteq	r1, r1, lsl #2
20002844:	00000001 	andeq	r0, r0, r1
20002848:	01000000 	mrseq	r0, (UNDEF: 0)
2000284c:	00000000 	andeq	r0, r0, r0
20002850:	01000000 	mrseq	r0, (UNDEF: 0)
20002854:	00000000 	andeq	r0, r0, r0
20002858:	01000000 	mrseq	r0, (UNDEF: 0)
2000285c:	00000000 	andeq	r0, r0, r0
20002860:	01000000 	mrseq	r0, (UNDEF: 0)
	...

20002870 <doll>:
20002870:	00000024 	andeq	r0, r0, r4, lsr #32
20002874:	00000100 	andeq	r0, r0, r0, lsl #2
20002878:	00000000 	andeq	r0, r0, r0
2000287c:	00000100 	andeq	r0, r0, r0, lsl #2
20002880:	01000000 	mrseq	r0, (UNDEF: 0)
20002884:	01010101 	tsteq	r1, r1, lsl #2
20002888:	01010000 	mrseq	r0, (UNDEF: 1)
2000288c:	00000100 	andeq	r0, r0, r0, lsl #2
20002890:	01010000 	mrseq	r0, (UNDEF: 1)
20002894:	00000100 	andeq	r0, r0, r0, lsl #2
20002898:	01000000 	mrseq	r0, (UNDEF: 0)
2000289c:	00000101 	andeq	r0, r0, r1, lsl #2
200028a0:	00000000 	andeq	r0, r0, r0
200028a4:	00010101 	andeq	r0, r1, r1, lsl #2
200028a8:	00000000 	andeq	r0, r0, r0
200028ac:	01010001 	tsteq	r1, r1
200028b0:	00000000 	andeq	r0, r0, r0
200028b4:	01010001 	tsteq	r1, r1
200028b8:	00010000 	andeq	r0, r1, r0
200028bc:	00010101 	andeq	r0, r1, r1, lsl #2
200028c0:	01000000 	mrseq	r0, (UNDEF: 0)
200028c4:	00000101 	andeq	r0, r0, r1, lsl #2
200028c8:	00000000 	andeq	r0, r0, r0
200028cc:	00000001 	andeq	r0, r0, r1
200028d0:	00000000 	andeq	r0, r0, r0

200028d4 <star>:
200028d4:	0000002a 	andeq	r0, r0, sl, lsr #32
200028d8:	00000001 	andeq	r0, r0, r1
200028dc:	00010000 	andeq	r0, r1, r0
200028e0:	00010001 	andeq	r0, r1, r1
200028e4:	01000000 	mrseq	r0, (UNDEF: 0)
200028e8:	00000101 	andeq	r0, r0, r1, lsl #2
200028ec:	01000000 	mrseq	r0, (UNDEF: 0)
200028f0:	00000101 	andeq	r0, r0, r1, lsl #2
200028f4:	00010000 	andeq	r0, r1, r0
200028f8:	00010001 	andeq	r0, r1, r1
200028fc:	00000000 	andeq	r0, r0, r0
20002900:	00000001 	andeq	r0, r0, r1
	...

20002938 <arrow>:
20002938:	0000005e 	andeq	r0, r0, lr, asr r0
	...
20002944:	00000100 	andeq	r0, r0, r0, lsl #2
20002948:	00000000 	andeq	r0, r0, r0
2000294c:	00010001 	andeq	r0, r1, r1
20002950:	01000000 	mrseq	r0, (UNDEF: 0)
20002954:	01000000 	mrseq	r0, (UNDEF: 0)
20002958:	00010000 	andeq	r0, r1, r0
2000295c:	00000000 	andeq	r0, r0, r0
20002960:	00000001 	andeq	r0, r0, r1
	...

2000299c <flag>:
2000299c:	00000020 	andeq	r0, r0, r0, lsr #32
	...
200029a8:	00010000 	andeq	r0, r1, r0
200029ac:	00000000 	andeq	r0, r0, r0
200029b0:	00010100 	andeq	r0, r1, r0, lsl #2
200029b4:	00000000 	andeq	r0, r0, r0
200029b8:	00010101 	andeq	r0, r1, r1, lsl #2
200029bc:	01000000 	mrseq	r0, (UNDEF: 0)
200029c0:	00010101 	andeq	r0, r1, r1, lsl #2
200029c4:	01010000 	mrseq	r0, (UNDEF: 1)
200029c8:	00010101 	andeq	r0, r1, r1, lsl #2
200029cc:	00000000 	andeq	r0, r0, r0
200029d0:	00010000 	andeq	r0, r1, r0
200029d4:	00000000 	andeq	r0, r0, r0
200029d8:	00010000 	andeq	r0, r1, r0
200029dc:	00000000 	andeq	r0, r0, r0
200029e0:	00010000 	andeq	r0, r1, r0
200029e4:	00000000 	andeq	r0, r0, r0
200029e8:	01010100 	mrseq	r0, (UNDEF: 17)
200029ec:	01000000 	mrseq	r0, (UNDEF: 0)
200029f0:	01010101 	tsteq	r1, r1, lsl #2
200029f4:	00000001 	andeq	r0, r0, r1
	...

20002a00 <space>:
20002a00:	00000020 	andeq	r0, r0, r0, lsr #32
	...
20002a64:	200003f6 	strdcs	r0, [r0], -r6
20002a68:	20000432 	andcs	r0, r0, r2, lsr r4
20002a6c:	20000432 	andcs	r0, r0, r2, lsr r4
20002a70:	20000432 	andcs	r0, r0, r2, lsr r4
20002a74:	20000432 	andcs	r0, r0, r2, lsr r4
20002a78:	20000432 	andcs	r0, r0, r2, lsr r4
20002a7c:	2000040a 	andcs	r0, r0, sl, lsl #8
20002a80:	20000432 	andcs	r0, r0, r2, lsr r4
20002a84:	20000432 	andcs	r0, r0, r2, lsr r4
20002a88:	20000432 	andcs	r0, r0, r2, lsr r4
20002a8c:	20000432 	andcs	r0, r0, r2, lsr r4
20002a90:	20000432 	andcs	r0, r0, r2, lsr r4
20002a94:	20000392 	mulcs	r0, r2, r3
20002a98:	200003a6 	andcs	r0, r0, r6, lsr #7
20002a9c:	200003ba 			; <UNDEFINED> instruction: 0x200003ba
20002aa0:	200003ce 	andcs	r0, r0, lr, asr #7
20002aa4:	200003e2 	andcs	r0, r0, r2, ror #7
20002aa8:	20000432 	andcs	r0, r0, r2, lsr r4
20002aac:	20000432 	andcs	r0, r0, r2, lsr r4
20002ab0:	20000432 	andcs	r0, r0, r2, lsr r4
20002ab4:	20000432 	andcs	r0, r0, r2, lsr r4
20002ab8:	20000432 	andcs	r0, r0, r2, lsr r4
20002abc:	20000432 	andcs	r0, r0, r2, lsr r4
20002ac0:	20000432 	andcs	r0, r0, r2, lsr r4
20002ac4:	20000432 	andcs	r0, r0, r2, lsr r4
20002ac8:	20000432 	andcs	r0, r0, r2, lsr r4
20002acc:	20000432 	andcs	r0, r0, r2, lsr r4
20002ad0:	20000432 	andcs	r0, r0, r2, lsr r4
20002ad4:	20000432 	andcs	r0, r0, r2, lsr r4
20002ad8:	20000432 	andcs	r0, r0, r2, lsr r4
20002adc:	20000432 	andcs	r0, r0, r2, lsr r4
20002ae0:	20000432 	andcs	r0, r0, r2, lsr r4
20002ae4:	20000432 	andcs	r0, r0, r2, lsr r4
20002ae8:	20000432 	andcs	r0, r0, r2, lsr r4
20002aec:	20000432 	andcs	r0, r0, r2, lsr r4
20002af0:	20000432 	andcs	r0, r0, r2, lsr r4
20002af4:	20000432 	andcs	r0, r0, r2, lsr r4
20002af8:	20000432 	andcs	r0, r0, r2, lsr r4
20002afc:	20000432 	andcs	r0, r0, r2, lsr r4
20002b00:	20000432 	andcs	r0, r0, r2, lsr r4
20002b04:	20000432 	andcs	r0, r0, r2, lsr r4
20002b08:	20000432 	andcs	r0, r0, r2, lsr r4
20002b0c:	20000432 	andcs	r0, r0, r2, lsr r4
20002b10:	20000432 	andcs	r0, r0, r2, lsr r4
20002b14:	20000432 	andcs	r0, r0, r2, lsr r4
20002b18:	20000432 	andcs	r0, r0, r2, lsr r4
20002b1c:	20000432 	andcs	r0, r0, r2, lsr r4
20002b20:	20000432 	andcs	r0, r0, r2, lsr r4
20002b24:	20000432 	andcs	r0, r0, r2, lsr r4
20002b28:	20000432 	andcs	r0, r0, r2, lsr r4
20002b2c:	20000432 	andcs	r0, r0, r2, lsr r4
20002b30:	20000432 	andcs	r0, r0, r2, lsr r4
20002b34:	20000432 	andcs	r0, r0, r2, lsr r4
20002b38:	20000432 	andcs	r0, r0, r2, lsr r4
20002b3c:	20000432 	andcs	r0, r0, r2, lsr r4
20002b40:	20000432 	andcs	r0, r0, r2, lsr r4
20002b44:	20000432 	andcs	r0, r0, r2, lsr r4
20002b48:	20000432 	andcs	r0, r0, r2, lsr r4
20002b4c:	2000041e 	andcs	r0, r0, lr, lsl r4
20002b50:	67616c46 	strbvs	r6, [r1, -r6, asr #24]!
20002b54:	656c2073 	strbvs	r2, [ip, #-115]!	; 0xffffff8d
20002b58:	203a7466 	eorscs	r7, sl, r6, ror #8
20002b5c:	00000000 	andeq	r0, r0, r0
20002b60:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
20002b64:	0909203a 	stmdbeq	r9, {r1, r3, r4, r5, sp}
20002b68:	00000000 	andeq	r0, r0, r0
20002b6c:	676e6f43 	strbvs	r6, [lr, -r3, asr #30]!
20002b70:	73746172 	cmnvc	r4, #-2147483620	; 0x8000001c
20002b74:	57202121 	strpl	r2, [r0, -r1, lsr #2]!
20002b78:	206c6c65 	rsbcs	r6, ip, r5, ror #24
20002b7c:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
20002b80:	3c206465 	cfstrscc	mvf6, [r0], #-404	; 0xfffffe6c
20002b84:	00000033 	andeq	r0, r0, r3, lsr r0
20002b88:	74616854 	strbtvc	r6, [r1], #-2132	; 0xfffff7ac
20002b8c:	6f742073 	svcvs	0x00742073
20002b90:	64616220 	strbtvs	r6, [r1], #-544	; 0xfffffde0
20002b94:	002e2e2e 	eoreq	r2, lr, lr, lsr #28
20002b98:	00002020 	andeq	r2, r0, r0, lsr #32
20002b9c:	33323130 	teqcc	r2, #48, 2
20002ba0:	37363534 			; <UNDEFINED> instruction: 0x37363534
20002ba4:	00003938 	andeq	r3, r0, r8, lsr r9
20002ba8:	0a030201 	beq	200c33b4 <_ctype_+0xc0793>
20002bac:	0b060504 	bleq	20183fc4 <_ctype_+0x1813a3>
20002bb0:	0c090807 	stceq	8, cr0, [r9], {7}
20002bb4:	0d0f000e 	stceq	0, cr0, [pc, #-56]	; 20002b84 <space+0x184>
20002bb8:	20001810 	andcs	r1, r0, r0, lsl r8
20002bbc:	200017de 	ldrdcs	r1, [r0], -lr
20002bc0:	200017e8 	andcs	r1, r0, r8, ror #15
20002bc4:	200017f2 	strdcs	r1, [r0], -r2
20002bc8:	200017fc 	strdcs	r1, [r0], -ip
20002bcc:	20001806 	andcs	r1, r0, r6, lsl #16
20002bd0:	6c6c6557 	cfstr64vs	mvdx6, [ip], #-348	; 0xfffffea4
20002bd4:	616c7020 	cmnvs	ip, r0, lsr #32
20002bd8:	21646579 	smccs	18009	; 0x4659
20002bdc:	65794220 	ldrbvs	r4, [r9, #-544]!	; 0xfffffde0
20002be0:	20293a20 	eorcs	r3, r9, r0, lsr #20
20002be4:	20202020 	eorcs	r2, r0, r0, lsr #32
20002be8:	20202020 	eorcs	r2, r0, r0, lsr #32
20002bec:	003a2020 	eorseq	r2, sl, r0, lsr #32
20002bf0:	79616c50 	stmdbvc	r1!, {r4, r6, sl, fp, sp, lr}^
20002bf4:	61676120 	cmnvs	r7, r0, lsr #2
20002bf8:	203f6e69 	eorscs	r6, pc, r9, ror #28
20002bfc:	20736579 	rsbscs	r6, r3, r9, ror r5
20002c00:	44203e2d 	strtmi	r3, [r0], #-3629	; 0xfffff1d3
20002c04:	00000000 	andeq	r0, r0, r0
20002c08:	20736579 	rsbscs	r6, r3, r9, ror r5
20002c0c:	44203e2d 	strtmi	r3, [r0], #-3629	; 0xfffff1d3
20002c10:	6f6e202c 	svcvs	0x006e202c
20002c14:	203e2d20 	eorscs	r2, lr, r0, lsr #26
20002c18:	74796e61 	ldrbtvc	r6, [r9], #-3681	; 0xfffff19f
20002c1c:	676e6968 	strbvs	r6, [lr, -r8, ror #18]!
	...

20002c21 <_ctype_>:
20002c21:	20202000 	eorcs	r2, r0, r0
20002c25:	20202020 	eorcs	r2, r0, r0, lsr #32
20002c29:	28282020 	stmdacs	r8!, {r5, sp}
20002c2d:	20282828 	eorcs	r2, r8, r8, lsr #16
20002c31:	20202020 	eorcs	r2, r0, r0, lsr #32
20002c35:	20202020 	eorcs	r2, r0, r0, lsr #32
20002c39:	20202020 	eorcs	r2, r0, r0, lsr #32
20002c3d:	20202020 	eorcs	r2, r0, r0, lsr #32
20002c41:	10108820 	andsne	r8, r0, r0, lsr #16
20002c45:	10101010 	andsne	r1, r0, r0, lsl r0
20002c49:	10101010 	andsne	r1, r0, r0, lsl r0
20002c4d:	10101010 	andsne	r1, r0, r0, lsl r0
20002c51:	04040410 	streq	r0, [r4], #-1040	; 0xfffffbf0
20002c55:	04040404 	streq	r0, [r4], #-1028	; 0xfffffbfc
20002c59:	10040404 	andne	r0, r4, r4, lsl #8
20002c5d:	10101010 	andsne	r1, r0, r0, lsl r0
20002c61:	41411010 	cmpmi	r1, r0, lsl r0
20002c65:	41414141 	cmpmi	r1, r1, asr #2
20002c69:	01010101 	tsteq	r1, r1, lsl #2
20002c6d:	01010101 	tsteq	r1, r1, lsl #2
20002c71:	01010101 	tsteq	r1, r1, lsl #2
20002c75:	01010101 	tsteq	r1, r1, lsl #2
20002c79:	01010101 	tsteq	r1, r1, lsl #2
20002c7d:	10101010 	andsne	r1, r0, r0, lsl r0
20002c81:	42421010 	submi	r1, r2, #16
20002c85:	42424242 	submi	r4, r2, #536870916	; 0x20000004
20002c89:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
20002c8d:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
20002c91:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
20002c95:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
20002c99:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
20002c9d:	10101010 	andsne	r1, r0, r0, lsl r0
20002ca1:	00000020 	andeq	r0, r0, r0, lsr #32
	...

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	000000e3 	andeq	r0, r0, r3, ror #1
       4:	00000004 	andeq	r0, r0, r4
       8:	01040000 	mrseq	r0, (UNDEF: 4)
       c:	00000000 	andeq	r0, r0, r0
      10:	0001170c 	andeq	r1, r1, ip, lsl #14
      14:	00009300 	andeq	r9, r0, r0, lsl #6
      18:	00001400 	andeq	r1, r0, r0, lsl #8
      1c:	00017c20 	andeq	r7, r1, r0, lsr #24
      20:	00000000 	andeq	r0, r0, r0
      24:	007c0200 	rsbseq	r0, ip, r0, lsl #4
      28:	18020000 	stmdane	r2, {}	; <UNPREDICTABLE>
      2c:	00003e0e 	andeq	r3, r0, lr, lsl #28
      30:	bc030500 	cfstr32lt	mvfx0, [r3], {-0}
      34:	0320001e 			; <UNDEFINED> instruction: 0x0320001e
      38:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
      3c:	37040074 	smlsdxcc	r4, r4, r0, r0
      40:	02000000 	andeq	r0, r0, #0
      44:	0000016b 	andeq	r0, r0, fp, ror #2
      48:	3e0e1902 	vmlacc.f16	s2, s28, s4	; <UNPREDICTABLE>
      4c:	05000000 	streq	r0, [r0, #-0]
      50:	001eb803 	andseq	fp, lr, r3, lsl #16
      54:	00e50220 	rsceq	r0, r5, r0, lsr #4
      58:	1a020000 	bne	80060 <startup-0x1ff7ffa0>
      5c:	00003705 	andeq	r3, r0, r5, lsl #14
      60:	c0030500 	andgt	r0, r3, r0, lsl #10
      64:	0520001e 	streq	r0, [r0, #-30]!	; 0xffffffe2
      68:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
      6c:	70063001 	andvc	r3, r6, r1
      70:	20200001 	eorcs	r0, r0, r1
      74:	01000000 	mrseq	r0, (UNDEF: 0)
      78:	00f3069c 	smlalseq	r0, r3, ip, r6
      7c:	28010000 	stmdacs	r1, {}	; <UNPREDICTABLE>
      80:	00012806 	andeq	r2, r1, r6, lsl #16
      84:	00004820 	andeq	r4, r0, r0, lsr #16
      88:	9d9c0100 	ldflss	f0, [ip]
      8c:	07000000 	streq	r0, [r0, -r0]
      90:	28010072 	stmdacs	r1, {r1, r4, r5, r6}
      94:	00003716 	andeq	r3, r0, r6, lsl r7
      98:	74910200 	ldrvc	r0, [r1], #512	; 0x200
      9c:	00de0800 	sbcseq	r0, lr, r0, lsl #16
      a0:	22010000 	andcs	r0, r1, #0
      a4:	00010006 	andeq	r0, r1, r6
      a8:	00002820 	andeq	r2, r0, r0, lsr #16
      ac:	c29c0100 	addsgt	r0, ip, #0, 2
      b0:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
      b4:	000000f3 	strdeq	r0, [r0], -r3
      b8:	37022501 	strcc	r2, [r2, -r1, lsl #10]
      bc:	0a000000 	beq	c4 <startup-0x1fffff3c>
      c0:	82050000 	andhi	r0, r5, #0
      c4:	01000000 	mrseq	r0, (UNDEF: 0)
      c8:	00b80617 	adcseq	r0, r8, r7, lsl r6
      cc:	00482000 	subeq	r2, r8, r0
      d0:	9c010000 	stcls	0, cr0, [r1], {-0}
      d4:	00010b05 	andeq	r0, r1, r5, lsl #22
      d8:	06050100 	streq	r0, [r5], -r0, lsl #2
      dc:	20000014 	andcs	r0, r0, r4, lsl r0
      e0:	000000a4 	andeq	r0, r0, r4, lsr #1
      e4:	11009c01 	tstne	r0, r1, lsl #24
      e8:	04000008 	streq	r0, [r0], #-8
      ec:	0000b000 	andeq	fp, r0, r0
      f0:	00010400 	andeq	r0, r1, r0, lsl #8
      f4:	0c000000 	stceq	0, cr0, [r0], {-0}
      f8:	0000021d 	andeq	r0, r0, sp, lsl r2
      fc:	00000093 	muleq	r0, r3, r0
     100:	20000190 	mulcs	r0, r0, r1
     104:	000008a2 	andeq	r0, r0, r2, lsr #17
     108:	00000102 	andeq	r0, r0, r2, lsl #2
     10c:	00030a02 	andeq	r0, r3, r2, lsl #20
     110:	06036100 	streq	r6, [r3], -r0, lsl #2
     114:	00004d10 	andeq	r4, r0, r0, lsl sp
     118:	61760300 	cmnvs	r6, r0, lsl #6
     11c:	0703006c 	streq	r0, [r3, -ip, rrx]
     120:	00004d07 	andeq	r4, r0, r7, lsl #26
     124:	e1040000 	mrs	r0, (UNDEF: 4)
     128:	03000003 	movweq	r0, #3
     12c:	00540708 	subseq	r0, r4, r8, lsl #14
     130:	00010000 	andeq	r0, r1, r0
     134:	91080105 	tstls	r8, r5, lsl #2
     138:	06000002 	streq	r0, [r0], -r2
     13c:	0000004d 	andeq	r0, r0, sp, asr #32
     140:	0000006a 	andeq	r0, r0, sl, rrx
     144:	00006a07 	andeq	r6, r0, r7, lsl #20
     148:	6a070b00 	bvs	1c2d50 <startup-0x1fe3d2b0>
     14c:	07000000 	streq	r0, [r0, -r0]
     150:	07040500 	streq	r0, [r4, -r0, lsl #10]
     154:	00000379 	andeq	r0, r0, r9, ror r3
     158:	00019508 	andeq	r9, r1, r8, lsl #10
     15c:	03090300 	movweq	r0, #37632	; 0x9300
     160:	00000025 	andeq	r0, r0, r5, lsr #32
     164:	00027709 	andeq	r7, r2, r9, lsl #14
     168:	0a0b0300 	beq	2c0d70 <startup-0x1fd3f290>
     16c:	00000071 	andeq	r0, r0, r1, ror r0
     170:	267c0305 	ldrbtcs	r0, [ip], -r5, lsl #6
     174:	6f0a2000 	svcvs	0x000a2000
     178:	0300656e 	movweq	r6, #1390	; 0x56e
     17c:	00710a18 	rsbseq	r0, r1, r8, lsl sl
     180:	03050000 	movweq	r0, #20480	; 0x5000
     184:	200026e0 	andcs	r2, r0, r0, ror #13
     188:	6f77740a 	svcvs	0x0077740a
     18c:	0a250300 	beq	940d94 <startup-0x1f6bf26c>
     190:	00000071 	andeq	r0, r0, r1, ror r0
     194:	27440305 	strbcs	r0, [r4, -r5, lsl #6]
     198:	e9092000 	stmdb	r9, {sp}
     19c:	03000003 	movweq	r0, #3
     1a0:	00710a31 	rsbseq	r0, r1, r1, lsr sl
     1a4:	03050000 	movweq	r0, #20480	; 0x5000
     1a8:	200027a8 	andcs	r2, r0, r8, lsr #15
     1ac:	0001f309 	andeq	pc, r1, r9, lsl #6
     1b0:	0a3d0300 	beq	f40db8 <startup-0x1f0bf248>
     1b4:	00000071 	andeq	r0, r0, r1, ror r0
     1b8:	280c0305 	stmdacs	ip, {r0, r2, r8, r9}
     1bc:	dd092000 	stcle	0, cr2, [r9, #-0]
     1c0:	03000004 	movweq	r0, #4
     1c4:	00710a49 	rsbseq	r0, r1, r9, asr #20
     1c8:	03050000 	movweq	r0, #20480	; 0x5000
     1cc:	20002870 	andcs	r2, r0, r0, ror r8
     1d0:	00019009 	andeq	r9, r1, r9
     1d4:	0a550300 	beq	1540ddc <startup-0x1eabf224>
     1d8:	00000071 	andeq	r0, r0, r1, ror r0
     1dc:	28d40305 	ldmcs	r4, {r0, r2, r8, r9}^
     1e0:	04092000 	streq	r2, [r9], #-0
     1e4:	03000004 	movweq	r0, #4
     1e8:	00710a61 	rsbseq	r0, r1, r1, ror #20
     1ec:	03050000 	movweq	r0, #20480	; 0x5000
     1f0:	20002938 	andcs	r2, r0, r8, lsr r9
     1f4:	00054c09 	andeq	r4, r5, r9, lsl #24
     1f8:	0a6d0300 	beq	1b40e00 <startup-0x1e4bf200>
     1fc:	00000071 	andeq	r0, r0, r1, ror r0
     200:	299c0305 	ldmibcs	ip, {r0, r2, r8, r9}
     204:	68092000 	stmdavs	r9, {sp}
     208:	03000004 	movweq	r0, #4
     20c:	00710a79 	rsbseq	r0, r1, r9, ror sl
     210:	03050000 	movweq	r0, #20480	; 0x5000
     214:	20002a00 	andcs	r2, r0, r0, lsl #20
     218:	0004300b 	andeq	r3, r4, fp
     21c:	150d0100 	strne	r0, [sp, #-256]	; 0xffffff00
     220:	0000014a 	andeq	r0, r0, sl, asr #2
     224:	1e980305 	cdpne	3, 9, cr0, cr8, cr5, {0}
     228:	040c2000 	streq	r2, [ip], #-0
     22c:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
     230:	01430d00 	cmpeq	r3, r0, lsl #26
     234:	5c0b0000 	stcpl	0, cr0, [fp], {-0}
     238:	01000004 	tsteq	r0, r4
     23c:	014a150e 	cmpeq	sl, lr, lsl #10
     240:	03050000 	movweq	r0, #20480	; 0x5000
     244:	20001e9c 	mulcs	r0, ip, lr
     248:	0002ce0b 	andeq	ip, r2, fp, lsl #28
     24c:	15100100 	ldrne	r0, [r0, #-256]	; 0xffffff00
     250:	0000014a 	andeq	r0, r0, sl, asr #2
     254:	1ea00305 	cdpne	3, 10, cr0, cr0, cr5, {0}
     258:	cf0b2000 	svcgt	0x000b2000
     25c:	01000004 	tsteq	r0, r4
     260:	014a1511 	cmpeq	sl, r1, lsl r5
     264:	03050000 	movweq	r0, #20480	; 0x5000
     268:	20001ea4 	andcs	r1, r0, r4, lsr #29
     26c:	00027c0e 	andeq	r7, r2, lr, lsl #24
     270:	01120200 	tsteq	r2, r0, lsl #4
     274:	000a0e06 	andeq	r0, sl, r6, lsl #28
     278:	00002420 	andeq	r2, r0, r0, lsr #8
     27c:	ac9c0100 	ldfges	f0, [ip], {0}
     280:	0f000001 	svceq	0x00000001
     284:	0200736d 	andeq	r7, r0, #-1275068415	; 0xb4000001
     288:	6a1f0112 	bvs	7c06d8 <startup-0x1f83f928>
     28c:	02000000 	andeq	r0, r0, #0
     290:	0e007491 	mcreq	4, 0, r7, cr0, cr1, {4}
     294:	000001e7 	andeq	r0, r0, r7, ror #3
     298:	06010202 	streq	r0, [r1], -r2, lsl #4
     29c:	200009c8 	andcs	r0, r0, r8, asr #19
     2a0:	00000046 	andeq	r0, r0, r6, asr #32
     2a4:	01d39c01 	bicseq	r9, r3, r1, lsl #24
     2a8:	750f0000 	strvc	r0, [pc, #-0]	; 2b0 <startup-0x1ffffd50>
     2ac:	02020073 	andeq	r0, r2, #115	; 0x73
     2b0:	006a1f01 	rsbeq	r1, sl, r1, lsl #30
     2b4:	91020000 	mrsls	r0, (UNDEF: 2)
     2b8:	c1100074 	tstgt	r0, r4, ror r0
     2bc:	02000003 	andeq	r0, r0, #3
     2c0:	098406f5 	stmibeq	r4, {r0, r2, r4, r5, r6, r7, r9, sl}
     2c4:	00442000 	subeq	r2, r4, r0
     2c8:	9c010000 	stcls	0, cr0, [r1], {-0}
     2cc:	0003ef11 	andeq	lr, r3, r1, lsl pc
     2d0:	06ec0200 	strbteq	r0, [ip], r0, lsl #4
     2d4:	2000093c 	andcs	r0, r0, ip, lsr r9
     2d8:	00000048 	andeq	r0, r0, r8, asr #32
     2dc:	02169c01 	andseq	r9, r6, #256	; 0x100
     2e0:	78120000 	ldmdavc	r2, {}	; <UNPREDICTABLE>
     2e4:	21ec0200 	mvncs	r0, r0, lsl #4
     2e8:	0000004d 	andeq	r0, r0, sp, asr #32
     2ec:	136f9102 	cmnne	pc, #-2147483648	; 0x80000000
     2f0:	ee020063 	cdp	0, 0, cr0, cr2, cr3, {3}
     2f4:	00004d07 	andeq	r4, r0, r7, lsl #26
     2f8:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
     2fc:	033b1100 	teqeq	fp, #0, 2
     300:	e6020000 	str	r0, [r2], -r0
     304:	00090406 	andeq	r0, r9, r6, lsl #8
     308:	00003820 	andeq	r3, r0, r0, lsr #16
     30c:	479c0100 	ldrmi	r0, [ip, r0, lsl #2]
     310:	12000002 	andne	r0, r0, #2
     314:	e6020078 			; <UNDEFINED> instruction: 0xe6020078
     318:	00004d1f 	andeq	r4, r0, pc, lsl sp
     31c:	6f910200 	svcvs	0x00910200
     320:	02006313 	andeq	r6, r0, #1275068416	; 0x4c000000
     324:	004d07e8 	subeq	r0, sp, r8, ror #15
     328:	91020000 	mrsls	r0, (UNDEF: 2)
     32c:	8e140077 	mrchi	0, 0, r0, cr4, cr7, {3}
     330:	02000004 	andeq	r0, r0, #4
     334:	08d406df 	ldmeq	r4, {r0, r1, r2, r3, r4, r6, r7, r9, sl}^
     338:	00302000 	eorseq	r2, r0, r0
     33c:	9c010000 	stcls	0, cr0, [r1], {-0}
     340:	0000026d 	andeq	r0, r0, sp, ror #4
     344:	646d6312 	strbtvs	r6, [sp], #-786	; 0xfffffcee
     348:	22df0200 	sbcscs	r0, pc, #0, 4
     34c:	0000004d 	andeq	r0, r0, sp, asr #32
     350:	00779102 	rsbseq	r9, r7, r2, lsl #2
     354:	00017314 	andeq	r7, r1, r4, lsl r3
     358:	06d90200 	ldrbeq	r0, [r9], r0, lsl #4
     35c:	200008aa 	andcs	r0, r0, sl, lsr #17
     360:	0000002a 	andeq	r0, r0, sl, lsr #32
     364:	02939c01 	addseq	r9, r3, #256	; 0x100
     368:	63120000 	tstvs	r2, #0
     36c:	0200646d 	andeq	r6, r0, #1828716544	; 0x6d000000
     370:	004d1fd9 	ldrdeq	r1, [sp], #-249	; 0xffffff07
     374:	91020000 	mrsls	r0, (UNDEF: 2)
     378:	a3140077 	tstge	r4, #119	; 0x77
     37c:	02000003 	andeq	r0, r0, #3
     380:	088006d3 	stmeq	r0, {r0, r1, r4, r6, r7, r9, sl}
     384:	002a2000 	eoreq	r2, sl, r0
     388:	9c010000 	stcls	0, cr0, [r1], {-0}
     38c:	000002b9 			; <UNDEFINED> instruction: 0x000002b9
     390:	0004b915 	andeq	fp, r4, r5, lsl r9
     394:	1cd30200 	lfmne	f0, 2, [r3], {0}
     398:	0000004d 	andeq	r0, r0, sp, asr #32
     39c:	00779102 	rsbseq	r9, r7, r2, lsl #2
     3a0:	00031316 	andeq	r1, r3, r6, lsl r3
     3a4:	0fca0200 	svceq	0x00ca0200
     3a8:	000002e2 	andeq	r0, r0, r2, ror #5
     3ac:	2000084c 	andcs	r0, r0, ip, asr #16
     3b0:	00000034 	andeq	r0, r0, r4, lsr r0
     3b4:	02e29c01 	rsceq	r9, r2, #256	; 0x100
     3b8:	72130000 	andsvc	r0, r3, #0
     3bc:	cf020076 	svcgt	0x00020076
     3c0:	0002e210 	andeq	lr, r2, r0, lsl r2
     3c4:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
     3c8:	08010500 	stmdaeq	r1, {r8, sl}
     3cc:	00000288 	andeq	r0, r0, r8, lsl #5
     3d0:	00029616 	andeq	r9, r2, r6, lsl r6
     3d4:	0fc10200 	svceq	0x00c10200
     3d8:	000002e2 	andeq	r0, r0, r2, ror #5
     3dc:	2000080c 	andcs	r0, r0, ip, lsl #16
     3e0:	00000040 	andeq	r0, r0, r0, asr #32
     3e4:	03129c01 	tsteq	r2, #256	; 0x100
     3e8:	72130000 	andsvc	r0, r3, #0
     3ec:	c6020076 			; <UNDEFINED> instruction: 0xc6020076
     3f0:	0002e210 	andeq	lr, r2, r0, lsl r2
     3f4:	6f910200 	svcvs	0x00910200
     3f8:	04ae1600 	strteq	r1, [lr], #1536	; 0x600
     3fc:	b7020000 	strlt	r0, [r2, -r0]
     400:	0002e20f 	andeq	lr, r2, pc, lsl #4
     404:	0007cc00 	andeq	ip, r7, r0, lsl #24
     408:	00004020 	andeq	r4, r0, r0, lsr #32
     40c:	3b9c0100 	blcc	fe700814 <_ctype_+0xde6fdbf3>
     410:	13000003 	movwne	r0, #3
     414:	02007672 	andeq	r7, r0, #119537664	; 0x7200000
     418:	02e210bc 	rsceq	r1, r2, #188	; 0xbc
     41c:	91020000 	mrsls	r0, (UNDEF: 2)
     420:	6e14006f 	cdpvs	0, 1, cr0, cr4, cr15, {3}
     424:	02000004 	andeq	r0, r0, #4
     428:	079006af 	ldreq	r0, [r0, pc, lsr #13]
     42c:	003c2000 	eorseq	r2, ip, r0
     430:	9c010000 	stcls	0, cr0, [r1], {-0}
     434:	00000361 	andeq	r0, r0, r1, ror #6
     438:	646d6312 	strbtvs	r6, [sp], #-786	; 0xfffffcee
     43c:	19af0200 	stmibne	pc!, {r9}	; <UNPREDICTABLE>
     440:	0000004d 	andeq	r0, r0, sp, asr #32
     444:	00779102 	rsbseq	r9, r7, r2, lsl #2
     448:	0004be14 	andeq	fp, r4, r4, lsl lr
     44c:	06a80200 	strteq	r0, [r8], r0, lsl #4
     450:	20000754 	andcs	r0, r0, r4, asr r7
     454:	0000003c 	andeq	r0, r0, ip, lsr r0
     458:	03869c01 	orreq	r9, r6, #256	; 0x100
     45c:	63120000 	tstvs	r2, #0
     460:	a8020068 	stmdage	r2, {r3, r5, r6}
     464:	00004d1c 	andeq	r4, r0, ip, lsl sp
     468:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
     46c:	041d1400 	ldreq	r1, [sp], #-1024	; 0xfffffc00
     470:	9d020000 	stcls	0, cr0, [r2, #-0]
     474:	0006f606 	andeq	pc, r6, r6, lsl #12
     478:	00005e20 	andeq	r5, r0, r0, lsr #28
     47c:	d49c0100 	ldrle	r0, [ip], #256	; 0x100
     480:	12000003 	andne	r0, r0, #3
     484:	006d756e 	rsbeq	r7, sp, lr, ror #10
     488:	431d9d02 	tstmi	sp, #2, 26	; 0x80
     48c:	02000001 	andeq	r0, r0, #1
     490:	14176c91 	ldrne	r6, [r7], #-3217	; 0xfffff36f
     494:	38200007 	stmdacc	r0!, {r0, r1, r2}
     498:	0b000000 	bleq	4a0 <startup-0x1ffffb60>
     49c:	00000489 	andeq	r0, r0, r9, lsl #9
     4a0:	4307a202 	movwmi	sl, #29186	; 0x7202
     4a4:	02000001 	andeq	r0, r0, #1
     4a8:	b50b7491 	strlt	r7, [fp, #-1169]	; 0xfffffb6f
     4ac:	02000002 	andeq	r0, r0, #2
     4b0:	014307a3 	smlaltbeq	r0, r3, r3, r7
     4b4:	91020000 	mrsls	r0, (UNDEF: 2)
     4b8:	14000070 	strne	r0, [r0], #-112	; 0xffffff90
     4bc:	000001fe 	strdeq	r0, [r0], -lr
     4c0:	cc069802 	stcgt	8, cr9, [r6], {2}
     4c4:	2a200006 	bcs	8004e4 <startup-0x1f7ffb1c>
     4c8:	01000000 	mrseq	r0, (UNDEF: 0)
     4cc:	0003f89c 	muleq	r3, ip, r8
     4d0:	00701200 	rsbseq	r1, r0, r0, lsl #4
     4d4:	f8209802 			; <UNDEFINED> instruction: 0xf8209802
     4d8:	02000003 	andeq	r0, r0, #3
     4dc:	18007491 	stmdane	r0, {r0, r4, r7, sl, ip, sp, lr}
     4e0:	00004d04 	andeq	r4, r0, r4, lsl #26
     4e4:	03b41400 			; <UNDEFINED> instruction: 0x03b41400
     4e8:	92020000 	andls	r0, r2, #0
     4ec:	00069006 	andeq	r9, r6, r6
     4f0:	00003c20 	andeq	r3, r0, r0, lsr #24
     4f4:	3e9c0100 	fmlcce	f0, f4, f0
     4f8:	12000004 	andne	r0, r0, #4
     4fc:	92020078 	andls	r0, r2, #120	; 0x78
     500:	00014317 	andeq	r4, r1, r7, lsl r3
     504:	6c910200 	lfmvs	f0, 4, [r1], {0}
     508:	02007912 	andeq	r7, r0, #294912	; 0x48000
     50c:	01431e92 			; <UNDEFINED> instruction: 0x01431e92
     510:	91020000 	mrsls	r0, (UNDEF: 2)
     514:	03860b68 	orreq	r0, r6, #104, 22	; 0x1a000
     518:	94020000 	strls	r0, [r2], #-0
     51c:	00014306 	andeq	r4, r1, r6, lsl #6
     520:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     524:	019e1900 	orrseq	r1, lr, r0, lsl #18
     528:	8b020000 	blhi	80530 <startup-0x1ff7fad0>
     52c:	00066406 	andeq	r6, r6, r6, lsl #8
     530:	00002c20 	andeq	r2, r0, r0, lsr #24
     534:	149c0100 	ldrne	r0, [ip], #256	; 0x100
     538:	00000211 	andeq	r0, r0, r1, lsl r2
     53c:	34068202 	strcc	r8, [r6], #-514	; 0xfffffdfe
     540:	30200006 	eorcc	r0, r0, r6
     544:	01000000 	mrseq	r0, (UNDEF: 0)
     548:	0004939c 	muleq	r4, ip, r3
     54c:	035b1500 	cmpeq	fp, #0, 10
     550:	82020000 	andhi	r0, r2, #0
     554:	00014316 	andeq	r4, r1, r6, lsl r3
     558:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     55c:	00041615 	andeq	r1, r4, r5, lsl r6
     560:	20820200 	addcs	r0, r2, r0, lsl #4
     564:	00000143 	andeq	r0, r0, r3, asr #2
     568:	1a709102 	bne	1c24978 <startup-0x1e3db688>
     56c:	0000041d 	andeq	r0, r0, sp, lsl r4
     570:	43037702 	movwmi	r7, #14082	; 0x3702
     574:	1b000001 	blne	580 <startup-0x1ffffa80>
     578:	0a140000 	beq	500580 <startup-0x1faffa80>
     57c:	02000004 	andeq	r0, r0, #4
     580:	05cc066e 	strbeq	r0, [ip, #1646]	; 0x66e
     584:	00682000 	rsbeq	r2, r8, r0
     588:	9c010000 	stcls	0, cr0, [r1], {-0}
     58c:	000004fa 	strdeq	r0, [r0], -sl
     590:	02006612 	andeq	r6, r0, #18874368	; 0x1200000
     594:	0143166e 	cmpeq	r3, lr, ror #12
     598:	91020000 	mrsls	r0, (UNDEF: 2)
     59c:	05da1c6c 	ldrbeq	r1, [sl, #3180]	; 0xc6c
     5a0:	002e2000 	eoreq	r2, lr, r0
     5a4:	04e10000 	strbteq	r0, [r1], #0
     5a8:	ca0b0000 	bgt	2c05b0 <startup-0x1fd3fa50>
     5ac:	02000001 	andeq	r0, r0, #1
     5b0:	04fa0873 	ldrbteq	r0, [sl], #2163	; 0x873
     5b4:	91020000 	mrsls	r0, (UNDEF: 2)
     5b8:	041d1a74 	ldreq	r1, [sp], #-2676	; 0xfffff58c
     5bc:	77020000 	strvc	r0, [r2, -r0]
     5c0:	00014303 	andeq	r4, r1, r3, lsl #6
     5c4:	00001b00 	andeq	r1, r0, r0, lsl #22
     5c8:	00060a17 	andeq	r0, r6, r7, lsl sl
     5cc:	00001c20 	andeq	r1, r0, r0, lsr #24
     5d0:	041d1a00 	ldreq	r1, [sp], #-2560	; 0xfffff600
     5d4:	77020000 	strvc	r0, [r2, -r0]
     5d8:	00014303 	andeq	r4, r1, r3, lsl #6
     5dc:	00001b00 	andeq	r1, r0, r0, lsl #22
     5e0:	004d0600 	subeq	r0, sp, r0, lsl #12
     5e4:	050a0000 	streq	r0, [sl, #-0]
     5e8:	6a070000 	bvs	1c05f0 <startup-0x1fe3fa10>
     5ec:	02000000 	andeq	r0, r0, #0
     5f0:	02d71400 	sbcseq	r1, r7, #0, 8
     5f4:	67020000 	strvs	r0, [r2, -r0]
     5f8:	00059406 	andeq	r9, r5, r6, lsl #8
     5fc:	00003820 	andeq	r3, r0, r0, lsr #16
     600:	3f9c0100 	svccc	0x009c0100
     604:	12000005 	andne	r0, r0, #5
     608:	006e6f77 	rsbeq	r6, lr, r7, ror pc
     60c:	431e6702 	tstmi	lr, #524288	; 0x80000
     610:	02000001 	andeq	r0, r0, #1
     614:	73136c91 	tstvc	r3, #37120	; 0x9100
     618:	02007274 	andeq	r7, r0, #116, 4	; 0x40000007
     61c:	03f8096a 	mvnseq	r0, #1736704	; 0x1a8000
     620:	91020000 	mrsls	r0, (UNDEF: 2)
     624:	d01d0074 	andsle	r0, sp, r4, ror r0
     628:	02000001 	andeq	r0, r0, #1
     62c:	0544065d 	strbeq	r0, [r4, #-1629]	; 0xfffff9a3
     630:	00502000 	subseq	r2, r0, r0
     634:	9c010000 	stcls	0, cr0, [r1], {-0}
     638:	00000574 	andeq	r0, r0, r4, ror r5
     63c:	0001b60b 	andeq	fp, r1, fp, lsl #12
     640:	07600200 	strbeq	r0, [r0, -r0, lsl #4]!
     644:	00000574 	andeq	r0, r0, r4, ror r5
     648:	0b609102 	bleq	1824a58 <startup-0x1e7db5a8>
     64c:	000006bd 			; <UNDEFINED> instruction: 0x000006bd
     650:	84076102 	strhi	r6, [r7], #-258	; 0xfffffefe
     654:	02000005 	andeq	r0, r0, #5
     658:	06005491 			; <UNDEFINED> instruction: 0x06005491
     65c:	0000004d 	andeq	r0, r0, sp, asr #32
     660:	00000584 	andeq	r0, r0, r4, lsl #11
     664:	00006a07 	andeq	r6, r0, r7, lsl #20
     668:	06000c00 	streq	r0, [r0], -r0, lsl #24
     66c:	0000004d 	andeq	r0, r0, sp, asr #32
     670:	00000594 	muleq	r0, r4, r5
     674:	00006a07 	andeq	r6, r0, r7, lsl #20
     678:	11000800 	tstne	r0, r0, lsl #16
     67c:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
     680:	3e065502 	cfsh32cc	mvfx5, mvfx6, #2
     684:	06200005 	strteq	r0, [r0], -r5
     688:	01000000 	mrseq	r0, (UNDEF: 0)
     68c:	0005c39c 	muleq	r5, ip, r3
     690:	00781200 	rsbseq	r1, r8, r0, lsl #4
     694:	431e5502 	tstmi	lr, #8388608	; 0x800000
     698:	01000001 	tsteq	r0, r1
     69c:	00791250 	rsbseq	r1, r9, r0, asr r2
     6a0:	43255502 			; <UNDEFINED> instruction: 0x43255502
     6a4:	01000001 	tsteq	r0, r1
     6a8:	29110051 	ldmdbcs	r1, {r0, r4, r6}
     6ac:	02000003 	andeq	r0, r0, #3
     6b0:	0538064f 	ldreq	r0, [r8, #-1615]!	; 0xfffff9b1
     6b4:	00062000 	andeq	r2, r6, r0
     6b8:	9c010000 	stcls	0, cr0, [r1], {-0}
     6bc:	000005f2 	strdeq	r0, [r0], -r2
     6c0:	02007812 	andeq	r7, r0, #1179648	; 0x120000
     6c4:	01431c4f 	cmpeq	r3, pc, asr #24
     6c8:	50010000 	andpl	r0, r1, r0
     6cc:	02007912 	andeq	r7, r0, #294912	; 0x48000
     6d0:	0143234f 	cmpeq	r3, pc, asr #6
     6d4:	51010000 	mrspl	r0, (UNDEF: 1)
     6d8:	043d1e00 	ldrteq	r1, [sp], #-3584	; 0xfffff200
     6dc:	49020000 	stmdbmi	r2, {}	; <UNPREDICTABLE>
     6e0:	00053206 	andeq	r3, r5, r6, lsl #4
     6e4:	00000620 	andeq	r0, r0, r0, lsr #12
     6e8:	1e9c0100 	fmlnee	f0, f4, f0
     6ec:	000002eb 	andeq	r0, r0, fp, ror #5
     6f0:	2c064302 	stccs	3, cr4, [r6], {2}
     6f4:	06200005 	strteq	r0, [r0], -r5
     6f8:	01000000 	mrseq	r0, (UNDEF: 0)
     6fc:	01a9149c 			; <UNDEFINED> instruction: 0x01a9149c
     700:	37020000 	strcc	r0, [r2, -r0]
     704:	0004a806 	andeq	sl, r4, r6, lsl #16
     708:	00008420 	andeq	r8, r0, r0, lsr #8
     70c:	839c0100 	orrshi	r0, ip, #0, 2
     710:	12000006 	andne	r0, r0, #6
     714:	37020078 	smlsdxcc	r2, r8, r0, r0
     718:	00014317 	andeq	r4, r1, r7, lsl r3
     71c:	64910200 	ldrvs	r0, [r1], #512	; 0x200
     720:	02007912 	andeq	r7, r0, #294912	; 0x48000
     724:	01431e37 	cmpeq	r3, r7, lsr lr
     728:	91020000 	mrsls	r0, (UNDEF: 2)
     72c:	68631260 	stmdavs	r3!, {r5, r6, r9, ip}^
     730:	2a370200 	bcs	dc0f38 <startup-0x1f23f0c8>
     734:	00000071 	andeq	r0, r0, r1, ror r0
     738:	17789102 	ldrbne	r9, [r8, -r2, lsl #2]!
     73c:	200004bc 			; <UNDEFINED> instruction: 0x200004bc
     740:	00000060 	andeq	r0, r0, r0, rrx
     744:	02006913 	andeq	r6, r0, #311296	; 0x4c000
     748:	01430a39 	cmpeq	r3, r9, lsr sl
     74c:	91020000 	mrsls	r0, (UNDEF: 2)
     750:	04c2176c 	strbeq	r1, [r2], #1900	; 0x76c
     754:	004e2000 	subeq	r2, lr, r0
     758:	6a130000 	bvs	4c0760 <startup-0x1fb3f8a0>
     75c:	0b3a0200 	bleq	e80f64 <startup-0x1f17f09c>
     760:	00000143 	andeq	r0, r0, r3, asr #2
     764:	00689102 	rsbeq	r9, r8, r2, lsl #2
     768:	fe140000 	cdp2	0, 1, cr0, cr4, cr0, {0}
     76c:	02000002 	andeq	r0, r0, #2
     770:	03700613 	cmneq	r0, #19922944	; 0x1300000
     774:	01382000 	teqeq	r8, r0
     778:	9c010000 	stcls	0, cr0, [r1], {-0}
     77c:	000006e3 	andeq	r0, r0, r3, ror #13
     780:	02007812 	andeq	r7, r0, #1179648	; 0x120000
     784:	01431613 	cmpeq	r3, r3, lsl r6
     788:	91030000 	mrsls	r0, (UNDEF: 3)
     78c:	79127efc 	ldmdbvc	r2, {r2, r3, r4, r5, r6, r7, r9, sl, fp, ip, sp, lr}
     790:	1d130200 	lfmne	f0, 4, [r3, #-0]
     794:	00000143 	andeq	r0, r0, r3, asr #2
     798:	7ef89103 	nrmvce	f1, f3
     79c:	00686312 	rsbeq	r6, r8, r2, lsl r3
     7a0:	4d241302 	stcmi	3, cr1, [r4, #-8]!
     7a4:	03000000 	movweq	r0, #0
     7a8:	0b7ef791 	bleq	1fbe5f4 <startup-0x1e041a0c>
     7ac:	00000187 	andeq	r0, r0, r7, lsl #3
     7b0:	710b1502 	tstvc	fp, r2, lsl #10
     7b4:	03000000 	movweq	r0, #0
     7b8:	1a7f8491 	bne	1fe1a04 <startup-0x1e01e5fc>
     7bc:	000001a9 	andeq	r0, r0, r9, lsr #3
     7c0:	43023402 	movwmi	r3, #9218	; 0x2402
     7c4:	1b000001 	blne	7d0 <startup-0x1ffff830>
     7c8:	52140000 	andspl	r0, r4, #0
     7cc:	02000004 	andeq	r0, r0, #4
     7d0:	0344060b 	movteq	r0, #17931	; 0x460b
     7d4:	002c2000 	eoreq	r2, ip, r0
     7d8:	9c010000 	stcls	0, cr0, [r1], {-0}
     7dc:	00000721 	andeq	r0, r0, r1, lsr #14
     7e0:	00039915 	andeq	r9, r3, r5, lsl r9
     7e4:	140b0200 	strne	r0, [fp], #-512	; 0xfffffe00
     7e8:	00000143 	andeq	r0, r0, r3, asr #2
     7ec:	17749102 	ldrbne	r9, [r4, -r2, lsl #2]!
     7f0:	20000352 	andcs	r0, r0, r2, asr r3
     7f4:	00000004 	andeq	r0, r0, r4
     7f8:	00019e1a 	andeq	r9, r1, sl, lsl lr
     7fc:	030e0200 	movweq	r0, #57856	; 0xe200
     800:	00000143 	andeq	r0, r0, r3, asr #2
     804:	0000001b 	andeq	r0, r0, fp, lsl r0
     808:	0001f814 	andeq	pc, r1, r4, lsl r8	; <UNPREDICTABLE>
     80c:	06510100 	ldrbeq	r0, [r1], -r0, lsl #2
     810:	200002f8 	strdcs	r0, [r0], -r8
     814:	0000004c 	andeq	r0, r0, ip, asr #32
     818:	07479c01 	strbeq	r9, [r7, -r1, lsl #24]
     81c:	62150000 	andsvs	r0, r5, #0
     820:	01000004 	tsteq	r0, r4
     824:	006a1a51 	rsbeq	r1, sl, r1, asr sl
     828:	91020000 	mrsls	r0, (UNDEF: 2)
     82c:	601e0074 	andsvs	r0, lr, r4, ror r0
     830:	01000003 	tsteq	r0, r3
     834:	02c8064a 	sbceq	r0, r8, #77594624	; 0x4a00000
     838:	00302000 	eorseq	r2, r0, r0
     83c:	9c010000 	stcls	0, cr0, [r1], {-0}
     840:	0002ba1f 	andeq	fp, r2, pc, lsl sl
     844:	063f0100 	ldrteq	r0, [pc], -r0, lsl #2
     848:	20000284 	andcs	r0, r0, r4, lsl #5
     84c:	00000044 	andeq	r0, r0, r4, asr #32
     850:	cd149c01 	ldcgt	12, cr9, [r4, #-4]
     854:	01000003 	tsteq	r0, r3
     858:	02640639 	rsbeq	r0, r4, #59768832	; 0x3900000
     85c:	00202000 	eoreq	r2, r0, r0
     860:	9c010000 	stcls	0, cr0, [r1], {-0}
     864:	000007b6 			; <UNDEFINED> instruction: 0x000007b6
     868:	0002701c 	andeq	r7, r2, ip, lsl r0
     86c:	00000420 	andeq	r0, r0, r0, lsr #8
     870:	00079d00 	andeq	r9, r7, r0, lsl #26
     874:	03601a00 	cmneq	r0, #0, 20
     878:	3b010000 	blcc	40880 <startup-0x1ffbf780>
     87c:	00014314 	andeq	r4, r1, r4, lsl r3
     880:	00001b00 	andeq	r1, r0, r0, lsl #22
     884:	00027617 	andeq	r7, r2, r7, lsl r6
     888:	00000420 	andeq	r0, r0, r0, lsr #8
     88c:	02ba1a00 	adcseq	r1, sl, #0, 20
     890:	3c010000 	stccc	0, cr0, [r1], {-0}
     894:	00014307 	andeq	r4, r1, r7, lsl #6
     898:	00001b00 	andeq	r1, r0, r0, lsl #22
     89c:	02a81e00 	adceq	r1, r8, #0, 28
     8a0:	31010000 	mrscc	r0, (UNDEF: 1)
     8a4:	00023406 	andeq	r3, r2, r6, lsl #8
     8a8:	00003020 	andeq	r3, r0, r0, lsr #32
     8ac:	109c0100 	addsne	r0, ip, r0, lsl #2
     8b0:	0000034e 	andeq	r0, r0, lr, asr #6
     8b4:	1c062b01 			; <UNDEFINED> instruction: 0x1c062b01
     8b8:	18200002 	stmdane	r0!, {r1}
     8bc:	01000000 	mrseq	r0, (UNDEF: 0)
     8c0:	04a5109c 	strteq	r1, [r5], #156	; 0x9c
     8c4:	25010000 	strcs	r0, [r1, #-0]
     8c8:	0001fc06 	andeq	pc, r1, r6, lsl #24
     8cc:	00002020 	andeq	r2, r0, r0, lsr #32
     8d0:	209c0100 	addscs	r0, ip, r0, lsl #2
     8d4:	0000047c 	andeq	r0, r0, ip, ror r4
     8d8:	43051f01 	movwmi	r1, #24321	; 0x5f01
     8dc:	d8000001 	stmdale	r0, {r0}
     8e0:	24200001 	strtcs	r0, [r0], #-1
     8e4:	01000000 	mrseq	r0, (UNDEF: 0)
     8e8:	038e109c 	orreq	r1, lr, #156	; 0x9c
     8ec:	16010000 	strne	r0, [r1], -r0
     8f0:	00019006 	andeq	r9, r1, r6
     8f4:	00004820 	andeq	r4, r0, r0, lsr #16
     8f8:	009c0100 	addseq	r0, ip, r0, lsl #2
     8fc:	000007bc 			; <UNDEFINED> instruction: 0x000007bc
     900:	02ed0004 	rsceq	r0, sp, #4
     904:	01040000 	mrseq	r0, (UNDEF: 4)
     908:	00000000 	andeq	r0, r0, r0
     90c:	00063f0c 	andeq	r3, r6, ip, lsl #30
     910:	00009300 	andeq	r9, r0, r0, lsl #6
     914:	000a3400 	andeq	r3, sl, r0, lsl #8
     918:	000c8c20 	andeq	r8, ip, r0, lsr #24
     91c:	00054100 	andeq	r4, r5, r0, lsl #2
     920:	007c0200 	rsbseq	r0, ip, r0, lsl #4
     924:	18020000 	stmdane	r2, {}	; <UNPREDICTABLE>
     928:	00003e0e 	andeq	r3, r0, lr, lsl #28
     92c:	bc030500 	cfstr32lt	mvfx0, [r3], {-0}
     930:	0320001e 			; <UNDEFINED> instruction: 0x0320001e
     934:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
     938:	37040074 	smlsdxcc	r4, r4, r0, r0
     93c:	02000000 	andeq	r0, r0, #0
     940:	0000016b 	andeq	r0, r0, fp, ror #2
     944:	3e0e1902 	vmlacc.f16	s2, s28, s4	; <UNPREDICTABLE>
     948:	05000000 	streq	r0, [r0, #-0]
     94c:	001eb803 	andseq	fp, lr, r3, lsl #16
     950:	00e50220 	rsceq	r0, r5, r0, lsr #4
     954:	1a020000 	bne	8095c <startup-0x1ff7f6a4>
     958:	00003705 	andeq	r3, r0, r5, lsl #14
     95c:	c0030500 	andgt	r0, r3, r0, lsl #10
     960:	0520001e 	streq	r0, [r0, #-30]!	; 0xffffffe2
     964:	000004f9 	strdeq	r0, [r0], -r9
     968:	080b0318 	stmdaeq	fp, {r3, r4, r8, r9}
     96c:	000000bf 	strheq	r0, [r0], -pc	; <UNPREDICTABLE>
     970:	03007806 	movweq	r7, #2054	; 0x806
     974:	0037060d 	eorseq	r0, r7, sp, lsl #12
     978:	06000000 	streq	r0, [r0], -r0
     97c:	0d030079 	stceq	0, cr0, [r3, #-484]	; 0xfffffe1c
     980:	00003708 	andeq	r3, r0, r8, lsl #14
     984:	1d070400 	cfstrsne	mvf0, [r7, #-0]
     988:	03000006 	movweq	r0, #6
     98c:	00370b0d 	eorseq	r0, r7, sp, lsl #22
     990:	07080000 	streq	r0, [r8, -r0]
     994:	00000615 	andeq	r0, r0, r5, lsl r6
     998:	37060e03 	strcc	r0, [r6, -r3, lsl #28]
     99c:	0c000000 	stceq	0, cr0, [r0], {-0}
     9a0:	0004e507 	andeq	lr, r4, r7, lsl #10
     9a4:	0f0e0300 	svceq	0x000e0300
     9a8:	00000037 	andeq	r0, r0, r7, lsr r0
     9ac:	050c0710 	streq	r0, [ip, #-1808]	; 0xfffff8f0
     9b0:	0e030000 	cdpeq	0, 0, cr0, cr3, cr0, {0}
     9b4:	00003715 	andeq	r3, r0, r5, lsl r7
     9b8:	02001400 	andeq	r1, r0, #0, 8
     9bc:	000005e9 	andeq	r0, r0, r9, ror #11
     9c0:	67020f03 	strvs	r0, [r2, -r3, lsl #30]
     9c4:	05000000 	streq	r0, [r0, #-0]
     9c8:	00265403 	eoreq	r5, r6, r3, lsl #8
     9cc:	05e20520 	strbeq	r0, [r2, #1312]!	; 0x520
     9d0:	030c0000 	movweq	r0, #49152	; 0xc000
     9d4:	01020810 	tsteq	r2, r0, lsl r8
     9d8:	78060000 	stmdavc	r6, {}	; <UNPREDICTABLE>
     9dc:	06120300 	ldreq	r0, [r2], -r0, lsl #6
     9e0:	00000037 	andeq	r0, r0, r7, lsr r0
     9e4:	00790600 	rsbseq	r0, r9, r0, lsl #12
     9e8:	37081203 	strcc	r1, [r8, -r3, lsl #4]
     9ec:	04000000 	streq	r0, [r0], #-0
     9f0:	0005d407 	andeq	sp, r5, r7, lsl #8
     9f4:	06130300 	ldreq	r0, [r3], -r0, lsl #6
     9f8:	00000037 	andeq	r0, r0, r7, lsr r0
     9fc:	37080008 	strcc	r0, [r8, -r8]
     a00:	11000000 	mrsne	r0, (UNDEF: 0)
     a04:	09000001 	stmdbeq	r0, {r0}
     a08:	00000067 	andeq	r0, r0, r7, rrx
     a0c:	05850200 	streq	r0, [r5, #512]	; 0x200
     a10:	3b030000 	blcc	c0a18 <startup-0x1ff3f5e8>
     a14:	00012307 	andeq	r2, r1, r7, lsl #6
     a18:	50030500 	andpl	r0, r3, r0, lsl #10
     a1c:	0a200026 	beq	800abc <startup-0x1f7ff544>
     a20:	00010204 	andeq	r0, r1, r4, lsl #4
     a24:	06e50200 	strbteq	r0, [r5], r0, lsl #4
     a28:	3c030000 	stccc	0, cr0, [r3], {-0}
     a2c:	00012307 	andeq	r2, r1, r7, lsl #6
     a30:	c4030500 	strgt	r0, [r3], #-1280	; 0xfffffb00
     a34:	0b20001e 	bleq	800ab4 <startup-0x1f7ff54c>
     a38:	00000067 	andeq	r0, r0, r7, rrx
     a3c:	00000151 	andeq	r0, r0, r1, asr r1
     a40:	0001510c 	andeq	r5, r1, ip, lsl #2
     a44:	510c0f00 	tstpl	ip, r0, lsl #30
     a48:	04000001 	streq	r0, [r0], #-1
     a4c:	07040d00 	streq	r0, [r4, -r0, lsl #26]
     a50:	00000379 	andeq	r0, r0, r9, ror r3
     a54:	00057f02 	andeq	r7, r5, r2, lsl #30
     a58:	123d0300 	eorsne	r0, sp, #0, 6
     a5c:	0000013b 	andeq	r0, r0, fp, lsr r1
     a60:	1ed00305 	cdpne	3, 13, cr0, cr0, cr5, {0}
     a64:	ad022000 	stcge	0, cr2, [r2, #-0]
     a68:	03000006 	movweq	r0, #6
     a6c:	0037053e 	eorseq	r0, r7, lr, lsr r5
     a70:	03050000 	movweq	r0, #20480	; 0x5000
     a74:	20001ecc 	andcs	r1, r0, ip, asr #29
     a78:	0006b402 	andeq	fp, r6, r2, lsl #8
     a7c:	053f0300 	ldreq	r0, [pc, #-768]!	; 784 <startup-0x1ffff87c>
     a80:	00000037 	andeq	r0, r0, r7, lsr r0
     a84:	26700305 	ldrbtcs	r0, [r0], -r5, lsl #6
     a88:	eb022000 	bl	88a90 <startup-0x1ff77570>
     a8c:	03000000 	movweq	r0, #0
     a90:	00370540 	eorseq	r0, r7, r0, asr #10
     a94:	03050000 	movweq	r0, #20480	; 0x5000
     a98:	20001ec8 	andcs	r1, r0, r8, asr #29
     a9c:	00056402 	andeq	r6, r5, r2, lsl #8
     aa0:	05410300 	strbeq	r0, [r1, #-768]	; 0xfffffd00
     aa4:	00000037 	andeq	r0, r0, r7, lsr r0
     aa8:	266c0305 	strbtcs	r0, [ip], -r5, lsl #6
     aac:	c20b2000 	andgt	r2, fp, #0
     ab0:	c2000001 	andgt	r0, r0, #1
     ab4:	0c000001 	stceq	0, cr0, [r0], {1}
     ab8:	00000151 	andeq	r0, r0, r1, asr r1
     abc:	010d0007 	tsteq	sp, r7
     ac0:	00029108 	andeq	r9, r2, r8, lsl #2
     ac4:	06f80200 	ldrbteq	r0, [r8], r0, lsl #4
     ac8:	43030000 	movwmi	r0, #12288	; 0x3000
     acc:	0001b206 	andeq	fp, r1, r6, lsl #4
     ad0:	74030500 	strvc	r0, [r3], #-1280	; 0xfffffb00
     ad4:	0e200026 	cdpeq	0, 2, cr0, cr0, cr6, {1}
     ad8:	000003ba 			; <UNDEFINED> instruction: 0x000003ba
     adc:	06010801 	streq	r0, [r1], -r1, lsl #16
     ae0:	2000169a 	mulcs	r0, sl, r6
     ae4:	00000026 	andeq	r0, r0, r6, lsr #32
     ae8:	020f9c01 	andeq	r9, pc, #256	; 0x100
     aec:	780f0000 	stmdavc	pc, {}	; <UNPREDICTABLE>
     af0:	01080100 	mrseq	r0, (UNDEF: 24)
     af4:	00003711 	andeq	r3, r0, r1, lsl r7
     af8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     afc:	0100790f 	tsteq	r0, pc, lsl #18
     b00:	37180108 	ldrcc	r0, [r8, -r8, lsl #2]
     b04:	02000000 	andeq	r0, r0, #0
     b08:	10007091 	mulne	r0, r1, r0
     b0c:	00000578 	andeq	r0, r0, r8, ror r5
     b10:	9c06f701 	stcls	7, cr15, [r6], {1}
     b14:	fe200015 	mcr2	0, 1, r0, cr0, cr5, {0}
     b18:	01000000 	mrseq	r0, (UNDEF: 0)
     b1c:	0002619c 	muleq	r2, ip, r1
     b20:	00621100 	rsbeq	r1, r2, r0, lsl #2
     b24:	7124f701 	msrvc	LR_abt, r1
     b28:	02000002 	andeq	r0, r0, #2
     b2c:	a4126c91 	ldrge	r6, [r2], #-3217	; 0xfffff36f
     b30:	ec200015 	stc	0, cr0, [r0], #-84	; 0xffffffac
     b34:	13000000 	movwne	r0, #0
     b38:	f9010078 			; <UNDEFINED> instruction: 0xf9010078
     b3c:	0000370a 	andeq	r3, r0, sl, lsl #14
     b40:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     b44:	0015aa12 	andseq	sl, r5, r2, lsl sl
     b48:	0000da20 	andeq	sp, r0, r0, lsr #20
     b4c:	00791300 	rsbseq	r1, r9, r0, lsl #6
     b50:	370bfb01 	strcc	pc, [fp, -r1, lsl #22]
     b54:	02000000 	andeq	r0, r0, #0
     b58:	00007091 	muleq	r0, r1, r0
     b5c:	00670b00 	rsbeq	r0, r7, r0, lsl #22
     b60:	02710000 	rsbseq	r0, r1, #0
     b64:	510c0000 	mrspl	r0, (UNDEF: 12)
     b68:	04000001 	streq	r0, [r0], #-1
     b6c:	61040a00 	tstvs	r4, r0, lsl #20
     b70:	14000002 	strne	r0, [r0], #-2
     b74:	000005a1 	andeq	r0, r0, r1, lsr #11
     b78:	c107dd01 	tstgt	r7, r1, lsl #26
     b7c:	1c000002 	stcne	0, cr0, [r0], {2}
     b80:	80200015 	eorhi	r0, r0, r5, lsl r0
     b84:	01000000 	mrseq	r0, (UNDEF: 0)
     b88:	0002c19c 	muleq	r2, ip, r1
     b8c:	68631100 	stmdavs	r3!, {r8, ip}^
     b90:	1fdd0100 	svcne	0x00dd0100
     b94:	000001c2 	andeq	r0, r0, r2, asr #3
     b98:	15779102 	ldrbne	r9, [r7, #-258]!	; 0xfffffefe
     b9c:	000006bb 			; <UNDEFINED> instruction: 0x000006bb
     ba0:	00370004 	eorseq	r0, r7, r4
     ba4:	02b00000 	adcseq	r0, r0, #0
     ba8:	00160000 	andseq	r0, r6, r0
     bac:	01007213 	tsteq	r0, r3, lsl r2
     bb0:	02c70de0 	sbceq	r0, r7, #224, 26	; 0x3800
     bb4:	03050000 	movweq	r0, #20480	; 0x5000
     bb8:	20001ea8 	andcs	r1, r0, r8, lsr #29
     bbc:	37040a00 	strcc	r0, [r4, -r0, lsl #20]
     bc0:	0b000000 	bleq	bc8 <startup-0x1ffff438>
     bc4:	00000037 	andeq	r0, r0, r7, lsr r0
     bc8:	000002d7 	ldrdeq	r0, [r0], -r7
     bcc:	0001510c 	andeq	r5, r1, ip, lsl #2
     bd0:	17000100 	strne	r0, [r0, -r0, lsl #2]
     bd4:	00000503 	andeq	r0, r0, r3, lsl #10
     bd8:	8406c901 	strhi	ip, [r6], #-2305	; 0xfffff6ff
     bdc:	98200014 	stmdals	r0!, {r2, r4}
     be0:	01000000 	mrseq	r0, (UNDEF: 0)
     be4:	0003149c 	muleq	r3, ip, r4
     be8:	00701100 	rsbseq	r1, r0, r0, lsl #2
     bec:	6720c901 	strvs	ip, [r0, -r1, lsl #18]!
     bf0:	02000000 	andeq	r0, r0, #0
     bf4:	b2127091 	andslt	r7, r2, #145	; 0x91
     bf8:	22200014 	eorcs	r0, r0, #20
     bfc:	13000000 	movwne	r0, #0
     c00:	00736863 	rsbseq	r6, r3, r3, ror #16
     c04:	1408ce01 	strne	ip, [r8], #-3585	; 0xfffff1ff
     c08:	02000003 	andeq	r0, r0, #3
     c0c:	00005491 	muleq	r0, r1, r4
     c10:	0001c20b 	andeq	ip, r1, fp, lsl #4
     c14:	00032400 	andeq	r2, r3, r0, lsl #8
     c18:	01510c00 	cmpeq	r1, r0, lsl #24
     c1c:	00090000 	andeq	r0, r9, r0
     c20:	0005b418 	andeq	fp, r5, r8, lsl r4
     c24:	05c00100 	strbeq	r0, [r0, #256]	; 0x100
     c28:	00000037 	andeq	r0, r0, r7, lsr r0
     c2c:	20001450 	andcs	r1, r0, r0, asr r4
     c30:	00000034 	andeq	r0, r0, r4, lsr r0
     c34:	03599c01 	cmpeq	r9, #256	; 0x100
     c38:	78110000 	ldmdavc	r1, {}	; <UNPREDICTABLE>
     c3c:	13c00100 	bicne	r0, r0, #0, 2
     c40:	00000037 	andeq	r0, r0, r7, lsr r0
     c44:	11749102 	cmnne	r4, r2, lsl #2
     c48:	c0010079 	andgt	r0, r1, r9, ror r0
     c4c:	0000371a 	andeq	r3, r0, sl, lsl r7
     c50:	70910200 	addsvc	r0, r1, r0, lsl #4
     c54:	06c31400 	strbeq	r1, [r3], r0, lsl #8
     c58:	a7010000 	strge	r0, [r1, -r0]
     c5c:	0000d10f 	andeq	sp, r0, pc, lsl #2
     c60:	00132400 	andseq	r2, r3, r0, lsl #8
     c64:	00012c20 	andeq	r2, r1, r0, lsr #24
     c68:	909c0100 	addsls	r0, ip, r0, lsl #2
     c6c:	11000003 	tstne	r0, r3
     c70:	a7010070 	smlsdxge	r1, r0, r0, r0
     c74:	0000d132 	andeq	sp, r0, r2, lsr r1
     c78:	60910200 	addsvs	r0, r1, r0, lsl #4
     c7c:	0006f119 	andeq	pc, r6, r9, lsl r1	; <UNPREDICTABLE>
     c80:	3aa70100 	bcc	fe9c1088 <_ctype_+0xde9be467>
     c84:	000001c2 	andeq	r0, r0, r2, asr #3
     c88:	00009102 	andeq	r9, r0, r2, lsl #2
     c8c:	00062d14 	andeq	r2, r6, r4, lsl sp
     c90:	0f930100 	svceq	0x00930100
     c94:	000000d1 	ldrdeq	r0, [r0], -r1
     c98:	20001244 	andcs	r1, r0, r4, asr #4
     c9c:	000000e0 	andeq	r0, r0, r0, ror #1
     ca0:	03f49c01 	mvnseq	r9, #256	; 0x100
     ca4:	70110000 	andsvc	r0, r1, r0
     ca8:	29930100 	ldmibcs	r3, {r8}
     cac:	000000d1 	ldrdeq	r0, [r0], -r1
     cb0:	19509102 	ldmdbne	r0, {r1, r8, ip, pc}^
     cb4:	000006f1 	strdeq	r0, [r0], -r1
     cb8:	c2319301 	eorsgt	r9, r1, #67108864	; 0x4000000
     cbc:	02000001 	andeq	r0, r0, #1
     cc0:	9d1a0091 	ldcls	0, cr0, [sl, #-580]	; 0xfffffdbc
     cc4:	01000006 	tsteq	r0, r6
     cc8:	02c1079a 	sbceq	r0, r1, #40370176	; 0x2680000
     ccc:	91020000 	mrsls	r0, (UNDEF: 2)
     cd0:	06971a6c 	ldreq	r1, [r7], ip, ror #20
     cd4:	9e010000 	cdpls	0, 0, cr0, cr1, cr0, {0}
     cd8:	00003706 	andeq	r3, r0, r6, lsl #14
     cdc:	68910200 	ldmvs	r1, {r9}
     ce0:	0006391a 	andeq	r3, r6, sl, lsl r9
     ce4:	069f0100 	ldreq	r0, [pc], r0, lsl #2
     ce8:	00000037 	andeq	r0, r0, r7, lsr r0
     cec:	00649102 	rsbeq	r9, r4, r2, lsl #2
     cf0:	0005fd17 	andeq	pc, r5, r7, lsl sp	; <UNPREDICTABLE>
     cf4:	068e0100 	streq	r0, [lr], r0, lsl #2
     cf8:	20001204 	andcs	r1, r0, r4, lsl #4
     cfc:	00000040 	andeq	r0, r0, r0, asr #32
     d00:	04189c01 	ldreq	r9, [r8], #-3073	; 0xfffff3ff
     d04:	70110000 	andsvc	r0, r1, r0
     d08:	218e0100 	orrcs	r0, lr, r0, lsl #2
     d0c:	000000d1 	ldrdeq	r0, [r0], -r1
     d10:	006c9102 	rsbeq	r9, ip, r2, lsl #2
     d14:	00070718 	andeq	r0, r7, r8, lsl r7
     d18:	05890100 	streq	r0, [r9, #256]	; 0x100
     d1c:	00000037 	andeq	r0, r0, r7, lsr r0
     d20:	200011de 	ldrdcs	r1, [r0], -lr
     d24:	00000026 	andeq	r0, r0, r6, lsr #32
     d28:	04429c01 	strbeq	r9, [r2], #-3073	; 0xfffff3ff
     d2c:	70110000 	andsvc	r0, r1, r0
     d30:	0100736f 	tsteq	r0, pc, ror #6
     d34:	00671e89 	rsbeq	r1, r7, r9, lsl #29
     d38:	91020000 	mrsls	r0, (UNDEF: 2)
     d3c:	e2180070 	ands	r0, r8, #112	; 0x70
     d40:	01000004 	tsteq	r0, r4
     d44:	00370585 	eorseq	r0, r7, r5, lsl #11
     d48:	11b80000 			; <UNDEFINED> instruction: 0x11b80000
     d4c:	00262000 	eoreq	r2, r6, r0
     d50:	9c010000 	stcls	0, cr0, [r1], {-0}
     d54:	0000046c 	andeq	r0, r0, ip, ror #8
     d58:	736f7011 	cmnvc	pc, #17
     d5c:	1e850100 	rmfnes	f0, f5, f0
     d60:	00000067 	andeq	r0, r0, r7, rrx
     d64:	00709102 	rsbseq	r9, r0, r2, lsl #2
     d68:	00055114 	andeq	r5, r5, r4, lsl r1
     d6c:	057b0100 	ldrbeq	r0, [fp, #-256]!	; 0xffffff00
     d70:	00000037 	andeq	r0, r0, r7, lsr r0
     d74:	20001104 	andcs	r1, r0, r4, lsl #2
     d78:	000000b4 	strheq	r0, [r0], -r4
     d7c:	04ed9c01 	strbteq	r9, [sp], #3073	; 0xc01
     d80:	78110000 	ldmdavc	r1, {}	; <UNPREDICTABLE>
     d84:	1c7b0100 	ldfnee	f0, [fp], #-0
     d88:	00000037 	andeq	r0, r0, r7, lsr r0
     d8c:	115c9102 	cmpne	ip, r2, lsl #2
     d90:	7b010079 	blvc	40f7c <startup-0x1ffbf084>
     d94:	00003723 	andeq	r3, r0, r3, lsr #14
     d98:	58910200 	ldmpl	r1, {r9}
     d9c:	00070219 	andeq	r0, r7, r9, lsl r2
     da0:	2c7b0100 	ldfcse	f0, [fp], #-0
     da4:	00000123 	andeq	r0, r0, r3, lsr #2
     da8:	1a549102 	bne	15251b8 <startup-0x1eadae48>
     dac:	0000051a 	andeq	r0, r0, sl, lsl r5
     db0:	37067d01 	strcc	r7, [r6, -r1, lsl #26]
     db4:	02000000 	andeq	r0, r0, #0
     db8:	14126c91 	ldrne	r6, [r2], #-3217	; 0xfffff36f
     dbc:	96200011 			; <UNDEFINED> instruction: 0x96200011
     dc0:	13000000 	movwne	r0, #0
     dc4:	7e010069 	cdpvc	0, 0, cr0, cr1, cr9, {3}
     dc8:	0000370a 	andeq	r3, r0, sl, lsl #14
     dcc:	68910200 	ldmvs	r1, {r9}
     dd0:	00111c12 	andseq	r1, r1, r2, lsl ip
     dd4:	00008220 	andeq	r8, r0, r0, lsr #4
     dd8:	006a1300 	rsbeq	r1, sl, r0, lsl #6
     ddc:	370b7f01 	strcc	r7, [fp, -r1, lsl #30]
     de0:	02000000 	andeq	r0, r0, #0
     de4:	00006491 	muleq	r0, r1, r4
     de8:	05201700 	streq	r1, [r0, #-1792]!	; 0xfffff900
     dec:	5a010000 	bpl	40df4 <startup-0x1ffbf20c>
     df0:	000ea806 	andeq	sl, lr, r6, lsl #16
     df4:	00025c20 	andeq	r5, r2, r0, lsr #24
     df8:	bb9c0100 	bllt	fe701200 <_ctype_+0xde6fe5df>
     dfc:	11000005 	tstne	r0, r5
     e00:	5a010078 	bpl	40fe8 <startup-0x1ffbf018>
     e04:	00003713 	andeq	r3, r0, r3, lsl r7
     e08:	54910200 	ldrpl	r0, [r1], #512	; 0x200
     e0c:	01007911 	tsteq	r0, r1, lsl r9
     e10:	00371a5a 	eorseq	r1, r7, sl, asr sl
     e14:	91020000 	mrsls	r0, (UNDEF: 2)
     e18:	05131a50 	ldreq	r1, [r3, #-2640]	; 0xfffff5b0
     e1c:	69010000 	stmdbvs	r1, {}	; <UNPREDICTABLE>
     e20:	00003706 	andeq	r3, r0, r6, lsl #14
     e24:	5c910200 	lfmpl	f0, 4, [r1], {0}
     e28:	0005511b 	andeq	r5, r5, fp, lsl r1
     e2c:	223b0100 	eorscs	r0, fp, #0, 2
     e30:	00000037 	andeq	r0, r0, r7, lsr r0
     e34:	0000053e 	andeq	r0, r0, lr, lsr r5
     e38:	d81c0016 	ldmdale	ip, {r1, r2, r4}
     e3c:	d220000e 	eorle	r0, r0, #14
     e40:	8c000000 	stchi	0, cr0, [r0], {-0}
     e44:	1b000005 	blne	e60 <startup-0x1ffff1a0>
     e48:	00000551 	andeq	r0, r0, r1, asr r5
     e4c:	37223b01 	strcc	r3, [r2, -r1, lsl #22]!
     e50:	5d000000 	stcpl	0, cr0, [r0, #-0]
     e54:	16000005 	strne	r0, [r0], -r5
     e58:	0f201200 	svceq	0x00201200
     e5c:	00882000 	addeq	r2, r8, r0
     e60:	69130000 	ldmdbvs	r3, {}	; <UNPREDICTABLE>
     e64:	0b610100 	bleq	184126c <startup-0x1e7bed94>
     e68:	00000037 	andeq	r0, r0, r7, lsr r0
     e6c:	126c9102 	rsbne	r9, ip, #-2147483648	; 0x80000000
     e70:	20000f28 	andcs	r0, r0, r8, lsr #30
     e74:	00000074 	andeq	r0, r0, r4, ror r0
     e78:	01006a13 	tsteq	r0, r3, lsl sl
     e7c:	00370c62 	eorseq	r0, r7, r2, ror #24
     e80:	91020000 	mrsls	r0, (UNDEF: 2)
     e84:	00000068 	andeq	r0, r0, r8, rrx
     e88:	00104612 	andseq	r4, r0, r2, lsl r6
     e8c:	0000aa20 	andeq	sl, r0, r0, lsr #20
     e90:	00691300 	rsbeq	r1, r9, r0, lsl #6
     e94:	370b7201 	strcc	r7, [fp, -r1, lsl #4]
     e98:	02000000 	andeq	r0, r0, #0
     e9c:	4e126491 	cfcmpsmi	r6, mvf2, mvf1
     ea0:	94200010 	strtls	r0, [r0], #-16
     ea4:	13000000 	movwne	r0, #0
     ea8:	7301006a 	movwvc	r0, #4202	; 0x106a
     eac:	0000370c 	andeq	r3, r0, ip, lsl #14
     eb0:	60910200 	addsvs	r0, r1, r0, lsl #4
     eb4:	1d000000 	stcne	0, cr0, [r0, #-0]
     eb8:	000006a3 	andeq	r0, r0, r3, lsr #13
     ebc:	90065401 	andls	r5, r6, r1, lsl #8
     ec0:	1820000e 	stmdane	r0!, {r1, r2, r3}
     ec4:	01000000 	mrseq	r0, (UNDEF: 0)
     ec8:	0546179c 	strbeq	r1, [r6, #-1948]	; 0xfffff864
     ecc:	4c010000 	stcmi	0, cr0, [r1], {-0}
     ed0:	000d7c06 	andeq	r7, sp, r6, lsl #24
     ed4:	00011420 	andeq	r1, r1, r0, lsr #8
     ed8:	f19c0100 			; <UNDEFINED> instruction: 0xf19c0100
     edc:	11000005 	tstne	r0, r5
     ee0:	4c010070 	stcmi	0, cr0, [r1], {112}	; 0x70
     ee4:	0005f121 	andeq	pc, r5, r1, lsr #2
     ee8:	6c910200 	lfmvs	f0, 4, [r1], {0}
     eec:	d1040a00 	tstle	r4, r0, lsl #20
     ef0:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
     ef4:	0000060a 	andeq	r0, r0, sl, lsl #12
     ef8:	fa064201 	blx	191704 <startup-0x1fe6e8fc>
     efc:	8220000c 	eorhi	r0, r0, #12
     f00:	01000000 	mrseq	r0, (UNDEF: 0)
     f04:	00063c9c 	muleq	r6, ip, ip
     f08:	0d001200 	sfmeq	f1, 4, [r0, #-0]
     f0c:	00642000 	rsbeq	r2, r4, r0
     f10:	69130000 	ldmdbvs	r3, {}	; <UNPREDICTABLE>
     f14:	0a440100 	beq	110131c <startup-0x1eefece4>
     f18:	00000037 	andeq	r0, r0, r7, lsr r0
     f1c:	12749102 	rsbsne	r9, r4, #-2147483648	; 0x80000000
     f20:	20000d06 	andcs	r0, r0, r6, lsl #26
     f24:	00000052 	andeq	r0, r0, r2, asr r0
     f28:	01006a13 	tsteq	r0, r3, lsl sl
     f2c:	00370b45 	eorseq	r0, r7, r5, asr #22
     f30:	91020000 	mrsls	r0, (UNDEF: 2)
     f34:	00000070 	andeq	r0, r0, r0, ror r0
     f38:	00059117 	andeq	r9, r5, r7, lsl r1
     f3c:	063d0100 	ldrteq	r0, [sp], -r0, lsl #2
     f40:	20000cc8 	andcs	r0, r0, r8, asr #25
     f44:	00000032 	andeq	r0, r0, r2, lsr r0
     f48:	06609c01 	strbteq	r9, [r0], -r1, lsl #24
     f4c:	70110000 	andsvc	r0, r1, r0
     f50:	243d0100 	ldrtcs	r0, [sp], #-256	; 0xffffff00
     f54:	000000d1 	ldrdeq	r0, [r0], -r1
     f58:	006c9102 	rsbeq	r9, ip, r2, lsl #2
     f5c:	0005c817 	andeq	ip, r5, r7, lsl r8
     f60:	062b0100 	strteq	r0, [fp], -r0, lsl #2
     f64:	20000bc0 	andcs	r0, r0, r0, asr #23
     f68:	00000108 	andeq	r0, r0, r8, lsl #2
     f6c:	07039c01 	streq	r9, [r3, -r1, lsl #24]
     f70:	70110000 	andsvc	r0, r1, r0
     f74:	202b0100 	eorcs	r0, fp, r0, lsl #2
     f78:	000000d1 	ldrdeq	r0, [r0], -r1
     f7c:	1a4c9102 	bne	132538c <startup-0x1ecdac74>
     f80:	00000529 	andeq	r0, r0, r9, lsr #10
     f84:	37062e01 	strcc	r2, [r6, -r1, lsl #28]
     f88:	02000000 	andeq	r0, r0, #0
     f8c:	d41c6c91 	ldrle	r6, [ip], #-3217	; 0xfffff36f
     f90:	8220000b 	eorhi	r0, r0, #11
     f94:	bc000000 	stclt	0, cr0, [r0], {-0}
     f98:	13000006 	movwne	r0, #6
     f9c:	01007872 	tsteq	r0, r2, ror r8
     fa0:	00370731 	eorseq	r0, r7, r1, lsr r7
     fa4:	91020000 	mrsls	r0, (UNDEF: 2)
     fa8:	79721360 	ldmdbvc	r2!, {r5, r6, r8, r9, ip}^
     fac:	07320100 	ldreq	r0, [r2, -r0, lsl #2]!
     fb0:	00000037 	andeq	r0, r0, r7, lsr r0
     fb4:	005c9102 	subseq	r9, ip, r2, lsl #2
     fb8:	000c5c12 	andeq	r5, ip, r2, lsl ip
     fbc:	00005420 	andeq	r5, r0, r0, lsr #8
     fc0:	00691300 	rsbeq	r1, r9, r0, lsl #6
     fc4:	370a3901 	strcc	r3, [sl, -r1, lsl #18]
     fc8:	02000000 	andeq	r0, r0, #0
     fcc:	62126891 	andsvs	r6, r2, #9502720	; 0x910000
     fd0:	4220000c 	eormi	r0, r0, #12
     fd4:	13000000 	movwne	r0, #0
     fd8:	3a01006a 	bcc	41188 <startup-0x1ffbee78>
     fdc:	0000370b 	andeq	r3, r0, fp, lsl #14
     fe0:	64910200 	ldrvs	r0, [r1], #512	; 0x200
     fe4:	000c6812 	andeq	r6, ip, r2, lsl r8
     fe8:	00003020 	andeq	r3, r0, r0, lsr #32
     fec:	05511f00 	ldrbeq	r1, [r1, #-3840]	; 0xfffff100
     ff0:	3b010000 	blcc	40ff8 <startup-0x1ffbf008>
     ff4:	00003722 	andeq	r3, r0, r2, lsr #14
     ff8:	00001600 	andeq	r1, r0, r0, lsl #12
     ffc:	20000000 	andcs	r0, r0, r0
    1000:	000005be 			; <UNDEFINED> instruction: 0x000005be
    1004:	37051d01 	strcc	r1, [r5, -r1, lsl #26]
    1008:	20000000 	andcs	r0, r0, r0
    100c:	a020000b 	eorge	r0, r0, fp
    1010:	01000000 	mrseq	r0, (UNDEF: 0)
    1014:	00076a9c 	muleq	r7, ip, sl
    1018:	05361a00 	ldreq	r1, [r6, #-2560]!	; 0xfffff600
    101c:	1f010000 	svcne	0x00010000
    1020:	00003706 	andeq	r3, r0, r6, lsl #14
    1024:	68910200 	ldmvs	r1, {r9}
    1028:	0004ea1a 	andeq	lr, r4, sl, lsl sl
    102c:	06200100 	strteq	r0, [r0], -r0, lsl #2
    1030:	00000037 	andeq	r0, r0, r7, lsr r0
    1034:	12749102 	rsbsne	r9, r4, #-2147483648	; 0x80000000
    1038:	20000b2e 	andcs	r0, r0, lr, lsr #22
    103c:	00000072 	andeq	r0, r0, r2, ror r0
    1040:	01007813 	tsteq	r0, r3, lsl r8
    1044:	00370a21 	eorseq	r0, r7, r1, lsr #20
    1048:	91020000 	mrsls	r0, (UNDEF: 2)
    104c:	0b341270 	bleq	d05a14 <startup-0x1f2fa5ec>
    1050:	00602000 	rsbeq	r2, r0, r0
    1054:	79130000 	ldmdbvc	r3, {}	; <UNPREDICTABLE>
    1058:	0b220100 	bleq	881460 <startup-0x1f77eba0>
    105c:	00000037 	andeq	r0, r0, r7, lsr r0
    1060:	006c9102 	rsbeq	r9, ip, r2, lsl #2
    1064:	f2210000 	vhadd.s32	d0, d1, d0
    1068:	01000005 	tsteq	r0, r5
    106c:	0a340605 	beq	d02888 <startup-0x1f2fd778>
    1070:	00ec2000 	rsceq	r2, ip, r0
    1074:	9c010000 	stcls	0, cr0, [r1], {-0}
    1078:	0006d819 	andeq	sp, r6, r9, lsl r8
    107c:	17050100 	strne	r0, [r5, -r0, lsl #2]
    1080:	000002c1 	andeq	r0, r0, r1, asr #5
    1084:	196c9102 	stmdbne	ip!, {r1, r8, ip, pc}^
    1088:	0000056d 	andeq	r0, r0, sp, ror #10
    108c:	c12b0501 			; <UNDEFINED> instruction: 0xc12b0501
    1090:	02000002 	andeq	r0, r0, #2
    1094:	70116891 	mulsvc	r1, r1, r8
    1098:	47050100 	strmi	r0, [r5, -r0, lsl #2]
    109c:	000005f1 	strdeq	r0, [r0], -r1
    10a0:	12649102 	rsbne	r9, r4, #-2147483648	; 0x80000000
    10a4:	20000a40 	andcs	r0, r0, r0, asr #20
    10a8:	00000032 	andeq	r0, r0, r2, lsr r0
    10ac:	01006913 	tsteq	r0, r3, lsl r9
    10b0:	00370a07 	eorseq	r0, r7, r7, lsl #20
    10b4:	91020000 	mrsls	r0, (UNDEF: 2)
    10b8:	00000074 	andeq	r0, r0, r4, ror r0
    10bc:	000005f8 	strdeq	r0, [r0], -r8
    10c0:	05320004 	ldreq	r0, [r2, #-4]!
    10c4:	01040000 	mrseq	r0, (UNDEF: 4)
    10c8:	00000000 	andeq	r0, r0, r0
    10cc:	0008090c 	andeq	r0, r8, ip, lsl #18
    10d0:	00009300 	andeq	r9, r0, r0, lsl #6
	...
    10dc:	000ae200 	andeq	lr, sl, r0, lsl #4
    10e0:	007c0200 	rsbseq	r0, ip, r0, lsl #4
    10e4:	18030000 	stmdane	r3, {}	; <UNPREDICTABLE>
    10e8:	00003e0e 	andeq	r3, r0, lr, lsl #28
    10ec:	bc030500 	cfstr32lt	mvfx0, [r3], {-0}
    10f0:	0320001e 			; <UNDEFINED> instruction: 0x0320001e
    10f4:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    10f8:	37040074 	smlsdxcc	r4, r4, r0, r0
    10fc:	02000000 	andeq	r0, r0, #0
    1100:	0000016b 	andeq	r0, r0, fp, ror #2
    1104:	3e0e1903 	vmlacc.f16	s2, s28, s6	; <UNPREDICTABLE>
    1108:	05000000 	streq	r0, [r0, #-0]
    110c:	001eb803 	andseq	fp, lr, r3, lsl #16
    1110:	00e50220 	rsceq	r0, r5, r0, lsr #4
    1114:	1a030000 	bne	c111c <startup-0x1ff3eee4>
    1118:	00003705 	andeq	r3, r0, r5, lsl #14
    111c:	c0030500 	andgt	r0, r3, r0, lsl #10
    1120:	0520001e 	streq	r0, [r0, #-30]!	; 0xffffffe2
    1124:	000004f9 	strdeq	r0, [r0], -r9
    1128:	080b0418 	stmdaeq	fp, {r3, r4, sl}
    112c:	000000bf 	strheq	r0, [r0], -pc	; <UNPREDICTABLE>
    1130:	04007806 	streq	r7, [r0], #-2054	; 0xfffff7fa
    1134:	0037060d 	eorseq	r0, r7, sp, lsl #12
    1138:	06000000 	streq	r0, [r0], -r0
    113c:	0d040079 	stceq	0, cr0, [r4, #-484]	; 0xfffffe1c
    1140:	00003708 	andeq	r3, r0, r8, lsl #14
    1144:	1d070400 	cfstrsne	mvf0, [r7, #-0]
    1148:	04000006 	streq	r0, [r0], #-6
    114c:	00370b0d 	eorseq	r0, r7, sp, lsl #22
    1150:	07080000 	streq	r0, [r8, -r0]
    1154:	00000615 	andeq	r0, r0, r5, lsl r6
    1158:	37060e04 	strcc	r0, [r6, -r4, lsl #28]
    115c:	0c000000 	stceq	0, cr0, [r0], {-0}
    1160:	0004e507 	andeq	lr, r4, r7, lsl #10
    1164:	0f0e0400 	svceq	0x000e0400
    1168:	00000037 	andeq	r0, r0, r7, lsr r0
    116c:	050c0710 	streq	r0, [ip, #-1808]	; 0xfffff8f0
    1170:	0e040000 	cdpeq	0, 0, cr0, cr4, cr0, {0}
    1174:	00003715 	andeq	r3, r0, r5, lsl r7
    1178:	02001400 	andeq	r1, r0, #0, 8
    117c:	000005e9 	andeq	r0, r0, r9, ror #11
    1180:	67020f04 	strvs	r0, [r2, -r4, lsl #30]
    1184:	05000000 	streq	r0, [r0, #-0]
    1188:	00265403 	eoreq	r5, r6, r3, lsl #8
    118c:	05e20520 	strbeq	r0, [r2, #1312]!	; 0x520
    1190:	040c0000 	streq	r0, [ip], #-0
    1194:	01020810 	tsteq	r2, r0, lsl r8
    1198:	78060000 	stmdavc	r6, {}	; <UNPREDICTABLE>
    119c:	06120400 	ldreq	r0, [r2], -r0, lsl #8
    11a0:	00000037 	andeq	r0, r0, r7, lsr r0
    11a4:	00790600 	rsbseq	r0, r9, r0, lsl #12
    11a8:	37081204 	strcc	r1, [r8, -r4, lsl #4]
    11ac:	04000000 	streq	r0, [r0], #-0
    11b0:	0005d407 	andeq	sp, r5, r7, lsl #8
    11b4:	06130400 	ldreq	r0, [r3], -r0, lsl #8
    11b8:	00000037 	andeq	r0, r0, r7, lsr r0
    11bc:	37080008 	strcc	r0, [r8, -r8]
    11c0:	11000000 	mrsne	r0, (UNDEF: 0)
    11c4:	09000001 	stmdbeq	r0, {r0}
    11c8:	00000067 	andeq	r0, r0, r7, rrx
    11cc:	05850200 	streq	r0, [r5, #512]	; 0x200
    11d0:	3b040000 	blcc	1011d8 <startup-0x1fefee28>
    11d4:	00012307 	andeq	r2, r1, r7, lsl #6
    11d8:	50030500 	andpl	r0, r3, r0, lsl #10
    11dc:	0a200026 	beq	80127c <startup-0x1f7fed84>
    11e0:	00010204 	andeq	r0, r1, r4, lsl #4
    11e4:	06e50200 	strbteq	r0, [r5], r0, lsl #4
    11e8:	3c040000 	stccc	0, cr0, [r4], {-0}
    11ec:	00012307 	andeq	r2, r1, r7, lsl #6
    11f0:	c4030500 	strgt	r0, [r3], #-1280	; 0xfffffb00
    11f4:	0b20001e 	bleq	801274 <startup-0x1f7fed8c>
    11f8:	00000067 	andeq	r0, r0, r7, rrx
    11fc:	00000151 	andeq	r0, r0, r1, asr r1
    1200:	0001510c 	andeq	r5, r1, ip, lsl #2
    1204:	510c0f00 	tstpl	ip, r0, lsl #30
    1208:	04000001 	streq	r0, [r0], #-1
    120c:	07040d00 	streq	r0, [r4, -r0, lsl #26]
    1210:	00000379 	andeq	r0, r0, r9, ror r3
    1214:	00057f02 	andeq	r7, r5, r2, lsl #30
    1218:	123d0400 	eorsne	r0, sp, #0, 8
    121c:	0000013b 	andeq	r0, r0, fp, lsr r1
    1220:	1ed00305 	cdpne	3, 13, cr0, cr0, cr5, {0}
    1224:	ad022000 	stcge	0, cr2, [r2, #-0]
    1228:	04000006 	streq	r0, [r0], #-6
    122c:	0037053e 	eorseq	r0, r7, lr, lsr r5
    1230:	03050000 	movweq	r0, #20480	; 0x5000
    1234:	20001ecc 	andcs	r1, r0, ip, asr #29
    1238:	0006b402 	andeq	fp, r6, r2, lsl #8
    123c:	053f0400 	ldreq	r0, [pc, #-1024]!	; e44 <startup-0x1ffff1bc>
    1240:	00000037 	andeq	r0, r0, r7, lsr r0
    1244:	26700305 	ldrbtcs	r0, [r0], -r5, lsl #6
    1248:	eb022000 	bl	89250 <startup-0x1ff76db0>
    124c:	04000000 	streq	r0, [r0], #-0
    1250:	00370540 	eorseq	r0, r7, r0, asr #10
    1254:	03050000 	movweq	r0, #20480	; 0x5000
    1258:	20001ec8 	andcs	r1, r0, r8, asr #29
    125c:	00056402 	andeq	r6, r5, r2, lsl #8
    1260:	05410400 	strbeq	r0, [r1, #-1024]	; 0xfffffc00
    1264:	00000037 	andeq	r0, r0, r7, lsr r0
    1268:	266c0305 	strbtcs	r0, [ip], -r5, lsl #6
    126c:	c20b2000 	andgt	r2, fp, #0
    1270:	c2000001 	andgt	r0, r0, #1
    1274:	0c000001 	stceq	0, cr0, [r0], {1}
    1278:	00000151 	andeq	r0, r0, r1, asr r1
    127c:	010d0007 	tsteq	sp, r7
    1280:	00029108 	andeq	r9, r2, r8, lsl #2
    1284:	06f80200 	ldrbteq	r0, [r8], r0, lsl #4
    1288:	43040000 	movwmi	r0, #16384	; 0x4000
    128c:	0001b206 	andeq	fp, r1, r6, lsl #4
    1290:	74030500 	strvc	r0, [r3], #-1280	; 0xfffffb00
    1294:	0e200026 	cdpeq	0, 2, cr0, cr0, cr6, {1}
    1298:	00000800 	andeq	r0, r0, r0, lsl #16
    129c:	51160105 	tstpl	r6, r5, lsl #2
    12a0:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    12a4:	000007a0 	andeq	r0, r0, r0, lsr #15
    12a8:	f3170205 	vhsub.u16	d0, d7, d5
    12ac:	0d000001 	stceq	0, cr0, [r0, #-4]
    12b0:	02880801 	addeq	r0, r8, #65536	; 0x10000
    12b4:	040f0000 	streq	r0, [pc], #-0	; 12bc <startup-0x1fffed44>
    12b8:	2b020a05 	blcs	83ad4 <startup-0x1ff7c52c>
    12bc:	07000002 	streq	r0, [r0, -r2]
    12c0:	000007db 	ldrdeq	r0, [r0], -fp
    12c4:	e70b0b05 	str	r0, [fp, -r5, lsl #22]
    12c8:	00000001 	andeq	r0, r0, r1
    12cc:	0007b407 	andeq	fp, r7, r7, lsl #8
    12d0:	0b0c0500 	bleq	3026d8 <startup-0x1fcfd928>
    12d4:	000001e7 	andeq	r0, r0, r7, ror #3
    12d8:	071f0701 	ldreq	r0, [pc, -r1, lsl #14]
    12dc:	0d050000 	stceq	0, cr0, [r5, #-0]
    12e0:	00022b09 	andeq	r2, r2, r9, lsl #22
    12e4:	0d000200 	sfmeq	f0, 4, [r0, #-0]
    12e8:	07e70502 	strbeq	r0, [r7, r2, lsl #10]!
    12ec:	04100000 	ldreq	r0, [r0], #-0
    12f0:	4d020805 	stcmi	8, cr0, [r2, #-20]	; 0xffffffec
    12f4:	11000002 	tstne	r0, r2
    12f8:	00726469 	rsbseq	r6, r2, r9, ror #8
    12fc:	db0b0905 	blle	2c3718 <startup-0x1fd3c8e8>
    1300:	12000001 	andne	r0, r0, #1
    1304:	000001fa 	strdeq	r0, [r0], -sl
    1308:	05040f00 	streq	r0, [r4, #-3840]	; 0xfffff100
    130c:	027e0212 	rsbseq	r0, lr, #536870913	; 0x20000001
    1310:	a8070000 	stmdage	r7, {}	; <UNPREDICTABLE>
    1314:	05000007 	streq	r0, [r0, #-7]
    1318:	01e70b13 	mvneq	r0, r3, lsl fp
    131c:	07000000 	streq	r0, [r0, -r0]
    1320:	00000743 	andeq	r0, r0, r3, asr #14
    1324:	e70b1405 	str	r1, [fp, -r5, lsl #8]
    1328:	01000001 	tsteq	r0, r1
    132c:	00086407 	andeq	r6, r8, r7, lsl #8
    1330:	09150500 	ldmdbeq	r5, {r8, sl}
    1334:	0000022b 	andeq	r0, r0, fp, lsr #4
    1338:	04100002 	ldreq	r0, [r0], #-2
    133c:	99021005 	stmdbls	r2, {r0, r2, ip}
    1340:	11000002 	tstne	r0, r2
    1344:	0072646f 	rsbseq	r6, r2, pc, ror #8
    1348:	db0b1105 	blle	2c5764 <startup-0x1fd3a89c>
    134c:	12000001 	andne	r0, r0, #1
    1350:	0000024d 	andeq	r0, r0, sp, asr #4
    1354:	07f70500 	ldrbeq	r0, [r7, r0, lsl #10]!
    1358:	05180000 	ldreq	r0, [r8, #-0]
    135c:	02e71903 	rsceq	r1, r7, #49152	; 0xc000
    1360:	5e070000 	cdppl	0, 0, cr0, cr7, cr0, {0}
    1364:	05000008 	streq	r0, [r0, #-8]
    1368:	01db0b04 	bicseq	r0, fp, r4, lsl #22
    136c:	07000000 	streq	r0, [r0, -r0]
    1370:	00000728 	andeq	r0, r0, r8, lsr #14
    1374:	db0b0505 	blle	2c2790 <startup-0x1fd3d870>
    1378:	04000001 	streq	r0, [r0], #-1
    137c:	00075007 	andeq	r5, r7, r7
    1380:	0b060500 	bleq	182788 <startup-0x1fe7d878>
    1384:	000001db 	ldrdeq	r0, [r0], -fp
    1388:	077d0708 	ldrbeq	r0, [sp, -r8, lsl #14]!
    138c:	07050000 	streq	r0, [r5, -r0]
    1390:	0001db0b 	andeq	sp, r1, fp, lsl #22
    1394:	32130c00 	andscc	r0, r3, #0, 24
    1398:	10000002 	andne	r0, r0, r2
    139c:	00027e13 	andeq	r7, r2, r3, lsl lr
    13a0:	04001400 	streq	r1, [r0], #-1024	; 0xfffffc00
    13a4:	00000299 	muleq	r0, r9, r2
    13a8:	00074b0e 	andeq	r4, r7, lr, lsl #22
    13ac:	03190500 	tsteq	r9, #0, 10
    13b0:	000002e7 	andeq	r0, r0, r7, ror #5
    13b4:	00076f02 	andeq	r6, r7, r2, lsl #30
    13b8:	0f0e0100 	svceq	0x000e0100
    13bc:	000001f3 	strdeq	r0, [r0], -r3
    13c0:	1eb00305 	cdpne	3, 11, cr0, cr0, cr5, {0}
    13c4:	e2142000 	ands	r2, r4, #0
    13c8:	01000007 	tsteq	r0, r7
    13cc:	031c1810 	tsteq	ip, #16, 16	; 0x100000
    13d0:	03050000 	movweq	r0, #20480	; 0x5000
    13d4:	20001eb4 			; <UNDEFINED> instruction: 0x20001eb4
    13d8:	02ec040a 	rsceq	r0, ip, #167772160	; 0xa000000
    13dc:	83150000 	tsthi	r5, #0
    13e0:	02000007 	andeq	r0, r0, #7
    13e4:	00370590 	mlaseq	r7, r0, r5, r0
    13e8:	1b4c0000 	blne	13013f0 <startup-0x1ecfec10>
    13ec:	00362000 	eorseq	r2, r6, r0
    13f0:	9c010000 	stcls	0, cr0, [r1], {-0}
    13f4:	0000035a 	andeq	r0, r0, sl, asr r3
    13f8:	72726116 	rsbsvc	r6, r2, #-2147483643	; 0x80000005
    13fc:	15900200 	ldrne	r0, [r0, #512]	; 0x200
    1400:	0000035a 	andeq	r0, r0, sl, asr r3
    1404:	16749102 	ldrbtne	r9, [r4], -r2, lsl #2
    1408:	02006863 	andeq	r6, r0, #6488064	; 0x630000
    140c:	01c21f90 	strexbeq	r1, r0, [r2]
    1410:	91020000 	mrsls	r0, (UNDEF: 2)
    1414:	040a0073 	streq	r0, [sl], #-115	; 0xffffff8d
    1418:	000001c2 	andeq	r0, r0, r2, asr #3
    141c:	00079517 	andeq	r9, r7, r7, lsl r5
    1420:	057f0200 	ldrbeq	r0, [pc, #-512]!	; 1228 <startup-0x1fffedd8>
    1424:	00000037 	andeq	r0, r0, r7, lsr r0
    1428:	20001acc 	andcs	r1, r0, ip, asr #21
    142c:	00000080 	andeq	r0, r0, r0, lsl #1
    1430:	03a99c01 			; <UNDEFINED> instruction: 0x03a99c01
    1434:	b6140000 	ldrlt	r0, [r4], -r0
    1438:	02000001 	andeq	r0, r0, #1
    143c:	03a90781 			; <UNDEFINED> instruction: 0x03a90781
    1440:	91020000 	mrsls	r0, (UNDEF: 2)
    1444:	06bd1458 	ssateq	r1, #30, r8, asr #8
    1448:	82020000 	andhi	r0, r2, #0
    144c:	0003b907 	andeq	fp, r3, r7, lsl #18
    1450:	bc910300 	ldclt	3, cr0, [r1], {0}
    1454:	07f1147f 			; <UNDEFINED> instruction: 0x07f1147f
    1458:	85020000 	strhi	r0, [r2, #-0]
    145c:	0001c207 	andeq	ip, r1, r7, lsl #4
    1460:	6f910200 	svcvs	0x00910200
    1464:	01c20b00 	biceq	r0, r2, r0, lsl #22
    1468:	03b90000 			; <UNDEFINED> instruction: 0x03b90000
    146c:	510c0000 	mrspl	r0, (UNDEF: 12)
    1470:	14000001 	strne	r0, [r0], #-1
    1474:	01c20b00 	biceq	r0, r2, r0, lsl #22
    1478:	03c90000 	biceq	r0, r9, #0
    147c:	510c0000 	mrspl	r0, (UNDEF: 12)
    1480:	18000001 	stmdane	r0, {r0}
    1484:	078c1800 	streq	r1, [ip, r0, lsl #16]
    1488:	74020000 	strvc	r0, [r2], #-0
    148c:	001a8806 	andseq	r8, sl, r6, lsl #16
    1490:	00004420 	andeq	r4, r0, r0, lsr #8
    1494:	009c0100 	addseq	r0, ip, r0, lsl #2
    1498:	19000004 	stmdbne	r0, {r2}
    149c:	0000034e 	andeq	r0, r0, lr, asr #6
    14a0:	37027a02 	strcc	r7, [r2, -r2, lsl #20]
    14a4:	f1000000 	cps	#0
    14a8:	1a000003 	bne	14bc <startup-0x1fffeb44>
    14ac:	019e1b00 	orrseq	r1, lr, r0, lsl #22
    14b0:	7c020000 	stcvc	0, cr0, [r2], {-0}
    14b4:	00003702 	andeq	r3, r0, r2, lsl #14
    14b8:	00001a00 	andeq	r1, r0, r0, lsl #20
    14bc:	0007af1c 	andeq	sl, r7, ip, lsl pc
    14c0:	05250200 	streq	r0, [r5, #-512]!	; 0xfffffe00
    14c4:	00000037 	andeq	r0, r0, r7, lsr r0
    14c8:	20001884 	andcs	r1, r0, r4, lsl #17
    14cc:	00000204 	andeq	r0, r0, r4, lsl #4
    14d0:	04dd9c01 	ldrbeq	r9, [sp], #3073	; 0xc01
    14d4:	d8140000 	ldmdale	r4, {}	; <UNPREDICTABLE>
    14d8:	02000006 	andeq	r0, r0, #6
    14dc:	0037062a 	eorseq	r0, r7, sl, lsr #12
    14e0:	91020000 	mrsls	r0, (UNDEF: 2)
    14e4:	00701d5c 	rsbseq	r1, r0, ip, asr sp
    14e8:	d1102b02 	tstle	r0, r2, lsl #22
    14ec:	02000000 	andeq	r0, r0, #0
    14f0:	18145091 	ldmdane	r4, {r0, r4, r7, ip, lr}
    14f4:	02000007 	andeq	r0, r0, #7
    14f8:	01c2072c 	biceq	r0, r2, ip, lsr #14
    14fc:	91020000 	mrsls	r0, (UNDEF: 2)
    1500:	07d21467 	ldrbeq	r1, [r2, r7, ror #8]
    1504:	2d020000 	stccs	0, cr0, [r2, #-0]
    1508:	0001c207 	andeq	ip, r1, r7, lsl #4
    150c:	66910200 	ldrvs	r0, [r1], r0, lsl #4
    1510:	00056d14 	andeq	r6, r5, r4, lsl sp
    1514:	062e0200 	strteq	r0, [lr], -r0, lsl #4
    1518:	00000037 	andeq	r0, r0, r7, lsr r0
    151c:	1d4c9102 	stfnep	f1, [ip, #-8]
    1520:	006e6f77 	rsbeq	r6, lr, r7, ror pc
    1524:	37062f02 	strcc	r2, [r6, -r2, lsl #30]
    1528:	02000000 	andeq	r0, r0, #0
    152c:	aa1e6091 	bge	799778 <startup-0x1f866888>
    1530:	a0200018 	eorge	r0, r0, r8, lsl r0
    1534:	19000001 	stmdbne	r0, {r0}
    1538:	000000f3 	strdeq	r0, [r0], -r3
    153c:	37033402 	strcc	r3, [r3, -r2, lsl #8]
    1540:	8d000000 	stchi	0, cr0, [r0, #-0]
    1544:	1a000004 	bne	155c <startup-0x1fffeaa4>
    1548:	00de1900 	sbcseq	r1, lr, r0, lsl #18
    154c:	68020000 	stmdavs	r2, {}	; <UNPREDICTABLE>
    1550:	00003703 	andeq	r3, r0, r3, lsl #14
    1554:	00049f00 	andeq	r9, r4, r0, lsl #30
    1558:	19001a00 	stmdbne	r0, {r9, fp, ip}
    155c:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    1560:	37075002 	strcc	r5, [r7, -r2]
    1564:	b1000000 	mrslt	r0, (UNDEF: 0)
    1568:	1a000004 	bne	1580 <startup-0x1fffea80>
    156c:	07951900 	ldreq	r1, [r5, r0, lsl #18]
    1570:	6b020000 	blvs	81578 <startup-0x1ff7ea88>
    1574:	0000370d 	andeq	r3, r0, sp, lsl #14
    1578:	0004c300 	andeq	ip, r4, r0, lsl #6
    157c:	1e001a00 	vmlane.f32	s2, s0, s0
    1580:	2000193a 	andcs	r1, r0, sl, lsr r9
    1584:	00000016 	andeq	r0, r0, r6, lsl r0
    1588:	0000ff1b 	andeq	pc, r0, fp, lsl pc	; <UNPREDICTABLE>
    158c:	07500200 	ldrbeq	r0, [r0, -r0, lsl #4]
    1590:	00000037 	andeq	r0, r0, r7, lsr r0
    1594:	0000001a 	andeq	r0, r0, sl, lsl r0
    1598:	07bc1f00 	ldreq	r1, [ip, r0, lsl #30]!
    159c:	0f020000 	svceq	0x00020000
    15a0:	00000006 	andeq	r0, r0, r6
    15a4:	00001220 	andeq	r1, r0, r0, lsr #4
    15a8:	159c0100 	ldrne	r0, [ip, #256]	; 0x100
    15ac:	00000764 	andeq	r0, r0, r4, ror #14
    15b0:	37054c01 	strcc	r4, [r5, -r1, lsl #24]
    15b4:	2c000000 	stccs	0, cr0, [r0], {-0}
    15b8:	58200018 	stmdapl	r0!, {r3, r4}
    15bc:	01000000 	mrseq	r0, (UNDEF: 0)
    15c0:	0005179c 	muleq	r5, ip, r7
    15c4:	00631d00 	rsbeq	r1, r3, r0, lsl #26
    15c8:	f3105101 	vrhadd.u16	d5, d0, d1
    15cc:	02000001 	andeq	r0, r0, #1
    15d0:	20007791 	mulcs	r0, r1, r7
    15d4:	00000758 	andeq	r0, r0, r8, asr r7
    15d8:	c4063e01 	strgt	r3, [r6], #-3585	; 0xfffff1ff
    15dc:	68200017 	stmdavs	r0!, {r0, r1, r2, r4}
    15e0:	01000000 	mrseq	r0, (UNDEF: 0)
    15e4:	00053d9c 	muleq	r5, ip, sp
    15e8:	6f721600 	svcvs	0x00721600
    15ec:	3e010077 	mcrcc	0, 0, r0, cr1, cr7, {3}
    15f0:	00003716 	andeq	r3, r0, r6, lsl r7
    15f4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    15f8:	07c41c00 	strbeq	r1, [r4, r0, lsl #24]
    15fc:	2b010000 	blcs	41604 <startup-0x1ffbe9fc>
    1600:	0001f30f 	andeq	pc, r1, pc, lsl #6
    1604:	00176400 	andseq	r6, r7, r0, lsl #8
    1608:	00006020 	andeq	r6, r0, r0, lsr #32
    160c:	6f9c0100 	svcvs	0x009c0100
    1610:	1e000005 	cdpne	0, 0, cr0, cr0, cr5, {0}
    1614:	20001796 	mulcs	r0, r6, r7
    1618:	0000001e 	andeq	r0, r0, lr, lsl r0
    161c:	0100631d 	tsteq	r0, sp, lsl r3
    1620:	01f31136 	mvnseq	r1, r6, lsr r1
    1624:	91020000 	mrsls	r0, (UNDEF: 2)
    1628:	1c00006f 	stcne	0, cr0, [r0], {111}	; 0x6f
    162c:	0000072f 	andeq	r0, r0, pc, lsr #14
    1630:	f30f1a01 	vpmax.u8	d1, d15, d1
    1634:	fc000001 	stc2	0, cr0, [r0], {1}
    1638:	68200016 	stmdavs	r0!, {r1, r2, r4}
    163c:	01000000 	mrseq	r0, (UNDEF: 0)
    1640:	0005cb9c 	muleq	r5, ip, fp
    1644:	070f1400 	streq	r1, [pc, -r0, lsl #8]
    1648:	1c010000 	stcne	0, cr0, [r1], {-0}
    164c:	0005cb10 	andeq	ip, r5, r0, lsl fp
    1650:	58910200 	ldmpl	r1, {r9}
    1654:	00170e1e 	andseq	r0, r7, lr, lsl lr
    1658:	00004020 	andeq	r4, r0, r0, lsr #32
    165c:	6f721d00 	svcvs	0x00721d00
    1660:	1d010077 	stcne	0, cr0, [r1, #-476]	; 0xfffffe24
    1664:	0000370a 	andeq	r3, r0, sl, lsl #14
    1668:	6c910200 	lfmvs	f0, 4, [r1], {0}
    166c:	0017141e 	andseq	r1, r7, lr, lsl r4
    1670:	00002e20 	andeq	r2, r0, r0, lsr #28
    1674:	6f631d00 	svcvs	0x00631d00
    1678:	2001006c 	andcs	r0, r1, ip, rrx
    167c:	00003707 	andeq	r3, r0, r7, lsl #14
    1680:	68910200 	ldmvs	r1, {r9}
    1684:	0b000000 	bleq	168c <startup-0x1fffe974>
    1688:	000001f3 	strdeq	r0, [r0], -r3
    168c:	000005db 	ldrdeq	r0, [r0], -fp
    1690:	0001510c 	andeq	r5, r1, ip, lsl #2
    1694:	21000f00 	tstcs	r0, r0, lsl #30
    1698:	00000737 	andeq	r0, r0, r7, lsr r7
    169c:	c0061201 	andgt	r1, r6, r1, lsl #4
    16a0:	3c200016 	stccc	0, cr0, [r0], #-88	; 0xffffffa8
    16a4:	01000000 	mrseq	r0, (UNDEF: 0)
    16a8:	0070169c 			; <UNDEFINED> instruction: 0x0070169c
    16ac:	1c191201 	lfmne	f1, 4, [r9], {1}
    16b0:	02000003 	andeq	r0, r0, #3
    16b4:	00007491 	muleq	r0, r1, r4

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	110e1b0e 	tstne	lr, lr, lsl #22
   c:	10061201 	andne	r1, r6, r1, lsl #4
  10:	02000017 	andeq	r0, r0, #23
  14:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
  18:	0b3b0b3a 	bleq	ec2d08 <startup-0x1f13d2f8>
  1c:	13490b39 	movtne	r0, #39737	; 0x9b39
  20:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
  24:	24030000 	strcs	r0, [r3], #-0
  28:	3e0b0b00 	vmlacc.f64	d0, d11, d0
  2c:	0008030b 	andeq	r0, r8, fp, lsl #6
  30:	00350400 	eorseq	r0, r5, r0, lsl #8
  34:	00001349 	andeq	r1, r0, r9, asr #6
  38:	3f002e05 	svccc	0x00002e05
  3c:	3a0e0319 	bcc	380ca8 <startup-0x1fc7f358>
  40:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  44:	1201110b 	andne	r1, r1, #-1073741822	; 0xc0000002
  48:	97184006 	ldrls	r4, [r8, -r6]
  4c:	00001942 	andeq	r1, r0, r2, asr #18
  50:	3f012e06 	svccc	0x00012e06
  54:	3a0e0319 	bcc	380cc0 <startup-0x1fc7f340>
  58:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  5c:	1119270b 	tstne	r9, fp, lsl #14
  60:	40061201 	andmi	r1, r6, r1, lsl #4
  64:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
  68:	00001301 	andeq	r1, r0, r1, lsl #6
  6c:	03000507 	movweq	r0, #1287	; 0x507
  70:	3b0b3a08 	blcc	2ce898 <startup-0x1fd31768>
  74:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
  78:	00180213 	andseq	r0, r8, r3, lsl r2
  7c:	012e0800 			; <UNDEFINED> instruction: 0x012e0800
  80:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
  84:	0b3b0b3a 	bleq	ec2d74 <startup-0x1f13d28c>
  88:	01110b39 	tsteq	r1, r9, lsr fp
  8c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
  90:	01194296 			; <UNDEFINED> instruction: 0x01194296
  94:	09000013 	stmdbeq	r0, {r0, r1, r4}
  98:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
  9c:	0b3a0e03 	bleq	e838b0 <startup-0x1f17c750>
  a0:	0b390b3b 	bleq	e42d94 <startup-0x1f1bd26c>
  a4:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
  a8:	180a0000 	stmdane	sl, {}	; <UNPREDICTABLE>
  ac:	00000000 	andeq	r0, r0, r0
  b0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
  b4:	030b130e 	movweq	r1, #45838	; 0xb30e
  b8:	110e1b0e 	tstne	lr, lr, lsl #22
  bc:	10061201 	andne	r1, r6, r1, lsl #4
  c0:	02000017 	andeq	r0, r0, #23
  c4:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
  c8:	0b3a0b0b 	bleq	e82cfc <startup-0x1f17d304>
  cc:	0b390b3b 	bleq	e42dc0 <startup-0x1f1bd240>
  d0:	00001301 	andeq	r1, r0, r1, lsl #6
  d4:	03000d03 	movweq	r0, #3331	; 0xd03
  d8:	3b0b3a08 	blcc	2ce900 <startup-0x1fd31700>
  dc:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
  e0:	000b3813 	andeq	r3, fp, r3, lsl r8
  e4:	000d0400 	andeq	r0, sp, r0, lsl #8
  e8:	0b3a0e03 	bleq	e838fc <startup-0x1f17c704>
  ec:	0b390b3b 	bleq	e42de0 <startup-0x1f1bd220>
  f0:	0b381349 	bleq	e04e1c <startup-0x1f1fb1e4>
  f4:	24050000 	strcs	r0, [r5], #-0
  f8:	3e0b0b00 	vmlacc.f64	d0, d11, d0
  fc:	000e030b 	andeq	r0, lr, fp, lsl #6
 100:	01010600 	tsteq	r1, r0, lsl #12
 104:	13011349 	movwne	r1, #4937	; 0x1349
 108:	21070000 	mrscs	r0, (UNDEF: 7)
 10c:	2f134900 	svccs	0x00134900
 110:	0800000b 	stmdaeq	r0, {r0, r1, r3}
 114:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
 118:	0b3b0b3a 	bleq	ec2e08 <startup-0x1f13d1f8>
 11c:	13490b39 	movtne	r0, #39737	; 0x9b39
 120:	34090000 	strcc	r0, [r9], #-0
 124:	3a0e0300 	bcc	380d2c <startup-0x1fc7f2d4>
 128:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 12c:	3f13490b 	svccc	0x0013490b
 130:	00180219 	andseq	r0, r8, r9, lsl r2
 134:	00340a00 	eorseq	r0, r4, r0, lsl #20
 138:	0b3a0803 	bleq	e8214c <startup-0x1f17deb4>
 13c:	0b390b3b 	bleq	e42e30 <startup-0x1f1bd1d0>
 140:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 144:	00001802 	andeq	r1, r0, r2, lsl #16
 148:	0300340b 	movweq	r3, #1035	; 0x40b
 14c:	3b0b3a0e 	blcc	2ce98c <startup-0x1fd31674>
 150:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 154:	00180213 	andseq	r0, r8, r3, lsl r2
 158:	00240c00 	eoreq	r0, r4, r0, lsl #24
 15c:	0b3e0b0b 	bleq	f82d90 <startup-0x1f07d270>
 160:	00000803 	andeq	r0, r0, r3, lsl #16
 164:	4900350d 	stmdbmi	r0, {r0, r2, r3, r8, sl, ip, sp}
 168:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
 16c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 170:	0b3a0e03 	bleq	e83984 <startup-0x1f17c67c>
 174:	0b39053b 	bleq	e41668 <startup-0x1f1be998>
 178:	01111927 	tsteq	r1, r7, lsr #18
 17c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 180:	01194296 			; <UNDEFINED> instruction: 0x01194296
 184:	0f000013 	svceq	0x00000013
 188:	08030005 	stmdaeq	r3, {r0, r2}
 18c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 190:	13490b39 	movtne	r0, #39737	; 0x9b39
 194:	00001802 	andeq	r1, r0, r2, lsl #16
 198:	3f002e10 	svccc	0x00002e10
 19c:	3a0e0319 	bcc	380e08 <startup-0x1fc7f1f8>
 1a0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 1a4:	1201110b 	andne	r1, r1, #-1073741822	; 0xc0000002
 1a8:	97184006 	ldrls	r4, [r8, -r6]
 1ac:	00001942 	andeq	r1, r0, r2, asr #18
 1b0:	3f012e11 	svccc	0x00012e11
 1b4:	3a0e0319 	bcc	380e20 <startup-0x1fc7f1e0>
 1b8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 1bc:	1119270b 	tstne	r9, fp, lsl #14
 1c0:	40061201 	andmi	r1, r6, r1, lsl #4
 1c4:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 1c8:	00001301 	andeq	r1, r0, r1, lsl #6
 1cc:	03000512 	movweq	r0, #1298	; 0x512
 1d0:	3b0b3a08 	blcc	2ce9f8 <startup-0x1fd31608>
 1d4:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 1d8:	00180213 	andseq	r0, r8, r3, lsl r2
 1dc:	00341300 	eorseq	r1, r4, r0, lsl #6
 1e0:	0b3a0803 	bleq	e821f4 <startup-0x1f17de0c>
 1e4:	0b390b3b 	bleq	e42ed8 <startup-0x1f1bd128>
 1e8:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 1ec:	2e140000 	cdpcs	0, 1, cr0, cr4, cr0, {0}
 1f0:	03193f01 	tsteq	r9, #1, 30
 1f4:	3b0b3a0e 	blcc	2cea34 <startup-0x1fd315cc>
 1f8:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 1fc:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 200:	96184006 	ldrls	r4, [r8], -r6
 204:	13011942 	movwne	r1, #6466	; 0x1942
 208:	05150000 	ldreq	r0, [r5, #-0]
 20c:	3a0e0300 	bcc	380e14 <startup-0x1fc7f1ec>
 210:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 214:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 218:	16000018 			; <UNDEFINED> instruction: 0x16000018
 21c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 220:	0b3a0e03 	bleq	e83a34 <startup-0x1f17c5cc>
 224:	0b390b3b 	bleq	e42f18 <startup-0x1f1bd0e8>
 228:	01111349 	tsteq	r1, r9, asr #6
 22c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 230:	01194296 			; <UNDEFINED> instruction: 0x01194296
 234:	17000013 	smladne	r0, r3, r0, r0
 238:	0111010b 	tsteq	r1, fp, lsl #2
 23c:	00000612 	andeq	r0, r0, r2, lsl r6
 240:	0b000f18 	bleq	3ea8 <startup-0x1fffc158>
 244:	0013490b 	andseq	r4, r3, fp, lsl #18
 248:	002e1900 	eoreq	r1, lr, r0, lsl #18
 24c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 250:	0b3b0b3a 	bleq	ec2f40 <startup-0x1f13d0c0>
 254:	01110b39 	tsteq	r1, r9, lsr fp
 258:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 25c:	00194296 	mulseq	r9, r6, r2
 260:	012e1a00 			; <UNDEFINED> instruction: 0x012e1a00
 264:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 268:	0b3b0b3a 	bleq	ec2f58 <startup-0x1f13d0a8>
 26c:	13490b39 	movtne	r0, #39737	; 0x9b39
 270:	0000193c 	andeq	r1, r0, ip, lsr r9
 274:	0000181b 	andeq	r1, r0, fp, lsl r8
 278:	010b1c00 	tsteq	fp, r0, lsl #24
 27c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 280:	00001301 	andeq	r1, r0, r1, lsl #6
 284:	3f012e1d 	svccc	0x00012e1d
 288:	3a0e0319 	bcc	380ef4 <startup-0x1fc7f10c>
 28c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 290:	1201110b 	andne	r1, r1, #-1073741822	; 0xc0000002
 294:	96184006 	ldrls	r4, [r8], -r6
 298:	13011942 	movwne	r1, #6466	; 0x1942
 29c:	2e1e0000 	cdpcs	0, 1, cr0, cr14, cr0, {0}
 2a0:	03193f00 	tsteq	r9, #0, 30
 2a4:	3b0b3a0e 	blcc	2ceae4 <startup-0x1fd3151c>
 2a8:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 2ac:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 2b0:	97184006 	ldrls	r4, [r8, -r6]
 2b4:	00001942 	andeq	r1, r0, r2, asr #18
 2b8:	3f002e1f 	svccc	0x00002e1f
 2bc:	3a0e0319 	bcc	380f28 <startup-0x1fc7f0d8>
 2c0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 2c4:	1119270b 	tstne	r9, fp, lsl #14
 2c8:	40061201 	andmi	r1, r6, r1, lsl #4
 2cc:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 2d0:	2e200000 	cdpcs	0, 2, cr0, cr0, cr0, {0}
 2d4:	03193f00 	tsteq	r9, #0, 30
 2d8:	3b0b3a0e 	blcc	2ceb18 <startup-0x1fd314e8>
 2dc:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 2e0:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 2e4:	97184006 	ldrls	r4, [r8, -r6]
 2e8:	00001942 	andeq	r1, r0, r2, asr #18
 2ec:	01110100 	tsteq	r1, r0, lsl #2
 2f0:	0b130e25 	bleq	4c3b8c <startup-0x1fb3c474>
 2f4:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
 2f8:	06120111 			; <UNDEFINED> instruction: 0x06120111
 2fc:	00001710 	andeq	r1, r0, r0, lsl r7
 300:	03003402 	movweq	r3, #1026	; 0x402
 304:	3b0b3a0e 	blcc	2ceb44 <startup-0x1fd314bc>
 308:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 30c:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
 310:	03000018 	movweq	r0, #24
 314:	0b0b0024 	bleq	2c03ac <startup-0x1fd3fc54>
 318:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 31c:	35040000 	strcc	r0, [r4, #-0]
 320:	00134900 	andseq	r4, r3, r0, lsl #18
 324:	01130500 	tsteq	r3, r0, lsl #10
 328:	0b0b0e03 	bleq	2c3b3c <startup-0x1fd3c4c4>
 32c:	0b3b0b3a 	bleq	ec301c <startup-0x1f13cfe4>
 330:	13010b39 	movwne	r0, #6969	; 0x1b39
 334:	0d060000 	stceq	0, cr0, [r6, #-0]
 338:	3a080300 	bcc	200f40 <startup-0x1fdff0c0>
 33c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 340:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 344:	0700000b 	streq	r0, [r0, -fp]
 348:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 34c:	0b3b0b3a 	bleq	ec303c <startup-0x1f13cfc4>
 350:	13490b39 	movtne	r0, #39737	; 0x9b39
 354:	00000b38 	andeq	r0, r0, r8, lsr fp
 358:	27011508 	strcs	r1, [r1, -r8, lsl #10]
 35c:	01134919 	tsteq	r3, r9, lsl r9
 360:	09000013 	stmdbeq	r0, {r0, r1, r4}
 364:	13490005 	movtne	r0, #36869	; 0x9005
 368:	0f0a0000 	svceq	0x000a0000
 36c:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
 370:	0b000013 	bleq	3c4 <startup-0x1ffffc3c>
 374:	13490101 	movtne	r0, #37121	; 0x9101
 378:	00001301 	andeq	r1, r0, r1, lsl #6
 37c:	4900210c 	stmdbmi	r0, {r2, r3, r8, sp}
 380:	000b2f13 	andeq	r2, fp, r3, lsl pc
 384:	00240d00 	eoreq	r0, r4, r0, lsl #26
 388:	0b3e0b0b 	bleq	f82fbc <startup-0x1f07d044>
 38c:	00000e03 	andeq	r0, r0, r3, lsl #28
 390:	3f012e0e 	svccc	0x00012e0e
 394:	3a0e0319 	bcc	381000 <startup-0x1fc7f000>
 398:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 39c:	1119270b 	tstne	r9, fp, lsl #14
 3a0:	40061201 	andmi	r1, r6, r1, lsl #4
 3a4:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 3a8:	00001301 	andeq	r1, r0, r1, lsl #6
 3ac:	0300050f 	movweq	r0, #1295	; 0x50f
 3b0:	3b0b3a08 	blcc	2cebd8 <startup-0x1fd31428>
 3b4:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
 3b8:	00180213 	andseq	r0, r8, r3, lsl r2
 3bc:	012e1000 			; <UNDEFINED> instruction: 0x012e1000
 3c0:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 3c4:	0b3b0b3a 	bleq	ec30b4 <startup-0x1f13cf4c>
 3c8:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 3cc:	06120111 			; <UNDEFINED> instruction: 0x06120111
 3d0:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 3d4:	00130119 	andseq	r0, r3, r9, lsl r1
 3d8:	00051100 	andeq	r1, r5, r0, lsl #2
 3dc:	0b3a0803 	bleq	e823f0 <startup-0x1f17dc10>
 3e0:	0b390b3b 	bleq	e430d4 <startup-0x1f1bcf2c>
 3e4:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 3e8:	0b120000 	bleq	4803f0 <startup-0x1fb7fc10>
 3ec:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
 3f0:	13000006 	movwne	r0, #6
 3f4:	08030034 	stmdaeq	r3, {r2, r4, r5}
 3f8:	0b3b0b3a 	bleq	ec30e8 <startup-0x1f13cf18>
 3fc:	13490b39 	movtne	r0, #39737	; 0x9b39
 400:	00001802 	andeq	r1, r0, r2, lsl #16
 404:	3f012e14 	svccc	0x00012e14
 408:	3a0e0319 	bcc	381074 <startup-0x1fc7ef8c>
 40c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 410:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 414:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 418:	96184006 	ldrls	r4, [r8], -r6
 41c:	13011942 	movwne	r1, #6466	; 0x1942
 420:	2e150000 	cdpcs	0, 1, cr0, cr5, cr0, {0}
 424:	03193f01 	tsteq	r9, #1, 30
 428:	3b0b3a0e 	blcc	2cec68 <startup-0x1fd31398>
 42c:	3c13490b 			; <UNDEFINED> instruction: 0x3c13490b
 430:	00130119 	andseq	r0, r3, r9, lsl r1
 434:	00181600 	andseq	r1, r8, r0, lsl #12
 438:	2e170000 	cdpcs	0, 1, cr0, cr7, cr0, {0}
 43c:	03193f01 	tsteq	r9, #1, 30
 440:	3b0b3a0e 	blcc	2cec80 <startup-0x1fd31380>
 444:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 448:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 44c:	96184006 	ldrls	r4, [r8], -r6
 450:	13011942 	movwne	r1, #6466	; 0x1942
 454:	2e180000 	cdpcs	0, 1, cr0, cr8, cr0, {0}
 458:	03193f01 	tsteq	r9, #1, 30
 45c:	3b0b3a0e 	blcc	2cec9c <startup-0x1fd31364>
 460:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 464:	11134919 	tstne	r3, r9, lsl r9
 468:	40061201 	andmi	r1, r6, r1, lsl #4
 46c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 470:	00001301 	andeq	r1, r0, r1, lsl #6
 474:	03000519 	movweq	r0, #1305	; 0x519
 478:	3b0b3a0e 	blcc	2cecb8 <startup-0x1fd31348>
 47c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 480:	00180213 	andseq	r0, r8, r3, lsl r2
 484:	00341a00 	eorseq	r1, r4, r0, lsl #20
 488:	0b3a0e03 	bleq	e83c9c <startup-0x1f17c364>
 48c:	0b390b3b 	bleq	e43180 <startup-0x1f1bce80>
 490:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 494:	2e1b0000 	cdpcs	0, 1, cr0, cr11, cr0, {0}
 498:	03193f01 	tsteq	r9, #1, 30
 49c:	3b0b3a0e 	blcc	2cecdc <startup-0x1fd31324>
 4a0:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 4a4:	01193c13 	tsteq	r9, r3, lsl ip
 4a8:	1c000013 	stcne	0, cr0, [r0], {19}
 4ac:	0111010b 	tsteq	r1, fp, lsl #2
 4b0:	13010612 	movwne	r0, #5650	; 0x1612
 4b4:	2e1d0000 	cdpcs	0, 1, cr0, cr13, cr0, {0}
 4b8:	03193f00 	tsteq	r9, #0, 30
 4bc:	3b0b3a0e 	blcc	2cecfc <startup-0x1fd31304>
 4c0:	110b390b 	tstne	fp, fp, lsl #18
 4c4:	40061201 	andmi	r1, r6, r1, lsl #4
 4c8:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 4cc:	2e1e0000 	cdpcs	0, 1, cr0, cr14, cr0, {0}
 4d0:	03193f01 	tsteq	r9, #1, 30
 4d4:	3b0b3a0e 	blcc	2ced14 <startup-0x1fd312ec>
 4d8:	110b390b 	tstne	fp, fp, lsl #18
 4dc:	40061201 	andmi	r1, r6, r1, lsl #4
 4e0:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 4e4:	00001301 	andeq	r1, r0, r1, lsl #6
 4e8:	3f012e1f 	svccc	0x00012e1f
 4ec:	3a0e0319 	bcc	381158 <startup-0x1fc7eea8>
 4f0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 4f4:	3c13490b 			; <UNDEFINED> instruction: 0x3c13490b
 4f8:	20000019 	andcs	r0, r0, r9, lsl r0
 4fc:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 500:	0b3a0e03 	bleq	e83d14 <startup-0x1f17c2ec>
 504:	0b390b3b 	bleq	e431f8 <startup-0x1f1bce08>
 508:	01111349 	tsteq	r1, r9, asr #6
 50c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 510:	01194297 			; <UNDEFINED> instruction: 0x01194297
 514:	21000013 	tstcs	r0, r3, lsl r0
 518:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 51c:	0b3a0e03 	bleq	e83d30 <startup-0x1f17c2d0>
 520:	0b390b3b 	bleq	e43214 <startup-0x1f1bcdec>
 524:	01111927 	tsteq	r1, r7, lsr #18
 528:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 52c:	00194296 	mulseq	r9, r6, r2
 530:	11010000 	mrsne	r0, (UNDEF: 1)
 534:	130e2501 	movwne	r2, #58625	; 0xe501
 538:	1b0e030b 	blne	38116c <startup-0x1fc7ee94>
 53c:	1117550e 	tstne	r7, lr, lsl #10
 540:	00171001 	andseq	r1, r7, r1
 544:	00340200 	eorseq	r0, r4, r0, lsl #4
 548:	0b3a0e03 	bleq	e83d5c <startup-0x1f17c2a4>
 54c:	0b390b3b 	bleq	e43240 <startup-0x1f1bcdc0>
 550:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 554:	00001802 	andeq	r1, r0, r2, lsl #16
 558:	0b002403 	bleq	956c <startup-0x1fff6a94>
 55c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 560:	04000008 	streq	r0, [r0], #-8
 564:	13490035 	movtne	r0, #36917	; 0x9035
 568:	13050000 	movwne	r0, #20480	; 0x5000
 56c:	0b0e0301 	bleq	381178 <startup-0x1fc7ee88>
 570:	3b0b3a0b 	blcc	2ceda4 <startup-0x1fd3125c>
 574:	010b390b 	tsteq	fp, fp, lsl #18
 578:	06000013 			; <UNDEFINED> instruction: 0x06000013
 57c:	0803000d 	stmdaeq	r3, {r0, r2, r3}
 580:	0b3b0b3a 	bleq	ec3270 <startup-0x1f13cd90>
 584:	13490b39 	movtne	r0, #39737	; 0x9b39
 588:	00000b38 	andeq	r0, r0, r8, lsr fp
 58c:	03000d07 	movweq	r0, #3335	; 0xd07
 590:	3b0b3a0e 	blcc	2cedd0 <startup-0x1fd31230>
 594:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 598:	000b3813 	andeq	r3, fp, r3, lsl r8
 59c:	01150800 	tsteq	r5, r0, lsl #16
 5a0:	13491927 	movtne	r1, #39207	; 0x9927
 5a4:	00001301 	andeq	r1, r0, r1, lsl #6
 5a8:	49000509 	stmdbmi	r0, {r0, r3, r8, sl}
 5ac:	0a000013 	beq	600 <startup-0x1ffffa00>
 5b0:	0b0b000f 	bleq	2c05f4 <startup-0x1fd3fa0c>
 5b4:	00001349 	andeq	r1, r0, r9, asr #6
 5b8:	4901010b 	stmdbmi	r1, {r0, r1, r3, r8}
 5bc:	00130113 	andseq	r0, r3, r3, lsl r1
 5c0:	00210c00 	eoreq	r0, r1, r0, lsl #24
 5c4:	0b2f1349 	bleq	bc52f0 <startup-0x1f43ad10>
 5c8:	240d0000 	strcs	r0, [sp], #-0
 5cc:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 5d0:	000e030b 	andeq	r0, lr, fp, lsl #6
 5d4:	00160e00 	andseq	r0, r6, r0, lsl #28
 5d8:	0b3a0e03 	bleq	e83dec <startup-0x1f17c214>
 5dc:	0b390b3b 	bleq	e432d0 <startup-0x1f1bcd30>
 5e0:	00001349 	andeq	r1, r0, r9, asr #6
 5e4:	0b01130f 	bleq	45228 <startup-0x1ffbadd8>
 5e8:	3b0b3a0b 	blcc	2cee1c <startup-0x1fd311e4>
 5ec:	010b390b 	tsteq	fp, fp, lsl #18
 5f0:	10000013 	andne	r0, r0, r3, lsl r0
 5f4:	0b0b0117 	bleq	2c0a58 <startup-0x1fd3f5a8>
 5f8:	0b3b0b3a 	bleq	ec32e8 <startup-0x1f13cd18>
 5fc:	13010b39 	movwne	r0, #6969	; 0x1b39
 600:	0d110000 	ldceq	0, cr0, [r1, #-0]
 604:	3a080300 	bcc	20120c <startup-0x1fdfedf4>
 608:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 60c:	0013490b 	andseq	r4, r3, fp, lsl #18
 610:	000d1200 	andeq	r1, sp, r0, lsl #4
 614:	00001349 	andeq	r1, r0, r9, asr #6
 618:	49000d13 	stmdbmi	r0, {r0, r1, r4, r8, sl, fp}
 61c:	000b3813 	andeq	r3, fp, r3, lsl r8
 620:	00341400 	eorseq	r1, r4, r0, lsl #8
 624:	0b3a0e03 	bleq	e83e38 <startup-0x1f17c1c8>
 628:	0b390b3b 	bleq	e4331c <startup-0x1f1bcce4>
 62c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 630:	2e150000 	cdpcs	0, 1, cr0, cr5, cr0, {0}
 634:	03193f01 	tsteq	r9, #1, 30
 638:	3b0b3a0e 	blcc	2cee78 <startup-0x1fd31188>
 63c:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 640:	11134919 	tstne	r3, r9, lsl r9
 644:	40061201 	andmi	r1, r6, r1, lsl #4
 648:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 64c:	00001301 	andeq	r1, r0, r1, lsl #6
 650:	03000516 	movweq	r0, #1302	; 0x516
 654:	3b0b3a08 	blcc	2cee7c <startup-0x1fd31184>
 658:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 65c:	00180213 	andseq	r0, r8, r3, lsl r2
 660:	012e1700 			; <UNDEFINED> instruction: 0x012e1700
 664:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 668:	0b3b0b3a 	bleq	ec3358 <startup-0x1f13cca8>
 66c:	13490b39 	movtne	r0, #39737	; 0x9b39
 670:	06120111 			; <UNDEFINED> instruction: 0x06120111
 674:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 678:	00130119 	andseq	r0, r3, r9, lsl r1
 67c:	012e1800 			; <UNDEFINED> instruction: 0x012e1800
 680:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 684:	0b3b0b3a 	bleq	ec3374 <startup-0x1f13cc8c>
 688:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 68c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 690:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 694:	00130119 	andseq	r0, r3, r9, lsl r1
 698:	012e1900 			; <UNDEFINED> instruction: 0x012e1900
 69c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 6a0:	0b3b0b3a 	bleq	ec3390 <startup-0x1f13cc70>
 6a4:	13490b39 	movtne	r0, #39737	; 0x9b39
 6a8:	1301193c 	movwne	r1, #6460	; 0x193c
 6ac:	181a0000 	ldmdane	sl, {}	; <UNPREDICTABLE>
 6b0:	1b000000 	blne	6b8 <startup-0x1ffff948>
 6b4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 6b8:	0b3a0e03 	bleq	e83ecc <startup-0x1f17c134>
 6bc:	0b390b3b 	bleq	e433b0 <startup-0x1f1bcc50>
 6c0:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
 6c4:	2e1c0000 	cdpcs	0, 1, cr0, cr12, cr0, {0}
 6c8:	03193f01 	tsteq	r9, #1, 30
 6cc:	3b0b3a0e 	blcc	2cef0c <startup-0x1fd310f4>
 6d0:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 6d4:	11134919 	tstne	r3, r9, lsl r9
 6d8:	40061201 	andmi	r1, r6, r1, lsl #4
 6dc:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 6e0:	00001301 	andeq	r1, r0, r1, lsl #6
 6e4:	0300341d 	movweq	r3, #1053	; 0x41d
 6e8:	3b0b3a08 	blcc	2cef10 <startup-0x1fd310f0>
 6ec:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 6f0:	00180213 	andseq	r0, r8, r3, lsl r2
 6f4:	010b1e00 	tsteq	fp, r0, lsl #28
 6f8:	06120111 			; <UNDEFINED> instruction: 0x06120111
 6fc:	2e1f0000 	cdpcs	0, 1, cr0, cr15, cr0, {0}
 700:	03193f00 	tsteq	r9, #0, 30
 704:	3b0b3a0e 	blcc	2cef44 <startup-0x1fd310bc>
 708:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 70c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 710:	97184006 	ldrls	r4, [r8, -r6]
 714:	00001942 	andeq	r1, r0, r2, asr #18
 718:	3f012e20 	svccc	0x00012e20
 71c:	3a0e0319 	bcc	381388 <startup-0x1fc7ec78>
 720:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 724:	1119270b 	tstne	r9, fp, lsl #14
 728:	40061201 	andmi	r1, r6, r1, lsl #4
 72c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 730:	00001301 	andeq	r1, r0, r1, lsl #6
 734:	3f012e21 	svccc	0x00012e21
 738:	3a0e0319 	bcc	3813a4 <startup-0x1fc7ec5c>
 73c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 740:	1119270b 	tstne	r9, fp, lsl #14
 744:	40061201 	andmi	r1, r6, r1, lsl #4
 748:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 74c:	Address 0x0000074c is out of bounds.


Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	0000001c 	andeq	r0, r0, ip, lsl r0
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000014 	andcs	r0, r0, r4, lsl r0
  14:	0000017c 	andeq	r0, r0, ip, ror r1
	...
  20:	0000001c 	andeq	r0, r0, ip, lsl r0
  24:	00e70002 	rsceq	r0, r7, r2
  28:	00040000 	andeq	r0, r4, r0
  2c:	00000000 	andeq	r0, r0, r0
  30:	20000190 	mulcs	r0, r0, r1
  34:	000008a2 	andeq	r0, r0, r2, lsr #17
	...
  40:	0000001c 	andeq	r0, r0, ip, lsl r0
  44:	08fc0002 	ldmeq	ip!, {r1}^
  48:	00040000 	andeq	r0, r4, r0
  4c:	00000000 	andeq	r0, r0, r0
  50:	20000a34 	andcs	r0, r0, r4, lsr sl
  54:	00000c8c 	andeq	r0, r0, ip, lsl #25
	...
  60:	00000024 	andeq	r0, r0, r4, lsr #32
  64:	10bc0002 	adcsne	r0, ip, r2
  68:	00040000 	andeq	r0, r4, r0
  6c:	00000000 	andeq	r0, r0, r0
  70:	200016c0 	andcs	r1, r0, r0, asr #13
  74:	000004c2 	andeq	r0, r0, r2, asr #9
  78:	20000000 	andcs	r0, r0, r0
  7c:	00000012 	andeq	r0, r0, r2, lsl r0
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	000000fe 	strdeq	r0, [r0], -lr
   4:	00830003 	addeq	r0, r3, r3
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	43010000 	movwmi	r0, #4096	; 0x1000
  1c:	68432f3a 	stmdavs	r3, {r1, r3, r4, r5, r8, r9, sl, fp, sp}^
  20:	656d6c61 	strbvs	r6, [sp, #-3169]!	; 0xfffff39f
  24:	592f7372 	stmdbpl	pc!, {r1, r4, r5, r6, r8, r9, ip, sp, lr}	; <UNPREDICTABLE>
  28:	31726165 	cmncc	r2, r5, ror #2
  2c:	34504c2f 	ldrbcc	r4, [r0], #-3119	; 0xfffff3d1
  30:	504f4d2f 	subpl	r4, pc, pc, lsr #26
  34:	504f4d2f 	subpl	r4, pc, pc, lsr #26
  38:	62614c2f 	rsbvs	r4, r1, #12032	; 0x2f00
  3c:	694d3562 	stmdbvs	sp, {r1, r5, r6, r8, sl, ip, sp}^
  40:	7753656e 	ldrbvc	r6, [r3, -lr, ror #10]
  44:	65706565 	ldrbvs	r6, [r0, #-1381]!	; 0xfffffa9b
  48:	696d2f72 	stmdbvs	sp!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
  4c:	7753656e 	ldrbvc	r6, [r3, -lr, ror #10]
  50:	65706565 	ldrbvs	r6, [r0, #-1381]!	; 0xfffffa9b
  54:	2f444772 	svccs	0x00444772
  58:	656e694d 	strbvs	r6, [lr, #-2381]!	; 0xfffff6b3
  5c:	65657753 	strbvs	r7, [r5, #-1875]!	; 0xfffff8ad
  60:	47726570 			; <UNDEFINED> instruction: 0x47726570
  64:	74000044 	strvc	r0, [r0], #-68	; 0xffffffbc
  68:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
  6c:	00632e36 	rsbeq	r2, r3, r6, lsr lr
  70:	74000001 	strvc	r0, [r0], #-1
  74:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
  78:	65645f36 	strbvs	r5, [r4, #-3894]!	; 0xfffff0ca
  7c:	72616c63 	rsbvc	r6, r1, #25344	; 0x6300
  80:	6f697461 	svcvs	0x00697461
  84:	682e736e 	stmdavs	lr!, {r1, r2, r3, r5, r6, r8, r9, ip, sp, lr}
  88:	00000100 	andeq	r0, r0, r0, lsl #2
  8c:	00010500 	andeq	r0, r1, r0, lsl #10
  90:	00140205 	andseq	r0, r4, r5, lsl #4
  94:	05172000 	ldreq	r2, [r7, #-0]
  98:	0a052f08 	beq	14bcc0 <startup-0x1feb4340>
  9c:	3d0c053d 	cfstr32cc	mvfx0, [ip, #-244]	; 0xffffff0c
  a0:	05840305 	streq	r0, [r4, #773]	; 0x305
  a4:	12054a0f 	andne	r4, r5, #61440	; 0xf000
  a8:	7702052f 	strvc	r0, [r2, -pc, lsr #10]
  ac:	05200c05 	streq	r0, [r0, #-3077]!	; 0xfffff3fb
  b0:	0f052f05 	svceq	0x00052f05
  b4:	2f0d0520 	svccs	0x000d0520
  b8:	05830c05 	streq	r0, [r3, #3077]	; 0xc05
  bc:	01058310 	tsteq	r5, r0, lsl r3
  c0:	05b0083d 	ldreq	r0, [r0, #2109]!	; 0x83d
  c4:	07052f0b 	streq	r2, [r5, -fp, lsl #30]
  c8:	590b0583 	stmdbpl	fp, {r0, r1, r7, r8, sl}
  cc:	052e0405 	streq	r0, [lr, #-1029]!	; 0xfffffbfb
  d0:	0b053009 	bleq	14c0fc <startup-0x1feb3f04>
  d4:	5a01053d 	bpl	415d0 <startup-0x1ffbea30>
  d8:	2f120593 	svccs	0x00120593
  dc:	05661005 	strbeq	r1, [r6, #-5]!
  e0:	01052f02 	tsteq	r5, r2, lsl #30
  e4:	04055b59 	streq	r5, [r5], #-2905	; 0xfffff4a7
  e8:	3d0d054b 	cfstr32cc	mvfx0, [sp, #-300]	; 0xfffffed4
  ec:	83100592 	tsthi	r0, #612368384	; 0x24800000
  f0:	923d0105 	eorsls	r0, sp, #1073741825	; 0x40000001
  f4:	052f0805 	streq	r0, [pc, #-2053]!	; fffff8f7 <_ctype_+0xdfffccd6>
  f8:	01053d0a 	tsteq	r5, sl, lsl #26
  fc:	0008023d 	andeq	r0, r8, sp, lsr r2
 100:	043b0101 	ldrteq	r0, [fp], #-257	; 0xfffffeff
 104:	00030000 	andeq	r0, r3, r0
 108:	00000091 	muleq	r0, r1, r0
 10c:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
 110:	0101000d 	tsteq	r1, sp
 114:	00000101 	andeq	r0, r0, r1, lsl #2
 118:	00000100 	andeq	r0, r0, r0, lsl #2
 11c:	2f3a4301 	svccs	0x003a4301
 120:	6c616843 	stclvs	8, cr6, [r1], #-268	; 0xfffffef4
 124:	7372656d 	cmnvc	r2, #457179136	; 0x1b400000
 128:	6165592f 	cmnvs	r5, pc, lsr #18
 12c:	4c2f3172 	stfmis	f3, [pc], #-456	; ffffff6c <_ctype_+0xdfffd34b>
 130:	4d2f3450 	cfstrsmi	mvf3, [pc, #-320]!	; fffffff8 <_ctype_+0xdfffd3d7>
 134:	4d2f504f 	stcmi	0, cr5, [pc, #-316]!	; 0 <startup-0x20000000>
 138:	4c2f504f 	stcmi	0, cr5, [pc], #-316	; 4 <startup-0x1ffffffc>
 13c:	35626261 	strbcc	r6, [r2, #-609]!	; 0xfffffd9f
 140:	656e694d 	strbvs	r6, [lr, #-2381]!	; 0xfffff6b3
 144:	65657753 	strbvs	r7, [r5, #-1875]!	; 0xfffff8ad
 148:	2f726570 	svccs	0x00726570
 14c:	656e696d 	strbvs	r6, [lr, #-2413]!	; 0xfffff693
 150:	65657753 	strbvs	r7, [r5, #-1875]!	; 0xfffff8ad
 154:	47726570 			; <UNDEFINED> instruction: 0x47726570
 158:	694d2f44 	stmdbvs	sp, {r2, r6, r8, r9, sl, fp, sp}^
 15c:	7753656e 	ldrbvc	r6, [r3, -lr, ror #10]
 160:	65706565 	ldrbvs	r6, [r0, #-1381]!	; 0xfffffa9b
 164:	00444772 	subeq	r4, r4, r2, ror r7
 168:	73797300 	cmnvc	r9, #0, 6
 16c:	6b636974 	blvs	18da744 <startup-0x1e7258bc>
 170:	0100682e 	tsteq	r0, lr, lsr #16
 174:	72670000 	rsbvc	r0, r7, #0
 178:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 17c:	69645f63 	stmdbvs	r4!, {r0, r1, r5, r6, r8, r9, sl, fp, ip, lr}^
 180:	632e7073 			; <UNDEFINED> instruction: 0x632e7073
 184:	00000100 	andeq	r0, r0, r0, lsl #2
 188:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
 18c:	6f665f73 	svcvs	0x00665f73
 190:	69645f72 	stmdbvs	r4!, {r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 194:	682e7073 	stmdavs	lr!, {r0, r1, r4, r5, r6, ip, sp, lr}
 198:	00000100 	andeq	r0, r0, r0, lsl #2
 19c:	00010500 	andeq	r0, r1, r0, lsl #10
 1a0:	01900205 	orrseq	r0, r0, r5, lsl #4
 1a4:	16032000 	strne	r2, [r3], -r0
 1a8:	2f050501 	svccs	0x00050501
 1ac:	052e0405 	streq	r0, [lr, #-1029]!	; 0xfffffbfb
 1b0:	02052f10 	andeq	r2, r5, #16, 30	; 0x40
 1b4:	200c053d 	andcs	r0, ip, sp, lsr r5
 1b8:	052f0205 	streq	r0, [pc, #-517]!	; ffffffbb <_ctype_+0xdfffd39a>
 1bc:	0205200c 	andeq	r2, r5, #12
 1c0:	200b052f 	andcs	r0, fp, pc, lsr #10
 1c4:	052f0205 	streq	r0, [pc, #-517]!	; ffffffc7 <_ctype_+0xdfffd3a6>
 1c8:	0f05200c 	svceq	0x0005200c
 1cc:	26010537 			; <UNDEFINED> instruction: 0x26010537
 1d0:	2f0505ca 	svccs	0x000505ca
 1d4:	052e0405 	streq	r0, [lr, #-1029]!	; 0xfffffbfb
 1d8:	0e052f0a 	cdpeq	15, 0, cr2, cr5, cr10, {0}
 1dc:	2101053d 	tstcs	r1, sp, lsr r5
 1e0:	2f020584 	svccs	0x00020584
 1e4:	05200c05 	streq	r0, [r0, #-3077]!	; 0xfffff3fb
 1e8:	01052f10 	tsteq	r5, r0, lsl pc
 1ec:	0205853d 	andeq	r8, r5, #255852544	; 0xf400000
 1f0:	20230530 	eorcs	r0, r3, r0, lsr r5
 1f4:	772f0105 	strvc	r0, [pc, -r5, lsl #2]!
 1f8:	052f0205 	streq	r0, [pc, #-517]!	; fffffffb <_ctype_+0xdfffd3da>
 1fc:	0205200c 	andeq	r2, r5, #12
 200:	200c052f 	andcs	r0, ip, pc, lsr #10
 204:	052f0205 	streq	r0, [pc, #-517]!	; 7 <startup-0x1ffffff9>
 208:	0205200b 	andeq	r2, r5, #11
 20c:	200c052f 	andcs	r0, ip, pc, lsr #10
 210:	a12f0105 			; <UNDEFINED> instruction: 0xa12f0105
 214:	052f0505 	streq	r0, [pc, #-1285]!	; fffffd17 <_ctype_+0xdfffd0f6>
 218:	14052e04 	strne	r2, [r5], #-3588	; 0xfffff1fc
 21c:	01040200 	mrseq	r0, R12_usr
 220:	0001052e 	andeq	r0, r1, lr, lsr #10
 224:	30010402 	andcc	r0, r1, r2, lsl #8
 228:	051f0705 	ldreq	r0, [pc, #-1797]	; fffffb2b <_ctype_+0xdfffcf0a>
 22c:	055b2f01 	ldrbeq	r2, [fp, #-3841]	; 0xfffff0ff
 230:	0c052f02 	stceq	15, cr2, [r5], {2}
 234:	2f0e0520 	svccs	0x000e0520
 238:	05591205 	ldrbeq	r1, [r9, #-517]	; 0xfffffdfb
 23c:	18052e04 	stmdane	r5, {r2, r9, sl, fp, sp}
 240:	01040200 	mrseq	r0, R12_usr
 244:	0001052e 	andeq	r0, r1, lr, lsr #10
 248:	34010402 	strcc	r0, [r1], #-1026	; 0xfffffbfe
 24c:	051d1105 	ldreq	r1, [sp, #-261]	; 0xfffffefb
 250:	01053d0d 	tsteq	r5, sp, lsl #26
 254:	0205ae3e 	andeq	sl, r5, #992	; 0x3e0
 258:	200c052f 	andcs	r0, ip, pc, lsr #10
 25c:	052f0205 	streq	r0, [pc, #-517]!	; 5f <startup-0x1fffffa1>
 260:	0205200c 	andeq	r2, r5, #12
 264:	200b052f 	andcs	r0, fp, pc, lsr #10
 268:	052f0205 	streq	r0, [pc, #-517]!	; 6b <startup-0x1fffff95>
 26c:	0105200c 	tsteq	r5, ip
 270:	0505a02f 	streq	sl, [r5, #-47]	; 0xffffffd1
 274:	2e04054b 	cfsh32cs	mvfx0, mvfx4, #43
 278:	052f0b05 	streq	r0, [pc, #-2821]!	; fffff77b <_ctype_+0xdfffcb5a>
 27c:	0e053d04 	cdpeq	13, 0, cr3, cr5, cr4, {0}
 280:	3d0f053d 	cfstr32cc	mvfx0, [pc, #-244]	; 194 <startup-0x1ffffe6c>
 284:	053d0205 	ldreq	r0, [sp, #-517]!	; 0xfffffdfb
 288:	13053714 	movwne	r3, #22292	; 0x5714
 28c:	24010530 	strcs	r0, [r1], #-1328	; 0xfffffad0
 290:	b3030204 	movwlt	r0, #12804	; 0x3204
 294:	0405ba7f 	streq	fp, [r5], #-2687	; 0xfffff581
 298:	3d03054b 	cfstr32cc	mvfx0, [r3, #-300]	; 0xfffffed4
 29c:	05310105 	ldreq	r0, [r1, #-261]!	; 0xfffffefb
 2a0:	0e051f03 	cdpeq	15, 0, cr1, cr5, cr3, {0}
 2a4:	2f010520 	svccs	0x00010520
 2a8:	76020593 			; <UNDEFINED> instruction: 0x76020593
 2ac:	05a10c05 	streq	r0, [r1, #3077]!	; 0xc05
 2b0:	0c059103 	stfeqd	f1, [r5], {3}
 2b4:	91030522 	tstls	r3, r2, lsr #10
 2b8:	05220c05 	streq	r0, [r2, #-3077]!	; 0xfffff3fb
 2bc:	0c059103 	stfeqd	f1, [r5], {3}
 2c0:	91030522 	tstls	r3, r2, lsr #10
 2c4:	05220c05 	streq	r0, [r2, #-3077]!	; 0xfffff3fb
 2c8:	0c059103 	stfeqd	f1, [r5], {3}
 2cc:	91030522 	tstls	r3, r2, lsr #10
 2d0:	05220c05 	streq	r0, [r2, #-3077]!	; 0xfffff3fb
 2d4:	0c059103 	stfeqd	f1, [r5], {3}
 2d8:	91030522 	tstls	r3, r2, lsr #10
 2dc:	05220c05 	streq	r0, [r2, #-3077]!	; 0xfffff3fb
 2e0:	02059103 	andeq	r9, r5, #-1073741824	; 0xc0000000
 2e4:	08010522 	stmdaeq	r1, {r1, r5, r8, sl}
 2e8:	05850875 	streq	r0, [r5, #2165]	; 0x875
 2ec:	02059f0a 	andeq	r9, r5, #10, 30	; 0x28
 2f0:	210b052e 	tstcs	fp, lr, lsr #10
 2f4:	052e0305 	streq	r0, [lr, #-773]!	; 0xfffffcfb
 2f8:	05052113 	streq	r2, [r5, #-275]	; 0xfffffeed
 2fc:	2f040590 	svccs	0x00040590
 300:	001f05a0 	andseq	r0, pc, r0, lsr #11
 304:	8c020402 	cfstrshi	mvf0, [r2], {2}
 308:	02000305 	andeq	r0, r0, #335544320	; 0x14000000
 30c:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 310:	0402001e 	streq	r0, [r2], #-30	; 0xffffffe2
 314:	02053b02 	andeq	r3, r5, #2048	; 0x800
 318:	01040200 	mrseq	r0, R12_usr
 31c:	4201053c 	andmi	r0, r1, #60, 10	; 0xf000000
 320:	21020587 	smlabbcs	r2, r7, r5, r0
 324:	21010513 	tstcs	r1, r3, lsl r5
 328:	21020523 	tstcs	r2, r3, lsr #10
 32c:	21010513 	tstcs	r1, r3, lsl r5
 330:	21020523 	tstcs	r2, r3, lsr #10
 334:	21010513 	tstcs	r1, r3, lsl r5
 338:	21020523 	tstcs	r2, r3, lsr #10
 33c:	21010513 	tstcs	r1, r3, lsl r5
 340:	3d020525 	cfstr32cc	mvfx0, [r2, #-148]	; 0xffffff6c
 344:	754b0705 	strbvc	r0, [fp, #-1797]	; 0xfffff8fb
 348:	4b670205 	blmi	19c0b64 <startup-0x1e63f49c>
 34c:	4b01054b 	blmi	41880 <startup-0x1ffbe780>
 350:	4b020585 	blmi	8196c <startup-0x1ff7e694>
 354:	004b3605 	subeq	r3, fp, r5, lsl #12
 358:	06010402 	streq	r0, [r1], -r2, lsl #8
 35c:	0402003c 	streq	r0, [r2], #-60	; 0xffffffc4
 360:	09052e02 	stmdbeq	r5, {r1, r9, sl, fp, sp}
 364:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
 368:	02052006 	andeq	r2, r5, #6
 36c:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
 370:	00010521 	andeq	r0, r1, r1, lsr #10
 374:	4b040402 	blmi	101384 <startup-0x1fefec7c>
 378:	4b040593 	blmi	1019cc <startup-0x1fefe634>
 37c:	053e0305 	ldreq	r0, [lr, #-773]!	; 0xfffffcfb
 380:	03054b08 	movweq	r4, #23304	; 0x5b08
 384:	054b4c75 	strbeq	r4, [fp, #-3189]	; 0xfffff38b
 388:	4a090301 	bmi	240f94 <startup-0x1fdbf06c>
 38c:	7a030305 	bvc	c0fa8 <startup-0x1ff3f058>
 390:	05054b20 	streq	r4, [r5, #-2848]	; 0xfffff4e0
 394:	3d03053d 	cfstr32cc	mvfx0, [r3, #-244]	; 0xffffff0c
 398:	774d0105 	strbvc	r0, [sp, -r5, lsl #2]
 39c:	4b590205 	blmi	1640bb8 <startup-0x1e9bf448>
 3a0:	01053d4b 	tsteq	r5, fp, asr #26
 3a4:	02054e4b 	andeq	r4, r5, #1200	; 0x4b0
 3a8:	200d052f 	andcs	r0, sp, pc, lsr #10
 3ac:	3d2f0205 	sfmcc	f0, 4, [pc, #-20]!	; 3a0 <startup-0x1ffffc60>
 3b0:	4b01053d 	blmi	418ac <startup-0x1ffbe754>
 3b4:	59060576 	stmdbpl	r6, {r1, r2, r4, r5, r6, r8, sl}
 3b8:	003d2405 	eorseq	r2, sp, r5, lsl #8
 3bc:	06010402 	streq	r0, [r1], -r2, lsl #8
 3c0:	0402003c 	streq	r0, [r2], #-60	; 0xffffffc4
 3c4:	0a053c02 	beq	14f3d4 <startup-0x1feb0c2c>
 3c8:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
 3cc:	22052006 	andcs	r2, r5, #6
 3d0:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
 3d4:	00020521 	andeq	r0, r2, r1, lsr #10
 3d8:	66040402 	strvs	r0, [r4], -r2, lsl #8
 3dc:	02000105 	andeq	r0, r0, #1073741825	; 0x40000001
 3e0:	4c4b0404 	cfstrdmi	mvd0, [fp], {4}
 3e4:	054b0705 	strbeq	r0, [fp, #-1797]	; 0xfffff8fb
 3e8:	03052116 	movweq	r2, #20758	; 0x5116
 3ec:	4908053c 	stmdbmi	r8, {r2, r3, r4, r5, r8, sl}
 3f0:	052e0705 	streq	r0, [lr, #-1797]!	; 0xfffff8fb
 3f4:	055a3001 	ldrbeq	r3, [sl, #-1]
 3f8:	03054b04 	movweq	r4, #23300	; 0x5b04
 3fc:	7b01053d 	blvc	418f8 <startup-0x1ffbe708>
 400:	751b0705 	ldrvc	r0, [fp, #-1797]	; 0xfffff8fb
 404:	75750305 	ldrbvc	r0, [r5, #-773]!	; 0xfffffcfb
 408:	4c760105 	ldfmie	f0, [r6], #-20	; 0xffffffec
 40c:	05670705 	strbeq	r0, [r7, #-1797]!	; 0xfffff8fb
 410:	04020009 	streq	r0, [r2], #-9
 414:	1d052001 	stcne	0, cr2, [r5, #-4]
 418:	01040200 	mrseq	r0, R12_usr
 41c:	0007053c 	andeq	r0, r7, ip, lsr r5
 420:	3c010402 	cfstrscc	mvf0, [r1], {2}
 424:	3d2f0205 	sfmcc	f0, 4, [pc, #-20]!	; 418 <startup-0x1ffffbe8>
 428:	3d010559 	cfstr32cc	mvfx0, [r1, #-356]	; 0xfffffe9c
 42c:	6707054c 	strvs	r0, [r7, -ip, asr #10]
 430:	02000905 	andeq	r0, r0, #81920	; 0x14000
 434:	05200104 	streq	r0, [r0, #-260]!	; 0xfffffefc
 438:	0402001d 	streq	r0, [r2], #-29	; 0xffffffe3
 43c:	07053c01 	streq	r3, [r5, -r1, lsl #24]
 440:	01040200 	mrseq	r0, R12_usr
 444:	2f02053c 	svccs	0x0002053c
 448:	0105593d 	tsteq	r5, sp, lsr r9
 44c:	02054d3d 	andeq	r4, r5, #3904	; 0xf40
 450:	200d053d 	andcs	r0, sp, sp, lsr r5
 454:	3d2f0205 	sfmcc	f0, 4, [pc, #-20]!	; 448 <startup-0x1ffffbb8>
 458:	053d1505 	ldreq	r1, [sp, #-1285]!	; 0xfffffafb
 45c:	0d055902 	vstreq.16	s10, [r5, #-4]	; <UNPREDICTABLE>
 460:	2f090520 	svccs	0x00090520
 464:	a12f0105 			; <UNDEFINED> instruction: 0xa12f0105
 468:	053d0205 	ldreq	r0, [sp, #-517]!	; 0xfffffdfb
 46c:	0205200d 	andeq	r2, r5, #13
 470:	15053d2f 	strne	r3, [r5, #-3375]	; 0xfffff2d1
 474:	5902053d 	stmdbpl	r2, {r0, r2, r3, r4, r5, r8, sl}
 478:	05200d05 	streq	r0, [r0, #-3333]!	; 0xfffff2fb
 47c:	01052f09 	tsteq	r5, r9, lsl #30
 480:	0205a02f 	andeq	sl, r5, #47	; 0x2f
 484:	052f3d3d 	streq	r3, [pc, #-3389]!	; fffff74f <_ctype_+0xdfffcb2e>
 488:	10052f15 	andne	r2, r5, r5, lsl pc
 48c:	3d020520 	cfstr32cc	mvfx0, [r2, #-128]	; 0xffffff80
 490:	053d0905 	ldreq	r0, [sp, #-2309]!	; 0xfffff6fb
 494:	05762f01 	ldrbeq	r2, [r6, #-3841]!	; 0xfffff0ff
 498:	3d3d6702 	ldccc	7, cr6, [sp, #-8]!
 49c:	4c590105 	ldfmie	f0, [r9], {5}
 4a0:	3d670205 	sfmcc	f0, 2, [r7, #-20]!	; 0xffffffec
 4a4:	5901053d 	stmdbpl	r1, {r0, r2, r3, r4, r5, r8, sl}
 4a8:	6702054c 	strvs	r0, [r2, -ip, asr #10]
 4ac:	200f053d 	andcs	r0, pc, sp, lsr r5	; <UNPREDICTABLE>
 4b0:	2f3d0205 	svccs	0x003d0205
 4b4:	683d0105 	ldmdavs	sp!, {r0, r2, r8}
 4b8:	05680605 	strbeq	r0, [r8, #-1541]!	; 0xfffff9fb
 4bc:	0e052004 	cdpeq	0, 0, cr2, cr5, cr4, {0}
 4c0:	6602054b 	strvs	r0, [r2], -fp, asr #10
 4c4:	05200e05 	streq	r0, [r0, #-3589]!	; 0xfffff1fb
 4c8:	05684b01 	strbeq	r4, [r8, #-2817]!	; 0xfffff4ff
 4cc:	04056806 	streq	r6, [r5], #-2054	; 0xfffff7fa
 4d0:	4b080520 	blmi	201958 <startup-0x1fdfe6a8>
 4d4:	059e0405 	ldreq	r0, [lr, #1029]	; 0x405
 4d8:	0e052f02 	cdpeq	15, 0, cr2, cr5, cr2, {0}
 4dc:	67010520 	strvs	r0, [r1, -r0, lsr #10]
 4e0:	3102056a 	tstcc	r2, sl, ror #10
 4e4:	05200c05 	streq	r0, [r0, #-3077]!	; 0xfffff3fb
 4e8:	0c052f02 	stceq	15, cr2, [r5], {2}
 4ec:	2f020520 	svccs	0x00020520
 4f0:	05200b05 	streq	r0, [r0, #-2821]!	; 0xfffff4fb
 4f4:	0c052f02 	stceq	15, cr2, [r5], {2}
 4f8:	2f070520 	svccs	0x00070520
 4fc:	02000905 	andeq	r0, r0, #81920	; 0x14000
 500:	05200104 	streq	r0, [r0, #-260]!	; 0xfffffefc
 504:	04020013 	streq	r0, [r2], #-19	; 0xffffffed
 508:	07052e01 	streq	r2, [r5, -r1, lsl #28]
 50c:	01040200 	mrseq	r0, R12_usr
 510:	2102053c 	tstcs	r2, ip, lsr r5
 514:	05200c05 	streq	r0, [r0, #-3077]!	; 0xfffff3fb
 518:	05a22f01 	streq	r2, [r2, #3841]!	; 0xf01
 51c:	04054c05 	streq	r4, [r5], #-3077	; 0xfffff3fb
 520:	3e070583 	cfsh32cc	mvfx0, mvfx7, #-61
 524:	2f220305 	svccs	0x00220305
 528:	05052f2f 	streq	r2, [r5, #-3887]	; 0xfffff0d1
 52c:	0307052f 	movweq	r0, #29999	; 0x752f
 530:	01053c7a 	tsteq	r5, sl, ror ip
 534:	02055b44 	andeq	r5, r5, #68, 22	; 0x11000
 538:	9f01054b 	svcls	0x0001054b
 53c:	01000402 	tsteq	r0, r2, lsl #8
 540:	00059d01 	andeq	r9, r5, r1, lsl #26
 544:	b2000300 	andlt	r0, r0, #0, 6
 548:	02000000 	andeq	r0, r0, #0
 54c:	0d0efb01 	vstreq	d15, [lr, #-4]
 550:	01010100 	mrseq	r0, (UNDEF: 17)
 554:	00000001 	andeq	r0, r0, r1
 558:	01000001 	tsteq	r0, r1
 55c:	432f3a43 			; <UNDEFINED> instruction: 0x432f3a43
 560:	6d6c6168 	stfvse	f6, [ip, #-416]!	; 0xfffffe60
 564:	2f737265 	svccs	0x00737265
 568:	72616559 	rsbvc	r6, r1, #373293056	; 0x16400000
 56c:	504c2f31 	subpl	r2, ip, r1, lsr pc
 570:	4f4d2f34 	svcmi	0x004d2f34
 574:	4f4d2f50 	svcmi	0x004d2f50
 578:	614c2f50 	cmpvs	ip, r0, asr pc
 57c:	4d356262 	lfmmi	f6, 4, [r5, #-392]!	; 0xfffffe78
 580:	53656e69 	cmnpl	r5, #1680	; 0x690
 584:	70656577 	rsbvc	r6, r5, r7, ror r5
 588:	6d2f7265 	sfmvs	f7, 4, [pc, #-404]!	; 3fc <startup-0x1ffffc04>
 58c:	53656e69 	cmnpl	r5, #1680	; 0x690
 590:	70656577 	rsbvc	r6, r5, r7, ror r5
 594:	44477265 	strbmi	r7, [r7], #-613	; 0xfffffd9b
 598:	6e694d2f 	cdpvs	13, 6, cr4, cr9, cr15, {1}
 59c:	65775365 	ldrbvs	r5, [r7, #-869]!	; 0xfffffc9b
 5a0:	72657065 	rsbvc	r7, r5, #101	; 0x65
 5a4:	00004447 	andeq	r4, r0, r7, asr #8
 5a8:	656d6167 	strbvs	r6, [sp, #-359]!	; 0xfffffe99
 5ac:	676f6c5f 			; <UNDEFINED> instruction: 0x676f6c5f
 5b0:	632e6369 			; <UNDEFINED> instruction: 0x632e6369
 5b4:	00000100 	andeq	r0, r0, r0, lsl #2
 5b8:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
 5bc:	645f3672 	ldrbvs	r3, [pc], #-1650	; 5c4 <startup-0x1ffffa3c>
 5c0:	616c6365 	cmnvs	ip, r5, ror #6
 5c4:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
 5c8:	2e736e6f 	cdpcs	14, 7, cr6, cr3, cr15, {3}
 5cc:	00010068 	andeq	r0, r1, r8, rrx
 5d0:	6d616700 	stclvs	7, cr6, [r1, #-0]
 5d4:	6f6c5f65 	svcvs	0x006c5f65
 5d8:	5f636967 	svcpl	0x00636967
 5dc:	6c636564 	cfstr64vs	mvdx6, [r3], #-400	; 0xfffffe70
 5e0:	74617261 	strbtvc	r7, [r1], #-609	; 0xfffffd9f
 5e4:	736e6f69 	cmnvc	lr, #420	; 0x1a4
 5e8:	0100682e 	tsteq	r0, lr, lsr #16
 5ec:	623c0000 	eorsvs	r0, ip, #0
 5f0:	746c6975 	strbtvc	r6, [ip], #-2421	; 0xfffff68b
 5f4:	3e6e692d 	vmulcc.f16	s13, s28, s27	; <UNPREDICTABLE>
 5f8:	00000000 	andeq	r0, r0, r0
 5fc:	00010500 	andeq	r0, r1, r0, lsl #10
 600:	0a340205 	beq	d00e1c <startup-0x1f2ff1e4>
 604:	05172000 	ldreq	r2, [r7, #-0]
 608:	0205670a 	andeq	r6, r5, #2621440	; 0x280000
 60c:	2110052e 	tstcs	r0, lr, lsr #10
 610:	02001b05 	andeq	r1, r0, #5120	; 0x1400
 614:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 618:	04020010 	streq	r0, [r2], #-16
 61c:	21052e01 	tstcs	r5, r1, lsl #28
 620:	02040200 	andeq	r0, r4, #0, 4
 624:	0010053c 	andseq	r0, r0, ip, lsr r5
 628:	2e020402 	cdpcs	4, 0, cr0, cr2, cr2, {0}
 62c:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
 630:	18052e06 	stmdane	r5, {r1, r2, r9, sl, fp, sp}
 634:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
 638:	02054906 	andeq	r4, r5, #98304	; 0x18000
 63c:	02040200 	andeq	r0, r4, #0, 4
 640:	3e0e053c 	mcrcc	5, 0, r0, cr14, cr12, {1}
 644:	3d02053d 	cfstr32cc	mvfx0, [r2, #-244]	; 0xffffff0c
 648:	4b10052f 	blmi	401b0c <startup-0x1fbfe4f4>
 64c:	3d3d0705 	ldccc	7, cr0, [sp, #-20]!	; 0xffffffec
 650:	053d0e05 	ldreq	r0, [sp, #-3589]!	; 0xfffff1fb
 654:	09053d0b 	stmdbeq	r5, {r0, r1, r3, r8, sl, fp, ip, sp}
 658:	0a053d3d 	beq	14fb54 <startup-0x1feb04ac>
 65c:	3d0b053d 	cfstr32cc	mvfx0, [fp, #-244]	; 0xffffff0c
 660:	053d1305 	ldreq	r1, [sp, #-773]!	; 0xfffffcfb
 664:	834b3d02 	movthi	r3, #48386	; 0xbd02
 668:	052f1705 	streq	r1, [pc, #-1797]!	; ffffff6b <_ctype_+0xdfffd34a>
 66c:	01052e02 	tsteq	r5, r2, lsl #28
 670:	05770859 	ldrbeq	r0, [r7, #-2137]!	; 0xfffff7a7
 674:	052f3d06 	streq	r3, [pc, #-3334]!	; fffff976 <_ctype_+0xdfffcd55>
 678:	02052f0a 	andeq	r2, r5, #10, 30	; 0x28
 67c:	210b052e 	tstcs	fp, lr, lsr #10
 680:	052e0305 	streq	r0, [lr, #-773]!	; 0xfffffcfb
 684:	06052212 			; <UNDEFINED> instruction: 0x06052212
 688:	002805f2 	strdeq	r0, [r8], -r2	; <UNPREDICTABLE>
 68c:	2e010402 	cdpcs	4, 0, cr0, cr1, cr2, {0}
 690:	02001a05 	andeq	r1, r0, #20480	; 0x5000
 694:	05f20104 	ldrbeq	r0, [r2, #260]!	; 0x104
 698:	1e052f13 	mcrne	15, 0, r2, cr5, cr3, {0}
 69c:	02040200 	andeq	r0, r4, #0, 4
 6a0:	00030539 	andeq	r0, r3, r9, lsr r5
 6a4:	3c010402 	cfstrscc	mvf0, [r1], {2}
 6a8:	02001d05 	andeq	r1, r0, #320	; 0x140
 6ac:	053b0204 	ldreq	r0, [fp, #-516]!	; 0xfffffdfc
 6b0:	04020002 	streq	r0, [r2], #-2
 6b4:	04053c01 	streq	r3, [r5], #-3073	; 0xfffff3ff
 6b8:	3d0c0542 	cfstr32cc	mvfx0, [ip, #-264]	; 0xfffffef8
 6bc:	053d0905 	ldreq	r0, [sp, #-2309]!	; 0xfffff6fb
 6c0:	05842f01 	streq	r2, [r4, #3841]	; 0xf01
 6c4:	07057606 	streq	r7, [r5, -r6, lsl #12]
 6c8:	220c052f 	andcs	r0, ip, #197132288	; 0xbc00000
 6cc:	053c1605 	ldreq	r1, [ip, #-1541]!	; 0xfffff9fb
 6d0:	0c052007 	stceq	0, cr2, [r5], {7}
 6d4:	3c16053d 	cfldr32cc	mvfx0, [r6], {61}	; 0x3d
 6d8:	05660705 	strbeq	r0, [r6, #-1797]!	; 0xfffff8fb
 6dc:	05052113 	streq	r2, [r5, #-275]	; 0xfffffeed
 6e0:	002905f2 	strdeq	r0, [r9], -r2	; <UNPREDICTABLE>
 6e4:	2e010402 	cdpcs	4, 0, cr0, cr1, cr2, {0}
 6e8:	02001e05 	andeq	r1, r0, #5, 28	; 0x50
 6ec:	052e0104 	streq	r0, [lr, #-260]!	; 0xfffffefc
 6f0:	04020036 	streq	r0, [r2], #-54	; 0xffffffca
 6f4:	2c053c02 	stccs	12, cr3, [r5], {2}
 6f8:	02040200 	andeq	r0, r4, #0, 4
 6fc:	3e17052e 	cfmul64cc	mvdx0, mvdx7, mvdx14
 700:	13081005 	movwne	r1, #32773	; 0x8005
 704:	79030705 	stmdbvc	r3, {r0, r2, r8, r9, sl}
 708:	030a053c 	movweq	r0, #42300	; 0xa53c
 70c:	02053c0a 	andeq	r3, r5, #2560	; 0xa00
 710:	210b052e 	tstcs	fp, lr, lsr #10
 714:	052e0305 	streq	r0, [lr, #-773]!	; 0xfffffcfb
 718:	04020022 	streq	r0, [r2], #-34	; 0xffffffde
 71c:	20052103 	andcs	r2, r5, r3, lsl #2
 720:	03040200 	movweq	r0, #16896	; 0x4200
 724:	001e0582 	andseq	r0, lr, r2, lsl #11
 728:	f1030402 			; <UNDEFINED> instruction: 0xf1030402
 72c:	02000305 	andeq	r0, r0, #335544320	; 0x14000000
 730:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 734:	0402001b 	streq	r0, [r2], #-27	; 0xffffffe5
 738:	02053b02 	andeq	r3, r5, #2048	; 0x800
 73c:	01040200 	mrseq	r0, R12_usr
 740:	3f01053c 	svccc	0x0001053c
 744:	750205bc 	strvc	r0, [r2, #-1468]	; 0xfffffa44
 748:	83010567 	movwhi	r0, #5479	; 0x1567
 74c:	3d0a054c 	cfstr32cc	mvfx0, [sl, #-304]	; 0xfffffed0
 750:	052e0205 	streq	r0, [lr, #-517]!	; 0xfffffdfb
 754:	0305210b 	movweq	r2, #20747	; 0x510b
 758:	2112052e 	tstcs	r2, lr, lsr #10
 75c:	30f20605 	rscscc	r0, r2, r5, lsl #12
 760:	001e0567 	andseq	r0, lr, r7, ror #10
 764:	7e020402 	cdpvc	4, 0, cr0, cr2, cr2, {0}
 768:	02000305 	andeq	r0, r0, #335544320	; 0x14000000
 76c:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 770:	0402001b 	streq	r0, [r2], #-27	; 0xffffffe5
 774:	02053b02 	andeq	r3, r5, #2048	; 0x800
 778:	01040200 	mrseq	r0, R12_usr
 77c:	4301053c 	movwmi	r0, #5436	; 0x153c
 780:	4b0c05bc 	blmi	301e78 <startup-0x1fcfe188>
 784:	052e1205 	streq	r1, [lr, #-517]!	; 0xfffffdfb
 788:	04052e16 	streq	r2, [r5], #-3606	; 0xfffff1ea
 78c:	302605d6 	ldrdcc	r0, [r6], -r6	; <UNPREDICTABLE>
 790:	052e2c05 	streq	r2, [lr, #-3077]!	; 0xfffff3fb
 794:	39052e30 	stmdbcc	r5, {r4, r5, r9, sl, fp, sp}
 798:	200905d6 	ldrdcs	r0, [r9], -r6
 79c:	052e0f05 	streq	r0, [lr, #-3845]!	; 0xfffff0fb
 7a0:	1c052e3e 	stcne	14, cr2, [r5], {62}	; 0x3e
 7a4:	2205d790 	andcs	sp, r5, #144, 14	; 0x2400000
 7a8:	2e26052e 	cfsh64cs	mvdx0, mvdx6, #30
 7ac:	05d64605 	ldrbeq	r4, [r6, #1541]	; 0x605
 7b0:	04020032 	streq	r0, [r2], #-50	; 0xffffffce
 7b4:	46052e01 	strmi	r2, [r5], -r1, lsl #28
 7b8:	01040200 	mrseq	r0, R12_usr
 7bc:	0049052e 	subeq	r0, r9, lr, lsr #10
 7c0:	2e020402 	cdpcs	4, 0, cr0, cr2, cr2, {0}
 7c4:	02004605 	andeq	r4, r0, #5242880	; 0x500000
 7c8:	052e0204 	streq	r0, [lr, #-516]!	; 0xfffffdfc
 7cc:	04020013 	streq	r0, [r2], #-19	; 0xffffffed
 7d0:	12052004 	andne	r2, r5, #4
 7d4:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
 7d8:	0018052f 	andseq	r0, r8, pc, lsr #10
 7dc:	2e040402 	cdpcs	4, 0, cr0, cr4, cr2, {0}
 7e0:	02000205 	andeq	r0, r0, #1342177280	; 0x50000000
 7e4:	052e0404 	streq	r0, [lr, #-1028]!	; 0xfffffbfc
 7e8:	059b0803 	ldreq	r0, [fp, #2051]	; 0x803
 7ec:	05762401 	ldrbeq	r2, [r6, #-1025]!	; 0xfffffbff
 7f0:	0b052f02 	bleq	14c400 <startup-0x1feb3c00>
 7f4:	3d01052f 	cfstr32cc	mvfx0, [r1, #-188]	; 0xffffff44
 7f8:	5910055b 	ldmdbpl	r0, {r0, r1, r3, r4, r6, r8, sl}
 7fc:	05f20405 	ldrbeq	r0, [r2, #1029]!	; 0x405
 800:	04053f10 	streq	r3, [r5], #-3856	; 0xfffff0f0
 804:	001c05f2 			; <UNDEFINED> instruction: 0x001c05f2
 808:	2e010402 	cdpcs	4, 0, cr0, cr1, cr2, {0}
 80c:	02004405 	andeq	r4, r0, #83886080	; 0x5000000
 810:	05820104 	streq	r0, [r2, #260]	; 0x104
 814:	04020018 	streq	r0, [r2], #-24	; 0xffffffe8
 818:	0b058201 	bleq	161024 <startup-0x1fe9efdc>
 81c:	3c030530 	cfstr32cc	mvfx0, [r3], {48}	; 0x30
 820:	05210c05 	streq	r0, [r1, #-3077]!	; 0xfffff3fb
 824:	0f053c04 	svceq	0x00053c04
 828:	3c140521 	cfldr32cc	mvfx0, [r4], {33}	; 0x21
 82c:	053c1705 	ldreq	r1, [ip, #-1797]!	; 0xfffff8fb
 830:	2705d607 	strcs	sp, [r5, -r7, lsl #12]
 834:	01040200 	mrseq	r0, R12_usr
 838:	0024052e 	eoreq	r0, r4, lr, lsr #10
 83c:	9e010402 	cdpls	4, 0, cr0, cr1, cr2, {0}
 840:	02003b05 	andeq	r3, r0, #5120	; 0x1400
 844:	05200204 	streq	r0, [r0, #-516]!	; 0xfffffdfc
 848:	0402003e 	streq	r0, [r2], #-62	; 0xffffffc2
 84c:	06053c03 	streq	r3, [r5], -r3, lsl #24
 850:	001d053e 	andseq	r0, sp, lr, lsr r5
 854:	8d020402 	cfstrshi	mvf0, [r2, #-8]
 858:	02000405 	andeq	r0, r0, #83886080	; 0x5000000
 85c:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 860:	0402001b 	streq	r0, [r2], #-27	; 0xffffffe5
 864:	03053b02 	movweq	r3, #23298	; 0x5b02
 868:	01040200 	mrseq	r0, R12_usr
 86c:	0f05423c 	svceq	0x0005423c
 870:	91100522 	tstls	r0, r2, lsr #10
 874:	05f20405 	ldrbeq	r0, [r2, #1029]!	; 0x405
 878:	052f3003 	streq	r3, [pc, #-3]!	; 87d <startup-0x1ffff783>
 87c:	02052215 	andeq	r2, r5, #1342177281	; 0x50000001
 880:	04051308 	streq	r1, [r5], #-776	; 0xfffffcf8
 884:	0b05ad08 	bleq	16bcac <startup-0x1fe94354>
 888:	3c03053d 	cfstr32cc	mvfx0, [r3], {61}	; 0x3d
 88c:	05210c05 	streq	r0, [r1, #-3077]!	; 0xfffff3fb
 890:	08053c04 	stmdaeq	r5, {r2, sl, fp, ip, sp}
 894:	9e070521 	cfsh32ls	mvfx0, mvfx7, #17
 898:	02002605 	andeq	r2, r0, #5242880	; 0x500000
 89c:	05200104 	streq	r0, [r0, #-260]!	; 0xfffffefc
 8a0:	0402002b 	streq	r0, [r2], #-43	; 0xffffffd5
 8a4:	2e053c01 	cdpcs	12, 0, cr3, cr5, cr1, {0}
 8a8:	01040200 	mrseq	r0, R12_usr
 8ac:	001c053c 	andseq	r0, ip, ip, lsr r5
 8b0:	d6010402 	strle	r0, [r1], -r2, lsl #8
 8b4:	02004505 	andeq	r4, r0, #20971520	; 0x1400000
 8b8:	052e0204 	streq	r0, [lr, #-516]!	; 0xfffffdfc
 8bc:	0402004a 	streq	r0, [r2], #-74	; 0xffffffb6
 8c0:	4d053c02 	stcmi	12, cr3, [r5, #-8]
 8c4:	02040200 	andeq	r0, r4, #0, 4
 8c8:	003b053c 	eorseq	r0, fp, ip, lsr r5
 8cc:	d6020402 	strle	r0, [r2], -r2, lsl #8
 8d0:	05310605 	ldreq	r0, [r1, #-1541]!	; 0xfffff9fb
 8d4:	0402001d 	streq	r0, [r2], #-29	; 0xffffffe3
 8d8:	04058c02 	streq	r8, [r5], #-3074	; 0xfffff3fe
 8dc:	01040200 	mrseq	r0, R12_usr
 8e0:	001c053c 	andseq	r0, ip, ip, lsr r5
 8e4:	3b020402 	blcc	818f4 <startup-0x1ff7e70c>
 8e8:	02000305 	andeq	r0, r0, #335544320	; 0x14000000
 8ec:	033c0104 	teqeq	ip, #4, 2
 8f0:	01054a6b 	tsteq	r5, fp, ror #20
 8f4:	92201d03 	eorls	r1, r0, #3, 26	; 0xc0
 8f8:	05670605 	strbeq	r0, [r7, #-1541]!	; 0xfffff9fb
 8fc:	02052f0a 	andeq	r2, r5, #10, 30	; 0x28
 900:	210b053c 	tstcs	fp, ip, lsr r5
 904:	053c0305 	ldreq	r0, [ip, #-773]!	; 0xfffffcfb
 908:	06052107 	streq	r2, [r5], -r7, lsl #2
 90c:	2114059e 			; <UNDEFINED> instruction: 0x2114059e
 910:	053c1905 	ldreq	r1, [ip, #-2309]!	; 0xfffff6fb
 914:	07053c08 	streq	r3, [r5, -r8, lsl #24]
 918:	23059e08 	movwcs	r9, #24072	; 0x5e08
 91c:	01040200 	mrseq	r0, R12_usr
 920:	0026052e 	eoreq	r0, r6, lr, lsr #10
 924:	3c020402 	cfstrscc	mvf0, [r2], {2}
 928:	053d0b05 	ldreq	r0, [sp, #-2821]!	; 0xfffff4fb
 92c:	0402001c 	streq	r0, [r2], #-28	; 0xffffffe4
 930:	03053902 	movweq	r3, #22786	; 0x5902
 934:	01040200 	mrseq	r0, R12_usr
 938:	001b053c 	andseq	r0, fp, ip, lsr r5
 93c:	3b020402 	blcc	8194c <startup-0x1ff7e6b4>
 940:	02000205 	andeq	r0, r0, #1342177280	; 0x50000000
 944:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 948:	01054109 	tsteq	r5, r9, lsl #2
 94c:	0c056821 	stceq	8, cr6, [r5], {33}	; 0x21
 950:	3d01059f 	cfstr32cc	mvfx0, [r1, #-636]	; 0xfffffd84
 954:	9f0c0568 	svcls	0x000c0568
 958:	693d0105 	ldmdbvs	sp!, {r0, r2, r8}
 95c:	83750205 	cmnhi	r5, #1342177280	; 0x50000000
 960:	92830105 	addls	r0, r3, #1073741825	; 0x40000001
 964:	05840405 	streq	r0, [r4, #1029]	; 0x405
 968:	04020013 	streq	r0, [r2], #-19	; 0xffffffed
 96c:	24055801 	strcs	r5, [r5], #-2049	; 0xfffff7ff
 970:	02040200 	andeq	r0, r4, #0, 4
 974:	0035054a 	eorseq	r0, r5, sl, asr #10
 978:	4a030402 	bmi	c1988 <startup-0x1ff3e678>
 97c:	054b0a05 	strbeq	r0, [fp, #-2565]	; 0xfffff5fb
 980:	1705bc12 	smladne	r5, r2, ip, fp
 984:	2e02052e 	cfsh32cs	mvfx0, mvfx2, #30
 988:	92080a05 	andls	r0, r8, #20480	; 0x5000
 98c:	05850f05 	streq	r0, [r5, #3845]	; 0xf05
 990:	06052e14 			; <UNDEFINED> instruction: 0x06052e14
 994:	2f0f052e 	svccs	0x000f052e
 998:	052e1c05 	streq	r1, [lr, #-3077]!	; 0xfffff3fb
 99c:	06052e14 			; <UNDEFINED> instruction: 0x06052e14
 9a0:	2f050520 	svccs	0x00050520
 9a4:	05740405 	ldrbeq	r0, [r4, #-1029]!	; 0xfffffbfb
 9a8:	053d2207 	ldreq	r2, [sp, #-519]!	; 0xfffffdf9
 9ac:	01053e09 	tsteq	r5, r9, lsl #28
 9b0:	0205684b 	andeq	r6, r5, #4915200	; 0x4b0000
 9b4:	f5080591 			; <UNDEFINED> instruction: 0xf5080591
 9b8:	e504059f 	str	r0, [r4, #-1439]	; 0xfffffa61
 9bc:	e5220805 	str	r0, [r2, #-2053]!	; 0xfffff7fb
 9c0:	05d70405 	ldrbeq	r0, [r7, #1029]	; 0x405
 9c4:	05e52208 	strbeq	r2, [r5, #520]!	; 0x208
 9c8:	0805d704 	stmdaeq	r5, {r2, r8, r9, sl, ip, lr, pc}
 9cc:	0405e522 	streq	lr, [r5], #-1314	; 0xfffffade
 9d0:	220905d7 	andcs	r0, r9, #901775360	; 0x35c00000
 9d4:	4e590105 	rdfmie	f0, f1, f5
 9d8:	05590405 	ldrbeq	r0, [r9, #-1029]	; 0xfffffbfb
 9dc:	0402000b 	streq	r0, [r2], #-11
 9e0:	0a053c01 	beq	14f9ec <startup-0x1feb0614>
 9e4:	2f09053d 	svccs	0x0009053d
 9e8:	02001005 	andeq	r1, r0, #5
 9ec:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 9f0:	05303d0a 	ldreq	r3, [r0, #-3338]!	; 0xfffff2f6
 9f4:	054c2101 	strbeq	r2, [ip, #-257]	; 0xfffffeff
 9f8:	06059f02 	streq	r9, [r5], -r2, lsl #30
 9fc:	2e040591 	mcrcs	5, 0, r0, cr4, cr1, {4}
 a00:	05300805 	ldreq	r0, [r0, #-2053]!	; 0xfffff7fb
 a04:	24056703 	strcs	r6, [r5], #-1795	; 0xfffff8fd
 a08:	2e03054a 	cfsh32cs	mvfx0, mvfx3, #42
 a0c:	0d030105 	stfeqs	f0, [r3, #-20]	; 0xffffffec
 a10:	030b0558 	movweq	r0, #46424	; 0xb558
 a14:	09052079 	stmdbeq	r5, {r0, r3, r4, r5, r6, sp}
 a18:	3003053c 	andcc	r0, r3, ip, lsr r5
 a1c:	05870105 	streq	r0, [r7, #261]	; 0x105
 a20:	01051e03 	tsteq	r5, r3, lsl #28
 a24:	0705ca84 	streq	ip, [r5, -r4, lsl #21]
 a28:	66050567 	strvs	r0, [r5], -r7, ror #10
 a2c:	05300205 	ldreq	r0, [r0, #-517]!	; 0xfffffdfb
 a30:	053dcb09 	ldreq	ip, [sp, #-2825]!	; 0xfffff4f7
 a34:	09054b04 	stmdbeq	r5, {r2, r8, r9, fp, lr}
 a38:	04053d22 	streq	r3, [r5], #-3362	; 0xfffff2de
 a3c:	2209053d 	andcs	r0, r9, #255852544	; 0xf400000
 a40:	3d04054b 	cfstr32cc	mvfx0, [r4, #-300]	; 0xfffffed4
 a44:	3d220905 			; <UNDEFINED> instruction: 0x3d220905
 a48:	053d0405 	ldreq	r0, [sp, #-1029]!	; 0xfffffbfb
 a4c:	01052209 	tsteq	r5, r9, lsl #4
 a50:	0a056921 	beq	15aedc <startup-0x1fea5124>
 a54:	2e02054b 	cfsh32cs	mvfx0, mvfx2, #43
 a58:	05220b05 	streq	r0, [r2, #-2821]!	; 0xfffff4fb
 a5c:	05052e03 	streq	r2, [r5, #-3587]	; 0xfffff1fd
 a60:	03040200 	movweq	r0, #16896	; 0x4200
 a64:	000e0522 	andeq	r0, lr, r2, lsr #10
 a68:	82030402 	andhi	r0, r3, #33554432	; 0x2000000
 a6c:	02000505 	andeq	r0, r0, #20971520	; 0x1400000
 a70:	05750304 	ldrbeq	r0, [r5, #-772]!	; 0xfffffcfc
 a74:	0402000e 	streq	r0, [r2], #-14
 a78:	05058203 	streq	r8, [r5, #-515]	; 0xfffffdfd
 a7c:	03040200 	movweq	r0, #16896	; 0x4200
 a80:	001c0591 	mulseq	ip, r1, r5
 a84:	82030402 	andhi	r0, r3, #33554432	; 0x2000000
 a88:	02000505 	andeq	r0, r0, #20971520	; 0x1400000
 a8c:	05910304 	ldreq	r0, [r1, #772]	; 0x304
 a90:	04020014 	streq	r0, [r2], #-20	; 0xffffffec
 a94:	05058203 	streq	r8, [r5, #-515]	; 0xfffffdfd
 a98:	03040200 	movweq	r0, #16896	; 0x4200
 a9c:	00130591 	mulseq	r3, r1, r5
 aa0:	82030402 	andhi	r0, r3, #33554432	; 0x2000000
 aa4:	02000505 	andeq	r0, r0, #20971520	; 0x1400000
 aa8:	05910304 	ldreq	r0, [r1, #772]	; 0x304
 aac:	04020011 	streq	r0, [r2], #-17	; 0xffffffef
 ab0:	1e058203 	cdpne	2, 0, cr8, cr5, cr3, {0}
 ab4:	03040200 	movweq	r0, #16896	; 0x4200
 ab8:	05907903 	ldreq	r7, [r0, #2307]	; 0x903
 abc:	04020003 	streq	r0, [r2], #-3
 ac0:	1d053c01 	stcne	12, cr3, [r5, #-4]
 ac4:	02040200 	andeq	r0, r4, #0, 4
 ac8:	0002053a 	andeq	r0, r2, sl, lsr r5
 acc:	3c010402 	cfstrscc	mvf0, [r1], {2}
 ad0:	0c030105 	stfeqs	f0, [r3], {5}
 ad4:	0a055c3c 	beq	157bcc <startup-0x1fea8434>
 ad8:	01053d59 	tsteq	r5, r9, asr sp
 adc:	0008023d 	andeq	r0, r8, sp, lsr r2
 ae0:	03110101 	tsteq	r1, #1073741824	; 0x40000000
 ae4:	00030000 	andeq	r0, r3, r0
 ae8:	000000b7 	strheq	r0, [r0], -r7
 aec:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
 af0:	0101000d 	tsteq	r1, sp
 af4:	00000101 	andeq	r0, r0, r1, lsl #2
 af8:	00000100 	andeq	r0, r0, r0, lsl #2
 afc:	2f3a4301 	svccs	0x003a4301
 b00:	6c616843 	stclvs	8, cr6, [r1], #-268	; 0xfffffef4
 b04:	7372656d 	cmnvc	r2, #457179136	; 0x1b400000
 b08:	6165592f 	cmnvs	r5, pc, lsr #18
 b0c:	4c2f3172 	stfmis	f3, [pc], #-456	; 94c <startup-0x1ffff6b4>
 b10:	4d2f3450 	cfstrsmi	mvf3, [pc, #-320]!	; 9d8 <startup-0x1ffff628>
 b14:	4d2f504f 	stcmi	0, cr5, [pc, #-316]!	; 9e0 <startup-0x1ffff620>
 b18:	4c2f504f 	stcmi	0, cr5, [pc], #-316	; 9e4 <startup-0x1ffff61c>
 b1c:	35626261 	strbcc	r6, [r2, #-609]!	; 0xfffffd9f
 b20:	656e694d 	strbvs	r6, [lr, #-2381]!	; 0xfffff6b3
 b24:	65657753 	strbvs	r7, [r5, #-1875]!	; 0xfffff8ad
 b28:	2f726570 	svccs	0x00726570
 b2c:	656e696d 	strbvs	r6, [lr, #-2413]!	; 0xfffff693
 b30:	65657753 	strbvs	r7, [r5, #-1875]!	; 0xfffff8ad
 b34:	47726570 			; <UNDEFINED> instruction: 0x47726570
 b38:	694d2f44 	stmdbvs	sp, {r2, r6, r8, r9, sl, fp, sp}^
 b3c:	7753656e 	ldrbvc	r6, [r3, -lr, ror #10]
 b40:	65706565 	ldrbvs	r6, [r0, #-1381]!	; 0xfffffa9b
 b44:	00444772 	subeq	r4, r4, r2, ror r7
 b48:	79656b00 	stmdbvc	r5!, {r8, r9, fp, sp, lr}^
 b4c:	2e646170 	mcrcs	1, 3, r6, cr4, cr0, {3}
 b50:	00010068 	andeq	r0, r1, r8, rrx
 b54:	61747300 	cmnvs	r4, r0, lsl #6
 b58:	70757472 	rsbsvc	r7, r5, r2, ror r4
 b5c:	0100632e 	tsteq	r0, lr, lsr #6
 b60:	69740000 	ldmdbvs	r4!, {}^	; <UNPREDICTABLE>
 b64:	3672656d 	ldrbtcc	r6, [r2], -sp, ror #10
 b68:	6365645f 	cmnvs	r5, #1593835520	; 0x5f000000
 b6c:	6172616c 	cmnvs	r2, ip, ror #2
 b70:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 b74:	00682e73 	rsbeq	r2, r8, r3, ror lr
 b78:	67000001 	strvs	r0, [r0, -r1]
 b7c:	5f656d61 	svcpl	0x00656d61
 b80:	69676f6c 	stmdbvs	r7!, {r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
 b84:	65645f63 	strbvs	r5, [r4, #-3939]!	; 0xfffff09d
 b88:	72616c63 	rsbvc	r6, r1, #25344	; 0x6300
 b8c:	6f697461 	svcvs	0x00697461
 b90:	682e736e 	stmdavs	lr!, {r1, r2, r3, r5, r6, r8, r9, ip, sp, lr}
 b94:	00000100 	andeq	r0, r0, r0, lsl #2
 b98:	6f697067 	svcvs	0x00697067
 b9c:	0100682e 	tsteq	r0, lr, lsr #16
 ba0:	05000000 	streq	r0, [r0, #-0]
 ba4:	02050001 	andeq	r0, r5, #1
 ba8:	200016c0 	andcs	r1, r0, r0, asr #13
 bac:	05011203 	streq	r1, [r1, #-515]	; 0xfffffdfd
 bb0:	06054b07 	streq	r4, [r5], -r7, lsl #22
 bb4:	2e0e053d 	mcrcs	5, 0, r0, cr14, cr13, {1}
 bb8:	053d0605 	ldreq	r0, [sp, #-1541]!	; 0xfffff9fb
 bbc:	06052e0f 	streq	r2, [r5], -pc, lsl #28
 bc0:	2e0e052f 	cfsh32cs	mvfx0, mvfx14, #31
 bc4:	933d0105 	teqls	sp, #1073741825	; 0x40000001
 bc8:	053d1005 	ldreq	r1, [sp, #-5]!
 bcc:	0205670a 	andeq	r6, r5, #2621440	; 0x280000
 bd0:	2203052e 	andcs	r0, r3, #192937984	; 0xb800000
 bd4:	05590d05 	ldrbeq	r0, [r9, #-3333]	; 0xfffff2fb
 bd8:	04054b05 	streq	r4, [r5], #-2821	; 0xfffff4fb
 bdc:	3d17053e 	cfldr32cc	mvfx0, [r7, #-248]	; 0xffffff08
 be0:	052e2005 	streq	r2, [lr, #-5]!
 be4:	13052e1a 	movwne	r2, #24090	; 0x5e1a
 be8:	001e0520 	andseq	r0, lr, r0, lsr #10
 bec:	03020402 	movweq	r0, #9218	; 0x2402
 bf0:	02053c79 	andeq	r3, r5, #30976	; 0x7900
 bf4:	01040200 	mrseq	r0, R12_usr
 bf8:	3c0a033c 	stccc	3, cr0, [sl], {60}	; 0x3c
 bfc:	053d0905 	ldreq	r0, [sp, #-2309]!	; 0xfffff6fb
 c00:	04020001 	streq	r0, [r2], #-1
 c04:	05772101 	ldrbeq	r2, [r7, #-257]!	; 0xfffffeff
 c08:	04053d13 	streq	r3, [r5], #-3347	; 0xfffff2ed
 c0c:	3003052e 	andcc	r0, r3, lr, lsr #10
 c10:	053d0a05 	ldreq	r0, [sp, #-2565]!	; 0xfffff5fb
 c14:	13054a05 	movwne	r4, #23045	; 0x5a05
 c18:	3d0a052f 	cfstr32cc	mvfx0, [sl, #-188]	; 0xffffff44
 c1c:	05301305 	ldreq	r1, [r0, #-773]!	; 0xfffffcfb
 c20:	15052e04 	strne	r2, [r5, #-3588]	; 0xfffff1fc
 c24:	59050530 	stmdbpl	r5, {r4, r5, r8, sl}
 c28:	054b1205 	strbeq	r1, [fp, #-517]	; 0xfffffdfb
 c2c:	01053d0a 	tsteq	r5, sl, lsl #26
 c30:	0f05853f 	svceq	0x0005853f
 c34:	2e1905cd 	cdpcs	5, 1, cr0, cr9, cr13, {6}
 c38:	052e0305 	streq	r0, [lr, #-773]!	; 0xfffffcfb
 c3c:	1905210f 	stmdbne	r5, {r0, r1, r2, r3, r8, sp}
 c40:	2e03052e 	cfsh32cs	mvfx0, mvfx3, #30
 c44:	05210f05 	streq	r0, [r1, #-3845]!	; 0xfffff0fb
 c48:	03052e19 	movweq	r2, #24089	; 0x5e19
 c4c:	210f052e 	tstcs	pc, lr, lsr #10
 c50:	052e1905 	streq	r1, [lr, #-2309]!	; 0xfffff6fb
 c54:	0f052e03 	svceq	0x00052e03
 c58:	2e190521 	cfmul64cs	mvdx0, mvdx9, mvdx1
 c5c:	052e0305 	streq	r0, [lr, #-773]!	; 0xfffffcfb
 c60:	1905210f 	stmdbne	r5, {r0, r1, r2, r3, r8, sp}
 c64:	2e03052e 	cfsh32cs	mvfx0, mvfx3, #30
 c68:	92220105 	eorls	r0, r2, #1073741825	; 0x40000001
 c6c:	05410a05 	strbeq	r0, [r1, #-2565]	; 0xfffff5fb
 c70:	08052e04 	stmdaeq	r5, {r2, r9, sl, fp, sp}
 c74:	4a05053d 	bmi	142170 <startup-0x1febde90>
 c78:	02001605 	andeq	r1, r0, #5242880	; 0x500000
 c7c:	05200104 	streq	r0, [r0, #-260]!	; 0xfffffefc
 c80:	05052f08 	streq	r2, [r5, #-3848]	; 0xfffff0f8
 c84:	0016054a 	andseq	r0, r6, sl, asr #10
 c88:	20010402 	andcs	r0, r1, r2, lsl #8
 c8c:	052f0805 	streq	r0, [pc, #-2053]!	; 48f <startup-0x1ffffb71>
 c90:	16054a05 	strne	r4, [r5], -r5, lsl #20
 c94:	01040200 	mrseq	r0, R12_usr
 c98:	2f080520 	svccs	0x00080520
 c9c:	054a0505 	strbeq	r0, [sl, #-1285]	; 0xfffffafb
 ca0:	04020016 	streq	r0, [r2], #-22	; 0xffffffea
 ca4:	09052001 	stmdbeq	r5, {r0, sp}
 ca8:	2101052f 	tstcs	r1, pc, lsr #10
 cac:	4e030204 	cdpmi	2, 0, cr0, cr3, cr4, {0}
 cb0:	3d020574 	cfstr32cc	mvfx0, [r2, #-464]	; 0xfffffe30
 cb4:	05300a05 	ldreq	r0, [r0, #-2565]!	; 0xfffff5fb
 cb8:	07053d06 	streq	r3, [r5, -r6, lsl #26]
 cbc:	4b060531 	blmi	182188 <startup-0x1fe7de78>
 cc0:	3107052f 	tstcc	r7, pc, lsr #10
 cc4:	3d220305 	stccc	3, cr0, [r2, #-20]!	; 0xffffffec
 cc8:	05910805 	ldreq	r0, [r1, #2053]	; 0x805
 ccc:	06052207 	streq	r2, [r5], -r7, lsl #4
 cd0:	2f050520 	svccs	0x00050520
 cd4:	05830a05 	streq	r0, [r3, #2565]	; 0xa05
 cd8:	06054b0d 	streq	r4, [r5], -sp, lsl #22
 cdc:	5a130567 	bpl	4c2280 <startup-0x1fb3dd80>
 ce0:	05200705 	streq	r0, [r0, #-1797]!	; 0xfffff8fb
 ce4:	1105300d 	tstne	r5, sp
 ce8:	31070559 	tstcc	r7, r9, asr r5
 cec:	055a0f05 	ldrbeq	r0, [sl, #-3845]	; 0xfffff0fb
 cf0:	05055911 	streq	r5, [r5, #-2321]	; 0xfffff6ef
 cf4:	85090530 	strhi	r0, [r9, #-1328]	; 0xfffffad0
 cf8:	05200805 	streq	r0, [r0, #-2053]!	; 0xfffff7fb
 cfc:	14053007 	strne	r3, [r5], #-7
 d00:	2f070575 	svccs	0x00070575
 d04:	05320605 	ldreq	r0, [r2, #-1541]!	; 0xfffff9fb
 d08:	06051f07 	streq	r1, [r5], -r7, lsl #30
 d0c:	1b052291 	blne	149758 <startup-0x1feb68a8>
 d10:	2e060559 	cfrshl32cs	mvfx6, mvfx9, r0
 d14:	22090559 	andcs	r0, r9, #373293056	; 0x16400000
 d18:	05900805 	ldreq	r0, [r0, #2053]	; 0x805
 d1c:	0705220b 	streq	r2, [r5, -fp, lsl #4]
 d20:	680605f3 	stmdavs	r6, {r0, r1, r4, r5, r6, r7, r8, sl}
 d24:	05220405 	streq	r0, [r2, #-1029]!	; 0xfffffbfb
 d28:	05232c06 	streq	r2, [r3, #-3078]!	; 0xfffff3fa
 d2c:	04020021 	streq	r0, [r2], #-33	; 0xffffffdf
 d30:	1d055801 	stcne	8, cr5, [r5, #-4]
 d34:	01040200 	mrseq	r0, R12_usr
 d38:	21110590 			; <UNDEFINED> instruction: 0x21110590
 d3c:	052f0605 	streq	r0, [pc, #-1541]!	; 73f <startup-0x1ffff8c1>
 d40:	04020022 	streq	r0, [r2], #-34	; 0xffffffde
 d44:	1f055801 	svcne	0x00055801
 d48:	01040200 	mrseq	r0, R12_usr
 d4c:	210f0590 			; <UNDEFINED> instruction: 0x210f0590
 d50:	51030905 	tstpl	r3, r5, lsl #18
 d54:	2e08053c 	mcrcs	5, 0, r0, cr8, cr12, {1}
 d58:	31030305 	tstcc	r3, r5, lsl #6
 d5c:	2f2f4b3c 	svccs	0x002f4b3c
 d60:	05590d05 	ldrbeq	r0, [r9, #-3333]	; 0xfffff2fb
 d64:	13053c0b 	movwne	r3, #23563	; 0x5c0b
 d68:	4b0c052f 	blmi	30222c <startup-0x1fcfddd4>
 d6c:	45030805 	strmi	r0, [r3, #-2053]	; 0xfffff7fb
 d70:	2e07053c 	mcrcs	5, 0, r0, cr7, cr12, {1}
 d74:	3d030205 	sfmcc	f0, 4, [r3, #-20]	; 0xffffffec
 d78:	09054b3c 	stmdbeq	r5, {r2, r3, r4, r5, r8, r9, fp, lr}
 d7c:	2101054b 	tstcs	r1, fp, asr #10
 d80:	02051508 	andeq	r1, r5, #8, 10	; 0x2000000
 d84:	10054b2f 	andne	r4, r5, pc, lsr #22
 d88:	2f020520 	svccs	0x00020520
 d8c:	05200c05 	streq	r0, [r0, #-3077]!	; 0xfffff3fb
 d90:	2f2f2f02 	svccs	0x002f2f02
 d94:	2f01052f 	svccs	0x0001052f
 d98:	3d0705d9 	cfstr32cc	mvfx0, [r7, #-868]	; 0xfffffc9c
 d9c:	83020591 	movwhi	r0, #9617	; 0x2591
 da0:	4b07054b 	blmi	1c22d4 <startup-0x1fe3dd2c>
 da4:	054d0b05 	strbeq	r0, [sp, #-2821]	; 0xfffff4fb
 da8:	1d056705 	stcne	7, cr6, [r5, #-20]	; 0xffffffec
 dac:	01040200 	mrseq	r0, R12_usr
 db0:	4909054a 	stmdbmi	r9, {r1, r3, r6, r8, sl}
 db4:	05220405 	streq	r0, [r2, #-1029]!	; 0xfffffbfb
 db8:	0105220f 	tsteq	r5, pc, lsl #4
 dbc:	07059376 	smlsdxeq	r5, r6, r3, r9
 dc0:	210a0575 	tstcs	sl, r5, ror r5
 dc4:	053c0605 	ldreq	r0, [ip, #-1541]!	; 0xfffff9fb
 dc8:	0b052005 	bleq	148de4 <startup-0x1feb721c>
 dcc:	2c08054b 	cfstr32cs	mvfx0, [r8], {75}	; 0x4b
 dd0:	052e0705 	streq	r0, [lr, #-1797]!	; 0xfffff8fb
 dd4:	01053109 	tsteq	r5, r9, lsl #2
 dd8:	00040221 	andeq	r0, r4, r1, lsr #4
 ddc:	02040101 	andeq	r0, r4, #1073741824	; 0x40000000
 de0:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
 de4:	00000002 	andeq	r0, r0, r2
 de8:	010f0320 	tsteq	pc, r0, lsr #6
 dec:	30222113 	eorcc	r2, r2, r3, lsl r1
 df0:	0102134b 	tsteq	r2, fp, asr #6
 df4:	Address 0x00000df4 is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	20554e47 	subscs	r4, r5, r7, asr #28
   4:	20393943 	eorscs	r3, r9, r3, asr #18
   8:	2e322e39 	mrccs	14, 1, r2, cr2, cr9, {1}
   c:	30322031 	eorscc	r2, r2, r1, lsr r0
  10:	30313931 	eorscc	r3, r1, r1, lsr r9
  14:	28203532 	stmdacs	r0!, {r1, r4, r5, r8, sl, ip, sp}
  18:	656c6572 	strbvs	r6, [ip, #-1394]!	; 0xfffffa8e
  1c:	29657361 	stmdbcs	r5!, {r0, r5, r6, r8, r9, ip, sp, lr}^
  20:	52415b20 	subpl	r5, r1, #32, 22	; 0x8000
  24:	72612f4d 	rsbvc	r2, r1, #308	; 0x134
  28:	2d392d6d 	ldccs	13, cr2, [r9, #-436]!	; 0xfffffe4c
  2c:	6e617262 	cdpvs	2, 6, cr7, cr1, cr2, {3}
  30:	72206863 	eorvc	r6, r0, #6488064	; 0x630000
  34:	73697665 	cmnvc	r9, #105906176	; 0x6500000
  38:	206e6f69 	rsbcs	r6, lr, r9, ror #30
  3c:	35373732 	ldrcc	r3, [r7, #-1842]!	; 0xfffff8ce
  40:	205d3939 	subscs	r3, sp, r9, lsr r9
  44:	68746d2d 	ldmdavs	r4!, {r0, r2, r3, r5, r8, sl, fp, sp, lr}^
  48:	20626d75 	rsbcs	r6, r2, r5, ror sp
  4c:	6c666d2d 	stclvs	13, cr6, [r6], #-180	; 0xffffff4c
  50:	2d74616f 	ldfcse	f6, [r4, #-444]!	; 0xfffffe44
  54:	3d696261 	sfmcc	f6, 2, [r9, #-388]!	; 0xfffffe7c
  58:	74666f73 	strbtvc	r6, [r6], #-3955	; 0xfffff08d
  5c:	616d2d20 	cmnvs	sp, r0, lsr #26
  60:	3d686372 	stclcc	3, cr6, [r8, #-456]!	; 0xfffffe38
  64:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
  68:	206d2d36 	rsbcs	r2, sp, r6, lsr sp
  6c:	2d20672d 	stccs	7, cr6, [r0, #-180]!	; 0xffffff4c
  70:	2d20304f 	stccs	0, cr3, [r0, #-316]!	; 0xfffffec4
  74:	3d647473 	cfstrdcc	mvd7, [r4, #-460]!	; 0xfffffe34
  78:	00393963 	eorseq	r3, r9, r3, ror #18
  7c:	6b636974 	blvs	18da654 <startup-0x1e7259ac>
  80:	69740073 	ldmdbvs	r4!, {r0, r1, r4, r5, r6}^
  84:	3672656d 	ldrbtcc	r6, [r2], -sp, ror #10
  88:	746e695f 	strbtvc	r6, [lr], #-2399	; 0xfffff6a1
  8c:	75727265 	ldrbvc	r7, [r2, #-613]!	; 0xfffffd9b
  90:	43007470 	movwmi	r7, #1136	; 0x470
  94:	68435c3a 	stmdavs	r3, {r1, r3, r4, r5, sl, fp, ip, lr}^
  98:	656d6c61 	strbvs	r6, [sp, #-3169]!	; 0xfffff39f
  9c:	595c7372 	ldmdbpl	ip, {r1, r4, r5, r6, r8, r9, ip, sp, lr}^
  a0:	31726165 	cmncc	r2, r5, ror #2
  a4:	34504c5c 	ldrbcc	r4, [r0], #-3164	; 0xfffff3a4
  a8:	504f4d5c 	subpl	r4, pc, ip, asr sp	; <UNPREDICTABLE>
  ac:	504f4d5c 	subpl	r4, pc, ip, asr sp	; <UNPREDICTABLE>
  b0:	62614c5c 	rsbvs	r4, r1, #92, 24	; 0x5c00
  b4:	694d3562 	stmdbvs	sp, {r1, r5, r6, r8, sl, ip, sp}^
  b8:	7753656e 	ldrbvc	r6, [r3, -lr, ror #10]
  bc:	65706565 	ldrbvs	r6, [r0, #-1381]!	; 0xfffffa9b
  c0:	694d5c72 	stmdbvs	sp, {r1, r4, r5, r6, sl, fp, ip, lr}^
  c4:	7753656e 	ldrbvc	r6, [r3, -lr, ror #10]
  c8:	65706565 	ldrbvs	r6, [r0, #-1381]!	; 0xfffffa9b
  cc:	5c444772 	mcrrpl	7, 7, r4, r4, cr2
  d0:	656e694d 	strbvs	r6, [lr, #-2381]!	; 0xfffff6b3
  d4:	65657753 	strbvs	r7, [r5, #-1875]!	; 0xfffff8ad
  d8:	47726570 			; <UNDEFINED> instruction: 0x47726570
  dc:	6f740044 	svcvs	0x00740044
  e0:	656c6767 	strbvs	r6, [ip, #-1895]!	; 0xfffff899
  e4:	6d69745f 	cfstrdvs	mvd7, [r9, #-380]!	; 0xfffffe84
  e8:	725f7265 	subsvc	r7, pc, #1342177286	; 0x50000006
  ec:	696e6e75 	stmdbvs	lr!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
  f0:	7300676e 	movwvc	r6, #1902	; 0x76e
  f4:	725f7465 	subsvc	r7, pc, #1694498816	; 0x65000000
  f8:	696e6e75 	stmdbvs	lr!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
  fc:	7200676e 	andvc	r6, r0, #28835840	; 0x1b80000
 100:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
 104:	6d69745f 	cfstrdvs	mvd7, [r9, #-380]!	; 0xfffffe84
 108:	74007265 	strvc	r7, [r0], #-613	; 0xfffffd9b
 10c:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
 110:	6e695f36 	mcrvs	15, 3, r5, cr9, cr6, {1}
 114:	43007469 	movwmi	r7, #1129	; 0x469
 118:	68432f3a 	stmdavs	r3, {r1, r3, r4, r5, r8, r9, sl, fp, sp}^
 11c:	656d6c61 	strbvs	r6, [sp, #-3169]!	; 0xfffff39f
 120:	592f7372 	stmdbpl	pc!, {r1, r4, r5, r6, r8, r9, ip, sp, lr}	; <UNPREDICTABLE>
 124:	31726165 	cmncc	r2, r5, ror #2
 128:	34504c2f 	ldrbcc	r4, [r0], #-3119	; 0xfffff3d1
 12c:	504f4d2f 	subpl	r4, pc, pc, lsr #26
 130:	504f4d2f 	subpl	r4, pc, pc, lsr #26
 134:	62614c2f 	rsbvs	r4, r1, #12032	; 0x2f00
 138:	694d3562 	stmdbvs	sp, {r1, r5, r6, r8, sl, ip, sp}^
 13c:	7753656e 	ldrbvc	r6, [r3, -lr, ror #10]
 140:	65706565 	ldrbvs	r6, [r0, #-1381]!	; 0xfffffa9b
 144:	696d2f72 	stmdbvs	sp!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
 148:	7753656e 	ldrbvc	r6, [r3, -lr, ror #10]
 14c:	65706565 	ldrbvs	r6, [r0, #-1381]!	; 0xfffffa9b
 150:	2f444772 	svccs	0x00444772
 154:	656e694d 	strbvs	r6, [lr, #-2381]!	; 0xfffff6b3
 158:	65657753 	strbvs	r7, [r5, #-1875]!	; 0xfffff8ad
 15c:	47726570 			; <UNDEFINED> instruction: 0x47726570
 160:	69742f44 	ldmdbvs	r4!, {r2, r6, r8, r9, sl, fp, sp}^
 164:	3672656d 	ldrbtcc	r6, [r2], -sp, ror #10
 168:	7300632e 	movwvc	r6, #814	; 0x32e
 16c:	6e6f6365 	cdpvs	3, 6, cr6, cr15, cr5, {3}
 170:	61007364 	tstvs	r0, r4, ror #6
 174:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 178:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 17c:	635f6574 	cmpvs	pc, #116, 10	; 0x1d000000
 180:	616d6d6f 	cmnvs	sp, pc, ror #26
 184:	7000646e 	andvc	r6, r0, lr, ror #8
 188:	746e6972 	strbtvc	r6, [lr], #-2418	; 0xfffff68e
 18c:	0068635f 	rsbeq	r6, r8, pc, asr r3
 190:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 194:	53494400 	movtpl	r4, #37888	; 0x9400
 198:	41484350 	cmpmi	r8, r0, asr r3
 19c:	73610052 	cmnvc	r1, #82	; 0x52
 1a0:	5f696963 	svcpl	0x00696963
 1a4:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
 1a8:	69727000 	ldmdbvs	r2!, {ip, sp, lr}^
 1ac:	6e5f746e 	cdpvs	4, 5, cr7, cr15, cr14, {3}
 1b0:	615f6d75 	cmpvs	pc, r5, ror sp	; <UNPREDICTABLE>
 1b4:	70750074 	rsbsvc	r0, r5, r4, ror r0
 1b8:	00726570 	rsbseq	r6, r2, r0, ror r5
 1bc:	70617267 	rsbvc	r7, r1, r7, ror #4
 1c0:	5f636968 	svcpl	0x00636968
 1c4:	65786970 	ldrbvs	r6, [r8, #-2416]!	; 0xfffff690
 1c8:	6c635f6c 	stclvs	15, cr5, [r3], #-432	; 0xfffffe50
 1cc:	00726165 	rsbseq	r6, r2, r5, ror #2
 1d0:	6e697270 	mcrvs	2, 3, r7, cr9, cr0, {3}
 1d4:	74735f74 	ldrbtvc	r5, [r3], #-3956	; 0xfffff08c
 1d8:	5f747261 	svcpl	0x00747261
 1dc:	74786574 	ldrbtvc	r6, [r8], #-1396	; 0xfffffa8c
 1e0:	6373615f 	cmnvs	r3, #-1073741801	; 0xc0000017
 1e4:	64006969 	strvs	r6, [r0], #-2409	; 0xfffff697
 1e8:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 1ec:	63696d5f 	cmnvs	r9, #6080	; 0x17c0
 1f0:	66006f72 			; <UNDEFINED> instruction: 0x66006f72
 1f4:	0072756f 	rsbseq	r7, r2, pc, ror #10
 1f8:	616c6564 	cmnvs	ip, r4, ror #10
 1fc:	73610079 	cmnvc	r1, #121	; 0x79
 200:	5f696963 	svcpl	0x00696963
 204:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 208:	74735f65 	ldrbtvc	r5, [r3], #-3941	; 0xfffff09b
 20c:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
 210:	69727000 	ldmdbvs	r2!, {ip, sp, lr}^
 214:	745f746e 	ldrbvc	r7, [pc], #-1134	; 21c <startup-0x1ffffde4>
 218:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
 21c:	2f3a4300 	svccs	0x003a4300
 220:	6c616843 	stclvs	8, cr6, [r1], #-268	; 0xfffffef4
 224:	7372656d 	cmnvc	r2, #457179136	; 0x1b400000
 228:	6165592f 	cmnvs	r5, pc, lsr #18
 22c:	4c2f3172 	stfmis	f3, [pc], #-456	; 6c <startup-0x1fffff94>
 230:	4d2f3450 	cfstrsmi	mvf3, [pc, #-320]!	; f8 <startup-0x1fffff08>
 234:	4d2f504f 	stcmi	0, cr5, [pc, #-316]!	; 100 <startup-0x1fffff00>
 238:	4c2f504f 	stcmi	0, cr5, [pc], #-316	; 104 <startup-0x1ffffefc>
 23c:	35626261 	strbcc	r6, [r2, #-609]!	; 0xfffffd9f
 240:	656e694d 	strbvs	r6, [lr, #-2381]!	; 0xfffff6b3
 244:	65657753 	strbvs	r7, [r5, #-1875]!	; 0xfffff8ad
 248:	2f726570 	svccs	0x00726570
 24c:	656e696d 	strbvs	r6, [lr, #-2413]!	; 0xfffff693
 250:	65657753 	strbvs	r7, [r5, #-1875]!	; 0xfffff8ad
 254:	47726570 			; <UNDEFINED> instruction: 0x47726570
 258:	694d2f44 	stmdbvs	sp, {r2, r6, r8, r9, sl, fp, sp}^
 25c:	7753656e 	ldrbvc	r6, [r3, -lr, ror #10]
 260:	65706565 	ldrbvs	r6, [r0, #-1381]!	; 0xfffffa9b
 264:	2f444772 	svccs	0x00444772
 268:	70617267 	rsbvc	r7, r1, r7, ror #4
 26c:	5f636968 	svcpl	0x00636968
 270:	70736964 	rsbsvc	r6, r3, r4, ror #18
 274:	7a00632e 	bvc	18f34 <startup-0x1ffe70cc>
 278:	006f7265 	rsbeq	r7, pc, r5, ror #4
 27c:	616c6564 	cmnvs	ip, r4, ror #10
 280:	696d5f79 	stmdbvs	sp!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 284:	00696c6c 	rsbeq	r6, r9, ip, ror #24
 288:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
 28c:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
 290:	61686320 	cmnvs	r8, r0, lsr #6
 294:	73610072 	cmnvc	r1, #114	; 0x72
 298:	5f696963 	svcpl	0x00696963
 29c:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
 2a0:	6174735f 	cmnvs	r4, pc, asr r3
 2a4:	00737574 	rsbseq	r7, r3, r4, ror r5
 2a8:	616c6564 	cmnvs	ip, r4, ror #10
 2ac:	6d315f79 	ldcvs	15, cr5, [r1, #-484]!	; 0xfffffe1c
 2b0:	6f726b69 	svcvs	0x00726b69
 2b4:	656e6f00 	strbvs	r6, [lr, #-3840]!	; 0xfffff100
 2b8:	79730073 	ldmdbvc	r3!, {r0, r1, r4, r5, r6}^
 2bc:	63697473 	cmnvs	r9, #1929379840	; 0x73000000
 2c0:	72695f6b 	rsbvc	r5, r9, #428	; 0x1ac
 2c4:	61685f71 	smcvs	34289	; 0x85f1
 2c8:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0xfffffb92
 2cc:	6f635f72 	svcvs	0x00635f72
 2d0:	69746e75 	ldmdbvs	r4!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
 2d4:	7000676e 	andvc	r6, r0, lr, ror #14
 2d8:	746e6972 	strbtvc	r6, [lr], #-2418	; 0xfffff68e
 2dc:	6e69775f 	mcrvs	7, 3, r7, cr9, cr15, {2}
 2e0:	6f6f6c5f 	svcvs	0x006f6c5f
 2e4:	6d5f6573 	cfldr64vs	mvdx6, [pc, #-460]	; 120 <startup-0x1ffffee0>
 2e8:	67006773 	smlsdxvs	r0, r3, r7, r6
 2ec:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 2f0:	695f6369 	ldmdbvs	pc, {r0, r3, r5, r6, r8, r9, sp, lr}^	; <UNPREDICTABLE>
 2f4:	6974696e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, fp, sp, lr}^
 2f8:	7a696c61 	bvc	1a5b484 <startup-0x1e5a4b7c>
 2fc:	72700065 	rsbsvc	r0, r0, #101	; 0x65
 300:	5f746e69 	svcpl	0x00746e69
 304:	675f6f74 			; <UNDEFINED> instruction: 0x675f6f74
 308:	69640064 	stmdbvs	r4!, {r2, r5, r6}^
 30c:	68437073 	stmdavs	r3, {r0, r1, r4, r5, r6, ip, sp, lr}^
 310:	61007261 	tstvs	r0, r1, ror #4
 314:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 318:	6165725f 	cmnvs	r5, pc, asr r2
 31c:	6f635f64 	svcvs	0x00635f64
 320:	6f72746e 	svcvs	0x0072746e
 324:	72656c6c 	rsbvc	r6, r5, #108, 24	; 0x6c00
 328:	61726700 	cmnvs	r2, r0, lsl #14
 32c:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 330:	7869705f 	stmdavc	r9!, {r0, r1, r2, r3, r4, r6, ip, sp, lr}^
 334:	735f6c65 	cmpvc	pc, #25856	; 0x6500
 338:	61007465 	tstvs	r0, r5, ror #8
 33c:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 340:	7274635f 	rsbsvc	r6, r4, #2080374785	; 0x7c000001
 344:	69625f6c 	stmdbvs	r2!, {r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
 348:	65735f74 	ldrbvs	r5, [r3, #-3956]!	; 0xfffff08c
 34c:	79730074 	ldmdbvc	r3!, {r2, r4, r5, r6}^
 350:	63695473 	cmnvs	r9, #1929379840	; 0x73000000
 354:	6e695f6b 	cdpvs	15, 6, cr5, cr9, cr11, {3}
 358:	73007469 	movwvc	r7, #1129	; 0x469
 35c:	00736365 	rsbseq	r6, r3, r5, ror #6
 360:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0xfffff68d
 364:	5f6b6369 	svcpl	0x006b6369
 368:	5f717269 	svcpl	0x00717269
 36c:	646e6168 	strbtvs	r6, [lr], #-360	; 0xfffffe98
 370:	5f72656c 	svcpl	0x0072656c
 374:	646e6172 	strbtvs	r6, [lr], #-370	; 0xfffffe8e
 378:	736e7500 	cmnvc	lr, #0, 10
 37c:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
 380:	6e692064 	cdpvs	0, 6, cr2, cr9, cr4, {3}
 384:	64610074 	strbtvs	r0, [r1], #-116	; 0xffffff8c
 388:	73657264 	cmnvc	r5, #100, 4	; 0x40000006
 38c:	74730073 	ldrbtvc	r0, [r3], #-115	; 0xffffff8d
 390:	5f747261 	svcpl	0x00747261
 394:	646e6172 	strbtvs	r6, [lr], #-370	; 0xfffffe8e
 398:	65737500 	ldrbvs	r7, [r3, #-1280]!	; 0xfffffb00
 39c:	6373615f 	cmnvs	r3, #-1073741801	; 0xc0000017
 3a0:	61006969 	tstvs	r0, r9, ror #18
 3a4:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 3a8:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 3ac:	645f6574 	ldrbvs	r6, [pc], #-1396	; 3b4 <startup-0x1ffffc4c>
 3b0:	00617461 	rsbeq	r7, r1, r1, ror #8
 3b4:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 3b8:	6f675f69 	svcvs	0x00675f69
 3bc:	79786f74 	ldmdbvc	r8!, {r2, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 3c0:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 3c4:	325f7961 	subscc	r7, pc, #1589248	; 0x184000
 3c8:	736e3035 	cmnvc	lr, #53	; 0x35
 3cc:	73797300 	cmnvc	r9, #0, 6
 3d0:	6b636974 	blvs	18da9a8 <startup-0x1e725658>
 3d4:	7172695f 	cmnvc	r2, pc, asr r9
 3d8:	6e61685f 	mcrvs	8, 3, r6, cr1, cr15, {2}
 3dc:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
 3e0:	74617000 	strbtvc	r7, [r1], #-0
 3e4:	6e726574 	mrcvs	5, 3, r6, cr2, cr4, {3}
 3e8:	72687400 	rsbvc	r7, r8, #0, 8
 3ec:	61006565 	tstvs	r0, r5, ror #10
 3f0:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 3f4:	7274635f 	rsbsvc	r6, r4, #2080374785	; 0x7c000001
 3f8:	69625f6c 	stmdbvs	r2!, {r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
 3fc:	6c635f74 	stclvs	15, cr5, [r3], #-464	; 0xfffffe30
 400:	00726165 	rsbseq	r6, r2, r5, ror #2
 404:	6f727261 	svcvs	0x00727261
 408:	72700077 	rsbsvc	r0, r0, #119	; 0x77
 40c:	5f746e69 	svcpl	0x00746e69
 410:	67616c66 	strbvs	r6, [r1, -r6, ror #24]!
 414:	65740073 	ldrbvs	r0, [r4, #-115]!	; 0xffffff8d
 418:	7368746e 	cmnvc	r8, #1845493760	; 0x6e000000
 41c:	63736100 	cmnvs	r3, #0, 2
 420:	775f6969 	ldrbvc	r6, [pc, -r9, ror #18]
 424:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 428:	6d756e5f 	ldclvs	14, cr6, [r5, #-380]!	; 0xfffffe84
 42c:	00726562 	rsbseq	r6, r2, r2, ror #10
 430:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0xfffff68d
 434:	5f6b6369 	svcpl	0x006b6369
 438:	67616c66 	strbvs	r6, [r1, -r6, ror #24]!
 43c:	61726700 	cmnvs	r2, r0, lsl #14
 440:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 444:	656c635f 	strbvs	r6, [ip, #-863]!	; 0xfffffca1
 448:	735f7261 	cmpvc	pc, #268435462	; 0x10000006
 44c:	65657263 	strbvs	r7, [r5, #-611]!	; 0xfffffd9d
 450:	6e69006e 	cdpvs	0, 6, cr0, cr9, cr14, {3}
 454:	645f7469 	ldrbvs	r7, [pc], #-1129	; 45c <startup-0x1ffffba4>
 458:	00707369 	rsbseq	r7, r0, r9, ror #6
 45c:	616c6564 	cmnvs	ip, r4, ror #10
 460:	6f635f79 	svcvs	0x00635f79
 464:	00746e75 	rsbseq	r6, r4, r5, ror lr
 468:	63617073 	cmnvs	r1, #115	; 0x73
 46c:	73610065 	cmnvc	r1, #101	; 0x65
 470:	5f696963 	svcpl	0x00696963
 474:	6d6d6f63 	stclvs	15, cr6, [sp, #-396]!	; 0xfffffe74
 478:	00646e61 	rsbeq	r6, r4, r1, ror #28
 47c:	5f746567 	svcpl	0x00746567
 480:	646e6172 	strbtvs	r6, [lr], #-370	; 0xfffffe8e
 484:	6c61765f 	stclvs	6, cr7, [r1], #-380	; 0xfffffe84
 488:	6e657400 	cdpvs	4, 6, cr7, cr5, cr0, {0}
 48c:	73610073 	cmnvc	r1, #115	; 0x73
 490:	5f696963 	svcpl	0x00696963
 494:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 498:	6f635f65 	svcvs	0x00635f65
 49c:	6f72746e 	svcvs	0x0072746e
 4a0:	72656c6c 	rsbvc	r6, r5, #108, 24	; 0x6c00
 4a4:	646e6500 	strbtvs	r6, [lr], #-1280	; 0xfffffb00
 4a8:	6e61725f 	mcrvs	2, 3, r7, cr1, cr15, {2}
 4ac:	73610064 	cmnvc	r1, #100	; 0x64
 4b0:	5f696963 	svcpl	0x00696963
 4b4:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
 4b8:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
 4bc:	73610061 	cmnvc	r1, #97	; 0x61
 4c0:	5f696963 	svcpl	0x00696963
 4c4:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 4c8:	68635f65 	stmdavs	r3!, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
 4cc:	75007261 	strvc	r7, [r0, #-609]	; 0xfffffd9f
 4d0:	5f646573 	svcpl	0x00646573
 4d4:	5f726f66 	svcpl	0x00726f66
 4d8:	646e6172 	strbtvs	r6, [lr], #-370	; 0xfffffe8e
 4dc:	6c6f6400 	cfstrdvs	mvd6, [pc], #-0	; 4e4 <startup-0x1ffffb1c>
 4e0:	7369006c 	cmnvc	r9, #108	; 0x6c
 4e4:	6d6f625f 	sfmvs	f6, 2, [pc, #-380]!	; 370 <startup-0x1ffffc90>
 4e8:	706f0062 	rsbvc	r0, pc, r2, rrx
 4ec:	64656e65 	strbtvs	r6, [r5], #-3685	; 0xfffff19b
 4f0:	7571735f 	ldrbvc	r7, [r1, #-863]!	; 0xfffffca1
 4f4:	73657261 	cmnvc	r5, #268435462	; 0x10000006
 4f8:	736f5000 	cmnvc	pc, #0
 4fc:	6f697469 	svcvs	0x00697469
 500:	6400736e 	strvs	r7, [r0], #-878	; 0xfffffc92
 504:	5f776172 	svcpl	0x00776172
 508:	00736f70 	rsbseq	r6, r3, r0, ror pc
 50c:	6e65706f 	cdpvs	0, 6, cr7, cr5, cr15, {3}
 510:	6e006465 	cdpvs	4, 0, cr6, cr0, cr5, {3}
 514:	626d6f42 	rsbvs	r6, sp, #264	; 0x108
 518:	6f660073 	svcvs	0x00660073
 51c:	00646e75 	rsbeq	r6, r4, r5, ror lr
 520:	6e65706f 	cdpvs	0, 6, cr7, cr5, cr15, {3}
 524:	736f705f 	cmnvc	pc, #95	; 0x5f
 528:	616c7000 	cmnvs	ip, r0
 52c:	5f646563 	svcpl	0x00646563
 530:	626d6f62 	rsbvs	r6, sp, #392	; 0x188
 534:	71730073 	cmnvc	r3, r3, ror r0
 538:	65726175 	ldrbvs	r6, [r2, #-373]!	; 0xfffffe8b
 53c:	6f745f73 	svcvs	0x00745f73
 540:	65706f5f 	ldrbvs	r6, [r0, #-3935]!	; 0xfffff0a1
 544:	6c70006e 	ldclvs	0, cr0, [r0], #-440	; 0xfffffe48
 548:	5f656361 	svcpl	0x00656361
 54c:	67616c66 	strbvs	r6, [r1, -r6, ror #24]!
 550:	756f6300 	strbvc	r6, [pc, #-768]!	; 258 <startup-0x1ffffda8>
 554:	625f746e 	subsvs	r7, pc, #1845493760	; 0x6e000000
 558:	5f626d6f 	svcpl	0x00626d6f
 55c:	665f726f 	ldrbvs	r7, [pc], -pc, ror #4
 560:	0067616c 	rsbeq	r6, r7, ip, ror #2
 564:	656d6167 	strbvs	r6, [sp, #-359]!	; 0xfffffe99
 568:	7265766f 	rsbvc	r7, r5, #116391936	; 0x6f00000
 56c:	735f6e00 	cmpvc	pc, #0, 28
 570:	5f656d61 	svcpl	0x00656d61
 574:	0079656b 	rsbseq	r6, r9, fp, ror #10
 578:	61657263 	cmnvs	r5, r3, ror #4
 57c:	625f6574 	subsvs	r6, pc, #116, 10	; 0x1d000000
 580:	6472616f 	ldrbtvs	r6, [r2], #-367	; 0xfffffe91
 584:	5f736900 	svcpl	0x00736900
 588:	626d6f62 	rsbvs	r6, sp, #392	; 0x188
 58c:	7274705f 	rsbsvc	r7, r4, #95	; 0x5f
 590:	6b616d00 	blvs	185b998 <startup-0x1e7a4668>
 594:	69665f65 	stmdbvs	r6!, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
 598:	5f747372 	svcpl	0x00747372
 59c:	6e65706f 	cdpvs	0, 6, cr7, cr5, cr15, {3}
 5a0:	74656700 	strbtvc	r6, [r5], #-1792	; 0xfffff900
 5a4:	77656e5f 			; <UNDEFINED> instruction: 0x77656e5f
 5a8:	5f79785f 	svcpl	0x0079785f
 5ac:	6d6f7266 	sfmvs	f7, 2, [pc, #-408]!	; 41c <startup-0x1ffffbe4>
 5b0:	0068635f 	rsbeq	r6, r8, pc, asr r3
 5b4:	696c6176 	stmdbvs	ip!, {r1, r2, r4, r5, r6, r8, sp, lr}^
 5b8:	6f705f64 	svcvs	0x00705f64
 5bc:	68630073 	stmdavs	r3!, {r0, r1, r4, r5, r6}^
 5c0:	5f6b6365 	svcpl	0x006b6365
 5c4:	006e6977 	rsbeq	r6, lr, r7, ror r9
 5c8:	63616c70 	cmnvs	r1, #112, 24	; 0x7000
 5cc:	6f625f65 	svcvs	0x00625f65
 5d0:	0073626d 	rsbseq	r6, r3, sp, ror #4
 5d4:	63616c70 	cmnvs	r1, #112, 24	; 0x7000
 5d8:	665f6465 	ldrbvs	r6, [pc], -r5, ror #8
 5dc:	6767616c 	strbvs	r6, [r7, -ip, ror #2]!
 5e0:	6c500073 	mrrcvs	0, 7, r0, r0, cr3	; <UNPREDICTABLE>
 5e4:	72657961 	rsbvc	r7, r5, #1589248	; 0x184000
 5e8:	736f7000 	cmnvc	pc, #0
 5ec:	6f697469 	svcvs	0x00697469
 5f0:	6572006e 	ldrbvs	r0, [r2, #-110]!	; 0xffffff92
 5f4:	5f746573 	svcpl	0x00746573
 5f8:	656d6167 	strbvs	r6, [sp, #-359]!	; 0xfffffe99
 5fc:	69727000 	ldmdbvs	r2!, {ip, sp, lr}^
 600:	705f746e 	subsvc	r7, pc, lr, ror #8
 604:	6579616c 	ldrbvs	r6, [r9, #-364]!	; 0xfffffe94
 608:	68730072 	ldmdavs	r3!, {r1, r4, r5, r6}^
 60c:	625f776f 	subsvs	r7, pc, #29097984	; 0x1bc0000
 610:	73626d6f 	cmnvc	r2, #7104	; 0x1bc0
 614:	616c6600 	cmnvs	ip, r0, lsl #12
 618:	64656767 	strbtvs	r6, [r5], #-1895	; 0xfffff899
 61c:	6d756e00 	ldclvs	14, cr6, [r5, #-0]
 620:	5f726562 	svcpl	0x00726562
 624:	625f666f 	subsvs	r6, pc, #116391936	; 0x6f00000
 628:	73626d6f 	cmnvc	r2, #7104	; 0x1bc0
 62c:	766f6d00 	strbtvc	r6, [pc], -r0, lsl #26
 630:	6c705f65 	ldclvs	15, cr5, [r0], #-404	; 0xfffffe6c
 634:	72657961 	rsbvc	r7, r5, #1589248	; 0x184000
 638:	78656e00 	stmdavc	r5!, {r9, sl, fp, sp, lr}^
 63c:	43005974 	movwmi	r5, #2420	; 0x974
 640:	68432f3a 	stmdavs	r3, {r1, r3, r4, r5, r8, r9, sl, fp, sp}^
 644:	656d6c61 	strbvs	r6, [sp, #-3169]!	; 0xfffff39f
 648:	592f7372 	stmdbpl	pc!, {r1, r4, r5, r6, r8, r9, ip, sp, lr}	; <UNPREDICTABLE>
 64c:	31726165 	cmncc	r2, r5, ror #2
 650:	34504c2f 	ldrbcc	r4, [r0], #-3119	; 0xfffff3d1
 654:	504f4d2f 	subpl	r4, pc, pc, lsr #26
 658:	504f4d2f 	subpl	r4, pc, pc, lsr #26
 65c:	62614c2f 	rsbvs	r4, r1, #12032	; 0x2f00
 660:	694d3562 	stmdbvs	sp, {r1, r5, r6, r8, sl, ip, sp}^
 664:	7753656e 	ldrbvc	r6, [r3, -lr, ror #10]
 668:	65706565 	ldrbvs	r6, [r0, #-1381]!	; 0xfffffa9b
 66c:	696d2f72 	stmdbvs	sp!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
 670:	7753656e 	ldrbvc	r6, [r3, -lr, ror #10]
 674:	65706565 	ldrbvs	r6, [r0, #-1381]!	; 0xfffffa9b
 678:	2f444772 	svccs	0x00444772
 67c:	656e694d 	strbvs	r6, [lr, #-2381]!	; 0xfffff6b3
 680:	65657753 	strbvs	r7, [r5, #-1875]!	; 0xfffff8ad
 684:	47726570 			; <UNDEFINED> instruction: 0x47726570
 688:	61672f44 	cmnvs	r7, r4, asr #30
 68c:	6c5f656d 	cfldr64vs	mvdx6, [pc], {109}	; 0x6d
 690:	6369676f 	cmnvs	r9, #29097984	; 0x1bc0000
 694:	6e00632e 	cdpvs	3, 0, cr6, cr0, cr14, {1}
 698:	58747865 	ldmdapl	r4!, {r0, r2, r5, r6, fp, ip, sp, lr}^
 69c:	77656e00 	strbvc	r6, [r5, -r0, lsl #28]!
 6a0:	67005958 	smlsdvs	r0, r8, r9, r5
 6a4:	5f656d61 	svcpl	0x00656d61
 6a8:	7265766f 	rsbvc	r7, r5, #116391936	; 0x6f00000
 6ac:	72756300 	rsbsvc	r6, r5, #0, 6
 6b0:	00785f72 	rsbseq	r5, r8, r2, ror pc
 6b4:	72727563 	rsbsvc	r7, r2, #415236096	; 0x18c00000
 6b8:	7400795f 	strvc	r7, [r0], #-2399	; 0xfffff6a1
 6bc:	776f6c6f 	strbvc	r6, [pc, -pc, ror #24]!
 6c0:	6d007265 	sfmvs	f7, 4, [r0, #-404]	; 0xfffffe6c
 6c4:	5f65766f 	svcpl	0x0065766f
 6c8:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 6cc:	645f7265 	ldrbvs	r7, [pc], #-613	; 6d4 <startup-0x1ffff92c>
 6d0:	6f676169 	svcvs	0x00676169
 6d4:	006c616e 	rsbeq	r6, ip, lr, ror #2
 6d8:	656d6167 	strbvs	r6, [sp, #-359]!	; 0xfffffe99
 6dc:	6174735f 	cmnvs	r4, pc, asr r3
 6e0:	64657472 	strbtvs	r7, [r5], #-1138	; 0xfffffb8e
 6e4:	5f736900 	svcpl	0x00736900
 6e8:	67616c66 	strbvs	r6, [r1, -r6, ror #24]!
 6ec:	7274705f 	rsbsvc	r7, r4, #95	; 0x5f
 6f0:	766f6d00 	strbtvc	r6, [pc], -r0, lsl #26
 6f4:	00684365 	rsbeq	r4, r8, r5, ror #6
 6f8:	65766f6d 	ldrbvs	r6, [r6, #-3949]!	; 0xfffff093
 6fc:	79656b5f 	stmdbvc	r5!, {r0, r1, r2, r3, r4, r6, r8, r9, fp, sp, lr}^
 700:	75660073 	strbvc	r0, [r6, #-115]!	; 0xffffff8d
 704:	6900636e 	stmdbvs	r0, {r1, r2, r3, r5, r6, r8, r9, sp, lr}
 708:	6c665f73 	stclvs	15, cr5, [r6], #-460	; 0xfffffe34
 70c:	6b006761 	blvs	1a498 <startup-0x1ffe5b68>
 710:	61567965 	cmpvs	r6, r5, ror #18
 714:	0065756c 	rsbeq	r7, r5, ip, ror #10
 718:	5f746968 	svcpl	0x00746968
 71c:	72006863 	andvc	r6, r0, #6488064	; 0x630000
 720:	72657365 	rsbvc	r7, r5, #-1811939327	; 0x94000001
 724:	00646576 	rsbeq	r6, r4, r6, ror r5
 728:	7079746f 	rsbsvc	r7, r9, pc, ror #8
 72c:	72007265 	andvc	r7, r0, #1342177286	; 0x50000006
 730:	4b646165 	blmi	1918ccc <startup-0x1e6e7334>
 734:	69007965 	stmdbvs	r0, {r0, r2, r5, r6, r8, fp, ip, sp, lr}
 738:	5f74696e 	svcpl	0x0074696e
 73c:	7079656b 	rsbsvc	r6, r9, fp, ror #10
 740:	6f006461 	svcvs	0x00006461
 744:	69487264 	stmdbvs	r8, {r2, r5, r6, r9, ip, sp, lr}^
 748:	47006867 	strmi	r6, [r0, -r7, ror #16]
 74c:	004f4950 	subeq	r4, pc, r0, asr r9	; <UNPREDICTABLE>
 750:	6570736f 	ldrbvs	r7, [r0, #-879]!	; 0xfffffc91
 754:	00726465 	rsbseq	r6, r2, r5, ror #8
 758:	69746361 	ldmdbvs	r4!, {r0, r5, r6, r8, r9, sp, lr}^
 75c:	65746176 	ldrbvs	r6, [r4, #-374]!	; 0xfffffe8a
 760:	00776f52 	rsbseq	r6, r7, r2, asr pc
 764:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
 768:	756c6f43 	strbvc	r6, [ip, #-3907]!	; 0xfffff0bd
 76c:	63006e6d 	movwvs	r6, #3693	; 0xe6d
 770:	65727275 	ldrbvs	r7, [r2, #-629]!	; 0xfffffd8b
 774:	735f746e 	cmpvc	pc, #1845493760	; 0x6e000000
 778:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
 77c:	70757000 	rsbsvc	r7, r5, r0
 780:	63007264 	movwvs	r7, #612	; 0x264
 784:	61746e6f 	cmnvs	r4, pc, ror #28
 788:	00736e69 	rsbseq	r6, r3, r9, ror #28
 78c:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
 790:	7070615f 	rsbsvc	r6, r0, pc, asr r1
 794:	616c7000 	cmnvs	ip, r0
 798:	67615f79 			; <UNDEFINED> instruction: 0x67615f79
 79c:	006e6961 	rsbeq	r6, lr, r1, ror #18
 7a0:	746e6975 	strbtvc	r6, [lr], #-2421	; 0xfffff68b
 7a4:	00745f38 	rsbseq	r5, r4, r8, lsr pc
 7a8:	4c72646f 	cfldrdmi	mvd6, [r2], #-444	; 0xfffffe44
 7ac:	6d00776f 	stcvs	7, cr7, [r0, #-444]	; 0xfffffe44
 7b0:	006e6961 	rsbeq	r6, lr, r1, ror #18
 7b4:	48726469 	ldmdami	r2!, {r0, r3, r5, r6, sl, sp, lr}^
 7b8:	00686769 	rsbeq	r6, r8, r9, ror #14
 7bc:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 7c0:	00707574 	rsbseq	r7, r0, r4, ror r5
 7c4:	6279656b 	rsbsvs	r6, r9, #448790528	; 0x1ac00000
 7c8:	686e655f 	stmdavs	lr!, {r0, r1, r2, r3, r4, r6, r8, sl, sp, lr}^
 7cc:	65636e61 	strbvs	r6, [r3, #-3681]!	; 0xfffff19f
 7d0:	616c0064 	cmnvs	ip, r4, rrx
 7d4:	6b5f7473 	blvs	17dd9a8 <startup-0x1e822658>
 7d8:	69007965 	stmdbvs	r0, {r0, r2, r5, r6, r8, fp, ip, sp, lr}
 7dc:	6f4c7264 	svcvs	0x004c7264
 7e0:	6f700077 	svcvs	0x00700077
 7e4:	73007472 	movwvc	r7, #1138	; 0x472
 7e8:	74726f68 	ldrbtvc	r6, [r2], #-3944	; 0xfffff098
 7ec:	746e6920 	strbtvc	r6, [lr], #-2336	; 0xfffff6e0
 7f0:	74696800 	strbtvc	r6, [r9], #-2048	; 0xfffff800
 7f4:	74006863 	strvc	r6, [r0], #-2147	; 0xfffff79d
 7f8:	675f6761 	ldrbvs	r6, [pc, -r1, ror #14]
 7fc:	006f6970 	rsbeq	r6, pc, r0, ror r9	; <UNPREDICTABLE>
 800:	746e6975 	strbtvc	r6, [lr], #-2421	; 0xfffff68b
 804:	745f3233 	ldrbvc	r3, [pc], #-563	; 80c <startup-0x1ffff7f4>
 808:	2f3a4300 	svccs	0x003a4300
 80c:	6c616843 	stclvs	8, cr6, [r1], #-268	; 0xfffffef4
 810:	7372656d 	cmnvc	r2, #457179136	; 0x1b400000
 814:	6165592f 	cmnvs	r5, pc, lsr #18
 818:	4c2f3172 	stfmis	f3, [pc], #-456	; 658 <startup-0x1ffff9a8>
 81c:	4d2f3450 	cfstrsmi	mvf3, [pc, #-320]!	; 6e4 <startup-0x1ffff91c>
 820:	4d2f504f 	stcmi	0, cr5, [pc, #-316]!	; 6ec <startup-0x1ffff914>
 824:	4c2f504f 	stcmi	0, cr5, [pc], #-316	; 6f0 <startup-0x1ffff910>
 828:	35626261 	strbcc	r6, [r2, #-609]!	; 0xfffffd9f
 82c:	656e694d 	strbvs	r6, [lr, #-2381]!	; 0xfffff6b3
 830:	65657753 	strbvs	r7, [r5, #-1875]!	; 0xfffff8ad
 834:	2f726570 	svccs	0x00726570
 838:	656e696d 	strbvs	r6, [lr, #-2413]!	; 0xfffff693
 83c:	65657753 	strbvs	r7, [r5, #-1875]!	; 0xfffff8ad
 840:	47726570 			; <UNDEFINED> instruction: 0x47726570
 844:	694d2f44 	stmdbvs	sp, {r2, r6, r8, r9, sl, fp, sp}^
 848:	7753656e 	ldrbvc	r6, [r3, -lr, ror #10]
 84c:	65706565 	ldrbvs	r6, [r0, #-1381]!	; 0xfffffa9b
 850:	2f444772 	svccs	0x00444772
 854:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 858:	2e707574 	mrccs	5, 3, r7, cr0, cr4, {3}
 85c:	6f6d0063 	svcvs	0x006d0063
 860:	00726564 	rsbseq	r6, r2, r4, ror #10
 864:	65736572 	ldrbvs	r6, [r3, #-1394]!	; 0xfffffa8e
 868:	64657672 	strbtvs	r7, [r5], #-1650	; 0xfffff98e
 86c:	Address 0x0000086c is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	206d7241 	rsbcs	r7, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d39 	eorscc	r2, r2, r9, lsr sp
  30:	712d3931 			; <UNDEFINED> instruction: 0x712d3931
  34:	616d2d34 	cmnvs	sp, r4, lsr sp
  38:	29726f6a 	ldmdbcs	r2!, {r1, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
  3c:	322e3920 	eorcc	r3, lr, #32, 18	; 0x80000
  40:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  44:	31393130 	teqcc	r9, r0, lsr r1
  48:	20353230 	eorscs	r3, r5, r0, lsr r2
  4c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  50:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  54:	415b2029 	cmpmi	fp, r9, lsr #32
  58:	612f4d52 			; <UNDEFINED> instruction: 0x612f4d52
  5c:	392d6d72 	pushcc	{r1, r4, r5, r6, r8, sl, fp, sp, lr}
  60:	6172622d 	cmnvs	r2, sp, lsr #4
  64:	2068636e 	rsbcs	r6, r8, lr, ror #6
  68:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
  6c:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
  70:	37373220 	ldrcc	r3, [r7, -r0, lsr #4]!
  74:	5d393935 			; <UNDEFINED> instruction: 0x5d393935
	...

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002b41 	andeq	r2, r0, r1, asr #22
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000021 	andeq	r0, r0, r1, lsr #32
  10:	2d533605 	ldclcs	6, cr3, [r3, #-20]	; 0xffffffec
  14:	0c06004d 	stceq	0, cr0, [r6], {77}	; 0x4d
  18:	01094d07 	tsteq	r9, r7, lsl #26
  1c:	01140412 	tsteq	r4, r2, lsl r4
  20:	03170115 	tsteq	r7, #1073741829	; 0x40000005
  24:	01190118 	tsteq	r9, r8, lsl r1
  28:	061e011a 			; <UNDEFINED> instruction: 0x061e011a

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	00000018 	andeq	r0, r0, r8, lsl r0
  14:	00000000 	andeq	r0, r0, r0
  18:	20000014 	andcs	r0, r0, r4, lsl r0
  1c:	000000a4 	andeq	r0, r0, r4, lsr #1
  20:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  24:	41018e02 	tstmi	r1, r2, lsl #28
  28:	0000070d 	andeq	r0, r0, sp, lsl #14
  2c:	00000018 	andeq	r0, r0, r8, lsl r0
  30:	00000000 	andeq	r0, r0, r0
  34:	200000b8 	strhcs	r0, [r0], -r8
  38:	00000048 	andeq	r0, r0, r8, asr #32
  3c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  40:	41018e02 	tstmi	r1, r2, lsl #28
  44:	0000070d 	andeq	r0, r0, sp, lsl #14
  48:	00000018 	andeq	r0, r0, r8, lsl r0
  4c:	00000000 	andeq	r0, r0, r0
  50:	20000100 	andcs	r0, r0, r0, lsl #2
  54:	00000028 	andeq	r0, r0, r8, lsr #32
  58:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  5c:	41018e02 	tstmi	r1, r2, lsl #28
  60:	0000070d 	andeq	r0, r0, sp, lsl #14
  64:	0000001c 	andeq	r0, r0, ip, lsl r0
  68:	00000000 	andeq	r0, r0, r0
  6c:	20000128 	andcs	r0, r0, r8, lsr #2
  70:	00000048 	andeq	r0, r0, r8, asr #32
  74:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  78:	41018e02 	tstmi	r1, r2, lsl #28
  7c:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  80:	00000007 	andeq	r0, r0, r7
  84:	00000018 	andeq	r0, r0, r8, lsl r0
  88:	00000000 	andeq	r0, r0, r0
  8c:	20000170 	andcs	r0, r0, r0, ror r1
  90:	00000020 	andeq	r0, r0, r0, lsr #32
  94:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  98:	41018e02 	tstmi	r1, r2, lsl #28
  9c:	0000070d 	andeq	r0, r0, sp, lsl #14
  a0:	0000000c 	andeq	r0, r0, ip
  a4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  a8:	7c020001 	stcvc	0, cr0, [r2], {1}
  ac:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  b0:	00000018 	andeq	r0, r0, r8, lsl r0
  b4:	000000a0 	andeq	r0, r0, r0, lsr #1
  b8:	20000190 	mulcs	r0, r0, r1
  bc:	00000048 	andeq	r0, r0, r8, asr #32
  c0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  c4:	41018e02 	tstmi	r1, r2, lsl #28
  c8:	0000070d 	andeq	r0, r0, sp, lsl #14
  cc:	00000018 	andeq	r0, r0, r8, lsl r0
  d0:	000000a0 	andeq	r0, r0, r0, lsr #1
  d4:	200001d8 	ldrdcs	r0, [r0], -r8
  d8:	00000024 	andeq	r0, r0, r4, lsr #32
  dc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  e0:	41018e02 	tstmi	r1, r2, lsl #28
  e4:	0000070d 	andeq	r0, r0, sp, lsl #14
  e8:	00000018 	andeq	r0, r0, r8, lsl r0
  ec:	000000a0 	andeq	r0, r0, r0, lsr #1
  f0:	200001fc 	strdcs	r0, [r0], -ip
  f4:	00000020 	andeq	r0, r0, r0, lsr #32
  f8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  fc:	41018e02 	tstmi	r1, r2, lsl #28
 100:	0000070d 	andeq	r0, r0, sp, lsl #14
 104:	00000018 	andeq	r0, r0, r8, lsl r0
 108:	000000a0 	andeq	r0, r0, r0, lsr #1
 10c:	2000021c 	andcs	r0, r0, ip, lsl r2
 110:	00000018 	andeq	r0, r0, r8, lsl r0
 114:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 118:	41018e02 	tstmi	r1, r2, lsl #28
 11c:	0000070d 	andeq	r0, r0, sp, lsl #14
 120:	00000018 	andeq	r0, r0, r8, lsl r0
 124:	000000a0 	andeq	r0, r0, r0, lsr #1
 128:	20000234 	andcs	r0, r0, r4, lsr r2
 12c:	00000030 	andeq	r0, r0, r0, lsr r0
 130:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 134:	41018e02 	tstmi	r1, r2, lsl #28
 138:	0000070d 	andeq	r0, r0, sp, lsl #14
 13c:	00000018 	andeq	r0, r0, r8, lsl r0
 140:	000000a0 	andeq	r0, r0, r0, lsr #1
 144:	20000264 	andcs	r0, r0, r4, ror #4
 148:	00000020 	andeq	r0, r0, r0, lsr #32
 14c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 150:	41018e02 	tstmi	r1, r2, lsl #28
 154:	0000070d 	andeq	r0, r0, sp, lsl #14
 158:	00000018 	andeq	r0, r0, r8, lsl r0
 15c:	000000a0 	andeq	r0, r0, r0, lsr #1
 160:	20000284 	andcs	r0, r0, r4, lsl #5
 164:	00000044 	andeq	r0, r0, r4, asr #32
 168:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 16c:	41018e02 	tstmi	r1, r2, lsl #28
 170:	0000070d 	andeq	r0, r0, sp, lsl #14
 174:	00000018 	andeq	r0, r0, r8, lsl r0
 178:	000000a0 	andeq	r0, r0, r0, lsr #1
 17c:	200002c8 	andcs	r0, r0, r8, asr #5
 180:	00000030 	andeq	r0, r0, r0, lsr r0
 184:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 188:	41018e02 	tstmi	r1, r2, lsl #28
 18c:	0000070d 	andeq	r0, r0, sp, lsl #14
 190:	0000001c 	andeq	r0, r0, ip, lsl r0
 194:	000000a0 	andeq	r0, r0, r0, lsr #1
 198:	200002f8 	strdcs	r0, [r0], -r8
 19c:	0000004c 	andeq	r0, r0, ip, asr #32
 1a0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 1a4:	41018e02 	tstmi	r1, r2, lsl #28
 1a8:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 1ac:	00000007 	andeq	r0, r0, r7
 1b0:	0000001c 	andeq	r0, r0, ip, lsl r0
 1b4:	000000a0 	andeq	r0, r0, r0, lsr #1
 1b8:	20000344 	andcs	r0, r0, r4, asr #6
 1bc:	0000002c 	andeq	r0, r0, ip, lsr #32
 1c0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 1c4:	41018e02 	tstmi	r1, r2, lsl #28
 1c8:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 1cc:	00000007 	andeq	r0, r0, r7
 1d0:	00000024 	andeq	r0, r0, r4, lsr #32
 1d4:	000000a0 	andeq	r0, r0, r0, lsr #1
 1d8:	20000370 	andcs	r0, r0, r0, ror r3
 1dc:	00000138 	andeq	r0, r0, r8, lsr r1
 1e0:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
 1e4:	86048505 	strhi	r8, [r4], -r5, lsl #10
 1e8:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 1ec:	f00e4101 			; <UNDEFINED> instruction: 0xf00e4101
 1f0:	070c4101 	streq	r4, [ip, -r1, lsl #2]
 1f4:	00000190 	muleq	r0, r0, r1
 1f8:	0000001c 	andeq	r0, r0, ip, lsl r0
 1fc:	000000a0 	andeq	r0, r0, r0, lsr #1
 200:	200004a8 	andcs	r0, r0, r8, lsr #9
 204:	00000084 	andeq	r0, r0, r4, lsl #1
 208:	41080e41 	tstmi	r8, r1, asr #28
 20c:	0487100e 	streq	r1, [r7], #14
 210:	0e41038e 	cdpeq	3, 4, cr0, cr1, cr14, {4}
 214:	070d4120 	streq	r4, [sp, -r0, lsr #2]
 218:	0000000c 	andeq	r0, r0, ip
 21c:	000000a0 	andeq	r0, r0, r0, lsr #1
 220:	2000052c 	andcs	r0, r0, ip, lsr #10
 224:	00000006 	andeq	r0, r0, r6
 228:	0000000c 	andeq	r0, r0, ip
 22c:	000000a0 	andeq	r0, r0, r0, lsr #1
 230:	20000532 	andcs	r0, r0, r2, lsr r5
 234:	00000006 	andeq	r0, r0, r6
 238:	0000000c 	andeq	r0, r0, ip
 23c:	000000a0 	andeq	r0, r0, r0, lsr #1
 240:	20000538 	andcs	r0, r0, r8, lsr r5
 244:	00000006 	andeq	r0, r0, r6
 248:	0000000c 	andeq	r0, r0, ip
 24c:	000000a0 	andeq	r0, r0, r0, lsr #1
 250:	2000053e 	andcs	r0, r0, lr, lsr r5
 254:	00000006 	andeq	r0, r0, r6
 258:	00000020 	andeq	r0, r0, r0, lsr #32
 25c:	000000a0 	andeq	r0, r0, r0, lsr #1
 260:	20000544 	andcs	r0, r0, r4, asr #10
 264:	00000050 	andeq	r0, r0, r0, asr r0
 268:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
 26c:	87038504 	strhi	r8, [r3, -r4, lsl #10]
 270:	41018e02 	tstmi	r1, r2, lsl #28
 274:	0d41300e 	stcleq	0, cr3, [r1, #-56]	; 0xffffffc8
 278:	00000007 	andeq	r0, r0, r7
 27c:	0000001c 	andeq	r0, r0, ip, lsl r0
 280:	000000a0 	andeq	r0, r0, r0, lsr #1
 284:	20000594 	mulcs	r0, r4, r5
 288:	00000038 	andeq	r0, r0, r8, lsr r0
 28c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 290:	41018e02 	tstmi	r1, r2, lsl #28
 294:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 298:	00000007 	andeq	r0, r0, r7
 29c:	0000001c 	andeq	r0, r0, ip, lsl r0
 2a0:	000000a0 	andeq	r0, r0, r0, lsr #1
 2a4:	200005cc 	andcs	r0, r0, ip, asr #11
 2a8:	00000068 	andeq	r0, r0, r8, rrx
 2ac:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 2b0:	41018e02 	tstmi	r1, r2, lsl #28
 2b4:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 2b8:	00000007 	andeq	r0, r0, r7
 2bc:	0000001c 	andeq	r0, r0, ip, lsl r0
 2c0:	000000a0 	andeq	r0, r0, r0, lsr #1
 2c4:	20000634 	andcs	r0, r0, r4, lsr r6
 2c8:	00000030 	andeq	r0, r0, r0, lsr r0
 2cc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 2d0:	41018e02 	tstmi	r1, r2, lsl #28
 2d4:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 2d8:	00000007 	andeq	r0, r0, r7
 2dc:	00000018 	andeq	r0, r0, r8, lsl r0
 2e0:	000000a0 	andeq	r0, r0, r0, lsr #1
 2e4:	20000664 	andcs	r0, r0, r4, ror #12
 2e8:	0000002c 	andeq	r0, r0, ip, lsr #32
 2ec:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 2f0:	41018e02 	tstmi	r1, r2, lsl #28
 2f4:	0000070d 	andeq	r0, r0, sp, lsl #14
 2f8:	0000001c 	andeq	r0, r0, ip, lsl r0
 2fc:	000000a0 	andeq	r0, r0, r0, lsr #1
 300:	20000690 	mulcs	r0, r0, r6
 304:	0000003c 	andeq	r0, r0, ip, lsr r0
 308:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 30c:	41018e02 	tstmi	r1, r2, lsl #28
 310:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 314:	00000007 	andeq	r0, r0, r7
 318:	0000001c 	andeq	r0, r0, ip, lsl r0
 31c:	000000a0 	andeq	r0, r0, r0, lsr #1
 320:	200006cc 	andcs	r0, r0, ip, asr #13
 324:	0000002a 	andeq	r0, r0, sl, lsr #32
 328:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 32c:	41018e02 	tstmi	r1, r2, lsl #28
 330:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 334:	00000007 	andeq	r0, r0, r7
 338:	0000001c 	andeq	r0, r0, ip, lsl r0
 33c:	000000a0 	andeq	r0, r0, r0, lsr #1
 340:	200006f6 	strdcs	r0, [r0], -r6
 344:	0000005e 	andeq	r0, r0, lr, asr r0
 348:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 34c:	41018e02 	tstmi	r1, r2, lsl #28
 350:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 354:	00000007 	andeq	r0, r0, r7
 358:	0000001c 	andeq	r0, r0, ip, lsl r0
 35c:	000000a0 	andeq	r0, r0, r0, lsr #1
 360:	20000754 	andcs	r0, r0, r4, asr r7
 364:	0000003c 	andeq	r0, r0, ip, lsr r0
 368:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 36c:	41018e02 	tstmi	r1, r2, lsl #28
 370:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 374:	00000007 	andeq	r0, r0, r7
 378:	0000001c 	andeq	r0, r0, ip, lsl r0
 37c:	000000a0 	andeq	r0, r0, r0, lsr #1
 380:	20000790 	mulcs	r0, r0, r7
 384:	0000003c 	andeq	r0, r0, ip, lsr r0
 388:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 38c:	41018e02 	tstmi	r1, r2, lsl #28
 390:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 394:	00000007 	andeq	r0, r0, r7
 398:	0000001c 	andeq	r0, r0, ip, lsl r0
 39c:	000000a0 	andeq	r0, r0, r0, lsr #1
 3a0:	200007cc 	andcs	r0, r0, ip, asr #15
 3a4:	00000040 	andeq	r0, r0, r0, asr #32
 3a8:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
 3ac:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 3b0:	180e4101 	stmdane	lr, {r0, r8, lr}
 3b4:	00070d41 	andeq	r0, r7, r1, asr #26
 3b8:	0000001c 	andeq	r0, r0, ip, lsl r0
 3bc:	000000a0 	andeq	r0, r0, r0, lsr #1
 3c0:	2000080c 	andcs	r0, r0, ip, lsl #16
 3c4:	00000040 	andeq	r0, r0, r0, asr #32
 3c8:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
 3cc:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 3d0:	180e4101 	stmdane	lr, {r0, r8, lr}
 3d4:	00070d41 	andeq	r0, r7, r1, asr #26
 3d8:	0000001c 	andeq	r0, r0, ip, lsl r0
 3dc:	000000a0 	andeq	r0, r0, r0, lsr #1
 3e0:	2000084c 	andcs	r0, r0, ip, asr #16
 3e4:	00000034 	andeq	r0, r0, r4, lsr r0
 3e8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 3ec:	41018e02 	tstmi	r1, r2, lsl #28
 3f0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 3f4:	00000007 	andeq	r0, r0, r7
 3f8:	0000001c 	andeq	r0, r0, ip, lsl r0
 3fc:	000000a0 	andeq	r0, r0, r0, lsr #1
 400:	20000880 	andcs	r0, r0, r0, lsl #17
 404:	0000002a 	andeq	r0, r0, sl, lsr #32
 408:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 40c:	41018e02 	tstmi	r1, r2, lsl #28
 410:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 414:	00000007 	andeq	r0, r0, r7
 418:	0000001c 	andeq	r0, r0, ip, lsl r0
 41c:	000000a0 	andeq	r0, r0, r0, lsr #1
 420:	200008aa 	andcs	r0, r0, sl, lsr #17
 424:	0000002a 	andeq	r0, r0, sl, lsr #32
 428:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 42c:	41018e02 	tstmi	r1, r2, lsl #28
 430:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 434:	00000007 	andeq	r0, r0, r7
 438:	0000001c 	andeq	r0, r0, ip, lsl r0
 43c:	000000a0 	andeq	r0, r0, r0, lsr #1
 440:	200008d4 	ldrdcs	r0, [r0], -r4
 444:	00000030 	andeq	r0, r0, r0, lsr r0
 448:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 44c:	41018e02 	tstmi	r1, r2, lsl #28
 450:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 454:	00000007 	andeq	r0, r0, r7
 458:	0000001c 	andeq	r0, r0, ip, lsl r0
 45c:	000000a0 	andeq	r0, r0, r0, lsr #1
 460:	20000904 	andcs	r0, r0, r4, lsl #18
 464:	00000038 	andeq	r0, r0, r8, lsr r0
 468:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 46c:	41018e02 	tstmi	r1, r2, lsl #28
 470:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 474:	00000007 	andeq	r0, r0, r7
 478:	0000001c 	andeq	r0, r0, ip, lsl r0
 47c:	000000a0 	andeq	r0, r0, r0, lsr #1
 480:	2000093c 	andcs	r0, r0, ip, lsr r9
 484:	00000048 	andeq	r0, r0, r8, asr #32
 488:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 48c:	41018e02 	tstmi	r1, r2, lsl #28
 490:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 494:	00000007 	andeq	r0, r0, r7
 498:	00000018 	andeq	r0, r0, r8, lsl r0
 49c:	000000a0 	andeq	r0, r0, r0, lsr #1
 4a0:	20000984 	andcs	r0, r0, r4, lsl #19
 4a4:	00000044 	andeq	r0, r0, r4, asr #32
 4a8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 4ac:	41018e02 	tstmi	r1, r2, lsl #28
 4b0:	0000070d 	andeq	r0, r0, sp, lsl #14
 4b4:	0000001c 	andeq	r0, r0, ip, lsl r0
 4b8:	000000a0 	andeq	r0, r0, r0, lsr #1
 4bc:	200009c8 	andcs	r0, r0, r8, asr #19
 4c0:	00000046 	andeq	r0, r0, r6, asr #32
 4c4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 4c8:	41018e02 	tstmi	r1, r2, lsl #28
 4cc:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 4d0:	00000007 	andeq	r0, r0, r7
 4d4:	0000001c 	andeq	r0, r0, ip, lsl r0
 4d8:	000000a0 	andeq	r0, r0, r0, lsr #1
 4dc:	20000a0e 	andcs	r0, r0, lr, lsl #20
 4e0:	00000024 	andeq	r0, r0, r4, lsr #32
 4e4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 4e8:	41018e02 	tstmi	r1, r2, lsl #28
 4ec:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 4f0:	00000007 	andeq	r0, r0, r7
 4f4:	0000000c 	andeq	r0, r0, ip
 4f8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 4fc:	7c020001 	stcvc	0, cr0, [r2], {1}
 500:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 504:	0000001c 	andeq	r0, r0, ip, lsl r0
 508:	000004f4 	strdeq	r0, [r0], -r4
 50c:	20000a34 	andcs	r0, r0, r4, lsr sl
 510:	000000ec 	andeq	r0, r0, ip, ror #1
 514:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 518:	41018e02 	tstmi	r1, r2, lsl #28
 51c:	0d41200e 	stcleq	0, cr2, [r1, #-56]	; 0xffffffc8
 520:	00000007 	andeq	r0, r0, r7
 524:	0000001c 	andeq	r0, r0, ip, lsl r0
 528:	000004f4 	strdeq	r0, [r0], -r4
 52c:	20000b20 	andcs	r0, r0, r0, lsr #22
 530:	000000a0 	andeq	r0, r0, r0, lsr #1
 534:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 538:	41018e02 	tstmi	r1, r2, lsl #28
 53c:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 540:	00000007 	andeq	r0, r0, r7
 544:	0000001c 	andeq	r0, r0, ip, lsl r0
 548:	000004f4 	strdeq	r0, [r0], -r4
 54c:	20000bc0 	andcs	r0, r0, r0, asr #23
 550:	00000108 	andeq	r0, r0, r8, lsl #2
 554:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
 558:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 55c:	380e4101 	stmdacc	lr, {r0, r8, lr}
 560:	00070d41 	andeq	r0, r7, r1, asr #26
 564:	0000001c 	andeq	r0, r0, ip, lsl r0
 568:	000004f4 	strdeq	r0, [r0], -r4
 56c:	20000cc8 	andcs	r0, r0, r8, asr #25
 570:	00000032 	andeq	r0, r0, r2, lsr r0
 574:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 578:	41018e02 	tstmi	r1, r2, lsl #28
 57c:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 580:	00000007 	andeq	r0, r0, r7
 584:	0000001c 	andeq	r0, r0, ip, lsl r0
 588:	000004f4 	strdeq	r0, [r0], -r4
 58c:	20000cfa 	strdcs	r0, [r0], -sl
 590:	00000082 	andeq	r0, r0, r2, lsl #1
 594:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 598:	41018e02 	tstmi	r1, r2, lsl #28
 59c:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 5a0:	00000007 	andeq	r0, r0, r7
 5a4:	00000020 	andeq	r0, r0, r0, lsr #32
 5a8:	000004f4 	strdeq	r0, [r0], -r4
 5ac:	20000d7c 	andcs	r0, r0, ip, ror sp
 5b0:	00000114 	andeq	r0, r0, r4, lsl r1
 5b4:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
 5b8:	87038504 	strhi	r8, [r3, -r4, lsl #10]
 5bc:	41018e02 	tstmi	r1, r2, lsl #28
 5c0:	0c41200e 	mcrreq	0, 0, r2, r1, cr14
 5c4:	00001807 	andeq	r1, r0, r7, lsl #16
 5c8:	00000018 	andeq	r0, r0, r8, lsl r0
 5cc:	000004f4 	strdeq	r0, [r0], -r4
 5d0:	20000e90 	mulcs	r0, r0, lr
 5d4:	00000018 	andeq	r0, r0, r8, lsl r0
 5d8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 5dc:	41018e02 	tstmi	r1, r2, lsl #28
 5e0:	0000070d 	andeq	r0, r0, sp, lsl #14
 5e4:	00000020 	andeq	r0, r0, r0, lsr #32
 5e8:	000004f4 	strdeq	r0, [r0], -r4
 5ec:	20000ea8 	andcs	r0, r0, r8, lsr #29
 5f0:	0000025c 	andeq	r0, r0, ip, asr r2
 5f4:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
 5f8:	87038504 	strhi	r8, [r3, -r4, lsl #10]
 5fc:	41018e02 	tstmi	r1, r2, lsl #28
 600:	0c41380e 	mcrreq	8, 0, r3, r1, cr14
 604:	00003007 	andeq	r3, r0, r7
 608:	00000020 	andeq	r0, r0, r0, lsr #32
 60c:	000004f4 	strdeq	r0, [r0], -r4
 610:	20001104 	andcs	r1, r0, r4, lsl #2
 614:	000000b4 	strheq	r0, [r0], -r4
 618:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
 61c:	87038504 	strhi	r8, [r3, -r4, lsl #10]
 620:	41018e02 	tstmi	r1, r2, lsl #28
 624:	0c41380e 	mcrreq	8, 0, r3, r1, cr14
 628:	00003007 	andeq	r3, r0, r7
 62c:	00000020 	andeq	r0, r0, r0, lsr #32
 630:	000004f4 	strdeq	r0, [r0], -r4
 634:	200011b8 			; <UNDEFINED> instruction: 0x200011b8
 638:	00000026 	andeq	r0, r0, r6, lsr #32
 63c:	41100e41 	tstmi	r0, r1, asr #28
 640:	0884200e 	stmeq	r4, {r1, r2, r3, sp}
 644:	06870785 	streq	r0, [r7], r5, lsl #15
 648:	0d41058e 	cfstr64eq	mvdx0, [r1, #-568]	; 0xfffffdc8
 64c:	00000007 	andeq	r0, r0, r7
 650:	00000020 	andeq	r0, r0, r0, lsr #32
 654:	000004f4 	strdeq	r0, [r0], -r4
 658:	200011de 	ldrdcs	r1, [r0], -lr
 65c:	00000026 	andeq	r0, r0, r6, lsr #32
 660:	41100e41 	tstmi	r0, r1, asr #28
 664:	0884200e 	stmeq	r4, {r1, r2, r3, sp}
 668:	06870785 	streq	r0, [r7], r5, lsl #15
 66c:	0d41058e 	cfstr64eq	mvdx0, [r1, #-568]	; 0xfffffdc8
 670:	00000007 	andeq	r0, r0, r7
 674:	0000001c 	andeq	r0, r0, ip, lsl r0
 678:	000004f4 	strdeq	r0, [r0], -r4
 67c:	20001204 	andcs	r1, r0, r4, lsl #4
 680:	00000040 	andeq	r0, r0, r0, asr #32
 684:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 688:	41018e02 	tstmi	r1, r2, lsl #28
 68c:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 690:	00000007 	andeq	r0, r0, r7
 694:	00000020 	andeq	r0, r0, r0, lsr #32
 698:	000004f4 	strdeq	r0, [r0], -r4
 69c:	20001244 	andcs	r1, r0, r4, asr #4
 6a0:	000000e0 	andeq	r0, r0, r0, ror #1
 6a4:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
 6a8:	87038504 	strhi	r8, [r3, -r4, lsl #10]
 6ac:	41018e02 	tstmi	r1, r2, lsl #28
 6b0:	0c41380e 	mcrreq	8, 0, r3, r1, cr14
 6b4:	00003007 	andeq	r3, r0, r7
 6b8:	00000020 	andeq	r0, r0, r0, lsr #32
 6bc:	000004f4 	strdeq	r0, [r0], -r4
 6c0:	20001324 	andcs	r1, r0, r4, lsr #6
 6c4:	0000012c 	andeq	r0, r0, ip, lsr #2
 6c8:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
 6cc:	87038504 	strhi	r8, [r3, -r4, lsl #10]
 6d0:	41018e02 	tstmi	r1, r2, lsl #28
 6d4:	0c41380e 	mcrreq	8, 0, r3, r1, cr14
 6d8:	00003007 	andeq	r3, r0, r7
 6dc:	0000001c 	andeq	r0, r0, ip, lsl r0
 6e0:	000004f4 	strdeq	r0, [r0], -r4
 6e4:	20001450 	andcs	r1, r0, r0, asr r4
 6e8:	00000034 	andeq	r0, r0, r4, lsr r0
 6ec:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 6f0:	41018e02 	tstmi	r1, r2, lsl #28
 6f4:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 6f8:	00000007 	andeq	r0, r0, r7
 6fc:	00000020 	andeq	r0, r0, r0, lsr #32
 700:	000004f4 	strdeq	r0, [r0], -r4
 704:	20001484 	andcs	r1, r0, r4, lsl #9
 708:	00000098 	muleq	r0, r8, r0
 70c:	41100e41 	tstmi	r0, r1, asr #28
 710:	0884200e 	stmeq	r4, {r1, r2, r3, sp}
 714:	06870785 	streq	r0, [r7], r5, lsl #15
 718:	0e41058e 	cdpeq	5, 4, cr0, cr1, cr14, {4}
 71c:	070d4130 	smladxeq	sp, r0, r1, r4
 720:	0000001c 	andeq	r0, r0, ip, lsl r0
 724:	000004f4 	strdeq	r0, [r0], -r4
 728:	2000151c 	andcs	r1, r0, ip, lsl r5
 72c:	00000080 	andeq	r0, r0, r0, lsl #1
 730:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 734:	41018e02 	tstmi	r1, r2, lsl #28
 738:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 73c:	00000007 	andeq	r0, r0, r7
 740:	0000001c 	andeq	r0, r0, ip, lsl r0
 744:	000004f4 	strdeq	r0, [r0], -r4
 748:	2000159c 	mulcs	r0, ip, r5
 74c:	000000fe 	strdeq	r0, [r0], -lr
 750:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 754:	41018e02 	tstmi	r1, r2, lsl #28
 758:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 75c:	00000007 	andeq	r0, r0, r7
 760:	0000001c 	andeq	r0, r0, ip, lsl r0
 764:	000004f4 	strdeq	r0, [r0], -r4
 768:	2000169a 	mulcs	r0, sl, r6
 76c:	00000026 	andeq	r0, r0, r6, lsr #32
 770:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 774:	41018e02 	tstmi	r1, r2, lsl #28
 778:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 77c:	00000007 	andeq	r0, r0, r7
 780:	0000000c 	andeq	r0, r0, ip
 784:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 788:	7c020001 	stcvc	0, cr0, [r2], {1}
 78c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 790:	0000001c 	andeq	r0, r0, ip, lsl r0
 794:	00000780 	andeq	r0, r0, r0, lsl #15
 798:	200016c0 	andcs	r1, r0, r0, asr #13
 79c:	0000003c 	andeq	r0, r0, ip, lsr r0
 7a0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 7a4:	41018e02 	tstmi	r1, r2, lsl #28
 7a8:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 7ac:	00000007 	andeq	r0, r0, r7
 7b0:	0000001c 	andeq	r0, r0, ip, lsl r0
 7b4:	00000780 	andeq	r0, r0, r0, lsl #15
 7b8:	200016fc 	strdcs	r1, [r0], -ip
 7bc:	00000068 	andeq	r0, r0, r8, rrx
 7c0:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
 7c4:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 7c8:	280e4101 	stmdacs	lr, {r0, r8, lr}
 7cc:	00070d41 	andeq	r0, r7, r1, asr #26
 7d0:	0000001c 	andeq	r0, r0, ip, lsl r0
 7d4:	00000780 	andeq	r0, r0, r0, lsl #15
 7d8:	20001764 	andcs	r1, r0, r4, ror #14
 7dc:	00000060 	andeq	r0, r0, r0, rrx
 7e0:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
 7e4:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 7e8:	180e4101 	stmdane	lr, {r0, r8, lr}
 7ec:	00070d41 	andeq	r0, r7, r1, asr #26
 7f0:	0000001c 	andeq	r0, r0, ip, lsl r0
 7f4:	00000780 	andeq	r0, r0, r0, lsl #15
 7f8:	200017c4 	andcs	r1, r0, r4, asr #15
 7fc:	00000068 	andeq	r0, r0, r8, rrx
 800:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 804:	41018e02 	tstmi	r1, r2, lsl #28
 808:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 80c:	00000007 	andeq	r0, r0, r7
 810:	0000001c 	andeq	r0, r0, ip, lsl r0
 814:	00000780 	andeq	r0, r0, r0, lsl #15
 818:	2000182c 	andcs	r1, r0, ip, lsr #16
 81c:	00000058 	andeq	r0, r0, r8, asr r0
 820:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 824:	41018e02 	tstmi	r1, r2, lsl #28
 828:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 82c:	00000007 	andeq	r0, r0, r7
 830:	0000000c 	andeq	r0, r0, ip
 834:	00000780 	andeq	r0, r0, r0, lsl #15
 838:	20000000 	andcs	r0, r0, r0
 83c:	00000012 	andeq	r0, r0, r2, lsl r0
 840:	00000020 	andeq	r0, r0, r0, lsr #32
 844:	00000780 	andeq	r0, r0, r0, lsl #15
 848:	20001884 	andcs	r1, r0, r4, lsl #17
 84c:	00000204 	andeq	r0, r0, r4, lsl #4
 850:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
 854:	86048505 	strhi	r8, [r4], -r5, lsl #10
 858:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 85c:	500e4101 	andpl	r4, lr, r1, lsl #2
 860:	48070c41 	stmdami	r7, {r0, r6, sl, fp}
 864:	00000018 	andeq	r0, r0, r8, lsl r0
 868:	00000780 	andeq	r0, r0, r0, lsl #15
 86c:	20001a88 	andcs	r1, r0, r8, lsl #21
 870:	00000044 	andeq	r0, r0, r4, asr #32
 874:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 878:	41018e02 	tstmi	r1, r2, lsl #28
 87c:	0000070d 	andeq	r0, r0, sp, lsl #14
 880:	00000020 	andeq	r0, r0, r0, lsr #32
 884:	00000780 	andeq	r0, r0, r0, lsl #15
 888:	20001acc 	andcs	r1, r0, ip, asr #21
 88c:	00000080 	andeq	r0, r0, r0, lsl #1
 890:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
 894:	87038504 	strhi	r8, [r3, -r4, lsl #10]
 898:	41018e02 	tstmi	r1, r2, lsl #28
 89c:	0d41480e 	stcleq	8, cr4, [r1, #-56]	; 0xffffffc8
 8a0:	00000007 	andeq	r0, r0, r7
 8a4:	0000001c 	andeq	r0, r0, ip, lsl r0
 8a8:	00000780 	andeq	r0, r0, r0, lsl #15
 8ac:	20001b4c 	andcs	r1, r0, ip, asr #22
 8b0:	00000036 	andeq	r0, r0, r6, lsr r0
 8b4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 8b8:	41018e02 	tstmi	r1, r2, lsl #28
 8bc:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 8c0:	00000007 	andeq	r0, r0, r7
 8c4:	0000000c 	andeq	r0, r0, ip
 8c8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 8cc:	7c010001 	stcvc	0, cr0, [r1], {1}
 8d0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 8d4:	0000000c 	andeq	r0, r0, ip
 8d8:	000008c4 	andeq	r0, r0, r4, asr #17
 8dc:	20001b85 	andcs	r1, r0, r5, lsl #23
 8e0:	0000010a 	andeq	r0, r0, sl, lsl #2
 8e4:	0000000c 	andeq	r0, r0, ip
 8e8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 8ec:	7c010001 	stcvc	0, cr0, [r1], {1}
 8f0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 8f4:	0000000c 	andeq	r0, r0, ip
 8f8:	000008e4 	andeq	r0, r0, r4, ror #17
 8fc:	20001c99 	mulcs	r0, r9, ip
 900:	000001cc 	andeq	r0, r0, ip, asr #3
 904:	0000000c 	andeq	r0, r0, ip
 908:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 90c:	7c020001 	stcvc	0, cr0, [r2], {1}
 910:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 914:	00000014 	andeq	r0, r0, r4, lsl r0
 918:	00000904 	andeq	r0, r0, r4, lsl #18
 91c:	20001e70 	andcs	r1, r0, r0, ror lr
 920:	00000012 	andeq	r0, r0, r2, lsl r0
 924:	84080e42 	strhi	r0, [r8], #-3650	; 0xfffff1be
 928:	00018e02 	andeq	r8, r1, r2, lsl #28
 92c:	0000000c 	andeq	r0, r0, ip
 930:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 934:	7c020001 	stcvc	0, cr0, [r2], {1}
 938:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 93c:	0000000c 	andeq	r0, r0, ip
 940:	0000092c 	andeq	r0, r0, ip, lsr #18
 944:	20001e84 	andcs	r1, r0, r4, lsl #29
 948:	00000014 	andeq	r0, r0, r4, lsl r0

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	200016c0 	andcs	r1, r0, r0, asr #13
   4:	20001b82 	andcs	r1, r0, r2, lsl #23
   8:	20000000 	andcs	r0, r0, r0
   c:	20000012 	andcs	r0, r0, r2, lsl r0
	...
