
Debug/MineSweeperGD:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:
#include "timer6.h"
#include "ASCIIDisp.h"
__attribute__((naked)) __attribute__((section (".start_section")) )
void startup ( void )
{
__asm__ volatile(" LDR R0,=0x2001C000\n");    
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <startup+0xc>)
__asm__ volatile(" MOV SP,R0\n");
20000002:	4685      	mov	sp, r0
//__asm__ volatile(" BL _crt_init\n");            
__asm__ volatile(" BL main\n");                    
20000004:	f000 fb85 	bl	20000712 <main>
//__asm__ volatile(" BL _crt_deinit\n");            
__asm__ volatile(" B .\n");               
20000008:	e7fe      	b.n	20000008 <startup+0x8>
2000000a:	c0000000 	andgt	r0, r0, r0
2000000e:	46c02001 	strbmi	r2, [r0], r1
20000012:	46c0      	nop			; (mov r8, r8)

20000014 <start_rand>:


void systick_irq_handler( void );

void start_rand()
{
20000014:	b580      	push	{r7, lr}
20000016:	af00      	add	r7, sp, #0
	if(counting) return; // kan inte göra båda samtidigt
20000018:	4b0b      	ldr	r3, [pc, #44]	; (20000048 <start_rand+0x34>)
2000001a:	681b      	ldr	r3, [r3, #0]
2000001c:	2b00      	cmp	r3, #0
2000001e:	d10f      	bne.n	20000040 <start_rand+0x2c>
	used_for_rand = 1;
20000020:	4b0a      	ldr	r3, [pc, #40]	; (2000004c <start_rand+0x38>)
20000022:	2201      	movs	r2, #1
20000024:	601a      	str	r2, [r3, #0]
	*STK_CTRL = 0;
20000026:	4b0a      	ldr	r3, [pc, #40]	; (20000050 <start_rand+0x3c>)
20000028:	2200      	movs	r2, #0
2000002a:	601a      	str	r2, [r3, #0]
	*STK_LOAD = LOAD_MAX;
2000002c:	4b09      	ldr	r3, [pc, #36]	; (20000054 <start_rand+0x40>)
2000002e:	22ff      	movs	r2, #255	; 0xff
20000030:	601a      	str	r2, [r3, #0]
	*STK_VAL = 0;
20000032:	4b09      	ldr	r3, [pc, #36]	; (20000058 <start_rand+0x44>)
20000034:	2200      	movs	r2, #0
20000036:	601a      	str	r2, [r3, #0]
	*STK_CTRL = 7;
20000038:	4b05      	ldr	r3, [pc, #20]	; (20000050 <start_rand+0x3c>)
2000003a:	2207      	movs	r2, #7
2000003c:	601a      	str	r2, [r3, #0]
2000003e:	e000      	b.n	20000042 <start_rand+0x2e>
	if(counting) return; // kan inte göra båda samtidigt
20000040:	46c0      	nop			; (mov r8, r8)
}
20000042:	46bd      	mov	sp, r7
20000044:	bd80      	pop	{r7, pc}
20000046:	46c0      	nop			; (mov r8, r8)
20000048:	20001b50 	andcs	r1, r0, r0, asr fp
2000004c:	20001b54 	andcs	r1, r0, r4, asr fp
20000050:	e000e010 	and	lr, r0, r0, lsl r0
20000054:	e000e014 	and	lr, r0, r4, lsl r0
20000058:	e000e018 	and	lr, r0, r8, lsl r0

2000005c <get_rand_val>:
int get_rand_val()
{
2000005c:	b580      	push	{r7, lr}
2000005e:	af00      	add	r7, sp, #0
	if(used_for_rand)
20000060:	4b05      	ldr	r3, [pc, #20]	; (20000078 <get_rand_val+0x1c>)
20000062:	681b      	ldr	r3, [r3, #0]
20000064:	2b00      	cmp	r3, #0
20000066:	d002      	beq.n	2000006e <get_rand_val+0x12>
		return *STK_VAL;
20000068:	4b04      	ldr	r3, [pc, #16]	; (2000007c <get_rand_val+0x20>)
2000006a:	681b      	ldr	r3, [r3, #0]
2000006c:	e000      	b.n	20000070 <get_rand_val+0x14>
	else return 0;
2000006e:	2300      	movs	r3, #0
}
20000070:	0018      	movs	r0, r3
20000072:	46bd      	mov	sp, r7
20000074:	bd80      	pop	{r7, pc}
20000076:	46c0      	nop			; (mov r8, r8)
20000078:	20001b54 	andcs	r1, r0, r4, asr fp
2000007c:	e000e018 	and	lr, r0, r8, lsl r0

20000080 <end_rand>:
void end_rand()
{
20000080:	b580      	push	{r7, lr}
20000082:	af00      	add	r7, sp, #0
	*STK_CTRL = 0;
20000084:	4b04      	ldr	r3, [pc, #16]	; (20000098 <end_rand+0x18>)
20000086:	2200      	movs	r2, #0
20000088:	601a      	str	r2, [r3, #0]
	used_for_rand = 0;
2000008a:	4b04      	ldr	r3, [pc, #16]	; (2000009c <end_rand+0x1c>)
2000008c:	2200      	movs	r2, #0
2000008e:	601a      	str	r2, [r3, #0]
}
20000090:	46c0      	nop			; (mov r8, r8)
20000092:	46bd      	mov	sp, r7
20000094:	bd80      	pop	{r7, pc}
20000096:	46c0      	nop			; (mov r8, r8)
20000098:	e000e010 	and	lr, r0, r0, lsl r0
2000009c:	20001b54 	andcs	r1, r0, r4, asr fp

200000a0 <sysTick_init>:

void sysTick_init()
{
200000a0:	b580      	push	{r7, lr}
200000a2:	af00      	add	r7, sp, #0
	//*SCB_VTOR = REALLOC;
	*((void (**)(void) ) 0x2001C03C) = &systick_irq_handler;
200000a4:	4b02      	ldr	r3, [pc, #8]	; (200000b0 <sysTick_init+0x10>)
200000a6:	4a03      	ldr	r2, [pc, #12]	; (200000b4 <sysTick_init+0x14>)
200000a8:	601a      	str	r2, [r3, #0]
}
200000aa:	46c0      	nop			; (mov r8, r8)
200000ac:	46bd      	mov	sp, r7
200000ae:	bd80      	pop	{r7, pc}
200000b0:	2001c03c 	andcs	ip, r1, ip, lsr r0
200000b4:	200000e9 	andcs	r0, r0, r9, ror #1

200000b8 <delay_1mikro>:

void delay_1mikro( void )
{
200000b8:	b580      	push	{r7, lr}
200000ba:	af00      	add	r7, sp, #0
	*STK_CTRL = 0;
200000bc:	4b07      	ldr	r3, [pc, #28]	; (200000dc <delay_1mikro+0x24>)
200000be:	2200      	movs	r2, #0
200000c0:	601a      	str	r2, [r3, #0]
	*STK_LOAD = (168 - 1);
200000c2:	4b07      	ldr	r3, [pc, #28]	; (200000e0 <delay_1mikro+0x28>)
200000c4:	22a7      	movs	r2, #167	; 0xa7
200000c6:	601a      	str	r2, [r3, #0]
	*STK_VAL = 0;
200000c8:	4b06      	ldr	r3, [pc, #24]	; (200000e4 <delay_1mikro+0x2c>)
200000ca:	2200      	movs	r2, #0
200000cc:	601a      	str	r2, [r3, #0]
	*STK_CTRL = 7;
200000ce:	4b03      	ldr	r3, [pc, #12]	; (200000dc <delay_1mikro+0x24>)
200000d0:	2207      	movs	r2, #7
200000d2:	601a      	str	r2, [r3, #0]
}
200000d4:	46c0      	nop			; (mov r8, r8)
200000d6:	46bd      	mov	sp, r7
200000d8:	bd80      	pop	{r7, pc}
200000da:	46c0      	nop			; (mov r8, r8)
200000dc:	e000e010 	and	lr, r0, r0, lsl r0
200000e0:	e000e014 	and	lr, r0, r4, lsl r0
200000e4:	e000e018 	and	lr, r0, r8, lsl r0

200000e8 <systick_irq_handler>:

void systick_irq_handler( void )
{
200000e8:	b580      	push	{r7, lr}
200000ea:	af00      	add	r7, sp, #0
	if(used_for_rand) systick_irq_handler_rand();
200000ec:	4b05      	ldr	r3, [pc, #20]	; (20000104 <systick_irq_handler+0x1c>)
200000ee:	681b      	ldr	r3, [r3, #0]
200000f0:	2b00      	cmp	r3, #0
200000f2:	d002      	beq.n	200000fa <systick_irq_handler+0x12>
200000f4:	f000 f82a 	bl	2000014c <systick_irq_handler_rand>
	else systick_irq_handler_counting();
}
200000f8:	e001      	b.n	200000fe <systick_irq_handler+0x16>
	else systick_irq_handler_counting();
200000fa:	f000 f805 	bl	20000108 <systick_irq_handler_counting>
}
200000fe:	46c0      	nop			; (mov r8, r8)
20000100:	46bd      	mov	sp, r7
20000102:	bd80      	pop	{r7, pc}
20000104:	20001b54 	andcs	r1, r0, r4, asr fp

20000108 <systick_irq_handler_counting>:

void systick_irq_handler_counting( void )
{
20000108:	b580      	push	{r7, lr}
2000010a:	af00      	add	r7, sp, #0
	*STK_CTRL = 0;
2000010c:	4b0b      	ldr	r3, [pc, #44]	; (2000013c <systick_irq_handler_counting+0x34>)
2000010e:	2200      	movs	r2, #0
20000110:	601a      	str	r2, [r3, #0]
	delay_count -- ;
20000112:	4b0b      	ldr	r3, [pc, #44]	; (20000140 <systick_irq_handler_counting+0x38>)
20000114:	681b      	ldr	r3, [r3, #0]
20000116:	1e5a      	subs	r2, r3, #1
20000118:	4b09      	ldr	r3, [pc, #36]	; (20000140 <systick_irq_handler_counting+0x38>)
2000011a:	601a      	str	r2, [r3, #0]
	if( delay_count > 0 ) delay_1mikro();
2000011c:	4b08      	ldr	r3, [pc, #32]	; (20000140 <systick_irq_handler_counting+0x38>)
2000011e:	681b      	ldr	r3, [r3, #0]
20000120:	2b00      	cmp	r3, #0
20000122:	dd02      	ble.n	2000012a <systick_irq_handler_counting+0x22>
20000124:	f7ff ffc8 	bl	200000b8 <delay_1mikro>
	else 
		{
			systick_flag = 1;
			counting = 0;
		}
}
20000128:	e005      	b.n	20000136 <systick_irq_handler_counting+0x2e>
			systick_flag = 1;
2000012a:	4b06      	ldr	r3, [pc, #24]	; (20000144 <systick_irq_handler_counting+0x3c>)
2000012c:	2201      	movs	r2, #1
2000012e:	601a      	str	r2, [r3, #0]
			counting = 0;
20000130:	4b05      	ldr	r3, [pc, #20]	; (20000148 <systick_irq_handler_counting+0x40>)
20000132:	2200      	movs	r2, #0
20000134:	601a      	str	r2, [r3, #0]
}
20000136:	46c0      	nop			; (mov r8, r8)
20000138:	46bd      	mov	sp, r7
2000013a:	bd80      	pop	{r7, pc}
2000013c:	e000e010 	and	lr, r0, r0, lsl r0
20000140:	20001b4c 	andcs	r1, r0, ip, asr #22
20000144:	20001b48 	andcs	r1, r0, r8, asr #22
20000148:	20001b50 	andcs	r1, r0, r0, asr fp

2000014c <systick_irq_handler_rand>:
void systick_irq_handler_rand( void )
{
2000014c:	b580      	push	{r7, lr}
2000014e:	af00      	add	r7, sp, #0
	*STK_CTRL = 0;
20000150:	4b07      	ldr	r3, [pc, #28]	; (20000170 <systick_irq_handler_rand+0x24>)
20000152:	2200      	movs	r2, #0
20000154:	601a      	str	r2, [r3, #0]
	*STK_LOAD = LOAD_MAX;
20000156:	4b07      	ldr	r3, [pc, #28]	; (20000174 <systick_irq_handler_rand+0x28>)
20000158:	22ff      	movs	r2, #255	; 0xff
2000015a:	601a      	str	r2, [r3, #0]
	*STK_VAL = 0;
2000015c:	4b06      	ldr	r3, [pc, #24]	; (20000178 <systick_irq_handler_rand+0x2c>)
2000015e:	2200      	movs	r2, #0
20000160:	601a      	str	r2, [r3, #0]
	*STK_CTRL = 7;
20000162:	4b03      	ldr	r3, [pc, #12]	; (20000170 <systick_irq_handler_rand+0x24>)
20000164:	2207      	movs	r2, #7
20000166:	601a      	str	r2, [r3, #0]
}
20000168:	46c0      	nop			; (mov r8, r8)
2000016a:	46bd      	mov	sp, r7
2000016c:	bd80      	pop	{r7, pc}
2000016e:	46c0      	nop			; (mov r8, r8)
20000170:	e000e010 	and	lr, r0, r0, lsl r0
20000174:	e000e014 	and	lr, r0, r4, lsl r0
20000178:	e000e018 	and	lr, r0, r8, lsl r0

2000017c <delay>:
void delay( unsigned int count )
{
2000017c:	b580      	push	{r7, lr}
2000017e:	b082      	sub	sp, #8
20000180:	af00      	add	r7, sp, #0
20000182:	6078      	str	r0, [r7, #4]
	if(used_for_rand) return; // kan inte göra båda samtidigt
20000184:	4b0c      	ldr	r3, [pc, #48]	; (200001b8 <delay+0x3c>)
20000186:	681b      	ldr	r3, [r3, #0]
20000188:	2b00      	cmp	r3, #0
2000018a:	d10e      	bne.n	200001aa <delay+0x2e>
	counting = 1;
2000018c:	4b0b      	ldr	r3, [pc, #44]	; (200001bc <delay+0x40>)
2000018e:	2201      	movs	r2, #1
20000190:	601a      	str	r2, [r3, #0]
	if( count == 0 ) return;
20000192:	687b      	ldr	r3, [r7, #4]
20000194:	2b00      	cmp	r3, #0
20000196:	d00a      	beq.n	200001ae <delay+0x32>
	delay_count = count;
20000198:	687a      	ldr	r2, [r7, #4]
2000019a:	4b09      	ldr	r3, [pc, #36]	; (200001c0 <delay+0x44>)
2000019c:	601a      	str	r2, [r3, #0]
	systick_flag = 0;
2000019e:	4b09      	ldr	r3, [pc, #36]	; (200001c4 <delay+0x48>)
200001a0:	2200      	movs	r2, #0
200001a2:	601a      	str	r2, [r3, #0]
	delay_1mikro();
200001a4:	f7ff ff88 	bl	200000b8 <delay_1mikro>
200001a8:	e002      	b.n	200001b0 <delay+0x34>
	if(used_for_rand) return; // kan inte göra båda samtidigt
200001aa:	46c0      	nop			; (mov r8, r8)
200001ac:	e000      	b.n	200001b0 <delay+0x34>
	if( count == 0 ) return;
200001ae:	46c0      	nop			; (mov r8, r8)
}
200001b0:	46bd      	mov	sp, r7
200001b2:	b002      	add	sp, #8
200001b4:	bd80      	pop	{r7, pc}
200001b6:	46c0      	nop			; (mov r8, r8)
200001b8:	20001b54 	andcs	r1, r0, r4, asr fp
200001bc:	20001b50 	andcs	r1, r0, r0, asr fp
200001c0:	20001b4c 	andcs	r1, r0, ip, asr #22
200001c4:	20001b48 	andcs	r1, r0, r8, asr #22

200001c8 <timer6_init>:
volatile int seconds;
int timer_running;


void timer6_init()
{
200001c8:	b580      	push	{r7, lr}
200001ca:	af00      	add	r7, sp, #0
	ticks = 0; 
200001cc:	4b1b      	ldr	r3, [pc, #108]	; (2000023c <timer6_init+0x74>)
200001ce:	2200      	movs	r2, #0
200001d0:	601a      	str	r2, [r3, #0]
	seconds = 0;
200001d2:	4b1b      	ldr	r3, [pc, #108]	; (20000240 <timer6_init+0x78>)
200001d4:	2200      	movs	r2, #0
200001d6:	601a      	str	r2, [r3, #0]
	*TIM6_CR1 &= ~CEN; //stoppa räknare
200001d8:	4b1a      	ldr	r3, [pc, #104]	; (20000244 <timer6_init+0x7c>)
200001da:	881b      	ldrh	r3, [r3, #0]
200001dc:	b29b      	uxth	r3, r3
200001de:	4a19      	ldr	r2, [pc, #100]	; (20000244 <timer6_init+0x7c>)
200001e0:	2101      	movs	r1, #1
200001e2:	438b      	bics	r3, r1
200001e4:	b29b      	uxth	r3, r3
200001e6:	8013      	strh	r3, [r2, #0]
	//*SCB_VTOR = REALLOC;
	*TIM6_IRQVEC = timer6_interrupt;
200001e8:	4b17      	ldr	r3, [pc, #92]	; (20000248 <timer6_init+0x80>)
200001ea:	681b      	ldr	r3, [r3, #0]
200001ec:	3319      	adds	r3, #25
200001ee:	33ff      	adds	r3, #255	; 0xff
200001f0:	4a16      	ldr	r2, [pc, #88]	; (2000024c <timer6_init+0x84>)
200001f2:	601a      	str	r2, [r3, #0]
	*NVIC_TIM6_ISER |= NVIC_TIM6_IRQ_BPOS;
200001f4:	4b16      	ldr	r3, [pc, #88]	; (20000250 <timer6_init+0x88>)
200001f6:	681a      	ldr	r2, [r3, #0]
200001f8:	4b15      	ldr	r3, [pc, #84]	; (20000250 <timer6_init+0x88>)
200001fa:	2180      	movs	r1, #128	; 0x80
200001fc:	03c9      	lsls	r1, r1, #15
200001fe:	430a      	orrs	r2, r1
20000200:	601a      	str	r2, [r3, #0]
	
	//100ms tidbas
	*TIM6_PSC = 839;
20000202:	4b14      	ldr	r3, [pc, #80]	; (20000254 <timer6_init+0x8c>)
20000204:	4a14      	ldr	r2, [pc, #80]	; (20000258 <timer6_init+0x90>)
20000206:	801a      	strh	r2, [r3, #0]
    *TIM6_ARR = 9999;
20000208:	4b14      	ldr	r3, [pc, #80]	; (2000025c <timer6_init+0x94>)
2000020a:	4a15      	ldr	r2, [pc, #84]	; (20000260 <timer6_init+0x98>)
2000020c:	801a      	strh	r2, [r3, #0]
	*TIM6_DIER |= UIE;
2000020e:	4b15      	ldr	r3, [pc, #84]	; (20000264 <timer6_init+0x9c>)
20000210:	881b      	ldrh	r3, [r3, #0]
20000212:	b29b      	uxth	r3, r3
20000214:	4a13      	ldr	r2, [pc, #76]	; (20000264 <timer6_init+0x9c>)
20000216:	2101      	movs	r1, #1
20000218:	430b      	orrs	r3, r1
2000021a:	b29b      	uxth	r3, r3
2000021c:	8013      	strh	r3, [r2, #0]
	*TIM6_CR1 |= CEN; //starta räknare
2000021e:	4b09      	ldr	r3, [pc, #36]	; (20000244 <timer6_init+0x7c>)
20000220:	881b      	ldrh	r3, [r3, #0]
20000222:	b29b      	uxth	r3, r3
20000224:	4a07      	ldr	r2, [pc, #28]	; (20000244 <timer6_init+0x7c>)
20000226:	2101      	movs	r1, #1
20000228:	430b      	orrs	r3, r1
2000022a:	b29b      	uxth	r3, r3
2000022c:	8013      	strh	r3, [r2, #0]
	timer_running = 1;
2000022e:	4b0e      	ldr	r3, [pc, #56]	; (20000268 <timer6_init+0xa0>)
20000230:	2201      	movs	r2, #1
20000232:	601a      	str	r2, [r3, #0]
}
20000234:	46c0      	nop			; (mov r8, r8)
20000236:	46bd      	mov	sp, r7
20000238:	bd80      	pop	{r7, pc}
2000023a:	46c0      	nop			; (mov r8, r8)
2000023c:	20002228 	andcs	r2, r0, r8, lsr #4
20000240:	20002224 	andcs	r2, r0, r4, lsr #4
20000244:	40001000 	andmi	r1, r0, r0
20000248:	e000ed08 	and	lr, r0, r8, lsl #26
2000024c:	2000026d 	andcs	r0, r0, sp, ror #4
20000250:	e000e104 	and	lr, r0, r4, lsl #2
20000254:	40001028 	andmi	r1, r0, r8, lsr #32
20000258:	00000347 	andeq	r0, r0, r7, asr #6
2000025c:	4000102c 	andmi	r1, r0, ip, lsr #32
20000260:	0000270f 	andeq	r2, r0, pc, lsl #14
20000264:	4000100c 	andmi	r1, r0, ip
20000268:	20002230 	andcs	r2, r0, r0, lsr r2

2000026c <timer6_interrupt>:


void timer6_interrupt()
{
2000026c:	b580      	push	{r7, lr}
2000026e:	af00      	add	r7, sp, #0
	*TIM6_SR &= ~UIF;
20000270:	4b0d      	ldr	r3, [pc, #52]	; (200002a8 <timer6_interrupt+0x3c>)
20000272:	881b      	ldrh	r3, [r3, #0]
20000274:	b29b      	uxth	r3, r3
20000276:	4a0c      	ldr	r2, [pc, #48]	; (200002a8 <timer6_interrupt+0x3c>)
20000278:	2101      	movs	r1, #1
2000027a:	438b      	bics	r3, r1
2000027c:	b29b      	uxth	r3, r3
2000027e:	8013      	strh	r3, [r2, #0]
	ticks++;
20000280:	4b0a      	ldr	r3, [pc, #40]	; (200002ac <timer6_interrupt+0x40>)
20000282:	681b      	ldr	r3, [r3, #0]
20000284:	1c5a      	adds	r2, r3, #1
20000286:	4b09      	ldr	r3, [pc, #36]	; (200002ac <timer6_interrupt+0x40>)
20000288:	601a      	str	r2, [r3, #0]
	if(ticks > 9)
2000028a:	4b08      	ldr	r3, [pc, #32]	; (200002ac <timer6_interrupt+0x40>)
2000028c:	681b      	ldr	r3, [r3, #0]
2000028e:	2b09      	cmp	r3, #9
20000290:	dd07      	ble.n	200002a2 <timer6_interrupt+0x36>
	{
		ticks = 0;
20000292:	4b06      	ldr	r3, [pc, #24]	; (200002ac <timer6_interrupt+0x40>)
20000294:	2200      	movs	r2, #0
20000296:	601a      	str	r2, [r3, #0]
		seconds ++;
20000298:	4b05      	ldr	r3, [pc, #20]	; (200002b0 <timer6_interrupt+0x44>)
2000029a:	681b      	ldr	r3, [r3, #0]
2000029c:	1c5a      	adds	r2, r3, #1
2000029e:	4b04      	ldr	r3, [pc, #16]	; (200002b0 <timer6_interrupt+0x44>)
200002a0:	601a      	str	r2, [r3, #0]
	}
}
200002a2:	46c0      	nop			; (mov r8, r8)
200002a4:	46bd      	mov	sp, r7
200002a6:	bd80      	pop	{r7, pc}
200002a8:	40001010 	andmi	r1, r0, r0, lsl r0
200002ac:	20002228 	andcs	r2, r0, r8, lsr #4
200002b0:	20002224 	andcs	r2, r0, r4, lsr #4

200002b4 <toggle_timer_running>:

void toggle_timer_running()
{
200002b4:	b580      	push	{r7, lr}
200002b6:	af00      	add	r7, sp, #0
	timer_running = !timer_running;
200002b8:	4b07      	ldr	r3, [pc, #28]	; (200002d8 <toggle_timer_running+0x24>)
200002ba:	681b      	ldr	r3, [r3, #0]
200002bc:	425a      	negs	r2, r3
200002be:	4153      	adcs	r3, r2
200002c0:	b2db      	uxtb	r3, r3
200002c2:	001a      	movs	r2, r3
200002c4:	4b04      	ldr	r3, [pc, #16]	; (200002d8 <toggle_timer_running+0x24>)
200002c6:	601a      	str	r2, [r3, #0]
	set_running(timer_running);
200002c8:	4b03      	ldr	r3, [pc, #12]	; (200002d8 <toggle_timer_running+0x24>)
200002ca:	681b      	ldr	r3, [r3, #0]
200002cc:	0018      	movs	r0, r3
200002ce:	f000 f805 	bl	200002dc <set_running>
}
200002d2:	46c0      	nop			; (mov r8, r8)
200002d4:	46bd      	mov	sp, r7
200002d6:	bd80      	pop	{r7, pc}
200002d8:	20002230 	andcs	r2, r0, r0, lsr r2

200002dc <set_running>:

void set_running(int r)
{
200002dc:	b580      	push	{r7, lr}
200002de:	b082      	sub	sp, #8
200002e0:	af00      	add	r7, sp, #0
200002e2:	6078      	str	r0, [r7, #4]
	if(r)
200002e4:	687b      	ldr	r3, [r7, #4]
200002e6:	2b00      	cmp	r3, #0
200002e8:	d008      	beq.n	200002fc <set_running+0x20>
		*TIM6_CR1 |= CEN; //starta räknare
200002ea:	4b0c      	ldr	r3, [pc, #48]	; (2000031c <set_running+0x40>)
200002ec:	881b      	ldrh	r3, [r3, #0]
200002ee:	b29b      	uxth	r3, r3
200002f0:	4a0a      	ldr	r2, [pc, #40]	; (2000031c <set_running+0x40>)
200002f2:	2101      	movs	r1, #1
200002f4:	430b      	orrs	r3, r1
200002f6:	b29b      	uxth	r3, r3
200002f8:	8013      	strh	r3, [r2, #0]
200002fa:	e007      	b.n	2000030c <set_running+0x30>
	else
		*TIM6_CR1 &= ~CEN; //stoppa räknare
200002fc:	4b07      	ldr	r3, [pc, #28]	; (2000031c <set_running+0x40>)
200002fe:	881b      	ldrh	r3, [r3, #0]
20000300:	b29b      	uxth	r3, r3
20000302:	4a06      	ldr	r2, [pc, #24]	; (2000031c <set_running+0x40>)
20000304:	2101      	movs	r1, #1
20000306:	438b      	bics	r3, r1
20000308:	b29b      	uxth	r3, r3
2000030a:	8013      	strh	r3, [r2, #0]
	timer_running = r;
2000030c:	4b04      	ldr	r3, [pc, #16]	; (20000320 <set_running+0x44>)
2000030e:	687a      	ldr	r2, [r7, #4]
20000310:	601a      	str	r2, [r3, #0]
}
20000312:	46c0      	nop			; (mov r8, r8)
20000314:	46bd      	mov	sp, r7
20000316:	b002      	add	sp, #8
20000318:	bd80      	pop	{r7, pc}
2000031a:	46c0      	nop			; (mov r8, r8)
2000031c:	40001000 	andmi	r1, r0, r0
20000320:	20002230 	andcs	r2, r0, r0, lsr r2

20000324 <reset_timer>:
void reset_timer()
{
20000324:	b580      	push	{r7, lr}
20000326:	af00      	add	r7, sp, #0
	ticks = 0;
20000328:	4b04      	ldr	r3, [pc, #16]	; (2000033c <reset_timer+0x18>)
2000032a:	2200      	movs	r2, #0
2000032c:	601a      	str	r2, [r3, #0]
	seconds = 0;
2000032e:	4b04      	ldr	r3, [pc, #16]	; (20000340 <reset_timer+0x1c>)
20000330:	2200      	movs	r2, #0
20000332:	601a      	str	r2, [r3, #0]
20000334:	46c0      	nop			; (mov r8, r8)
20000336:	46bd      	mov	sp, r7
20000338:	bd80      	pop	{r7, pc}
2000033a:	46c0      	nop			; (mov r8, r8)
2000033c:	20002228 	andcs	r2, r0, r8, lsr #4
20000340:	20002224 	andcs	r2, r0, r4, lsr #4

20000344 <ascii_init>:

void ascii_write_string(char * p);


void ascii_init()
{
20000344:	b580      	push	{r7, lr}
20000346:	af00      	add	r7, sp, #0
	*portModer = 0x55555555;
20000348:	4b07      	ldr	r3, [pc, #28]	; (20000368 <ascii_init+0x24>)
2000034a:	4a08      	ldr	r2, [pc, #32]	; (2000036c <ascii_init+0x28>)
2000034c:	601a      	str	r2, [r3, #0]
	ascii_command(1); //clear display
2000034e:	2001      	movs	r0, #1
20000350:	f000 f88e 	bl	20000470 <ascii_command>
	ascii_command(0xF); //display på, markör: på, blinkande markör: på
20000354:	200f      	movs	r0, #15
20000356:	f000 f88b 	bl	20000470 <ascii_command>
	ascii_gotoxy(1,1);
2000035a:	2101      	movs	r1, #1
2000035c:	2001      	movs	r0, #1
2000035e:	f000 f807 	bl	20000370 <ascii_gotoxy>
}
20000362:	46c0      	nop			; (mov r8, r8)
20000364:	46bd      	mov	sp, r7
20000366:	bd80      	pop	{r7, pc}
20000368:	40021000 	andmi	r1, r2, r0
2000036c:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000370 <ascii_gotoxy>:
void ascii_gotoxy(int x, int y)
{
20000370:	b580      	push	{r7, lr}
20000372:	b084      	sub	sp, #16
20000374:	af00      	add	r7, sp, #0
20000376:	6078      	str	r0, [r7, #4]
20000378:	6039      	str	r1, [r7, #0]
	int address = x-1;
2000037a:	687b      	ldr	r3, [r7, #4]
2000037c:	3b01      	subs	r3, #1
2000037e:	60fb      	str	r3, [r7, #12]
	address = y == 2 ? address + 0x40 : address;
20000380:	683b      	ldr	r3, [r7, #0]
20000382:	2b02      	cmp	r3, #2
20000384:	d102      	bne.n	2000038c <ascii_gotoxy+0x1c>
20000386:	68fb      	ldr	r3, [r7, #12]
20000388:	3340      	adds	r3, #64	; 0x40
2000038a:	e000      	b.n	2000038e <ascii_gotoxy+0x1e>
2000038c:	68fb      	ldr	r3, [r7, #12]
2000038e:	60fb      	str	r3, [r7, #12]
	ascii_write_command(STATUS_FLAG | address);
20000390:	68fb      	ldr	r3, [r7, #12]
20000392:	b25b      	sxtb	r3, r3
20000394:	2280      	movs	r2, #128	; 0x80
20000396:	4252      	negs	r2, r2
20000398:	4313      	orrs	r3, r2
2000039a:	b25b      	sxtb	r3, r3
2000039c:	b2db      	uxtb	r3, r3
2000039e:	0018      	movs	r0, r3
200003a0:	f000 f8f3 	bl	2000058a <ascii_write_command>
}
200003a4:	46c0      	nop			; (mov r8, r8)
200003a6:	46bd      	mov	sp, r7
200003a8:	b004      	add	sp, #16
200003aa:	bd80      	pop	{r7, pc}

200003ac <ascii_write_string>:
void ascii_write_string(char * p)
{
200003ac:	b580      	push	{r7, lr}
200003ae:	b082      	sub	sp, #8
200003b0:	af00      	add	r7, sp, #0
200003b2:	6078      	str	r0, [r7, #4]
	while(* p!= 0)
200003b4:	e006      	b.n	200003c4 <ascii_write_string+0x18>
		ascii_write_char(*p++);
200003b6:	687b      	ldr	r3, [r7, #4]
200003b8:	1c5a      	adds	r2, r3, #1
200003ba:	607a      	str	r2, [r7, #4]
200003bc:	781b      	ldrb	r3, [r3, #0]
200003be:	0018      	movs	r0, r3
200003c0:	f000 f838 	bl	20000434 <ascii_write_char>
	while(* p!= 0)
200003c4:	687b      	ldr	r3, [r7, #4]
200003c6:	781b      	ldrb	r3, [r3, #0]
200003c8:	2b00      	cmp	r3, #0
200003ca:	d1f4      	bne.n	200003b6 <ascii_write_string+0xa>
}
200003cc:	46c0      	nop			; (mov r8, r8)
200003ce:	46c0      	nop			; (mov r8, r8)
200003d0:	46bd      	mov	sp, r7
200003d2:	b002      	add	sp, #8
200003d4:	bd80      	pop	{r7, pc}

200003d6 <ascii_write_number>:
void ascii_write_number(int num)
{
200003d6:	b580      	push	{r7, lr}
200003d8:	b084      	sub	sp, #16
200003da:	af00      	add	r7, sp, #0
200003dc:	6078      	str	r0, [r7, #4]
	if(num < 10)
200003de:	687b      	ldr	r3, [r7, #4]
200003e0:	2b09      	cmp	r3, #9
200003e2:	dc07      	bgt.n	200003f4 <ascii_write_number+0x1e>
		ascii_write_char(48 + num);
200003e4:	687b      	ldr	r3, [r7, #4]
200003e6:	b2db      	uxtb	r3, r3
200003e8:	3330      	adds	r3, #48	; 0x30
200003ea:	b2db      	uxtb	r3, r3
200003ec:	0018      	movs	r0, r3
200003ee:	f000 f821 	bl	20000434 <ascii_write_char>
		int tens = num / 10;
		int ones = num % 10;
		ascii_write_char(48 + tens);
		ascii_write_char(48 + ones);
	}
}
200003f2:	e01b      	b.n	2000042c <ascii_write_number+0x56>
		int tens = num / 10;
200003f4:	687b      	ldr	r3, [r7, #4]
200003f6:	210a      	movs	r1, #10
200003f8:	0018      	movs	r0, r3
200003fa:	f001 faa5 	bl	20001948 <__divsi3>
200003fe:	0003      	movs	r3, r0
20000400:	60fb      	str	r3, [r7, #12]
		int ones = num % 10;
20000402:	687b      	ldr	r3, [r7, #4]
20000404:	210a      	movs	r1, #10
20000406:	0018      	movs	r0, r3
20000408:	f001 fb84 	bl	20001b14 <__aeabi_idivmod>
2000040c:	000b      	movs	r3, r1
2000040e:	60bb      	str	r3, [r7, #8]
		ascii_write_char(48 + tens);
20000410:	68fb      	ldr	r3, [r7, #12]
20000412:	b2db      	uxtb	r3, r3
20000414:	3330      	adds	r3, #48	; 0x30
20000416:	b2db      	uxtb	r3, r3
20000418:	0018      	movs	r0, r3
2000041a:	f000 f80b 	bl	20000434 <ascii_write_char>
		ascii_write_char(48 + ones);
2000041e:	68bb      	ldr	r3, [r7, #8]
20000420:	b2db      	uxtb	r3, r3
20000422:	3330      	adds	r3, #48	; 0x30
20000424:	b2db      	uxtb	r3, r3
20000426:	0018      	movs	r0, r3
20000428:	f000 f804 	bl	20000434 <ascii_write_char>
}
2000042c:	46c0      	nop			; (mov r8, r8)
2000042e:	46bd      	mov	sp, r7
20000430:	b004      	add	sp, #16
20000432:	bd80      	pop	{r7, pc}

20000434 <ascii_write_char>:
void ascii_write_char(char ch)
{
20000434:	b580      	push	{r7, lr}
20000436:	b082      	sub	sp, #8
20000438:	af00      	add	r7, sp, #0
2000043a:	0002      	movs	r2, r0
2000043c:	1dfb      	adds	r3, r7, #7
2000043e:	701a      	strb	r2, [r3, #0]
	while((ascii_read_status() & STATUS_FLAG) == STATUS_FLAG);
20000440:	46c0      	nop			; (mov r8, r8)
20000442:	f000 f853 	bl	200004ec <ascii_read_status>
20000446:	0003      	movs	r3, r0
20000448:	001a      	movs	r2, r3
2000044a:	2380      	movs	r3, #128	; 0x80
2000044c:	4013      	ands	r3, r2
2000044e:	2b80      	cmp	r3, #128	; 0x80
20000450:	d0f7      	beq.n	20000442 <ascii_write_char+0xe>
	delay_micro(8);
20000452:	2008      	movs	r0, #8
20000454:	f000 f928 	bl	200006a8 <delay_micro>
	ascii_write_data(ch);
20000458:	1dfb      	adds	r3, r7, #7
2000045a:	781b      	ldrb	r3, [r3, #0]
2000045c:	0018      	movs	r0, r3
2000045e:	f000 f87f 	bl	20000560 <ascii_write_data>
	delay_micro(45);
20000462:	202d      	movs	r0, #45	; 0x2d
20000464:	f000 f920 	bl	200006a8 <delay_micro>
}
20000468:	46c0      	nop			; (mov r8, r8)
2000046a:	46bd      	mov	sp, r7
2000046c:	b002      	add	sp, #8
2000046e:	bd80      	pop	{r7, pc}

20000470 <ascii_command>:
void ascii_command(char cmd)
{
20000470:	b580      	push	{r7, lr}
20000472:	b082      	sub	sp, #8
20000474:	af00      	add	r7, sp, #0
20000476:	0002      	movs	r2, r0
20000478:	1dfb      	adds	r3, r7, #7
2000047a:	701a      	strb	r2, [r3, #0]
	while((ascii_read_status() & STATUS_FLAG) == STATUS_FLAG);
2000047c:	46c0      	nop			; (mov r8, r8)
2000047e:	f000 f835 	bl	200004ec <ascii_read_status>
20000482:	0003      	movs	r3, r0
20000484:	001a      	movs	r2, r3
20000486:	2380      	movs	r3, #128	; 0x80
20000488:	4013      	ands	r3, r2
2000048a:	2b80      	cmp	r3, #128	; 0x80
2000048c:	d0f7      	beq.n	2000047e <ascii_command+0xe>
	delay_micro(8);
2000048e:	2008      	movs	r0, #8
20000490:	f000 f90a 	bl	200006a8 <delay_micro>
	ascii_write_command(cmd);
20000494:	1dfb      	adds	r3, r7, #7
20000496:	781b      	ldrb	r3, [r3, #0]
20000498:	0018      	movs	r0, r3
2000049a:	f000 f876 	bl	2000058a <ascii_write_command>
	delay_milli(2);
2000049e:	2002      	movs	r0, #2
200004a0:	f000 f925 	bl	200006ee <delay_milli>
}
200004a4:	46c0      	nop			; (mov r8, r8)
200004a6:	46bd      	mov	sp, r7
200004a8:	b002      	add	sp, #8
200004aa:	bd80      	pop	{r7, pc}

200004ac <ascii_read_data>:

unsigned char ascii_read_data()
{
200004ac:	b590      	push	{r4, r7, lr}
200004ae:	b083      	sub	sp, #12
200004b0:	af00      	add	r7, sp, #0
	*portModer = 0x00005555;
200004b2:	4b0b      	ldr	r3, [pc, #44]	; (200004e0 <ascii_read_data+0x34>)
200004b4:	4a0b      	ldr	r2, [pc, #44]	; (200004e4 <ascii_read_data+0x38>)
200004b6:	601a      	str	r2, [r3, #0]
	ascii_ctrl_bit_set(B_RW);
200004b8:	2002      	movs	r0, #2
200004ba:	f000 f893 	bl	200005e4 <ascii_ctrl_bit_set>
	ascii_ctrl_bit_set(B_RS);
200004be:	2001      	movs	r0, #1
200004c0:	f000 f890 	bl	200005e4 <ascii_ctrl_bit_set>
	unsigned char rv = ascii_read_controller();
200004c4:	1dfc      	adds	r4, r7, #7
200004c6:	f000 f831 	bl	2000052c <ascii_read_controller>
200004ca:	0003      	movs	r3, r0
200004cc:	7023      	strb	r3, [r4, #0]
	*portModer = 0x55555555;
200004ce:	4b04      	ldr	r3, [pc, #16]	; (200004e0 <ascii_read_data+0x34>)
200004d0:	4a05      	ldr	r2, [pc, #20]	; (200004e8 <ascii_read_data+0x3c>)
200004d2:	601a      	str	r2, [r3, #0]
	return rv;
200004d4:	1dfb      	adds	r3, r7, #7
200004d6:	781b      	ldrb	r3, [r3, #0]
}
200004d8:	0018      	movs	r0, r3
200004da:	46bd      	mov	sp, r7
200004dc:	b003      	add	sp, #12
200004de:	bd90      	pop	{r4, r7, pc}
200004e0:	40021000 	andmi	r1, r2, r0
200004e4:	00005555 	andeq	r5, r0, r5, asr r5
200004e8:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

200004ec <ascii_read_status>:

unsigned char ascii_read_status()
{
200004ec:	b590      	push	{r4, r7, lr}
200004ee:	b083      	sub	sp, #12
200004f0:	af00      	add	r7, sp, #0
	*portModer = 0x00005555;
200004f2:	4b0b      	ldr	r3, [pc, #44]	; (20000520 <ascii_read_status+0x34>)
200004f4:	4a0b      	ldr	r2, [pc, #44]	; (20000524 <ascii_read_status+0x38>)
200004f6:	601a      	str	r2, [r3, #0]
	ascii_ctrl_bit_set(B_RW);
200004f8:	2002      	movs	r0, #2
200004fa:	f000 f873 	bl	200005e4 <ascii_ctrl_bit_set>
	ascii_ctrl_bit_clear(B_RS);
200004fe:	2001      	movs	r0, #1
20000500:	f000 f88c 	bl	2000061c <ascii_ctrl_bit_clear>
	unsigned char rv = ascii_read_controller();
20000504:	1dfc      	adds	r4, r7, #7
20000506:	f000 f811 	bl	2000052c <ascii_read_controller>
2000050a:	0003      	movs	r3, r0
2000050c:	7023      	strb	r3, [r4, #0]
	*portModer = 0x55555555;
2000050e:	4b04      	ldr	r3, [pc, #16]	; (20000520 <ascii_read_status+0x34>)
20000510:	4a05      	ldr	r2, [pc, #20]	; (20000528 <ascii_read_status+0x3c>)
20000512:	601a      	str	r2, [r3, #0]
	return rv;
20000514:	1dfb      	adds	r3, r7, #7
20000516:	781b      	ldrb	r3, [r3, #0]
}
20000518:	0018      	movs	r0, r3
2000051a:	46bd      	mov	sp, r7
2000051c:	b003      	add	sp, #12
2000051e:	bd90      	pop	{r4, r7, pc}
20000520:	40021000 	andmi	r1, r2, r0
20000524:	00005555 	andeq	r5, r0, r5, asr r5
20000528:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

2000052c <ascii_read_controller>:
unsigned char ascii_read_controller()
{
2000052c:	b580      	push	{r7, lr}
2000052e:	b082      	sub	sp, #8
20000530:	af00      	add	r7, sp, #0
	ascii_ctrl_bit_set(B_E);
20000532:	2040      	movs	r0, #64	; 0x40
20000534:	f000 f856 	bl	200005e4 <ascii_ctrl_bit_set>
	delay_250ns();
20000538:	f000 f894 	bl	20000664 <delay_250ns>
	delay_250ns();
2000053c:	f000 f892 	bl	20000664 <delay_250ns>
	unsigned char rv = *portIdrHigh;
20000540:	4a06      	ldr	r2, [pc, #24]	; (2000055c <ascii_read_controller+0x30>)
20000542:	1dfb      	adds	r3, r7, #7
20000544:	7812      	ldrb	r2, [r2, #0]
20000546:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_clear(B_E);
20000548:	2040      	movs	r0, #64	; 0x40
2000054a:	f000 f867 	bl	2000061c <ascii_ctrl_bit_clear>
	return rv;
2000054e:	1dfb      	adds	r3, r7, #7
20000550:	781b      	ldrb	r3, [r3, #0]
}
20000552:	0018      	movs	r0, r3
20000554:	46bd      	mov	sp, r7
20000556:	b002      	add	sp, #8
20000558:	bd80      	pop	{r7, pc}
2000055a:	46c0      	nop			; (mov r8, r8)
2000055c:	40021011 	andmi	r1, r2, r1, lsl r0

20000560 <ascii_write_data>:
void ascii_write_data(char data)
{
20000560:	b580      	push	{r7, lr}
20000562:	b082      	sub	sp, #8
20000564:	af00      	add	r7, sp, #0
20000566:	0002      	movs	r2, r0
20000568:	1dfb      	adds	r3, r7, #7
2000056a:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_set(B_RS);
2000056c:	2001      	movs	r0, #1
2000056e:	f000 f839 	bl	200005e4 <ascii_ctrl_bit_set>
	ascii_ctrl_bit_clear(B_RW);
20000572:	2002      	movs	r0, #2
20000574:	f000 f852 	bl	2000061c <ascii_ctrl_bit_clear>
	ascii_write_controller(data);
20000578:	1dfb      	adds	r3, r7, #7
2000057a:	781b      	ldrb	r3, [r3, #0]
2000057c:	0018      	movs	r0, r3
2000057e:	f000 f819 	bl	200005b4 <ascii_write_controller>
}
20000582:	46c0      	nop			; (mov r8, r8)
20000584:	46bd      	mov	sp, r7
20000586:	b002      	add	sp, #8
20000588:	bd80      	pop	{r7, pc}

2000058a <ascii_write_command>:
void ascii_write_command(char cmd)
{
2000058a:	b580      	push	{r7, lr}
2000058c:	b082      	sub	sp, #8
2000058e:	af00      	add	r7, sp, #0
20000590:	0002      	movs	r2, r0
20000592:	1dfb      	adds	r3, r7, #7
20000594:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_clear(B_RW);
20000596:	2002      	movs	r0, #2
20000598:	f000 f840 	bl	2000061c <ascii_ctrl_bit_clear>
	ascii_ctrl_bit_clear(B_RS);
2000059c:	2001      	movs	r0, #1
2000059e:	f000 f83d 	bl	2000061c <ascii_ctrl_bit_clear>
	ascii_write_controller(cmd);
200005a2:	1dfb      	adds	r3, r7, #7
200005a4:	781b      	ldrb	r3, [r3, #0]
200005a6:	0018      	movs	r0, r3
200005a8:	f000 f804 	bl	200005b4 <ascii_write_controller>
}
200005ac:	46c0      	nop			; (mov r8, r8)
200005ae:	46bd      	mov	sp, r7
200005b0:	b002      	add	sp, #8
200005b2:	bd80      	pop	{r7, pc}

200005b4 <ascii_write_controller>:
void ascii_write_controller(char cmd)
{
200005b4:	b580      	push	{r7, lr}
200005b6:	b082      	sub	sp, #8
200005b8:	af00      	add	r7, sp, #0
200005ba:	0002      	movs	r2, r0
200005bc:	1dfb      	adds	r3, r7, #7
200005be:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_set(B_E);
200005c0:	2040      	movs	r0, #64	; 0x40
200005c2:	f000 f80f 	bl	200005e4 <ascii_ctrl_bit_set>
	*portOdrHigh = cmd;
200005c6:	4a06      	ldr	r2, [pc, #24]	; (200005e0 <ascii_write_controller+0x2c>)
200005c8:	1dfb      	adds	r3, r7, #7
200005ca:	781b      	ldrb	r3, [r3, #0]
200005cc:	7013      	strb	r3, [r2, #0]
	delay_250ns();
200005ce:	f000 f849 	bl	20000664 <delay_250ns>
	ascii_ctrl_bit_clear(B_E);
200005d2:	2040      	movs	r0, #64	; 0x40
200005d4:	f000 f822 	bl	2000061c <ascii_ctrl_bit_clear>
}
200005d8:	46c0      	nop			; (mov r8, r8)
200005da:	46bd      	mov	sp, r7
200005dc:	b002      	add	sp, #8
200005de:	bd80      	pop	{r7, pc}
200005e0:	40021015 	andmi	r1, r2, r5, lsl r0

200005e4 <ascii_ctrl_bit_set>:
void ascii_ctrl_bit_set( char x )
{ /* x: bitmask bits are 1 to set */
200005e4:	b580      	push	{r7, lr}
200005e6:	b084      	sub	sp, #16
200005e8:	af00      	add	r7, sp, #0
200005ea:	0002      	movs	r2, r0
200005ec:	1dfb      	adds	r3, r7, #7
200005ee:	701a      	strb	r2, [r3, #0]
	char c;
	c = *portOdrLow;
200005f0:	4a09      	ldr	r2, [pc, #36]	; (20000618 <ascii_ctrl_bit_set+0x34>)
200005f2:	210f      	movs	r1, #15
200005f4:	187b      	adds	r3, r7, r1
200005f6:	7812      	ldrb	r2, [r2, #0]
200005f8:	701a      	strb	r2, [r3, #0]
	*portOdrLow = B_SELECT | x | c;
200005fa:	1dfa      	adds	r2, r7, #7
200005fc:	187b      	adds	r3, r7, r1
200005fe:	7812      	ldrb	r2, [r2, #0]
20000600:	781b      	ldrb	r3, [r3, #0]
20000602:	4313      	orrs	r3, r2
20000604:	b2db      	uxtb	r3, r3
20000606:	4a04      	ldr	r2, [pc, #16]	; (20000618 <ascii_ctrl_bit_set+0x34>)
20000608:	2104      	movs	r1, #4
2000060a:	430b      	orrs	r3, r1
2000060c:	b2db      	uxtb	r3, r3
2000060e:	7013      	strb	r3, [r2, #0]
}
20000610:	46c0      	nop			; (mov r8, r8)
20000612:	46bd      	mov	sp, r7
20000614:	b004      	add	sp, #16
20000616:	bd80      	pop	{r7, pc}
20000618:	40021014 	andmi	r1, r2, r4, lsl r0

2000061c <ascii_ctrl_bit_clear>:
void ascii_ctrl_bit_clear( char x )
{ /* x: bitmask bits are 1 to clear */
2000061c:	b580      	push	{r7, lr}
2000061e:	b084      	sub	sp, #16
20000620:	af00      	add	r7, sp, #0
20000622:	0002      	movs	r2, r0
20000624:	1dfb      	adds	r3, r7, #7
20000626:	701a      	strb	r2, [r3, #0]
	char c;
	c = *portOdrLow;
20000628:	4a0d      	ldr	r2, [pc, #52]	; (20000660 <ascii_ctrl_bit_clear+0x44>)
2000062a:	210f      	movs	r1, #15
2000062c:	187b      	adds	r3, r7, r1
2000062e:	7812      	ldrb	r2, [r2, #0]
20000630:	701a      	strb	r2, [r3, #0]
	c = c & ~x;
20000632:	1dfb      	adds	r3, r7, #7
20000634:	781b      	ldrb	r3, [r3, #0]
20000636:	b25b      	sxtb	r3, r3
20000638:	43db      	mvns	r3, r3
2000063a:	b25b      	sxtb	r3, r3
2000063c:	187a      	adds	r2, r7, r1
2000063e:	7812      	ldrb	r2, [r2, #0]
20000640:	b252      	sxtb	r2, r2
20000642:	4013      	ands	r3, r2
20000644:	b25a      	sxtb	r2, r3
20000646:	187b      	adds	r3, r7, r1
20000648:	701a      	strb	r2, [r3, #0]
	*portOdrLow = B_SELECT | c;
2000064a:	4a05      	ldr	r2, [pc, #20]	; (20000660 <ascii_ctrl_bit_clear+0x44>)
2000064c:	187b      	adds	r3, r7, r1
2000064e:	781b      	ldrb	r3, [r3, #0]
20000650:	2104      	movs	r1, #4
20000652:	430b      	orrs	r3, r1
20000654:	b2db      	uxtb	r3, r3
20000656:	7013      	strb	r3, [r2, #0]
}
20000658:	46c0      	nop			; (mov r8, r8)
2000065a:	46bd      	mov	sp, r7
2000065c:	b004      	add	sp, #16
2000065e:	bd80      	pop	{r7, pc}
20000660:	40021014 	andmi	r1, r2, r4, lsl r0

20000664 <delay_250ns>:


void delay_250ns()
{
20000664:	b580      	push	{r7, lr}
20000666:	af00      	add	r7, sp, #0
	
	//ett tick från klockan var 6:e nanosekund 
	//för att få 250 ns behöver vi vänta 6*42 ns
	*STK_CTRL = 0;
20000668:	4b0c      	ldr	r3, [pc, #48]	; (2000069c <delay_250ns+0x38>)
2000066a:	2200      	movs	r2, #0
2000066c:	601a      	str	r2, [r3, #0]
	*STK_LOAD = 41; // 250/6 =ca 42, -1 för att klockan är ett tick försenat att märka att val = 0 
2000066e:	4b0c      	ldr	r3, [pc, #48]	; (200006a0 <delay_250ns+0x3c>)
20000670:	2229      	movs	r2, #41	; 0x29
20000672:	601a      	str	r2, [r3, #0]
	*STK_VAL = 0;
20000674:	4b0b      	ldr	r3, [pc, #44]	; (200006a4 <delay_250ns+0x40>)
20000676:	2200      	movs	r2, #0
20000678:	601a      	str	r2, [r3, #0]
	*STK_CTRL = 5;	// 101 systemklocka, inget avbrott, starta räknare
2000067a:	4b08      	ldr	r3, [pc, #32]	; (2000069c <delay_250ns+0x38>)
2000067c:	2205      	movs	r2, #5
2000067e:	601a      	str	r2, [r3, #0]
	while((*STK_CTRL & 0x10000) == 0); // vänta på bit 16 = 1
20000680:	46c0      	nop			; (mov r8, r8)
20000682:	4b06      	ldr	r3, [pc, #24]	; (2000069c <delay_250ns+0x38>)
20000684:	681a      	ldr	r2, [r3, #0]
20000686:	2380      	movs	r3, #128	; 0x80
20000688:	025b      	lsls	r3, r3, #9
2000068a:	4013      	ands	r3, r2
2000068c:	d0f9      	beq.n	20000682 <delay_250ns+0x1e>
	*STK_CTRL = 0; // stoppa räknaren
2000068e:	4b03      	ldr	r3, [pc, #12]	; (2000069c <delay_250ns+0x38>)
20000690:	2200      	movs	r2, #0
20000692:	601a      	str	r2, [r3, #0]
}
20000694:	46c0      	nop			; (mov r8, r8)
20000696:	46bd      	mov	sp, r7
20000698:	bd80      	pop	{r7, pc}
2000069a:	46c0      	nop			; (mov r8, r8)
2000069c:	e000e010 	and	lr, r0, r0, lsl r0
200006a0:	e000e014 	and	lr, r0, r4, lsl r0
200006a4:	e000e018 	and	lr, r0, r8, lsl r0

200006a8 <delay_micro>:

#define SIMULATED
void delay_micro(unsigned int us)
{
200006a8:	b580      	push	{r7, lr}
200006aa:	b082      	sub	sp, #8
200006ac:	af00      	add	r7, sp, #0
200006ae:	6078      	str	r0, [r7, #4]
#ifdef SIMULATED
	us /= 1000;
200006b0:	687b      	ldr	r3, [r7, #4]
200006b2:	22fa      	movs	r2, #250	; 0xfa
200006b4:	0091      	lsls	r1, r2, #2
200006b6:	0018      	movs	r0, r3
200006b8:	f001 f8bc 	bl	20001834 <__udivsi3>
200006bc:	0003      	movs	r3, r0
200006be:	607b      	str	r3, [r7, #4]
	us++;
200006c0:	687b      	ldr	r3, [r7, #4]
200006c2:	3301      	adds	r3, #1
200006c4:	607b      	str	r3, [r7, #4]
#endif
	while(us > 0)
200006c6:	e00a      	b.n	200006de <delay_micro+0x36>
	{
		delay_250ns();
200006c8:	f7ff ffcc 	bl	20000664 <delay_250ns>
		delay_250ns();
200006cc:	f7ff ffca 	bl	20000664 <delay_250ns>
		delay_250ns();
200006d0:	f7ff ffc8 	bl	20000664 <delay_250ns>
		delay_250ns();
200006d4:	f7ff ffc6 	bl	20000664 <delay_250ns>
		us--;
200006d8:	687b      	ldr	r3, [r7, #4]
200006da:	3b01      	subs	r3, #1
200006dc:	607b      	str	r3, [r7, #4]
	while(us > 0)
200006de:	687b      	ldr	r3, [r7, #4]
200006e0:	2b00      	cmp	r3, #0
200006e2:	d1f1      	bne.n	200006c8 <delay_micro+0x20>
	}
}
200006e4:	46c0      	nop			; (mov r8, r8)
200006e6:	46c0      	nop			; (mov r8, r8)
200006e8:	46bd      	mov	sp, r7
200006ea:	b002      	add	sp, #8
200006ec:	bd80      	pop	{r7, pc}

200006ee <delay_milli>:

void delay_milli(unsigned int ms)
{
200006ee:	b580      	push	{r7, lr}
200006f0:	b082      	sub	sp, #8
200006f2:	af00      	add	r7, sp, #0
200006f4:	6078      	str	r0, [r7, #4]
	delay_micro(ms*1000);
200006f6:	687a      	ldr	r2, [r7, #4]
200006f8:	0013      	movs	r3, r2
200006fa:	015b      	lsls	r3, r3, #5
200006fc:	1a9b      	subs	r3, r3, r2
200006fe:	009b      	lsls	r3, r3, #2
20000700:	189b      	adds	r3, r3, r2
20000702:	00db      	lsls	r3, r3, #3
20000704:	0018      	movs	r0, r3
20000706:	f7ff ffcf 	bl	200006a8 <delay_micro>
}
2000070a:	46c0      	nop			; (mov r8, r8)
2000070c:	46bd      	mov	sp, r7
2000070e:	b002      	add	sp, #8
20000710:	bd80      	pop	{r7, pc}

20000712 <main>:
int (*isBombPtr)(struct Positions);
int (*isFlagPtr)(struct Positions);


int main(void)
{   
20000712:	b5b0      	push	{r4, r5, r7, lr}
20000714:	b088      	sub	sp, #32
20000716:	af02      	add	r7, sp, #8
	init_app();
20000718:	f000 feee 	bl	200014f8 <init_app>
	
	isBombPtr = isBomb;
2000071c:	4b70      	ldr	r3, [pc, #448]	; (200008e0 <main+0x1ce>)
2000071e:	4a71      	ldr	r2, [pc, #452]	; (200008e4 <main+0x1d2>)
20000720:	601a      	str	r2, [r3, #0]
	isFlagPtr = isFlag;
20000722:	4b71      	ldr	r3, [pc, #452]	; (200008e8 <main+0x1d6>)
20000724:	4a71      	ldr	r2, [pc, #452]	; (200008ec <main+0x1da>)
20000726:	601a      	str	r2, [r3, #0]
	running = 1;
20000728:	4b71      	ldr	r3, [pc, #452]	; (200008f0 <main+0x1de>)
2000072a:	2201      	movs	r2, #1
2000072c:	601a      	str	r2, [r3, #0]

	
	while(running)
2000072e:	e0cd      	b.n	200008cc <main+0x1ba>
	{
		graphic_clear_screen();
20000730:	f000 fed9 	bl	200014e6 <graphic_clear_screen>
		createBoard(&board);
20000734:	4b6f      	ldr	r3, [pc, #444]	; (200008f4 <main+0x1e2>)
20000736:	0018      	movs	r0, r3
20000738:	f000 fd5e 	bl	200011f8 <createBoard>
		int gameStarted = 0;	
2000073c:	2300      	movs	r3, #0
2000073e:	617b      	str	r3, [r7, #20]
		struct Player p;
		p.x = 0;
20000740:	003b      	movs	r3, r7
20000742:	2200      	movs	r2, #0
20000744:	601a      	str	r2, [r3, #0]
		p.y = 0;
20000746:	003b      	movs	r3, r7
20000748:	2200      	movs	r2, #0
2000074a:	605a      	str	r2, [r3, #4]
		char hitCh;
		char lastKey;
		int nSameKey = 0;
2000074c:	2300      	movs	r3, #0
2000074e:	60fb      	str	r3, [r7, #12]
	
		gotoxy(0,0);
20000750:	2100      	movs	r1, #0
20000752:	2000      	movs	r0, #0
20000754:	f000 fdcf 	bl	200012f6 <gotoxy>
		printToGD(playerCh);
20000758:	2024      	movs	r0, #36	; 0x24
2000075a:	f000 fddf 	bl	2000131c <printToGD>
		
		print_start_text_ascii();
2000075e:	f000 ffb5 	bl	200016cc <print_start_text_ascii>
		print_flags(Bombs - placed_flaggs);
20000762:	4b65      	ldr	r3, [pc, #404]	; (200008f8 <main+0x1e6>)
20000764:	681b      	ldr	r3, [r3, #0]
20000766:	220a      	movs	r2, #10
20000768:	1ad3      	subs	r3, r2, r3
2000076a:	0018      	movs	r0, r3
2000076c:	f000 ffd6 	bl	2000171c <print_flags>
		gameover = 0;
20000770:	4b62      	ldr	r3, [pc, #392]	; (200008fc <main+0x1ea>)
20000772:	2200      	movs	r2, #0
20000774:	601a      	str	r2, [r3, #0]
		
		while(!gameover)
20000776:	e095      	b.n	200008a4 <main+0x192>
		{
			
			print_timer(seconds, ticks);
20000778:	4b61      	ldr	r3, [pc, #388]	; (20000900 <main+0x1ee>)
2000077a:	681a      	ldr	r2, [r3, #0]
2000077c:	4b61      	ldr	r3, [pc, #388]	; (20000904 <main+0x1f2>)
2000077e:	681b      	ldr	r3, [r3, #0]
20000780:	0019      	movs	r1, r3
20000782:	0010      	movs	r0, r2
20000784:	f000 fffe 	bl	20001784 <print_timer>
			//TODO: lägg till att skriva ut tiden på ASCII!!
			// skapa headerfil?
			
			
			checkWin();
20000788:	f000 f8be 	bl	20000908 <checkWin>
			hitCh = keyb_enhanced();
2000078c:	2513      	movs	r5, #19
2000078e:	197c      	adds	r4, r7, r5
20000790:	f000 ff14 	bl	200015bc <keyb_enhanced>
20000794:	0003      	movs	r3, r0
20000796:	7023      	strb	r3, [r4, #0]
			if( hitCh != noKeyReturn)
20000798:	002a      	movs	r2, r5
2000079a:	18bb      	adds	r3, r7, r2
2000079c:	781b      	ldrb	r3, [r3, #0]
2000079e:	2bff      	cmp	r3, #255	; 0xff
200007a0:	d05d      	beq.n	2000085e <main+0x14c>
			{
				if(nSameKey >= sameKeyMax)
200007a2:	68fb      	ldr	r3, [r7, #12]
200007a4:	2b1d      	cmp	r3, #29
200007a6:	dd06      	ble.n	200007b6 <main+0xa4>
				{
					hitCh = lastKey;
200007a8:	18bb      	adds	r3, r7, r2
200007aa:	2212      	movs	r2, #18
200007ac:	18ba      	adds	r2, r7, r2
200007ae:	7812      	ldrb	r2, [r2, #0]
200007b0:	701a      	strb	r2, [r3, #0]
					nSameKey = 0;
200007b2:	2300      	movs	r3, #0
200007b4:	60fb      	str	r3, [r7, #12]
				}
				
				if(hitCh != sameKeyReturn)
200007b6:	2213      	movs	r2, #19
200007b8:	18bb      	adds	r3, r7, r2
200007ba:	781b      	ldrb	r3, [r3, #0]
200007bc:	2bfe      	cmp	r3, #254	; 0xfe
200007be:	d004      	beq.n	200007ca <main+0xb8>
					lastKey = hitCh;
200007c0:	2312      	movs	r3, #18
200007c2:	18fb      	adds	r3, r7, r3
200007c4:	18ba      	adds	r2, r7, r2
200007c6:	7812      	ldrb	r2, [r2, #0]
200007c8:	701a      	strb	r2, [r3, #0]
				switch(hitCh)
200007ca:	2313      	movs	r3, #19
200007cc:	18fb      	adds	r3, r7, r3
200007ce:	781b      	ldrb	r3, [r3, #0]
200007d0:	2b0a      	cmp	r3, #10
200007d2:	d002      	beq.n	200007da <main+0xc8>
200007d4:	2b0b      	cmp	r3, #11
200007d6:	d017      	beq.n	20000808 <main+0xf6>
200007d8:	e024      	b.n	20000824 <main+0x112>
				{
					case 0xA: // open
					if(!gameStarted)
200007da:	697b      	ldr	r3, [r7, #20]
200007dc:	2b00      	cmp	r3, #0
200007de:	d10a      	bne.n	200007f6 <main+0xe4>
					{
						makeFirstOpen(p);
200007e0:	003b      	movs	r3, r7
200007e2:	6818      	ldr	r0, [r3, #0]
200007e4:	6859      	ldr	r1, [r3, #4]
200007e6:	689a      	ldr	r2, [r3, #8]
200007e8:	f000 f966 	bl	20000ab8 <makeFirstOpen>
						gameStarted = 1;
200007ec:	2301      	movs	r3, #1
200007ee:	617b      	str	r3, [r7, #20]
						toggle_timer_running();
200007f0:	f7ff fd60 	bl	200002b4 <toggle_timer_running>
					}
					else
						openPos(p.x, p.y);
					break;
200007f4:	e036      	b.n	20000864 <main+0x152>
						openPos(p.x, p.y);
200007f6:	003b      	movs	r3, r7
200007f8:	681a      	ldr	r2, [r3, #0]
200007fa:	003b      	movs	r3, r7
200007fc:	685b      	ldr	r3, [r3, #4]
200007fe:	0019      	movs	r1, r3
20000800:	0010      	movs	r0, r2
20000802:	f000 fa53 	bl	20000cac <openPos>
					break;
20000806:	e02d      	b.n	20000864 <main+0x152>
					case 0xB: // place flag
					placeFlag(p);
20000808:	003b      	movs	r3, r7
2000080a:	6818      	ldr	r0, [r3, #0]
2000080c:	6859      	ldr	r1, [r3, #4]
2000080e:	689a      	ldr	r2, [r3, #8]
20000810:	f000 f9a2 	bl	20000b58 <placeFlag>
					print_flags(Bombs - placed_flaggs);
20000814:	4b38      	ldr	r3, [pc, #224]	; (200008f8 <main+0x1e6>)
20000816:	681b      	ldr	r3, [r3, #0]
20000818:	220a      	movs	r2, #10
2000081a:	1ad3      	subs	r3, r2, r3
2000081c:	0018      	movs	r0, r3
2000081e:	f000 ff7d 	bl	2000171c <print_flags>
					//TODO: skapa metod för att skrva ut hur många dlaggor är kvar att placera ut
					// ta hand om negativa tal 
					//borde kunna lösa det med NBCD kod om vi hat tvåsiffriga tal?
					break;
20000822:	e01f      	b.n	20000864 <main+0x152>
					default:	//move
					if(hitCh == 0x2 || hitCh == 0x4 || hitCh == 0x8 || hitCh == 0x6)
20000824:	2213      	movs	r2, #19
20000826:	18bb      	adds	r3, r7, r2
20000828:	781b      	ldrb	r3, [r3, #0]
2000082a:	2b02      	cmp	r3, #2
2000082c:	d00b      	beq.n	20000846 <main+0x134>
2000082e:	18bb      	adds	r3, r7, r2
20000830:	781b      	ldrb	r3, [r3, #0]
20000832:	2b04      	cmp	r3, #4
20000834:	d007      	beq.n	20000846 <main+0x134>
20000836:	18bb      	adds	r3, r7, r2
20000838:	781b      	ldrb	r3, [r3, #0]
2000083a:	2b08      	cmp	r3, #8
2000083c:	d003      	beq.n	20000846 <main+0x134>
2000083e:	18bb      	adds	r3, r7, r2
20000840:	781b      	ldrb	r3, [r3, #0]
20000842:	2b06      	cmp	r3, #6
20000844:	d10d      	bne.n	20000862 <main+0x150>
						p = movePlayer(p, hitCh);
20000846:	0038      	movs	r0, r7
20000848:	003b      	movs	r3, r7
2000084a:	2213      	movs	r2, #19
2000084c:	18ba      	adds	r2, r7, r2
2000084e:	7812      	ldrb	r2, [r2, #0]
20000850:	9200      	str	r2, [sp, #0]
20000852:	6819      	ldr	r1, [r3, #0]
20000854:	685a      	ldr	r2, [r3, #4]
20000856:	689b      	ldr	r3, [r3, #8]
20000858:	f000 fbd6 	bl	20001008 <movePlayer>
					break;
2000085c:	e001      	b.n	20000862 <main+0x150>
				}
				
			}
2000085e:	46c0      	nop			; (mov r8, r8)
20000860:	e000      	b.n	20000864 <main+0x152>
					break;
20000862:	46c0      	nop			; (mov r8, r8)
			if(hitCh == noKeyReturn)
20000864:	2313      	movs	r3, #19
20000866:	18fb      	adds	r3, r7, r3
20000868:	781b      	ldrb	r3, [r3, #0]
2000086a:	2bff      	cmp	r3, #255	; 0xff
2000086c:	d101      	bne.n	20000872 <main+0x160>
					nSameKey = 0;
2000086e:	2300      	movs	r3, #0
20000870:	60fb      	str	r3, [r7, #12]
			if(hitCh == sameKeyReturn && (lastKey == 0x2 || lastKey == 0x4 || lastKey == 0x8 || lastKey == 0x6))
20000872:	2313      	movs	r3, #19
20000874:	18fb      	adds	r3, r7, r3
20000876:	781b      	ldrb	r3, [r3, #0]
20000878:	2bfe      	cmp	r3, #254	; 0xfe
2000087a:	d113      	bne.n	200008a4 <main+0x192>
2000087c:	2212      	movs	r2, #18
2000087e:	18bb      	adds	r3, r7, r2
20000880:	781b      	ldrb	r3, [r3, #0]
20000882:	2b02      	cmp	r3, #2
20000884:	d00b      	beq.n	2000089e <main+0x18c>
20000886:	18bb      	adds	r3, r7, r2
20000888:	781b      	ldrb	r3, [r3, #0]
2000088a:	2b04      	cmp	r3, #4
2000088c:	d007      	beq.n	2000089e <main+0x18c>
2000088e:	18bb      	adds	r3, r7, r2
20000890:	781b      	ldrb	r3, [r3, #0]
20000892:	2b08      	cmp	r3, #8
20000894:	d003      	beq.n	2000089e <main+0x18c>
20000896:	18bb      	adds	r3, r7, r2
20000898:	781b      	ldrb	r3, [r3, #0]
2000089a:	2b06      	cmp	r3, #6
2000089c:	d102      	bne.n	200008a4 <main+0x192>
				nSameKey++;
2000089e:	68fb      	ldr	r3, [r7, #12]
200008a0:	3301      	adds	r3, #1
200008a2:	60fb      	str	r3, [r7, #12]
		while(!gameover)
200008a4:	4b15      	ldr	r3, [pc, #84]	; (200008fc <main+0x1ea>)
200008a6:	681b      	ldr	r3, [r3, #0]
200008a8:	2b00      	cmp	r3, #0
200008aa:	d100      	bne.n	200008ae <main+0x19c>
200008ac:	e764      	b.n	20000778 <main+0x66>
			// do stuff depending on key_code
		}
		//TOFO: fråga om du vill spela igen
		
		toggle_timer_running();
200008ae:	f7ff fd01 	bl	200002b4 <toggle_timer_running>
		reset_timer();
200008b2:	f7ff fd37 	bl	20000324 <reset_timer>
		running = play_again();
200008b6:	f000 ff7d 	bl	200017b4 <play_again>
200008ba:	0002      	movs	r2, r0
200008bc:	4b0c      	ldr	r3, [pc, #48]	; (200008f0 <main+0x1de>)
200008be:	601a      	str	r2, [r3, #0]
		placed_flaggs = 0;
200008c0:	4b0d      	ldr	r3, [pc, #52]	; (200008f8 <main+0x1e6>)
200008c2:	2200      	movs	r2, #0
200008c4:	601a      	str	r2, [r3, #0]
		gameover = 0;
200008c6:	4b0d      	ldr	r3, [pc, #52]	; (200008fc <main+0x1ea>)
200008c8:	2200      	movs	r2, #0
200008ca:	601a      	str	r2, [r3, #0]
	while(running)
200008cc:	4b08      	ldr	r3, [pc, #32]	; (200008f0 <main+0x1de>)
200008ce:	681b      	ldr	r3, [r3, #0]
200008d0:	2b00      	cmp	r3, #0
200008d2:	d000      	beq.n	200008d6 <main+0x1c4>
200008d4:	e72c      	b.n	20000730 <main+0x1e>
	}
	return 0;
200008d6:	2300      	movs	r3, #0
}
200008d8:	0018      	movs	r0, r3
200008da:	46bd      	mov	sp, r7
200008dc:	b006      	add	sp, #24
200008de:	bdb0      	pop	{r4, r5, r7, pc}
200008e0:	2000222c 	andcs	r2, r0, ip, lsr #4
200008e4:	20000fbd 			; <UNDEFINED> instruction: 0x20000fbd
200008e8:	20001b78 	andcs	r1, r0, r8, ror fp
200008ec:	20000fe3 	andcs	r0, r0, r3, ror #31
200008f0:	20001b64 	andcs	r1, r0, r4, ror #22
200008f4:	20001b7c 	andcs	r1, r0, ip, ror fp
200008f8:	20001b60 	andcs	r1, r0, r0, ror #22
200008fc:	20001b68 	andcs	r1, r0, r8, ror #22
20000900:	20002224 	andcs	r2, r0, r4, lsr #4
20000904:	20002228 	andcs	r2, r0, r8, lsr #4

20000908 <checkWin>:
void checkWin()
{
20000908:	b580      	push	{r7, lr}
2000090a:	b084      	sub	sp, #16
2000090c:	af00      	add	r7, sp, #0
	int squaresToOpen = 60; //sizeX*sizeY - Bombs;
2000090e:	233c      	movs	r3, #60	; 0x3c
20000910:	603b      	str	r3, [r7, #0]
	int openedSquares = 0;
20000912:	2300      	movs	r3, #0
20000914:	60fb      	str	r3, [r7, #12]
	for(int x = 0; x < sizeX; x++)
20000916:	2300      	movs	r3, #0
20000918:	60bb      	str	r3, [r7, #8]
2000091a:	e032      	b.n	20000982 <checkWin+0x7a>
		for(int y = 0; y < sizeY; y++)
2000091c:	2300      	movs	r3, #0
2000091e:	607b      	str	r3, [r7, #4]
20000920:	e029      	b.n	20000976 <checkWin+0x6e>
		{
			if(board[x][y].opened && board[x][y].bomb == 0)
20000922:	481e      	ldr	r0, [pc, #120]	; (2000099c <checkWin+0x94>)
20000924:	687b      	ldr	r3, [r7, #4]
20000926:	68b9      	ldr	r1, [r7, #8]
20000928:	001a      	movs	r2, r3
2000092a:	0052      	lsls	r2, r2, #1
2000092c:	18d2      	adds	r2, r2, r3
2000092e:	00d3      	lsls	r3, r2, #3
20000930:	001a      	movs	r2, r3
20000932:	000b      	movs	r3, r1
20000934:	011b      	lsls	r3, r3, #4
20000936:	1a5b      	subs	r3, r3, r1
20000938:	00db      	lsls	r3, r3, #3
2000093a:	18d3      	adds	r3, r2, r3
2000093c:	18c3      	adds	r3, r0, r3
2000093e:	3314      	adds	r3, #20
20000940:	681b      	ldr	r3, [r3, #0]
20000942:	2b00      	cmp	r3, #0
20000944:	d014      	beq.n	20000970 <checkWin+0x68>
20000946:	4815      	ldr	r0, [pc, #84]	; (2000099c <checkWin+0x94>)
20000948:	687b      	ldr	r3, [r7, #4]
2000094a:	68b9      	ldr	r1, [r7, #8]
2000094c:	001a      	movs	r2, r3
2000094e:	0052      	lsls	r2, r2, #1
20000950:	18d2      	adds	r2, r2, r3
20000952:	00d3      	lsls	r3, r2, #3
20000954:	001a      	movs	r2, r3
20000956:	000b      	movs	r3, r1
20000958:	011b      	lsls	r3, r3, #4
2000095a:	1a5b      	subs	r3, r3, r1
2000095c:	00db      	lsls	r3, r3, #3
2000095e:	18d3      	adds	r3, r2, r3
20000960:	18c3      	adds	r3, r0, r3
20000962:	3310      	adds	r3, #16
20000964:	681b      	ldr	r3, [r3, #0]
20000966:	2b00      	cmp	r3, #0
20000968:	d102      	bne.n	20000970 <checkWin+0x68>
				openedSquares++;
2000096a:	68fb      	ldr	r3, [r7, #12]
2000096c:	3301      	adds	r3, #1
2000096e:	60fb      	str	r3, [r7, #12]
		for(int y = 0; y < sizeY; y++)
20000970:	687b      	ldr	r3, [r7, #4]
20000972:	3301      	adds	r3, #1
20000974:	607b      	str	r3, [r7, #4]
20000976:	687b      	ldr	r3, [r7, #4]
20000978:	2b04      	cmp	r3, #4
2000097a:	ddd2      	ble.n	20000922 <checkWin+0x1a>
	for(int x = 0; x < sizeX; x++)
2000097c:	68bb      	ldr	r3, [r7, #8]
2000097e:	3301      	adds	r3, #1
20000980:	60bb      	str	r3, [r7, #8]
20000982:	68bb      	ldr	r3, [r7, #8]
20000984:	2b0d      	cmp	r3, #13
20000986:	ddc9      	ble.n	2000091c <checkWin+0x14>
		}
	if(openedSquares == sizeX*sizeY - Bombs)
20000988:	68fb      	ldr	r3, [r7, #12]
2000098a:	2b3c      	cmp	r3, #60	; 0x3c
2000098c:	d102      	bne.n	20000994 <checkWin+0x8c>
		gameover = 1;
2000098e:	4b04      	ldr	r3, [pc, #16]	; (200009a0 <checkWin+0x98>)
20000990:	2201      	movs	r2, #1
20000992:	601a      	str	r2, [r3, #0]
}
20000994:	46c0      	nop			; (mov r8, r8)
20000996:	46bd      	mov	sp, r7
20000998:	b004      	add	sp, #16
2000099a:	bd80      	pop	{r7, pc}
2000099c:	20001b7c 	andcs	r1, r0, ip, ror fp
200009a0:	20001b68 	andcs	r1, r0, r8, ror #22

200009a4 <placeBombs>:
void placeBombs(struct Player p)
{
200009a4:	b590      	push	{r4, r7, lr}
200009a6:	b08b      	sub	sp, #44	; 0x2c
200009a8:	af00      	add	r7, sp, #0
200009aa:	1d3b      	adds	r3, r7, #4
200009ac:	6018      	str	r0, [r3, #0]
200009ae:	6059      	str	r1, [r3, #4]
200009b0:	609a      	str	r2, [r3, #8]
	 // du kan göra en räknarkrets som du kan läsa av värdet på!!!
	int placedBombs = 0;
200009b2:	2300      	movs	r3, #0
200009b4:	627b      	str	r3, [r7, #36]	; 0x24
	start_rand();
200009b6:	f7ff fb2d 	bl	20000014 <start_rand>
	while(placedBombs < Bombs)
200009ba:	e045      	b.n	20000a48 <placeBombs+0xa4>
	{
		int tst = get_rand_val();
200009bc:	f7ff fb4e 	bl	2000005c <get_rand_val>
200009c0:	0003      	movs	r3, r0
200009c2:	61bb      	str	r3, [r7, #24]
		int rx = get_rand_val() % sizeX;
200009c4:	f7ff fb4a 	bl	2000005c <get_rand_val>
200009c8:	0003      	movs	r3, r0
200009ca:	210e      	movs	r1, #14
200009cc:	0018      	movs	r0, r3
200009ce:	f001 f8a1 	bl	20001b14 <__aeabi_idivmod>
200009d2:	000b      	movs	r3, r1
200009d4:	617b      	str	r3, [r7, #20]
		int ry = get_rand_val() % sizeY;
200009d6:	f7ff fb41 	bl	2000005c <get_rand_val>
200009da:	0003      	movs	r3, r0
200009dc:	2105      	movs	r1, #5
200009de:	0018      	movs	r0, r3
200009e0:	f001 f898 	bl	20001b14 <__aeabi_idivmod>
200009e4:	000b      	movs	r3, r1
200009e6:	613b      	str	r3, [r7, #16]
		if(board[rx][ry].bomb == 0 && (rx != p.x && ry != p.y))
200009e8:	4831      	ldr	r0, [pc, #196]	; (20000ab0 <placeBombs+0x10c>)
200009ea:	693b      	ldr	r3, [r7, #16]
200009ec:	6979      	ldr	r1, [r7, #20]
200009ee:	001a      	movs	r2, r3
200009f0:	0052      	lsls	r2, r2, #1
200009f2:	18d2      	adds	r2, r2, r3
200009f4:	00d3      	lsls	r3, r2, #3
200009f6:	001a      	movs	r2, r3
200009f8:	000b      	movs	r3, r1
200009fa:	011b      	lsls	r3, r3, #4
200009fc:	1a5b      	subs	r3, r3, r1
200009fe:	00db      	lsls	r3, r3, #3
20000a00:	18d3      	adds	r3, r2, r3
20000a02:	18c3      	adds	r3, r0, r3
20000a04:	3310      	adds	r3, #16
20000a06:	681b      	ldr	r3, [r3, #0]
20000a08:	2b00      	cmp	r3, #0
20000a0a:	d11d      	bne.n	20000a48 <placeBombs+0xa4>
20000a0c:	1d3b      	adds	r3, r7, #4
20000a0e:	681b      	ldr	r3, [r3, #0]
20000a10:	697a      	ldr	r2, [r7, #20]
20000a12:	429a      	cmp	r2, r3
20000a14:	d018      	beq.n	20000a48 <placeBombs+0xa4>
20000a16:	1d3b      	adds	r3, r7, #4
20000a18:	685b      	ldr	r3, [r3, #4]
20000a1a:	693a      	ldr	r2, [r7, #16]
20000a1c:	429a      	cmp	r2, r3
20000a1e:	d013      	beq.n	20000a48 <placeBombs+0xa4>
		{
			board[rx][ry].bomb = 1;
20000a20:	4823      	ldr	r0, [pc, #140]	; (20000ab0 <placeBombs+0x10c>)
20000a22:	693b      	ldr	r3, [r7, #16]
20000a24:	6979      	ldr	r1, [r7, #20]
20000a26:	001a      	movs	r2, r3
20000a28:	0052      	lsls	r2, r2, #1
20000a2a:	18d2      	adds	r2, r2, r3
20000a2c:	00d3      	lsls	r3, r2, #3
20000a2e:	001a      	movs	r2, r3
20000a30:	000b      	movs	r3, r1
20000a32:	011b      	lsls	r3, r3, #4
20000a34:	1a5b      	subs	r3, r3, r1
20000a36:	00db      	lsls	r3, r3, #3
20000a38:	18d3      	adds	r3, r2, r3
20000a3a:	18c3      	adds	r3, r0, r3
20000a3c:	3310      	adds	r3, #16
20000a3e:	2201      	movs	r2, #1
20000a40:	601a      	str	r2, [r3, #0]
			placedBombs++;
20000a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20000a44:	3301      	adds	r3, #1
20000a46:	627b      	str	r3, [r7, #36]	; 0x24
	while(placedBombs < Bombs)
20000a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20000a4a:	2b09      	cmp	r3, #9
20000a4c:	ddb6      	ble.n	200009bc <placeBombs+0x18>
		}
	}
	end_rand();
20000a4e:	f7ff fb17 	bl	20000080 <end_rand>
	for(int i = 0; i<sizeX; i++)
20000a52:	2300      	movs	r3, #0
20000a54:	623b      	str	r3, [r7, #32]
20000a56:	e023      	b.n	20000aa0 <placeBombs+0xfc>
		for(int j = 0; j < sizeY; j++)
20000a58:	2300      	movs	r3, #0
20000a5a:	61fb      	str	r3, [r7, #28]
20000a5c:	e01a      	b.n	20000a94 <placeBombs+0xf0>
			board[i][j].numberOfBombs = countBombOrFlag(i, j, isBombPtr);
20000a5e:	4b15      	ldr	r3, [pc, #84]	; (20000ab4 <placeBombs+0x110>)
20000a60:	681a      	ldr	r2, [r3, #0]
20000a62:	69f9      	ldr	r1, [r7, #28]
20000a64:	6a3b      	ldr	r3, [r7, #32]
20000a66:	0018      	movs	r0, r3
20000a68:	f000 fa4e 	bl	20000f08 <countBombOrFlag>
20000a6c:	0004      	movs	r4, r0
20000a6e:	4810      	ldr	r0, [pc, #64]	; (20000ab0 <placeBombs+0x10c>)
20000a70:	69fb      	ldr	r3, [r7, #28]
20000a72:	6a39      	ldr	r1, [r7, #32]
20000a74:	001a      	movs	r2, r3
20000a76:	0052      	lsls	r2, r2, #1
20000a78:	18d2      	adds	r2, r2, r3
20000a7a:	00d3      	lsls	r3, r2, #3
20000a7c:	001a      	movs	r2, r3
20000a7e:	000b      	movs	r3, r1
20000a80:	011b      	lsls	r3, r3, #4
20000a82:	1a5b      	subs	r3, r3, r1
20000a84:	00db      	lsls	r3, r3, #3
20000a86:	18d3      	adds	r3, r2, r3
20000a88:	18c3      	adds	r3, r0, r3
20000a8a:	3308      	adds	r3, #8
20000a8c:	601c      	str	r4, [r3, #0]
		for(int j = 0; j < sizeY; j++)
20000a8e:	69fb      	ldr	r3, [r7, #28]
20000a90:	3301      	adds	r3, #1
20000a92:	61fb      	str	r3, [r7, #28]
20000a94:	69fb      	ldr	r3, [r7, #28]
20000a96:	2b04      	cmp	r3, #4
20000a98:	dde1      	ble.n	20000a5e <placeBombs+0xba>
	for(int i = 0; i<sizeX; i++)
20000a9a:	6a3b      	ldr	r3, [r7, #32]
20000a9c:	3301      	adds	r3, #1
20000a9e:	623b      	str	r3, [r7, #32]
20000aa0:	6a3b      	ldr	r3, [r7, #32]
20000aa2:	2b0d      	cmp	r3, #13
20000aa4:	ddd8      	ble.n	20000a58 <placeBombs+0xb4>
}
20000aa6:	46c0      	nop			; (mov r8, r8)
20000aa8:	46c0      	nop			; (mov r8, r8)
20000aaa:	46bd      	mov	sp, r7
20000aac:	b00b      	add	sp, #44	; 0x2c
20000aae:	bd90      	pop	{r4, r7, pc}
20000ab0:	20001b7c 	andcs	r1, r0, ip, ror fp
20000ab4:	2000222c 	andcs	r2, r0, ip, lsr #4

20000ab8 <makeFirstOpen>:
void makeFirstOpen(struct Player p)
{
20000ab8:	b580      	push	{r7, lr}
20000aba:	b084      	sub	sp, #16
20000abc:	af00      	add	r7, sp, #0
20000abe:	1d3b      	adds	r3, r7, #4
20000ac0:	6018      	str	r0, [r3, #0]
20000ac2:	6059      	str	r1, [r3, #4]
20000ac4:	609a      	str	r2, [r3, #8]
	placeBombs(p);
20000ac6:	1d3b      	adds	r3, r7, #4
20000ac8:	6818      	ldr	r0, [r3, #0]
20000aca:	6859      	ldr	r1, [r3, #4]
20000acc:	689a      	ldr	r2, [r3, #8]
20000ace:	f7ff ff69 	bl	200009a4 <placeBombs>
	openPos(p.x, p.y);
20000ad2:	1d3b      	adds	r3, r7, #4
20000ad4:	681a      	ldr	r2, [r3, #0]
20000ad6:	1d3b      	adds	r3, r7, #4
20000ad8:	685b      	ldr	r3, [r3, #4]
20000ada:	0019      	movs	r1, r3
20000adc:	0010      	movs	r0, r2
20000ade:	f000 f8e5 	bl	20000cac <openPos>
}
20000ae2:	46c0      	nop			; (mov r8, r8)
20000ae4:	46bd      	mov	sp, r7
20000ae6:	b004      	add	sp, #16
20000ae8:	bd80      	pop	{r7, pc}

20000aea <showBombs>:
void showBombs()
{
20000aea:	b580      	push	{r7, lr}
20000aec:	b082      	sub	sp, #8
20000aee:	af00      	add	r7, sp, #0
	for(int i = 0; i<sizeX; i++)
20000af0:	2300      	movs	r3, #0
20000af2:	607b      	str	r3, [r7, #4]
20000af4:	e026      	b.n	20000b44 <showBombs+0x5a>
		for(int j = 0; j < sizeY; j++)
20000af6:	2300      	movs	r3, #0
20000af8:	603b      	str	r3, [r7, #0]
20000afa:	e01d      	b.n	20000b38 <showBombs+0x4e>
			if(board[i][j].bomb)
20000afc:	4815      	ldr	r0, [pc, #84]	; (20000b54 <showBombs+0x6a>)
20000afe:	683b      	ldr	r3, [r7, #0]
20000b00:	6879      	ldr	r1, [r7, #4]
20000b02:	001a      	movs	r2, r3
20000b04:	0052      	lsls	r2, r2, #1
20000b06:	18d2      	adds	r2, r2, r3
20000b08:	00d3      	lsls	r3, r2, #3
20000b0a:	001a      	movs	r2, r3
20000b0c:	000b      	movs	r3, r1
20000b0e:	011b      	lsls	r3, r3, #4
20000b10:	1a5b      	subs	r3, r3, r1
20000b12:	00db      	lsls	r3, r3, #3
20000b14:	18d3      	adds	r3, r2, r3
20000b16:	18c3      	adds	r3, r0, r3
20000b18:	3310      	adds	r3, #16
20000b1a:	681b      	ldr	r3, [r3, #0]
20000b1c:	2b00      	cmp	r3, #0
20000b1e:	d008      	beq.n	20000b32 <showBombs+0x48>
				{
					gotoxy(startX + i, startY + j);
20000b20:	683a      	ldr	r2, [r7, #0]
20000b22:	687b      	ldr	r3, [r7, #4]
20000b24:	0011      	movs	r1, r2
20000b26:	0018      	movs	r0, r3
20000b28:	f000 fbe5 	bl	200012f6 <gotoxy>
					printToGD(bombCh);
20000b2c:	202a      	movs	r0, #42	; 0x2a
20000b2e:	f000 fbf5 	bl	2000131c <printToGD>
		for(int j = 0; j < sizeY; j++)
20000b32:	683b      	ldr	r3, [r7, #0]
20000b34:	3301      	adds	r3, #1
20000b36:	603b      	str	r3, [r7, #0]
20000b38:	683b      	ldr	r3, [r7, #0]
20000b3a:	2b04      	cmp	r3, #4
20000b3c:	ddde      	ble.n	20000afc <showBombs+0x12>
	for(int i = 0; i<sizeX; i++)
20000b3e:	687b      	ldr	r3, [r7, #4]
20000b40:	3301      	adds	r3, #1
20000b42:	607b      	str	r3, [r7, #4]
20000b44:	687b      	ldr	r3, [r7, #4]
20000b46:	2b0d      	cmp	r3, #13
20000b48:	ddd5      	ble.n	20000af6 <showBombs+0xc>
				}
}
20000b4a:	46c0      	nop			; (mov r8, r8)
20000b4c:	46c0      	nop			; (mov r8, r8)
20000b4e:	46bd      	mov	sp, r7
20000b50:	b002      	add	sp, #8
20000b52:	bd80      	pop	{r7, pc}
20000b54:	20001b7c 	andcs	r1, r0, ip, ror fp

20000b58 <placeFlag>:
void placeFlag(struct Player p)
{
20000b58:	b5b0      	push	{r4, r5, r7, lr}
20000b5a:	b086      	sub	sp, #24
20000b5c:	af02      	add	r7, sp, #8
20000b5e:	1d3b      	adds	r3, r7, #4
20000b60:	6018      	str	r0, [r3, #0]
20000b62:	6059      	str	r1, [r3, #4]
20000b64:	609a      	str	r2, [r3, #8]
	if(board[p.x][p.y].opened)
20000b66:	1d3b      	adds	r3, r7, #4
20000b68:	6819      	ldr	r1, [r3, #0]
20000b6a:	1d3b      	adds	r3, r7, #4
20000b6c:	685b      	ldr	r3, [r3, #4]
20000b6e:	4846      	ldr	r0, [pc, #280]	; (20000c88 <placeFlag+0x130>)
20000b70:	001a      	movs	r2, r3
20000b72:	0052      	lsls	r2, r2, #1
20000b74:	18d2      	adds	r2, r2, r3
20000b76:	00d3      	lsls	r3, r2, #3
20000b78:	001a      	movs	r2, r3
20000b7a:	000b      	movs	r3, r1
20000b7c:	011b      	lsls	r3, r3, #4
20000b7e:	1a5b      	subs	r3, r3, r1
20000b80:	00db      	lsls	r3, r3, #3
20000b82:	18d3      	adds	r3, r2, r3
20000b84:	18c3      	adds	r3, r0, r3
20000b86:	3314      	adds	r3, #20
20000b88:	681b      	ldr	r3, [r3, #0]
20000b8a:	2b00      	cmp	r3, #0
20000b8c:	d000      	beq.n	20000b90 <placeFlag+0x38>
20000b8e:	e076      	b.n	20000c7e <placeFlag+0x126>
		return;
	board[p.x][p.y].flagged = (board[p.x][p.y].flagged + 1) % 2;
20000b90:	1d3b      	adds	r3, r7, #4
20000b92:	6819      	ldr	r1, [r3, #0]
20000b94:	1d3b      	adds	r3, r7, #4
20000b96:	685b      	ldr	r3, [r3, #4]
20000b98:	483b      	ldr	r0, [pc, #236]	; (20000c88 <placeFlag+0x130>)
20000b9a:	001a      	movs	r2, r3
20000b9c:	0052      	lsls	r2, r2, #1
20000b9e:	18d2      	adds	r2, r2, r3
20000ba0:	00d3      	lsls	r3, r2, #3
20000ba2:	001a      	movs	r2, r3
20000ba4:	000b      	movs	r3, r1
20000ba6:	011b      	lsls	r3, r3, #4
20000ba8:	1a5b      	subs	r3, r3, r1
20000baa:	00db      	lsls	r3, r3, #3
20000bac:	18d3      	adds	r3, r2, r3
20000bae:	18c3      	adds	r3, r0, r3
20000bb0:	330c      	adds	r3, #12
20000bb2:	681b      	ldr	r3, [r3, #0]
20000bb4:	1c5a      	adds	r2, r3, #1
20000bb6:	1d3b      	adds	r3, r7, #4
20000bb8:	6819      	ldr	r1, [r3, #0]
20000bba:	1d3b      	adds	r3, r7, #4
20000bbc:	6858      	ldr	r0, [r3, #4]
20000bbe:	4b33      	ldr	r3, [pc, #204]	; (20000c8c <placeFlag+0x134>)
20000bc0:	4013      	ands	r3, r2
20000bc2:	d504      	bpl.n	20000bce <placeFlag+0x76>
20000bc4:	3b01      	subs	r3, #1
20000bc6:	2202      	movs	r2, #2
20000bc8:	4252      	negs	r2, r2
20000bca:	4313      	orrs	r3, r2
20000bcc:	3301      	adds	r3, #1
20000bce:	001d      	movs	r5, r3
20000bd0:	4c2d      	ldr	r4, [pc, #180]	; (20000c88 <placeFlag+0x130>)
20000bd2:	0002      	movs	r2, r0
20000bd4:	0052      	lsls	r2, r2, #1
20000bd6:	1812      	adds	r2, r2, r0
20000bd8:	00d3      	lsls	r3, r2, #3
20000bda:	001a      	movs	r2, r3
20000bdc:	000b      	movs	r3, r1
20000bde:	011b      	lsls	r3, r3, #4
20000be0:	1a5b      	subs	r3, r3, r1
20000be2:	00db      	lsls	r3, r3, #3
20000be4:	18d3      	adds	r3, r2, r3
20000be6:	18e3      	adds	r3, r4, r3
20000be8:	330c      	adds	r3, #12
20000bea:	601d      	str	r5, [r3, #0]
	p.placedFlaggs = board[p.x][p.y].flagged ? p.placedFlaggs + 1 : p.placedFlaggs -1;
20000bec:	1d3b      	adds	r3, r7, #4
20000bee:	6819      	ldr	r1, [r3, #0]
20000bf0:	1d3b      	adds	r3, r7, #4
20000bf2:	685b      	ldr	r3, [r3, #4]
20000bf4:	4824      	ldr	r0, [pc, #144]	; (20000c88 <placeFlag+0x130>)
20000bf6:	001a      	movs	r2, r3
20000bf8:	0052      	lsls	r2, r2, #1
20000bfa:	18d2      	adds	r2, r2, r3
20000bfc:	00d3      	lsls	r3, r2, #3
20000bfe:	001a      	movs	r2, r3
20000c00:	000b      	movs	r3, r1
20000c02:	011b      	lsls	r3, r3, #4
20000c04:	1a5b      	subs	r3, r3, r1
20000c06:	00db      	lsls	r3, r3, #3
20000c08:	18d3      	adds	r3, r2, r3
20000c0a:	18c3      	adds	r3, r0, r3
20000c0c:	330c      	adds	r3, #12
20000c0e:	681b      	ldr	r3, [r3, #0]
20000c10:	2b00      	cmp	r3, #0
20000c12:	d003      	beq.n	20000c1c <placeFlag+0xc4>
20000c14:	1d3b      	adds	r3, r7, #4
20000c16:	689b      	ldr	r3, [r3, #8]
20000c18:	1c5a      	adds	r2, r3, #1
20000c1a:	e002      	b.n	20000c22 <placeFlag+0xca>
20000c1c:	1d3b      	adds	r3, r7, #4
20000c1e:	689b      	ldr	r3, [r3, #8]
20000c20:	1e5a      	subs	r2, r3, #1
20000c22:	1d3b      	adds	r3, r7, #4
20000c24:	609a      	str	r2, [r3, #8]
	placed_flaggs = p.placedFlaggs == 1 ? placed_flaggs + 1 : placed_flaggs - 1;
20000c26:	1d3b      	adds	r3, r7, #4
20000c28:	689b      	ldr	r3, [r3, #8]
20000c2a:	2b01      	cmp	r3, #1
20000c2c:	d103      	bne.n	20000c36 <placeFlag+0xde>
20000c2e:	4b18      	ldr	r3, [pc, #96]	; (20000c90 <placeFlag+0x138>)
20000c30:	681b      	ldr	r3, [r3, #0]
20000c32:	1c5a      	adds	r2, r3, #1
20000c34:	e002      	b.n	20000c3c <placeFlag+0xe4>
20000c36:	4b16      	ldr	r3, [pc, #88]	; (20000c90 <placeFlag+0x138>)
20000c38:	681b      	ldr	r3, [r3, #0]
20000c3a:	1e5a      	subs	r2, r3, #1
20000c3c:	4b14      	ldr	r3, [pc, #80]	; (20000c90 <placeFlag+0x138>)
20000c3e:	601a      	str	r2, [r3, #0]
	drawPos(board[p.x][p.y]);
20000c40:	1d3b      	adds	r3, r7, #4
20000c42:	6819      	ldr	r1, [r3, #0]
20000c44:	1d3b      	adds	r3, r7, #4
20000c46:	685b      	ldr	r3, [r3, #4]
20000c48:	4c0f      	ldr	r4, [pc, #60]	; (20000c88 <placeFlag+0x130>)
20000c4a:	001a      	movs	r2, r3
20000c4c:	0052      	lsls	r2, r2, #1
20000c4e:	18d2      	adds	r2, r2, r3
20000c50:	00d3      	lsls	r3, r2, #3
20000c52:	001a      	movs	r2, r3
20000c54:	000b      	movs	r3, r1
20000c56:	011b      	lsls	r3, r3, #4
20000c58:	1a5b      	subs	r3, r3, r1
20000c5a:	00db      	lsls	r3, r3, #3
20000c5c:	18d3      	adds	r3, r2, r3
20000c5e:	2110      	movs	r1, #16
20000c60:	18e2      	adds	r2, r4, r3
20000c62:	1851      	adds	r1, r2, r1
20000c64:	466a      	mov	r2, sp
20000c66:	c921      	ldmia	r1!, {r0, r5}
20000c68:	c221      	stmia	r2!, {r0, r5}
20000c6a:	5918      	ldr	r0, [r3, r4]
20000c6c:	18e2      	adds	r2, r4, r3
20000c6e:	6851      	ldr	r1, [r2, #4]
20000c70:	18e2      	adds	r2, r4, r3
20000c72:	6892      	ldr	r2, [r2, #8]
20000c74:	18e3      	adds	r3, r4, r3
20000c76:	68db      	ldr	r3, [r3, #12]
20000c78:	f000 fa3e 	bl	200010f8 <drawPos>
20000c7c:	e000      	b.n	20000c80 <placeFlag+0x128>
		return;
20000c7e:	46c0      	nop			; (mov r8, r8)
}
20000c80:	46bd      	mov	sp, r7
20000c82:	b004      	add	sp, #16
20000c84:	bdb0      	pop	{r4, r5, r7, pc}
20000c86:	46c0      	nop			; (mov r8, r8)
20000c88:	20001b7c 	andcs	r1, r0, ip, ror fp
20000c8c:	80000001 	andhi	r0, r0, r1
20000c90:	20001b60 	andcs	r1, r0, r0, ror #22

20000c94 <gameOver>:
void gameOver()
{
20000c94:	b580      	push	{r7, lr}
20000c96:	af00      	add	r7, sp, #0
	showBombs();
20000c98:	f7ff ff27 	bl	20000aea <showBombs>
	gameover = 1;
20000c9c:	4b02      	ldr	r3, [pc, #8]	; (20000ca8 <gameOver+0x14>)
20000c9e:	2201      	movs	r2, #1
20000ca0:	601a      	str	r2, [r3, #0]
}
20000ca2:	46c0      	nop			; (mov r8, r8)
20000ca4:	46bd      	mov	sp, r7
20000ca6:	bd80      	pop	{r7, pc}
20000ca8:	20001b68 	andcs	r1, r0, r8, ror #22

20000cac <openPos>:

void openPos(int x, int y)
{
20000cac:	b5b0      	push	{r4, r5, r7, lr}
20000cae:	b08a      	sub	sp, #40	; 0x28
20000cb0:	af02      	add	r7, sp, #8
20000cb2:	6078      	str	r0, [r7, #4]
20000cb4:	6039      	str	r1, [r7, #0]
	if(board[x][y].flagged)
20000cb6:	4891      	ldr	r0, [pc, #580]	; (20000efc <openPos+0x250>)
20000cb8:	683b      	ldr	r3, [r7, #0]
20000cba:	6879      	ldr	r1, [r7, #4]
20000cbc:	001a      	movs	r2, r3
20000cbe:	0052      	lsls	r2, r2, #1
20000cc0:	18d2      	adds	r2, r2, r3
20000cc2:	00d3      	lsls	r3, r2, #3
20000cc4:	001a      	movs	r2, r3
20000cc6:	000b      	movs	r3, r1
20000cc8:	011b      	lsls	r3, r3, #4
20000cca:	1a5b      	subs	r3, r3, r1
20000ccc:	00db      	lsls	r3, r3, #3
20000cce:	18d3      	adds	r3, r2, r3
20000cd0:	18c3      	adds	r3, r0, r3
20000cd2:	330c      	adds	r3, #12
20000cd4:	681b      	ldr	r3, [r3, #0]
20000cd6:	2b00      	cmp	r3, #0
20000cd8:	d000      	beq.n	20000cdc <openPos+0x30>
20000cda:	e10b      	b.n	20000ef4 <openPos+0x248>
		return;
	
	if(board[x][y].opened && (countBombOrFlag(x,y, isBombPtr) == countBombOrFlag(x,y,isFlagPtr))) //open all connected positions
20000cdc:	4887      	ldr	r0, [pc, #540]	; (20000efc <openPos+0x250>)
20000cde:	683b      	ldr	r3, [r7, #0]
20000ce0:	6879      	ldr	r1, [r7, #4]
20000ce2:	001a      	movs	r2, r3
20000ce4:	0052      	lsls	r2, r2, #1
20000ce6:	18d2      	adds	r2, r2, r3
20000ce8:	00d3      	lsls	r3, r2, #3
20000cea:	001a      	movs	r2, r3
20000cec:	000b      	movs	r3, r1
20000cee:	011b      	lsls	r3, r3, #4
20000cf0:	1a5b      	subs	r3, r3, r1
20000cf2:	00db      	lsls	r3, r3, #3
20000cf4:	18d3      	adds	r3, r2, r3
20000cf6:	18c3      	adds	r3, r0, r3
20000cf8:	3314      	adds	r3, #20
20000cfa:	681b      	ldr	r3, [r3, #0]
20000cfc:	2b00      	cmp	r3, #0
20000cfe:	d056      	beq.n	20000dae <openPos+0x102>
20000d00:	4b7f      	ldr	r3, [pc, #508]	; (20000f00 <openPos+0x254>)
20000d02:	681a      	ldr	r2, [r3, #0]
20000d04:	6839      	ldr	r1, [r7, #0]
20000d06:	687b      	ldr	r3, [r7, #4]
20000d08:	0018      	movs	r0, r3
20000d0a:	f000 f8fd 	bl	20000f08 <countBombOrFlag>
20000d0e:	0004      	movs	r4, r0
20000d10:	4b7c      	ldr	r3, [pc, #496]	; (20000f04 <openPos+0x258>)
20000d12:	681a      	ldr	r2, [r3, #0]
20000d14:	6839      	ldr	r1, [r7, #0]
20000d16:	687b      	ldr	r3, [r7, #4]
20000d18:	0018      	movs	r0, r3
20000d1a:	f000 f8f5 	bl	20000f08 <countBombOrFlag>
20000d1e:	0003      	movs	r3, r0
20000d20:	429c      	cmp	r4, r3
20000d22:	d144      	bne.n	20000dae <openPos+0x102>
	{
		for(int i = -1; i<= 1; i++)
20000d24:	2301      	movs	r3, #1
20000d26:	425b      	negs	r3, r3
20000d28:	61fb      	str	r3, [r7, #28]
20000d2a:	e03c      	b.n	20000da6 <openPos+0xfa>
			for(int j = -1; j <= 1; j++)
20000d2c:	2301      	movs	r3, #1
20000d2e:	425b      	negs	r3, r3
20000d30:	61bb      	str	r3, [r7, #24]
20000d32:	e032      	b.n	20000d9a <openPos+0xee>
				if(board[x+i][y+j].opened == 0 && validPos(x+i, y+j) && !(i == 0 && j == 0))
20000d34:	687a      	ldr	r2, [r7, #4]
20000d36:	69fb      	ldr	r3, [r7, #28]
20000d38:	18d1      	adds	r1, r2, r3
20000d3a:	683a      	ldr	r2, [r7, #0]
20000d3c:	69bb      	ldr	r3, [r7, #24]
20000d3e:	18d3      	adds	r3, r2, r3
20000d40:	486e      	ldr	r0, [pc, #440]	; (20000efc <openPos+0x250>)
20000d42:	001a      	movs	r2, r3
20000d44:	0052      	lsls	r2, r2, #1
20000d46:	18d2      	adds	r2, r2, r3
20000d48:	00d3      	lsls	r3, r2, #3
20000d4a:	001a      	movs	r2, r3
20000d4c:	000b      	movs	r3, r1
20000d4e:	011b      	lsls	r3, r3, #4
20000d50:	1a5b      	subs	r3, r3, r1
20000d52:	00db      	lsls	r3, r3, #3
20000d54:	18d3      	adds	r3, r2, r3
20000d56:	18c3      	adds	r3, r0, r3
20000d58:	3314      	adds	r3, #20
20000d5a:	681b      	ldr	r3, [r3, #0]
20000d5c:	2b00      	cmp	r3, #0
20000d5e:	d119      	bne.n	20000d94 <openPos+0xe8>
20000d60:	687a      	ldr	r2, [r7, #4]
20000d62:	69fb      	ldr	r3, [r7, #28]
20000d64:	18d0      	adds	r0, r2, r3
20000d66:	683a      	ldr	r2, [r7, #0]
20000d68:	69bb      	ldr	r3, [r7, #24]
20000d6a:	18d3      	adds	r3, r2, r3
20000d6c:	0019      	movs	r1, r3
20000d6e:	f000 f9a9 	bl	200010c4 <validPos>
20000d72:	1e03      	subs	r3, r0, #0
20000d74:	d00e      	beq.n	20000d94 <openPos+0xe8>
20000d76:	69fb      	ldr	r3, [r7, #28]
20000d78:	2b00      	cmp	r3, #0
20000d7a:	d102      	bne.n	20000d82 <openPos+0xd6>
20000d7c:	69bb      	ldr	r3, [r7, #24]
20000d7e:	2b00      	cmp	r3, #0
20000d80:	d008      	beq.n	20000d94 <openPos+0xe8>
				{
					openPos(x+i, y+j);
20000d82:	687a      	ldr	r2, [r7, #4]
20000d84:	69fb      	ldr	r3, [r7, #28]
20000d86:	18d0      	adds	r0, r2, r3
20000d88:	683a      	ldr	r2, [r7, #0]
20000d8a:	69bb      	ldr	r3, [r7, #24]
20000d8c:	18d3      	adds	r3, r2, r3
20000d8e:	0019      	movs	r1, r3
20000d90:	f7ff ff8c 	bl	20000cac <openPos>
			for(int j = -1; j <= 1; j++)
20000d94:	69bb      	ldr	r3, [r7, #24]
20000d96:	3301      	adds	r3, #1
20000d98:	61bb      	str	r3, [r7, #24]
20000d9a:	69bb      	ldr	r3, [r7, #24]
20000d9c:	2b01      	cmp	r3, #1
20000d9e:	ddc9      	ble.n	20000d34 <openPos+0x88>
		for(int i = -1; i<= 1; i++)
20000da0:	69fb      	ldr	r3, [r7, #28]
20000da2:	3301      	adds	r3, #1
20000da4:	61fb      	str	r3, [r7, #28]
20000da6:	69fb      	ldr	r3, [r7, #28]
20000da8:	2b01      	cmp	r3, #1
20000daa:	ddbf      	ble.n	20000d2c <openPos+0x80>
				}
		return;
20000dac:	e0a3      	b.n	20000ef6 <openPos+0x24a>
	}
	int nBombs = countBombOrFlag(x, y,isBombPtr);
20000dae:	4b54      	ldr	r3, [pc, #336]	; (20000f00 <openPos+0x254>)
20000db0:	681a      	ldr	r2, [r3, #0]
20000db2:	6839      	ldr	r1, [r7, #0]
20000db4:	687b      	ldr	r3, [r7, #4]
20000db6:	0018      	movs	r0, r3
20000db8:	f000 f8a6 	bl	20000f08 <countBombOrFlag>
20000dbc:	0003      	movs	r3, r0
20000dbe:	60fb      	str	r3, [r7, #12]
	if(board[x][y].bomb)
20000dc0:	484e      	ldr	r0, [pc, #312]	; (20000efc <openPos+0x250>)
20000dc2:	683b      	ldr	r3, [r7, #0]
20000dc4:	6879      	ldr	r1, [r7, #4]
20000dc6:	001a      	movs	r2, r3
20000dc8:	0052      	lsls	r2, r2, #1
20000dca:	18d2      	adds	r2, r2, r3
20000dcc:	00d3      	lsls	r3, r2, #3
20000dce:	001a      	movs	r2, r3
20000dd0:	000b      	movs	r3, r1
20000dd2:	011b      	lsls	r3, r3, #4
20000dd4:	1a5b      	subs	r3, r3, r1
20000dd6:	00db      	lsls	r3, r3, #3
20000dd8:	18d3      	adds	r3, r2, r3
20000dda:	18c3      	adds	r3, r0, r3
20000ddc:	3310      	adds	r3, #16
20000dde:	681b      	ldr	r3, [r3, #0]
20000de0:	2b00      	cmp	r3, #0
20000de2:	d002      	beq.n	20000dea <openPos+0x13e>
	{
		gameOver();
20000de4:	f7ff ff56 	bl	20000c94 <gameOver>
		return;
20000de8:	e085      	b.n	20000ef6 <openPos+0x24a>
	}
	board[x][y].opened = 1;
20000dea:	4844      	ldr	r0, [pc, #272]	; (20000efc <openPos+0x250>)
20000dec:	683b      	ldr	r3, [r7, #0]
20000dee:	6879      	ldr	r1, [r7, #4]
20000df0:	001a      	movs	r2, r3
20000df2:	0052      	lsls	r2, r2, #1
20000df4:	18d2      	adds	r2, r2, r3
20000df6:	00d3      	lsls	r3, r2, #3
20000df8:	001a      	movs	r2, r3
20000dfa:	000b      	movs	r3, r1
20000dfc:	011b      	lsls	r3, r3, #4
20000dfe:	1a5b      	subs	r3, r3, r1
20000e00:	00db      	lsls	r3, r3, #3
20000e02:	18d3      	adds	r3, r2, r3
20000e04:	18c3      	adds	r3, r0, r3
20000e06:	3314      	adds	r3, #20
20000e08:	2201      	movs	r2, #1
20000e0a:	601a      	str	r2, [r3, #0]
	drawPos(board[x][y]);
20000e0c:	4c3b      	ldr	r4, [pc, #236]	; (20000efc <openPos+0x250>)
20000e0e:	683b      	ldr	r3, [r7, #0]
20000e10:	6879      	ldr	r1, [r7, #4]
20000e12:	001a      	movs	r2, r3
20000e14:	0052      	lsls	r2, r2, #1
20000e16:	18d2      	adds	r2, r2, r3
20000e18:	00d3      	lsls	r3, r2, #3
20000e1a:	001a      	movs	r2, r3
20000e1c:	000b      	movs	r3, r1
20000e1e:	011b      	lsls	r3, r3, #4
20000e20:	1a5b      	subs	r3, r3, r1
20000e22:	00db      	lsls	r3, r3, #3
20000e24:	18d3      	adds	r3, r2, r3
20000e26:	2110      	movs	r1, #16
20000e28:	18e2      	adds	r2, r4, r3
20000e2a:	1851      	adds	r1, r2, r1
20000e2c:	466a      	mov	r2, sp
20000e2e:	c921      	ldmia	r1!, {r0, r5}
20000e30:	c221      	stmia	r2!, {r0, r5}
20000e32:	5918      	ldr	r0, [r3, r4]
20000e34:	18e2      	adds	r2, r4, r3
20000e36:	6851      	ldr	r1, [r2, #4]
20000e38:	18e2      	adds	r2, r4, r3
20000e3a:	6892      	ldr	r2, [r2, #8]
20000e3c:	18e3      	adds	r3, r4, r3
20000e3e:	68db      	ldr	r3, [r3, #12]
20000e40:	f000 f95a 	bl	200010f8 <drawPos>
	if(nBombs == 0)
20000e44:	68fb      	ldr	r3, [r7, #12]
20000e46:	2b00      	cmp	r3, #0
20000e48:	d155      	bne.n	20000ef6 <openPos+0x24a>
		for(int i = -1; i <= 1; i++)
20000e4a:	2301      	movs	r3, #1
20000e4c:	425b      	negs	r3, r3
20000e4e:	617b      	str	r3, [r7, #20]
20000e50:	e04c      	b.n	20000eec <openPos+0x240>
			for(int j = -1; j <= 1; j++)
20000e52:	2301      	movs	r3, #1
20000e54:	425b      	negs	r3, r3
20000e56:	613b      	str	r3, [r7, #16]
20000e58:	e042      	b.n	20000ee0 <openPos+0x234>
				if(validPos(x+i, y+j) && board[x+i][y+j].opened == 0 && board[x+i][y+j].bomb == 0)
20000e5a:	687a      	ldr	r2, [r7, #4]
20000e5c:	697b      	ldr	r3, [r7, #20]
20000e5e:	18d0      	adds	r0, r2, r3
20000e60:	683a      	ldr	r2, [r7, #0]
20000e62:	693b      	ldr	r3, [r7, #16]
20000e64:	18d3      	adds	r3, r2, r3
20000e66:	0019      	movs	r1, r3
20000e68:	f000 f92c 	bl	200010c4 <validPos>
20000e6c:	1e03      	subs	r3, r0, #0
20000e6e:	d034      	beq.n	20000eda <openPos+0x22e>
20000e70:	687a      	ldr	r2, [r7, #4]
20000e72:	697b      	ldr	r3, [r7, #20]
20000e74:	18d1      	adds	r1, r2, r3
20000e76:	683a      	ldr	r2, [r7, #0]
20000e78:	693b      	ldr	r3, [r7, #16]
20000e7a:	18d3      	adds	r3, r2, r3
20000e7c:	481f      	ldr	r0, [pc, #124]	; (20000efc <openPos+0x250>)
20000e7e:	001a      	movs	r2, r3
20000e80:	0052      	lsls	r2, r2, #1
20000e82:	18d2      	adds	r2, r2, r3
20000e84:	00d3      	lsls	r3, r2, #3
20000e86:	001a      	movs	r2, r3
20000e88:	000b      	movs	r3, r1
20000e8a:	011b      	lsls	r3, r3, #4
20000e8c:	1a5b      	subs	r3, r3, r1
20000e8e:	00db      	lsls	r3, r3, #3
20000e90:	18d3      	adds	r3, r2, r3
20000e92:	18c3      	adds	r3, r0, r3
20000e94:	3314      	adds	r3, #20
20000e96:	681b      	ldr	r3, [r3, #0]
20000e98:	2b00      	cmp	r3, #0
20000e9a:	d11e      	bne.n	20000eda <openPos+0x22e>
20000e9c:	687a      	ldr	r2, [r7, #4]
20000e9e:	697b      	ldr	r3, [r7, #20]
20000ea0:	18d1      	adds	r1, r2, r3
20000ea2:	683a      	ldr	r2, [r7, #0]
20000ea4:	693b      	ldr	r3, [r7, #16]
20000ea6:	18d3      	adds	r3, r2, r3
20000ea8:	4814      	ldr	r0, [pc, #80]	; (20000efc <openPos+0x250>)
20000eaa:	001a      	movs	r2, r3
20000eac:	0052      	lsls	r2, r2, #1
20000eae:	18d2      	adds	r2, r2, r3
20000eb0:	00d3      	lsls	r3, r2, #3
20000eb2:	001a      	movs	r2, r3
20000eb4:	000b      	movs	r3, r1
20000eb6:	011b      	lsls	r3, r3, #4
20000eb8:	1a5b      	subs	r3, r3, r1
20000eba:	00db      	lsls	r3, r3, #3
20000ebc:	18d3      	adds	r3, r2, r3
20000ebe:	18c3      	adds	r3, r0, r3
20000ec0:	3310      	adds	r3, #16
20000ec2:	681b      	ldr	r3, [r3, #0]
20000ec4:	2b00      	cmp	r3, #0
20000ec6:	d108      	bne.n	20000eda <openPos+0x22e>
				{
					//Sleep(10);
					openPos(x+i, y+j);
20000ec8:	687a      	ldr	r2, [r7, #4]
20000eca:	697b      	ldr	r3, [r7, #20]
20000ecc:	18d0      	adds	r0, r2, r3
20000ece:	683a      	ldr	r2, [r7, #0]
20000ed0:	693b      	ldr	r3, [r7, #16]
20000ed2:	18d3      	adds	r3, r2, r3
20000ed4:	0019      	movs	r1, r3
20000ed6:	f7ff fee9 	bl	20000cac <openPos>
			for(int j = -1; j <= 1; j++)
20000eda:	693b      	ldr	r3, [r7, #16]
20000edc:	3301      	adds	r3, #1
20000ede:	613b      	str	r3, [r7, #16]
20000ee0:	693b      	ldr	r3, [r7, #16]
20000ee2:	2b01      	cmp	r3, #1
20000ee4:	ddb9      	ble.n	20000e5a <openPos+0x1ae>
		for(int i = -1; i <= 1; i++)
20000ee6:	697b      	ldr	r3, [r7, #20]
20000ee8:	3301      	adds	r3, #1
20000eea:	617b      	str	r3, [r7, #20]
20000eec:	697b      	ldr	r3, [r7, #20]
20000eee:	2b01      	cmp	r3, #1
20000ef0:	ddaf      	ble.n	20000e52 <openPos+0x1a6>
20000ef2:	e000      	b.n	20000ef6 <openPos+0x24a>
		return;
20000ef4:	46c0      	nop			; (mov r8, r8)
				}

}
20000ef6:	46bd      	mov	sp, r7
20000ef8:	b008      	add	sp, #32
20000efa:	bdb0      	pop	{r4, r5, r7, pc}
20000efc:	20001b7c 	andcs	r1, r0, ip, ror fp
20000f00:	2000222c 	andcs	r2, r0, ip, lsr #4
20000f04:	20001b78 	andcs	r1, r0, r8, ror fp

20000f08 <countBombOrFlag>:
int countBombOrFlag(int x, int y, int (*func)(struct Positions))
{
20000f08:	b5b0      	push	{r4, r5, r7, lr}
20000f0a:	b08a      	sub	sp, #40	; 0x28
20000f0c:	af02      	add	r7, sp, #8
20000f0e:	60f8      	str	r0, [r7, #12]
20000f10:	60b9      	str	r1, [r7, #8]
20000f12:	607a      	str	r2, [r7, #4]
	int found = 0;
20000f14:	2300      	movs	r3, #0
20000f16:	61fb      	str	r3, [r7, #28]
	for(int i = -1; i <= 1; i++)
20000f18:	2301      	movs	r3, #1
20000f1a:	425b      	negs	r3, r3
20000f1c:	61bb      	str	r3, [r7, #24]
20000f1e:	e043      	b.n	20000fa8 <countBombOrFlag+0xa0>
		for(int j = -1; j <= 1; j++)
20000f20:	2301      	movs	r3, #1
20000f22:	425b      	negs	r3, r3
20000f24:	617b      	str	r3, [r7, #20]
20000f26:	e039      	b.n	20000f9c <countBombOrFlag+0x94>
			if(validPos(x+i, y+j))
20000f28:	68fa      	ldr	r2, [r7, #12]
20000f2a:	69bb      	ldr	r3, [r7, #24]
20000f2c:	18d0      	adds	r0, r2, r3
20000f2e:	68ba      	ldr	r2, [r7, #8]
20000f30:	697b      	ldr	r3, [r7, #20]
20000f32:	18d3      	adds	r3, r2, r3
20000f34:	0019      	movs	r1, r3
20000f36:	f000 f8c5 	bl	200010c4 <validPos>
20000f3a:	1e03      	subs	r3, r0, #0
20000f3c:	d02b      	beq.n	20000f96 <countBombOrFlag+0x8e>
				if(func(board[x+i][y+j]) == 1 && !(i == 0 && j == 0))
20000f3e:	68fa      	ldr	r2, [r7, #12]
20000f40:	69bb      	ldr	r3, [r7, #24]
20000f42:	18d1      	adds	r1, r2, r3
20000f44:	68ba      	ldr	r2, [r7, #8]
20000f46:	697b      	ldr	r3, [r7, #20]
20000f48:	18d3      	adds	r3, r2, r3
20000f4a:	4c1b      	ldr	r4, [pc, #108]	; (20000fb8 <countBombOrFlag+0xb0>)
20000f4c:	001a      	movs	r2, r3
20000f4e:	0052      	lsls	r2, r2, #1
20000f50:	18d2      	adds	r2, r2, r3
20000f52:	00d3      	lsls	r3, r2, #3
20000f54:	001a      	movs	r2, r3
20000f56:	000b      	movs	r3, r1
20000f58:	011b      	lsls	r3, r3, #4
20000f5a:	1a5b      	subs	r3, r3, r1
20000f5c:	00db      	lsls	r3, r3, #3
20000f5e:	18d3      	adds	r3, r2, r3
20000f60:	2110      	movs	r1, #16
20000f62:	18e2      	adds	r2, r4, r3
20000f64:	1851      	adds	r1, r2, r1
20000f66:	466a      	mov	r2, sp
20000f68:	c921      	ldmia	r1!, {r0, r5}
20000f6a:	c221      	stmia	r2!, {r0, r5}
20000f6c:	5918      	ldr	r0, [r3, r4]
20000f6e:	18e2      	adds	r2, r4, r3
20000f70:	6851      	ldr	r1, [r2, #4]
20000f72:	18e2      	adds	r2, r4, r3
20000f74:	6892      	ldr	r2, [r2, #8]
20000f76:	18e3      	adds	r3, r4, r3
20000f78:	68db      	ldr	r3, [r3, #12]
20000f7a:	687c      	ldr	r4, [r7, #4]
20000f7c:	47a0      	blx	r4
20000f7e:	0003      	movs	r3, r0
20000f80:	2b01      	cmp	r3, #1
20000f82:	d108      	bne.n	20000f96 <countBombOrFlag+0x8e>
20000f84:	69bb      	ldr	r3, [r7, #24]
20000f86:	2b00      	cmp	r3, #0
20000f88:	d102      	bne.n	20000f90 <countBombOrFlag+0x88>
20000f8a:	697b      	ldr	r3, [r7, #20]
20000f8c:	2b00      	cmp	r3, #0
20000f8e:	d002      	beq.n	20000f96 <countBombOrFlag+0x8e>
					found++;
20000f90:	69fb      	ldr	r3, [r7, #28]
20000f92:	3301      	adds	r3, #1
20000f94:	61fb      	str	r3, [r7, #28]
		for(int j = -1; j <= 1; j++)
20000f96:	697b      	ldr	r3, [r7, #20]
20000f98:	3301      	adds	r3, #1
20000f9a:	617b      	str	r3, [r7, #20]
20000f9c:	697b      	ldr	r3, [r7, #20]
20000f9e:	2b01      	cmp	r3, #1
20000fa0:	ddc2      	ble.n	20000f28 <countBombOrFlag+0x20>
	for(int i = -1; i <= 1; i++)
20000fa2:	69bb      	ldr	r3, [r7, #24]
20000fa4:	3301      	adds	r3, #1
20000fa6:	61bb      	str	r3, [r7, #24]
20000fa8:	69bb      	ldr	r3, [r7, #24]
20000faa:	2b01      	cmp	r3, #1
20000fac:	ddb8      	ble.n	20000f20 <countBombOrFlag+0x18>
	return found;
20000fae:	69fb      	ldr	r3, [r7, #28]
}
20000fb0:	0018      	movs	r0, r3
20000fb2:	46bd      	mov	sp, r7
20000fb4:	b008      	add	sp, #32
20000fb6:	bdb0      	pop	{r4, r5, r7, pc}
20000fb8:	20001b7c 	andcs	r1, r0, ip, ror fp

20000fbc <isBomb>:
int isBomb(struct Positions pos)
{
20000fbc:	b084      	sub	sp, #16
20000fbe:	b5b0      	push	{r4, r5, r7, lr}
20000fc0:	af00      	add	r7, sp, #0
20000fc2:	250c      	movs	r5, #12
20000fc4:	1d3c      	adds	r4, r7, #4
20000fc6:	1964      	adds	r4, r4, r5
20000fc8:	6020      	str	r0, [r4, #0]
20000fca:	6061      	str	r1, [r4, #4]
20000fcc:	60a2      	str	r2, [r4, #8]
20000fce:	60e3      	str	r3, [r4, #12]
	return pos.bomb;
20000fd0:	1d3b      	adds	r3, r7, #4
20000fd2:	195b      	adds	r3, r3, r5
20000fd4:	691b      	ldr	r3, [r3, #16]
}
20000fd6:	0018      	movs	r0, r3
20000fd8:	46bd      	mov	sp, r7
20000fda:	bcb0      	pop	{r4, r5, r7}
20000fdc:	bc08      	pop	{r3}
20000fde:	b004      	add	sp, #16
20000fe0:	4718      	bx	r3

20000fe2 <isFlag>:
int isFlag(struct Positions pos)
{
20000fe2:	b084      	sub	sp, #16
20000fe4:	b5b0      	push	{r4, r5, r7, lr}
20000fe6:	af00      	add	r7, sp, #0
20000fe8:	250c      	movs	r5, #12
20000fea:	1d3c      	adds	r4, r7, #4
20000fec:	1964      	adds	r4, r4, r5
20000fee:	6020      	str	r0, [r4, #0]
20000ff0:	6061      	str	r1, [r4, #4]
20000ff2:	60a2      	str	r2, [r4, #8]
20000ff4:	60e3      	str	r3, [r4, #12]
	return pos.flagged;
20000ff6:	1d3b      	adds	r3, r7, #4
20000ff8:	195b      	adds	r3, r3, r5
20000ffa:	68db      	ldr	r3, [r3, #12]
}
20000ffc:	0018      	movs	r0, r3
20000ffe:	46bd      	mov	sp, r7
20001000:	bcb0      	pop	{r4, r5, r7}
20001002:	bc08      	pop	{r3}
20001004:	b004      	add	sp, #16
20001006:	4718      	bx	r3

20001008 <movePlayer>:


struct Player movePlayer(struct Player p, char moveCh)
{
20001008:	b5b0      	push	{r4, r5, r7, lr}
2000100a:	b08a      	sub	sp, #40	; 0x28
2000100c:	af02      	add	r7, sp, #8
2000100e:	60f8      	str	r0, [r7, #12]
20001010:	0038      	movs	r0, r7
20001012:	6001      	str	r1, [r0, #0]
20001014:	6042      	str	r2, [r0, #4]
20001016:	6083      	str	r3, [r0, #8]
	
	drawPos(board[p.x][p.y]);
20001018:	003b      	movs	r3, r7
2000101a:	6819      	ldr	r1, [r3, #0]
2000101c:	003b      	movs	r3, r7
2000101e:	685b      	ldr	r3, [r3, #4]
20001020:	4c27      	ldr	r4, [pc, #156]	; (200010c0 <movePlayer+0xb8>)
20001022:	001a      	movs	r2, r3
20001024:	0052      	lsls	r2, r2, #1
20001026:	18d2      	adds	r2, r2, r3
20001028:	00d3      	lsls	r3, r2, #3
2000102a:	001a      	movs	r2, r3
2000102c:	000b      	movs	r3, r1
2000102e:	011b      	lsls	r3, r3, #4
20001030:	1a5b      	subs	r3, r3, r1
20001032:	00db      	lsls	r3, r3, #3
20001034:	18d3      	adds	r3, r2, r3
20001036:	2110      	movs	r1, #16
20001038:	18e2      	adds	r2, r4, r3
2000103a:	1851      	adds	r1, r2, r1
2000103c:	466a      	mov	r2, sp
2000103e:	c921      	ldmia	r1!, {r0, r5}
20001040:	c221      	stmia	r2!, {r0, r5}
20001042:	5918      	ldr	r0, [r3, r4]
20001044:	18e2      	adds	r2, r4, r3
20001046:	6851      	ldr	r1, [r2, #4]
20001048:	18e2      	adds	r2, r4, r3
2000104a:	6892      	ldr	r2, [r2, #8]
2000104c:	18e3      	adds	r3, r4, r3
2000104e:	68db      	ldr	r3, [r3, #12]
20001050:	f000 f852 	bl	200010f8 <drawPos>
	int *newXY;
	newXY = getNewXYFromCh(moveCh);
20001054:	2330      	movs	r3, #48	; 0x30
20001056:	18fb      	adds	r3, r7, r3
20001058:	781b      	ldrb	r3, [r3, #0]
2000105a:	0018      	movs	r0, r3
2000105c:	f000 f88c 	bl	20001178 <getNewXYFromCh>
20001060:	0003      	movs	r3, r0
20001062:	61fb      	str	r3, [r7, #28]
	//TODO:
	//check if valid move
	int nextX = p.x + *newXY;
20001064:	003b      	movs	r3, r7
20001066:	681a      	ldr	r2, [r3, #0]
20001068:	69fb      	ldr	r3, [r7, #28]
2000106a:	681b      	ldr	r3, [r3, #0]
2000106c:	18d3      	adds	r3, r2, r3
2000106e:	61bb      	str	r3, [r7, #24]
	int nextY = p.y + *(newXY +1);
20001070:	003b      	movs	r3, r7
20001072:	685a      	ldr	r2, [r3, #4]
20001074:	69fb      	ldr	r3, [r7, #28]
20001076:	3304      	adds	r3, #4
20001078:	681b      	ldr	r3, [r3, #0]
2000107a:	18d3      	adds	r3, r2, r3
2000107c:	617b      	str	r3, [r7, #20]
	if(validPos(nextX, nextY))
2000107e:	697a      	ldr	r2, [r7, #20]
20001080:	69bb      	ldr	r3, [r7, #24]
20001082:	0011      	movs	r1, r2
20001084:	0018      	movs	r0, r3
20001086:	f000 f81d 	bl	200010c4 <validPos>
2000108a:	1e03      	subs	r3, r0, #0
2000108c:	d005      	beq.n	2000109a <movePlayer+0x92>
	{
		p.x = nextX;
2000108e:	003b      	movs	r3, r7
20001090:	69ba      	ldr	r2, [r7, #24]
20001092:	601a      	str	r2, [r3, #0]
		p.y = nextY;
20001094:	003b      	movs	r3, r7
20001096:	697a      	ldr	r2, [r7, #20]
20001098:	605a      	str	r2, [r3, #4]
	}
	gotoxy(startX + p.x, startY + p.y);
2000109a:	003b      	movs	r3, r7
2000109c:	681a      	ldr	r2, [r3, #0]
2000109e:	003b      	movs	r3, r7
200010a0:	685b      	ldr	r3, [r3, #4]
200010a2:	0019      	movs	r1, r3
200010a4:	0010      	movs	r0, r2
200010a6:	f000 f926 	bl	200012f6 <gotoxy>
	printToGD(playerCh);
200010aa:	2024      	movs	r0, #36	; 0x24
200010ac:	f000 f936 	bl	2000131c <printToGD>
	return p;
200010b0:	68fb      	ldr	r3, [r7, #12]
200010b2:	003a      	movs	r2, r7
200010b4:	ca13      	ldmia	r2!, {r0, r1, r4}
200010b6:	c313      	stmia	r3!, {r0, r1, r4}
}
200010b8:	68f8      	ldr	r0, [r7, #12]
200010ba:	46bd      	mov	sp, r7
200010bc:	b008      	add	sp, #32
200010be:	bdb0      	pop	{r4, r5, r7, pc}
200010c0:	20001b7c 	andcs	r1, r0, ip, ror fp

200010c4 <validPos>:

int validPos(int x, int y)
{
200010c4:	b580      	push	{r7, lr}
200010c6:	b082      	sub	sp, #8
200010c8:	af00      	add	r7, sp, #0
200010ca:	6078      	str	r0, [r7, #4]
200010cc:	6039      	str	r1, [r7, #0]
	if(x < 0 || x >= sizeX)
200010ce:	687b      	ldr	r3, [r7, #4]
200010d0:	2b00      	cmp	r3, #0
200010d2:	db02      	blt.n	200010da <validPos+0x16>
200010d4:	687b      	ldr	r3, [r7, #4]
200010d6:	2b0d      	cmp	r3, #13
200010d8:	dd01      	ble.n	200010de <validPos+0x1a>
		return 0;
200010da:	2300      	movs	r3, #0
200010dc:	e008      	b.n	200010f0 <validPos+0x2c>
	else if(y < 0 || y >= sizeY)
200010de:	683b      	ldr	r3, [r7, #0]
200010e0:	2b00      	cmp	r3, #0
200010e2:	db02      	blt.n	200010ea <validPos+0x26>
200010e4:	683b      	ldr	r3, [r7, #0]
200010e6:	2b04      	cmp	r3, #4
200010e8:	dd01      	ble.n	200010ee <validPos+0x2a>
		return 0;
200010ea:	2300      	movs	r3, #0
200010ec:	e000      	b.n	200010f0 <validPos+0x2c>
	else
		return 1;
200010ee:	2301      	movs	r3, #1
}
200010f0:	0018      	movs	r0, r3
200010f2:	46bd      	mov	sp, r7
200010f4:	b002      	add	sp, #8
200010f6:	bd80      	pop	{r7, pc}

200010f8 <drawPos>:
void drawPos(struct Positions p)
{
200010f8:	b084      	sub	sp, #16
200010fa:	b5b0      	push	{r4, r5, r7, lr}
200010fc:	b084      	sub	sp, #16
200010fe:	af00      	add	r7, sp, #0
20001100:	2520      	movs	r5, #32
20001102:	197c      	adds	r4, r7, r5
20001104:	6020      	str	r0, [r4, #0]
20001106:	6061      	str	r1, [r4, #4]
20001108:	60a2      	str	r2, [r4, #8]
2000110a:	60e3      	str	r3, [r4, #12]
	gotoxy(startX + p.x, startY + p.y);
2000110c:	002c      	movs	r4, r5
2000110e:	193b      	adds	r3, r7, r4
20001110:	681a      	ldr	r2, [r3, #0]
20001112:	193b      	adds	r3, r7, r4
20001114:	685b      	ldr	r3, [r3, #4]
20001116:	0019      	movs	r1, r3
20001118:	0010      	movs	r0, r2
2000111a:	f000 f8ec 	bl	200012f6 <gotoxy>
	if(p.opened)
2000111e:	0021      	movs	r1, r4
20001120:	187b      	adds	r3, r7, r1
20001122:	695b      	ldr	r3, [r3, #20]
20001124:	2b00      	cmp	r3, #0
20001126:	d00d      	beq.n	20001144 <drawPos+0x4c>
	{
		char chs[] = {'0','1','2','3','4','5','6','7','8','9'};
20001128:	1d3b      	adds	r3, r7, #4
2000112a:	4a11      	ldr	r2, [pc, #68]	; (20001170 <drawPos+0x78>)
2000112c:	ca11      	ldmia	r2!, {r0, r4}
2000112e:	c311      	stmia	r3!, {r0, r4}
20001130:	8812      	ldrh	r2, [r2, #0]
20001132:	801a      	strh	r2, [r3, #0]
		printToGD(chs[p.numberOfBombs]);
20001134:	187b      	adds	r3, r7, r1
20001136:	689b      	ldr	r3, [r3, #8]
20001138:	1d3a      	adds	r2, r7, #4
2000113a:	5cd3      	ldrb	r3, [r2, r3]
2000113c:	0018      	movs	r0, r3
2000113e:	f000 f8ed 	bl	2000131c <printToGD>
		printToGD(flagCh);
	}
	else
		printToGD(" ");
		
}
20001142:	e00d      	b.n	20001160 <drawPos+0x68>
	else if(p.flagged)
20001144:	2320      	movs	r3, #32
20001146:	18fb      	adds	r3, r7, r3
20001148:	68db      	ldr	r3, [r3, #12]
2000114a:	2b00      	cmp	r3, #0
2000114c:	d003      	beq.n	20001156 <drawPos+0x5e>
		printToGD(flagCh);
2000114e:	205e      	movs	r0, #94	; 0x5e
20001150:	f000 f8e4 	bl	2000131c <printToGD>
}
20001154:	e004      	b.n	20001160 <drawPos+0x68>
		printToGD(" ");
20001156:	4b07      	ldr	r3, [pc, #28]	; (20001174 <drawPos+0x7c>)
20001158:	b2db      	uxtb	r3, r3
2000115a:	0018      	movs	r0, r3
2000115c:	f000 f8de 	bl	2000131c <printToGD>
}
20001160:	46c0      	nop			; (mov r8, r8)
20001162:	46bd      	mov	sp, r7
20001164:	b004      	add	sp, #16
20001166:	bcb0      	pop	{r4, r5, r7}
20001168:	bc08      	pop	{r3}
2000116a:	b004      	add	sp, #16
2000116c:	4718      	bx	r3
2000116e:	46c0      	nop			; (mov r8, r8)
20001170:	20002620 	andcs	r2, r0, r0, lsr #12
20001174:	2000261c 	andcs	r2, r0, ip, lsl r6

20001178 <getNewXYFromCh>:
int * getNewXYFromCh(char ch)
{
20001178:	b580      	push	{r7, lr}
2000117a:	b082      	sub	sp, #8
2000117c:	af00      	add	r7, sp, #0
2000117e:	0002      	movs	r2, r0
20001180:	1dfb      	adds	r3, r7, #7
20001182:	701a      	strb	r2, [r3, #0]
	ch = tolower(ch);
20001184:	1dfb      	adds	r3, r7, #7
20001186:	781b      	ldrb	r3, [r3, #0]
20001188:	0018      	movs	r0, r3
2000118a:	f000 fcd3 	bl	20001b34 <tolower>
2000118e:	0002      	movs	r2, r0
20001190:	1dfb      	adds	r3, r7, #7
20001192:	701a      	strb	r2, [r3, #0]
	static int r[2];
	switch(ch)
20001194:	1dfb      	adds	r3, r7, #7
20001196:	781b      	ldrb	r3, [r3, #0]
20001198:	2b08      	cmp	r3, #8
2000119a:	d010      	beq.n	200011be <getNewXYFromCh+0x46>
2000119c:	dc25      	bgt.n	200011ea <getNewXYFromCh+0x72>
2000119e:	2b06      	cmp	r3, #6
200011a0:	d01c      	beq.n	200011dc <getNewXYFromCh+0x64>
200011a2:	dc22      	bgt.n	200011ea <getNewXYFromCh+0x72>
200011a4:	2b02      	cmp	r3, #2
200011a6:	d002      	beq.n	200011ae <getNewXYFromCh+0x36>
200011a8:	2b04      	cmp	r3, #4
200011aa:	d00f      	beq.n	200011cc <getNewXYFromCh+0x54>
200011ac:	e01d      	b.n	200011ea <getNewXYFromCh+0x72>
	{
		case 0x2:
		 r[0] = 0;
200011ae:	4b11      	ldr	r3, [pc, #68]	; (200011f4 <getNewXYFromCh+0x7c>)
200011b0:	2200      	movs	r2, #0
200011b2:	601a      	str	r2, [r3, #0]
		 r[1] = -1;
200011b4:	4b0f      	ldr	r3, [pc, #60]	; (200011f4 <getNewXYFromCh+0x7c>)
200011b6:	2201      	movs	r2, #1
200011b8:	4252      	negs	r2, r2
200011ba:	605a      	str	r2, [r3, #4]
		 break;
200011bc:	e015      	b.n	200011ea <getNewXYFromCh+0x72>
		case 0x8:
		 r[0] = 0;
200011be:	4b0d      	ldr	r3, [pc, #52]	; (200011f4 <getNewXYFromCh+0x7c>)
200011c0:	2200      	movs	r2, #0
200011c2:	601a      	str	r2, [r3, #0]
		 r[1] = 1;
200011c4:	4b0b      	ldr	r3, [pc, #44]	; (200011f4 <getNewXYFromCh+0x7c>)
200011c6:	2201      	movs	r2, #1
200011c8:	605a      	str	r2, [r3, #4]
		 break;
200011ca:	e00e      	b.n	200011ea <getNewXYFromCh+0x72>
		case 0x4:
		 r[0] = -1;
200011cc:	4b09      	ldr	r3, [pc, #36]	; (200011f4 <getNewXYFromCh+0x7c>)
200011ce:	2201      	movs	r2, #1
200011d0:	4252      	negs	r2, r2
200011d2:	601a      	str	r2, [r3, #0]
		 r[1] = 0;
200011d4:	4b07      	ldr	r3, [pc, #28]	; (200011f4 <getNewXYFromCh+0x7c>)
200011d6:	2200      	movs	r2, #0
200011d8:	605a      	str	r2, [r3, #4]
		 break;
200011da:	e006      	b.n	200011ea <getNewXYFromCh+0x72>
		case 0x6:
		 r[0] = 1;
200011dc:	4b05      	ldr	r3, [pc, #20]	; (200011f4 <getNewXYFromCh+0x7c>)
200011de:	2201      	movs	r2, #1
200011e0:	601a      	str	r2, [r3, #0]
		 r[1] = 0;
200011e2:	4b04      	ldr	r3, [pc, #16]	; (200011f4 <getNewXYFromCh+0x7c>)
200011e4:	2200      	movs	r2, #0
200011e6:	605a      	str	r2, [r3, #4]
		 break;
200011e8:	46c0      	nop			; (mov r8, r8)
	}
	return r;
200011ea:	4b02      	ldr	r3, [pc, #8]	; (200011f4 <getNewXYFromCh+0x7c>)
}
200011ec:	0018      	movs	r0, r3
200011ee:	46bd      	mov	sp, r7
200011f0:	b002      	add	sp, #8
200011f2:	bd80      	pop	{r7, pc}
200011f4:	20001b70 	andcs	r1, r0, r0, ror fp

200011f8 <createBoard>:

void createBoard(struct Positions b[sizeX][sizeY])
{
200011f8:	b580      	push	{r7, lr}
200011fa:	b084      	sub	sp, #16
200011fc:	af00      	add	r7, sp, #0
200011fe:	6078      	str	r0, [r7, #4]
	for(int x = 0; x < sizeX; x++)
20001200:	2300      	movs	r3, #0
20001202:	60fb      	str	r3, [r7, #12]
20001204:	e06f      	b.n	200012e6 <createBoard+0xee>
	{
		for(int y = 0; y < sizeY; y++) 
20001206:	2300      	movs	r3, #0
20001208:	60bb      	str	r3, [r7, #8]
2000120a:	e066      	b.n	200012da <createBoard+0xe2>
		{
			b[x][y].x = x;
2000120c:	68fa      	ldr	r2, [r7, #12]
2000120e:	0013      	movs	r3, r2
20001210:	011b      	lsls	r3, r3, #4
20001212:	1a9b      	subs	r3, r3, r2
20001214:	00db      	lsls	r3, r3, #3
20001216:	001a      	movs	r2, r3
20001218:	687b      	ldr	r3, [r7, #4]
2000121a:	1899      	adds	r1, r3, r2
2000121c:	68ba      	ldr	r2, [r7, #8]
2000121e:	0013      	movs	r3, r2
20001220:	005b      	lsls	r3, r3, #1
20001222:	189b      	adds	r3, r3, r2
20001224:	00db      	lsls	r3, r3, #3
20001226:	68fa      	ldr	r2, [r7, #12]
20001228:	505a      	str	r2, [r3, r1]
			b[x][y].y = y;
2000122a:	68fa      	ldr	r2, [r7, #12]
2000122c:	0013      	movs	r3, r2
2000122e:	011b      	lsls	r3, r3, #4
20001230:	1a9b      	subs	r3, r3, r2
20001232:	00db      	lsls	r3, r3, #3
20001234:	001a      	movs	r2, r3
20001236:	687b      	ldr	r3, [r7, #4]
20001238:	1899      	adds	r1, r3, r2
2000123a:	68ba      	ldr	r2, [r7, #8]
2000123c:	0013      	movs	r3, r2
2000123e:	005b      	lsls	r3, r3, #1
20001240:	189b      	adds	r3, r3, r2
20001242:	00db      	lsls	r3, r3, #3
20001244:	18cb      	adds	r3, r1, r3
20001246:	3304      	adds	r3, #4
20001248:	68ba      	ldr	r2, [r7, #8]
2000124a:	601a      	str	r2, [r3, #0]
			b[x][y].numberOfBombs =  0;
2000124c:	68fa      	ldr	r2, [r7, #12]
2000124e:	0013      	movs	r3, r2
20001250:	011b      	lsls	r3, r3, #4
20001252:	1a9b      	subs	r3, r3, r2
20001254:	00db      	lsls	r3, r3, #3
20001256:	001a      	movs	r2, r3
20001258:	687b      	ldr	r3, [r7, #4]
2000125a:	1899      	adds	r1, r3, r2
2000125c:	68ba      	ldr	r2, [r7, #8]
2000125e:	0013      	movs	r3, r2
20001260:	005b      	lsls	r3, r3, #1
20001262:	189b      	adds	r3, r3, r2
20001264:	00db      	lsls	r3, r3, #3
20001266:	18cb      	adds	r3, r1, r3
20001268:	3308      	adds	r3, #8
2000126a:	2200      	movs	r2, #0
2000126c:	601a      	str	r2, [r3, #0]
			b[x][y].flagged = 0;
2000126e:	68fa      	ldr	r2, [r7, #12]
20001270:	0013      	movs	r3, r2
20001272:	011b      	lsls	r3, r3, #4
20001274:	1a9b      	subs	r3, r3, r2
20001276:	00db      	lsls	r3, r3, #3
20001278:	001a      	movs	r2, r3
2000127a:	687b      	ldr	r3, [r7, #4]
2000127c:	1899      	adds	r1, r3, r2
2000127e:	68ba      	ldr	r2, [r7, #8]
20001280:	0013      	movs	r3, r2
20001282:	005b      	lsls	r3, r3, #1
20001284:	189b      	adds	r3, r3, r2
20001286:	00db      	lsls	r3, r3, #3
20001288:	18cb      	adds	r3, r1, r3
2000128a:	330c      	adds	r3, #12
2000128c:	2200      	movs	r2, #0
2000128e:	601a      	str	r2, [r3, #0]
			b[x][y].opened = 0;
20001290:	68fa      	ldr	r2, [r7, #12]
20001292:	0013      	movs	r3, r2
20001294:	011b      	lsls	r3, r3, #4
20001296:	1a9b      	subs	r3, r3, r2
20001298:	00db      	lsls	r3, r3, #3
2000129a:	001a      	movs	r2, r3
2000129c:	687b      	ldr	r3, [r7, #4]
2000129e:	1899      	adds	r1, r3, r2
200012a0:	68ba      	ldr	r2, [r7, #8]
200012a2:	0013      	movs	r3, r2
200012a4:	005b      	lsls	r3, r3, #1
200012a6:	189b      	adds	r3, r3, r2
200012a8:	00db      	lsls	r3, r3, #3
200012aa:	18cb      	adds	r3, r1, r3
200012ac:	3314      	adds	r3, #20
200012ae:	2200      	movs	r2, #0
200012b0:	601a      	str	r2, [r3, #0]
			b[x][y].bomb = 0;
200012b2:	68fa      	ldr	r2, [r7, #12]
200012b4:	0013      	movs	r3, r2
200012b6:	011b      	lsls	r3, r3, #4
200012b8:	1a9b      	subs	r3, r3, r2
200012ba:	00db      	lsls	r3, r3, #3
200012bc:	001a      	movs	r2, r3
200012be:	687b      	ldr	r3, [r7, #4]
200012c0:	1899      	adds	r1, r3, r2
200012c2:	68ba      	ldr	r2, [r7, #8]
200012c4:	0013      	movs	r3, r2
200012c6:	005b      	lsls	r3, r3, #1
200012c8:	189b      	adds	r3, r3, r2
200012ca:	00db      	lsls	r3, r3, #3
200012cc:	18cb      	adds	r3, r1, r3
200012ce:	3310      	adds	r3, #16
200012d0:	2200      	movs	r2, #0
200012d2:	601a      	str	r2, [r3, #0]
		for(int y = 0; y < sizeY; y++) 
200012d4:	68bb      	ldr	r3, [r7, #8]
200012d6:	3301      	adds	r3, #1
200012d8:	60bb      	str	r3, [r7, #8]
200012da:	68bb      	ldr	r3, [r7, #8]
200012dc:	2b04      	cmp	r3, #4
200012de:	dd95      	ble.n	2000120c <createBoard+0x14>
	for(int x = 0; x < sizeX; x++)
200012e0:	68fb      	ldr	r3, [r7, #12]
200012e2:	3301      	adds	r3, #1
200012e4:	60fb      	str	r3, [r7, #12]
200012e6:	68fb      	ldr	r3, [r7, #12]
200012e8:	2b0d      	cmp	r3, #13
200012ea:	dd8c      	ble.n	20001206 <createBoard+0xe>
		} 
	}
}
200012ec:	46c0      	nop			; (mov r8, r8)
200012ee:	46c0      	nop			; (mov r8, r8)
200012f0:	46bd      	mov	sp, r7
200012f2:	b004      	add	sp, #16
200012f4:	bd80      	pop	{r7, pc}

200012f6 <gotoxy>:


void gotoxy(int x, int y)
{
200012f6:	b580      	push	{r7, lr}
200012f8:	b082      	sub	sp, #8
200012fa:	af00      	add	r7, sp, #0
200012fc:	6078      	str	r0, [r7, #4]
200012fe:	6039      	str	r1, [r7, #0]
  currX = x;
20001300:	4b04      	ldr	r3, [pc, #16]	; (20001314 <gotoxy+0x1e>)
20001302:	687a      	ldr	r2, [r7, #4]
20001304:	601a      	str	r2, [r3, #0]
  currY = y;
20001306:	4b04      	ldr	r3, [pc, #16]	; (20001318 <gotoxy+0x22>)
20001308:	683a      	ldr	r2, [r7, #0]
2000130a:	601a      	str	r2, [r3, #0]
}
2000130c:	46c0      	nop			; (mov r8, r8)
2000130e:	46bd      	mov	sp, r7
20001310:	b002      	add	sp, #8
20001312:	bd80      	pop	{r7, pc}
20001314:	20001b58 	andcs	r1, r0, r8, asr fp
20001318:	20001b5c 	andcs	r1, r0, ip, asr fp

2000131c <printToGD>:

void printToGD(char ch)
{
2000131c:	b5f0      	push	{r4, r5, r6, r7, lr}
2000131e:	b0b5      	sub	sp, #212	; 0xd4
20001320:	af18      	add	r7, sp, #96	; 0x60
20001322:	0002      	movs	r2, r0
20001324:	1dfb      	adds	r3, r7, #7
20001326:	701a      	strb	r2, [r3, #0]
	DISPCHAR print_ch;
	switch(ch)
20001328:	1dfb      	adds	r3, r7, #7
2000132a:	781b      	ldrb	r3, [r3, #0]
2000132c:	3b24      	subs	r3, #36	; 0x24
2000132e:	2b3a      	cmp	r3, #58	; 0x3a
20001330:	d854      	bhi.n	200013dc <printToGD+0xc0>
20001332:	009a      	lsls	r2, r3, #2
20001334:	4b3d      	ldr	r3, [pc, #244]	; (2000142c <printToGD+0x110>)
20001336:	18d3      	adds	r3, r2, r3
20001338:	681b      	ldr	r3, [r3, #0]
2000133a:	469f      	mov	pc, r3
	{
		case '0':
		print_ch = zero;
2000133c:	230c      	movs	r3, #12
2000133e:	18fa      	adds	r2, r7, r3
20001340:	4b3b      	ldr	r3, [pc, #236]	; (20001430 <printToGD+0x114>)
20001342:	0010      	movs	r0, r2
20001344:	0019      	movs	r1, r3
20001346:	2361      	movs	r3, #97	; 0x61
20001348:	001a      	movs	r2, r3
2000134a:	f000 fbe9 	bl	20001b20 <memcpy>
		break;
2000134e:	e04f      	b.n	200013f0 <printToGD+0xd4>
		case '1':
		print_ch = one;
20001350:	230c      	movs	r3, #12
20001352:	18fa      	adds	r2, r7, r3
20001354:	4b37      	ldr	r3, [pc, #220]	; (20001434 <printToGD+0x118>)
20001356:	0010      	movs	r0, r2
20001358:	0019      	movs	r1, r3
2000135a:	2361      	movs	r3, #97	; 0x61
2000135c:	001a      	movs	r2, r3
2000135e:	f000 fbdf 	bl	20001b20 <memcpy>
		break;
20001362:	e045      	b.n	200013f0 <printToGD+0xd4>
		case '2':
		print_ch = two;
20001364:	230c      	movs	r3, #12
20001366:	18fa      	adds	r2, r7, r3
20001368:	4b33      	ldr	r3, [pc, #204]	; (20001438 <printToGD+0x11c>)
2000136a:	0010      	movs	r0, r2
2000136c:	0019      	movs	r1, r3
2000136e:	2361      	movs	r3, #97	; 0x61
20001370:	001a      	movs	r2, r3
20001372:	f000 fbd5 	bl	20001b20 <memcpy>
		break;
20001376:	e03b      	b.n	200013f0 <printToGD+0xd4>
		case '3':
		print_ch = three;
20001378:	230c      	movs	r3, #12
2000137a:	18fa      	adds	r2, r7, r3
2000137c:	4b2f      	ldr	r3, [pc, #188]	; (2000143c <printToGD+0x120>)
2000137e:	0010      	movs	r0, r2
20001380:	0019      	movs	r1, r3
20001382:	2361      	movs	r3, #97	; 0x61
20001384:	001a      	movs	r2, r3
20001386:	f000 fbcb 	bl	20001b20 <memcpy>
		break;
2000138a:	e031      	b.n	200013f0 <printToGD+0xd4>
		case '4':
		print_ch = four;
2000138c:	230c      	movs	r3, #12
2000138e:	18fa      	adds	r2, r7, r3
20001390:	4b2b      	ldr	r3, [pc, #172]	; (20001440 <printToGD+0x124>)
20001392:	0010      	movs	r0, r2
20001394:	0019      	movs	r1, r3
20001396:	2361      	movs	r3, #97	; 0x61
20001398:	001a      	movs	r2, r3
2000139a:	f000 fbc1 	bl	20001b20 <memcpy>
		break;
2000139e:	e027      	b.n	200013f0 <printToGD+0xd4>
		case '$':
		print_ch = doll;
200013a0:	230c      	movs	r3, #12
200013a2:	18fa      	adds	r2, r7, r3
200013a4:	4b27      	ldr	r3, [pc, #156]	; (20001444 <printToGD+0x128>)
200013a6:	0010      	movs	r0, r2
200013a8:	0019      	movs	r1, r3
200013aa:	2361      	movs	r3, #97	; 0x61
200013ac:	001a      	movs	r2, r3
200013ae:	f000 fbb7 	bl	20001b20 <memcpy>
		break;
200013b2:	e01d      	b.n	200013f0 <printToGD+0xd4>
		case bombCh:
		print_ch = star;
200013b4:	230c      	movs	r3, #12
200013b6:	18fa      	adds	r2, r7, r3
200013b8:	4b23      	ldr	r3, [pc, #140]	; (20001448 <printToGD+0x12c>)
200013ba:	0010      	movs	r0, r2
200013bc:	0019      	movs	r1, r3
200013be:	2361      	movs	r3, #97	; 0x61
200013c0:	001a      	movs	r2, r3
200013c2:	f000 fbad 	bl	20001b20 <memcpy>
		break;
200013c6:	e013      	b.n	200013f0 <printToGD+0xd4>
		case flagCh:
		print_ch = flag;
200013c8:	230c      	movs	r3, #12
200013ca:	18fa      	adds	r2, r7, r3
200013cc:	4b1f      	ldr	r3, [pc, #124]	; (2000144c <printToGD+0x130>)
200013ce:	0010      	movs	r0, r2
200013d0:	0019      	movs	r1, r3
200013d2:	2361      	movs	r3, #97	; 0x61
200013d4:	001a      	movs	r2, r3
200013d6:	f000 fba3 	bl	20001b20 <memcpy>
		break;
200013da:	e009      	b.n	200013f0 <printToGD+0xd4>
		default:
		print_ch = space;
200013dc:	230c      	movs	r3, #12
200013de:	18fa      	adds	r2, r7, r3
200013e0:	4b1b      	ldr	r3, [pc, #108]	; (20001450 <printToGD+0x134>)
200013e2:	0010      	movs	r0, r2
200013e4:	0019      	movs	r1, r3
200013e6:	2361      	movs	r3, #97	; 0x61
200013e8:	001a      	movs	r2, r3
200013ea:	f000 fb99 	bl	20001b20 <memcpy>
		break;
200013ee:	46c0      	nop			; (mov r8, r8)
	}
	printNumAt(currX*CHAR_X, currY*CHAR_Y, print_ch);
200013f0:	4b18      	ldr	r3, [pc, #96]	; (20001454 <printToGD+0x138>)
200013f2:	681b      	ldr	r3, [r3, #0]
200013f4:	00dd      	lsls	r5, r3, #3
200013f6:	4b18      	ldr	r3, [pc, #96]	; (20001458 <printToGD+0x13c>)
200013f8:	681a      	ldr	r2, [r3, #0]
200013fa:	0013      	movs	r3, r2
200013fc:	005b      	lsls	r3, r3, #1
200013fe:	189b      	adds	r3, r3, r2
20001400:	009b      	lsls	r3, r3, #2
20001402:	001e      	movs	r6, r3
20001404:	230c      	movs	r3, #12
20001406:	18fc      	adds	r4, r7, r3
20001408:	466b      	mov	r3, sp
2000140a:	0018      	movs	r0, r3
2000140c:	0023      	movs	r3, r4
2000140e:	3308      	adds	r3, #8
20001410:	2259      	movs	r2, #89	; 0x59
20001412:	0019      	movs	r1, r3
20001414:	f000 fb84 	bl	20001b20 <memcpy>
20001418:	6822      	ldr	r2, [r4, #0]
2000141a:	6863      	ldr	r3, [r4, #4]
2000141c:	0031      	movs	r1, r6
2000141e:	0028      	movs	r0, r5
20001420:	f000 f81c 	bl	2000145c <printNumAt>
}
20001424:	46c0      	nop			; (mov r8, r8)
20001426:	46bd      	mov	sp, r7
20001428:	b01d      	add	sp, #116	; 0x74
2000142a:	bdf0      	pop	{r4, r5, r6, r7, pc}
2000142c:	2000262c 	andcs	r2, r0, ip, lsr #12
20001430:	20002234 	andcs	r2, r0, r4, lsr r2
20001434:	20002298 	mulcs	r0, r8, r2
20001438:	200022fc 	strdcs	r2, [r0], -ip
2000143c:	20002360 	andcs	r2, r0, r0, ror #6
20001440:	200023c4 	andcs	r2, r0, r4, asr #7
20001444:	20002428 	andcs	r2, r0, r8, lsr #8
20001448:	2000248c 	andcs	r2, r0, ip, lsl #9
2000144c:	20002554 	andcs	r2, r0, r4, asr r5
20001450:	200025b8 			; <UNDEFINED> instruction: 0x200025b8
20001454:	20001b58 	andcs	r1, r0, r8, asr fp
20001458:	20001b5c 	andcs	r1, r0, ip, asr fp

2000145c <printNumAt>:

void printNumAt(int x, int y, DISPCHAR ch)
{
2000145c:	b082      	sub	sp, #8
2000145e:	b580      	push	{r7, lr}
20001460:	b084      	sub	sp, #16
20001462:	af00      	add	r7, sp, #0
20001464:	6078      	str	r0, [r7, #4]
20001466:	6039      	str	r1, [r7, #0]
20001468:	2118      	movs	r1, #24
2000146a:	1879      	adds	r1, r7, r1
2000146c:	600a      	str	r2, [r1, #0]
2000146e:	604b      	str	r3, [r1, #4]
	for(int i = 0; i < CHAR_Y; i++)
20001470:	2300      	movs	r3, #0
20001472:	60fb      	str	r3, [r7, #12]
20001474:	e029      	b.n	200014ca <printNumAt+0x6e>
		for(int j = 0; j < CHAR_X; j++)
20001476:	2300      	movs	r3, #0
20001478:	60bb      	str	r3, [r7, #8]
2000147a:	e020      	b.n	200014be <printNumAt+0x62>
		if(ch.pattern[i][j])
2000147c:	2318      	movs	r3, #24
2000147e:	18fb      	adds	r3, r7, r3
20001480:	68fa      	ldr	r2, [r7, #12]
20001482:	00d2      	lsls	r2, r2, #3
20001484:	189a      	adds	r2, r3, r2
20001486:	68bb      	ldr	r3, [r7, #8]
20001488:	18d3      	adds	r3, r2, r3
2000148a:	3301      	adds	r3, #1
2000148c:	781b      	ldrb	r3, [r3, #0]
2000148e:	2b00      	cmp	r3, #0
20001490:	d009      	beq.n	200014a6 <printNumAt+0x4a>
			graphic_pixel_set(j+x, i+y);
20001492:	68ba      	ldr	r2, [r7, #8]
20001494:	687b      	ldr	r3, [r7, #4]
20001496:	18d0      	adds	r0, r2, r3
20001498:	68fa      	ldr	r2, [r7, #12]
2000149a:	683b      	ldr	r3, [r7, #0]
2000149c:	18d3      	adds	r3, r2, r3
2000149e:	0019      	movs	r1, r3
200014a0:	f000 f824 	bl	200014ec <graphic_pixel_set>
200014a4:	e008      	b.n	200014b8 <printNumAt+0x5c>
		else
			graphic_pixel_clear(j+x, i+y);
200014a6:	68ba      	ldr	r2, [r7, #8]
200014a8:	687b      	ldr	r3, [r7, #4]
200014aa:	18d0      	adds	r0, r2, r3
200014ac:	68fa      	ldr	r2, [r7, #12]
200014ae:	683b      	ldr	r3, [r7, #0]
200014b0:	18d3      	adds	r3, r2, r3
200014b2:	0019      	movs	r1, r3
200014b4:	f000 f81d 	bl	200014f2 <graphic_pixel_clear>
		for(int j = 0; j < CHAR_X; j++)
200014b8:	68bb      	ldr	r3, [r7, #8]
200014ba:	3301      	adds	r3, #1
200014bc:	60bb      	str	r3, [r7, #8]
200014be:	68bb      	ldr	r3, [r7, #8]
200014c0:	2b07      	cmp	r3, #7
200014c2:	dddb      	ble.n	2000147c <printNumAt+0x20>
	for(int i = 0; i < CHAR_Y; i++)
200014c4:	68fb      	ldr	r3, [r7, #12]
200014c6:	3301      	adds	r3, #1
200014c8:	60fb      	str	r3, [r7, #12]
200014ca:	68fb      	ldr	r3, [r7, #12]
200014cc:	2b0b      	cmp	r3, #11
200014ce:	ddd2      	ble.n	20001476 <printNumAt+0x1a>
}
200014d0:	46c0      	nop			; (mov r8, r8)
200014d2:	46c0      	nop			; (mov r8, r8)
200014d4:	46bd      	mov	sp, r7
200014d6:	b004      	add	sp, #16
200014d8:	bc80      	pop	{r7}
200014da:	bc08      	pop	{r3}
200014dc:	b002      	add	sp, #8
200014de:	4718      	bx	r3

200014e0 <graphic_initialize>:


__attribute__((naked))
void graphic_initialize(void)
{
200014e0:	4770dff0 			; <UNDEFINED> instruction: 0x4770dff0
	__asm volatile(" .HWORD 0xDFF0\n");
	__asm volatile(" BX LR\n");
}
200014e4:	46c0      	nop			; (mov r8, r8)

200014e6 <graphic_clear_screen>:
__attribute__((naked))
void graphic_clear_screen(void)
{
200014e6:	4770dff1 			; <UNDEFINED> instruction: 0x4770dff1
	__asm volatile(" .HWORD 0xDFF1\n");
	__asm volatile(" BX LR\n");
}
200014ea:	46c0      	nop			; (mov r8, r8)

200014ec <graphic_pixel_set>:
__attribute__((naked))
void graphic_pixel_set(int x, int y)
{
200014ec:	4770dff2 			; <UNDEFINED> instruction: 0x4770dff2
	__asm volatile(" .HWORD 0xDFF2\n");
	__asm volatile(" BX LR\n");
}
200014f0:	46c0      	nop			; (mov r8, r8)

200014f2 <graphic_pixel_clear>:
__attribute__((naked))
void graphic_pixel_clear(int x, int y)
{
200014f2:	4770dff3 			; <UNDEFINED> instruction: 0x4770dff3
	__asm volatile(" .HWORD 0xDFF3\n");
	__asm volatile(" BX LR\n");
}
200014f6:	46c0      	nop			; (mov r8, r8)

200014f8 <init_app>:

void init_app(void)
{
200014f8:	b580      	push	{r7, lr}
200014fa:	af00      	add	r7, sp, #0
	*GPIO_MODER = 0x55000000;
200014fc:	4b0e      	ldr	r3, [pc, #56]	; (20001538 <init_app+0x40>)
200014fe:	22aa      	movs	r2, #170	; 0xaa
20001500:	05d2      	lsls	r2, r2, #23
20001502:	601a      	str	r2, [r3, #0]
	*GPIO_OTYPER = 0xFFAA0000;
20001504:	4b0d      	ldr	r3, [pc, #52]	; (2000153c <init_app+0x44>)
20001506:	2200      	movs	r2, #0
20001508:	801a      	strh	r2, [r3, #0]
	*GPIO_PUPDR = 0x0F0000;
2000150a:	4b0d      	ldr	r3, [pc, #52]	; (20001540 <init_app+0x48>)
2000150c:	22f0      	movs	r2, #240	; 0xf0
2000150e:	0312      	lsls	r2, r2, #12
20001510:	601a      	str	r2, [r3, #0]
	*GPIO_E_MODER = 0x55555555;
20001512:	4b0c      	ldr	r3, [pc, #48]	; (20001544 <init_app+0x4c>)
20001514:	4a0c      	ldr	r2, [pc, #48]	; (20001548 <init_app+0x50>)
20001516:	601a      	str	r2, [r3, #0]
	*SCB_VTOR = REALLOC;
20001518:	4b0c      	ldr	r3, [pc, #48]	; (2000154c <init_app+0x54>)
2000151a:	4a0d      	ldr	r2, [pc, #52]	; (20001550 <init_app+0x58>)
2000151c:	601a      	str	r2, [r3, #0]
	graphic_initialize();
2000151e:	f7ff ffdf 	bl	200014e0 <graphic_initialize>
	sysTick_init();
20001522:	f7fe fdbd 	bl	200000a0 <sysTick_init>
	timer6_init();
20001526:	f7fe fe4f 	bl	200001c8 <timer6_init>
	toggle_timer_running();
2000152a:	f7fe fec3 	bl	200002b4 <toggle_timer_running>
	ascii_init();
2000152e:	f7fe ff09 	bl	20000344 <ascii_init>
}
20001532:	46c0      	nop			; (mov r8, r8)
20001534:	46bd      	mov	sp, r7
20001536:	bd80      	pop	{r7, pc}
20001538:	40020c00 	andmi	r0, r2, r0, lsl #24
2000153c:	40020c04 	andmi	r0, r2, r4, lsl #24
20001540:	40020c0c 	andmi	r0, r2, ip, lsl #24
20001544:	40021000 	andmi	r1, r2, r0
20001548:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab
2000154c:	e000ed08 	and	lr, r0, r8, lsl #26
20001550:	2001c000 	andcs	ip, r1, r0

20001554 <readKey>:
#define initState 0
unsigned char current_state = initState;


unsigned char readKey(void)
{
20001554:	b590      	push	{r4, r7, lr}
20001556:	b087      	sub	sp, #28
20001558:	af00      	add	r7, sp, #0
	unsigned char keyValue[] = {1,2,3,0xA,4,5,6,0xB,7,8,9,0xC,0xE,0,0xF,0xD};
2000155a:	003b      	movs	r3, r7
2000155c:	4a16      	ldr	r2, [pc, #88]	; (200015b8 <readKey+0x64>)
2000155e:	ca13      	ldmia	r2!, {r0, r1, r4}
20001560:	c313      	stmia	r3!, {r0, r1, r4}
20001562:	6812      	ldr	r2, [r2, #0]
20001564:	601a      	str	r2, [r3, #0]
	for(int row = 0; row< 4; row++)
20001566:	2300      	movs	r3, #0
20001568:	617b      	str	r3, [r7, #20]
2000156a:	e019      	b.n	200015a0 <readKey+0x4c>
	{
		activateRow(row+1);
2000156c:	697b      	ldr	r3, [r7, #20]
2000156e:	3301      	adds	r3, #1
20001570:	0018      	movs	r0, r3
20001572:	f000 f853 	bl	2000161c <activateRow>
		int col = readColumn();
20001576:	f000 f87f 	bl	20001678 <readColumn>
2000157a:	0003      	movs	r3, r0
2000157c:	613b      	str	r3, [r7, #16]
		if(col != 0)
2000157e:	693b      	ldr	r3, [r7, #16]
20001580:	2b00      	cmp	r3, #0
20001582:	d00a      	beq.n	2000159a <readKey+0x46>
		{
			activateRow(0);
20001584:	2000      	movs	r0, #0
20001586:	f000 f849 	bl	2000161c <activateRow>
			return keyValue[row*4 + (col-1)];
2000158a:	697b      	ldr	r3, [r7, #20]
2000158c:	009a      	lsls	r2, r3, #2
2000158e:	693b      	ldr	r3, [r7, #16]
20001590:	3b01      	subs	r3, #1
20001592:	18d3      	adds	r3, r2, r3
20001594:	003a      	movs	r2, r7
20001596:	5cd3      	ldrb	r3, [r2, r3]
20001598:	e009      	b.n	200015ae <readKey+0x5a>
	for(int row = 0; row< 4; row++)
2000159a:	697b      	ldr	r3, [r7, #20]
2000159c:	3301      	adds	r3, #1
2000159e:	617b      	str	r3, [r7, #20]
200015a0:	697b      	ldr	r3, [r7, #20]
200015a2:	2b03      	cmp	r3, #3
200015a4:	dde2      	ble.n	2000156c <readKey+0x18>
		}
	}
	activateRow(0);
200015a6:	2000      	movs	r0, #0
200015a8:	f000 f838 	bl	2000161c <activateRow>
	return noKeyReturn;
200015ac:	23ff      	movs	r3, #255	; 0xff
}
200015ae:	0018      	movs	r0, r3
200015b0:	46bd      	mov	sp, r7
200015b2:	b007      	add	sp, #28
200015b4:	bd90      	pop	{r4, r7, pc}
200015b6:	46c0      	nop			; (mov r8, r8)
200015b8:	20002718 	andcs	r2, r0, r8, lsl r7

200015bc <keyb_enhanced>:

unsigned char keyb_enhanced(void)
{
200015bc:	b590      	push	{r4, r7, lr}
200015be:	b083      	sub	sp, #12
200015c0:	af00      	add	r7, sp, #0
	if(current_state == waitState)
200015c2:	4b14      	ldr	r3, [pc, #80]	; (20001614 <keyb_enhanced+0x58>)
200015c4:	781b      	ldrb	r3, [r3, #0]
200015c6:	2b01      	cmp	r3, #1
200015c8:	d10c      	bne.n	200015e4 <keyb_enhanced+0x28>
	{
		activateRow(5);
200015ca:	2005      	movs	r0, #5
200015cc:	f000 f826 	bl	2000161c <activateRow>
		if(*GPIO_IDR_HIGH == 0)
200015d0:	4b11      	ldr	r3, [pc, #68]	; (20001618 <keyb_enhanced+0x5c>)
200015d2:	781b      	ldrb	r3, [r3, #0]
200015d4:	b2db      	uxtb	r3, r3
200015d6:	2b00      	cmp	r3, #0
200015d8:	d102      	bne.n	200015e0 <keyb_enhanced+0x24>
		{ current_state = initState; }
200015da:	4b0e      	ldr	r3, [pc, #56]	; (20001614 <keyb_enhanced+0x58>)
200015dc:	2200      	movs	r2, #0
200015de:	701a      	strb	r2, [r3, #0]
		return sameKeyReturn;
200015e0:	23fe      	movs	r3, #254	; 0xfe
200015e2:	e012      	b.n	2000160a <keyb_enhanced+0x4e>
	}
	if(current_state == initState)
200015e4:	4b0b      	ldr	r3, [pc, #44]	; (20001614 <keyb_enhanced+0x58>)
200015e6:	781b      	ldrb	r3, [r3, #0]
200015e8:	2b00      	cmp	r3, #0
200015ea:	d10e      	bne.n	2000160a <keyb_enhanced+0x4e>
	{
		unsigned char c = readKey();
200015ec:	1dfc      	adds	r4, r7, #7
200015ee:	f7ff ffb1 	bl	20001554 <readKey>
200015f2:	0003      	movs	r3, r0
200015f4:	7023      	strb	r3, [r4, #0]
		if(c != noKeyReturn)
200015f6:	1dfb      	adds	r3, r7, #7
200015f8:	781b      	ldrb	r3, [r3, #0]
200015fa:	2bff      	cmp	r3, #255	; 0xff
200015fc:	d002      	beq.n	20001604 <keyb_enhanced+0x48>
			current_state = waitState;
200015fe:	4b05      	ldr	r3, [pc, #20]	; (20001614 <keyb_enhanced+0x58>)
20001600:	2201      	movs	r2, #1
20001602:	701a      	strb	r2, [r3, #0]
		return c;
20001604:	1dfb      	adds	r3, r7, #7
20001606:	781b      	ldrb	r3, [r3, #0]
20001608:	e7ff      	b.n	2000160a <keyb_enhanced+0x4e>
	}

}
2000160a:	0018      	movs	r0, r3
2000160c:	46bd      	mov	sp, r7
2000160e:	b003      	add	sp, #12
20001610:	bd90      	pop	{r4, r7, pc}
20001612:	46c0      	nop			; (mov r8, r8)
20001614:	20001b6c 	andcs	r1, r0, ip, ror #22
20001618:	40020c11 	andmi	r0, r2, r1, lsl ip

2000161c <activateRow>:

void activateRow(int row)
{ /* Aktivera angiven rad hos tangentbordet, eller
2000161c:	b580      	push	{r7, lr}
2000161e:	b082      	sub	sp, #8
20001620:	af00      	add	r7, sp, #0
20001622:	6078      	str	r0, [r7, #4]
20001624:	687b      	ldr	r3, [r7, #4]
20001626:	2b05      	cmp	r3, #5
20001628:	d81d      	bhi.n	20001666 <activateRow+0x4a>
2000162a:	687b      	ldr	r3, [r7, #4]
2000162c:	009a      	lsls	r2, r3, #2
2000162e:	4b10      	ldr	r3, [pc, #64]	; (20001670 <activateRow+0x54>)
20001630:	18d3      	adds	r3, r2, r3
20001632:	681b      	ldr	r3, [r3, #0]
20001634:	469f      	mov	pc, r3
* deaktivera samtliga */
	switch( row )
	{
		case 1: *GPIO_ODR_HIGH = 0x10; break;
20001636:	4b0f      	ldr	r3, [pc, #60]	; (20001674 <activateRow+0x58>)
20001638:	2210      	movs	r2, #16
2000163a:	701a      	strb	r2, [r3, #0]
2000163c:	e013      	b.n	20001666 <activateRow+0x4a>
		case 2: *GPIO_ODR_HIGH = 0x20; break;
2000163e:	4b0d      	ldr	r3, [pc, #52]	; (20001674 <activateRow+0x58>)
20001640:	2220      	movs	r2, #32
20001642:	701a      	strb	r2, [r3, #0]
20001644:	e00f      	b.n	20001666 <activateRow+0x4a>
		case 3: *GPIO_ODR_HIGH = 0x40; break;
20001646:	4b0b      	ldr	r3, [pc, #44]	; (20001674 <activateRow+0x58>)
20001648:	2240      	movs	r2, #64	; 0x40
2000164a:	701a      	strb	r2, [r3, #0]
2000164c:	e00b      	b.n	20001666 <activateRow+0x4a>
		case 4: *GPIO_ODR_HIGH = 0x80; break;
2000164e:	4b09      	ldr	r3, [pc, #36]	; (20001674 <activateRow+0x58>)
20001650:	2280      	movs	r2, #128	; 0x80
20001652:	701a      	strb	r2, [r3, #0]
20001654:	e007      	b.n	20001666 <activateRow+0x4a>
		case 5: *GPIO_ODR_HIGH = 0xF0; break; 
20001656:	4b07      	ldr	r3, [pc, #28]	; (20001674 <activateRow+0x58>)
20001658:	22f0      	movs	r2, #240	; 0xf0
2000165a:	701a      	strb	r2, [r3, #0]
2000165c:	e003      	b.n	20001666 <activateRow+0x4a>
		case 0: *GPIO_ODR_HIGH = 0x00; break;
2000165e:	4b05      	ldr	r3, [pc, #20]	; (20001674 <activateRow+0x58>)
20001660:	2200      	movs	r2, #0
20001662:	701a      	strb	r2, [r3, #0]
20001664:	46c0      	nop			; (mov r8, r8)
	}
}
20001666:	46c0      	nop			; (mov r8, r8)
20001668:	46bd      	mov	sp, r7
2000166a:	b002      	add	sp, #8
2000166c:	bd80      	pop	{r7, pc}
2000166e:	46c0      	nop			; (mov r8, r8)
20001670:	20002728 	andcs	r2, r0, r8, lsr #14
20001674:	40020c15 	andmi	r0, r2, r5, lsl ip

20001678 <readColumn>:
int readColumn(void)
{
20001678:	b580      	push	{r7, lr}
2000167a:	b082      	sub	sp, #8
2000167c:	af00      	add	r7, sp, #0
	/* Om någon tangent (i aktiverad rad)
	* är nedtryckt, returnera dess kolumnnummer,
	* annars, returnera 0 */
	unsigned char c;
	c = *GPIO_IDR_HIGH;
2000167e:	4a12      	ldr	r2, [pc, #72]	; (200016c8 <readColumn+0x50>)
20001680:	1dfb      	adds	r3, r7, #7
20001682:	7812      	ldrb	r2, [r2, #0]
20001684:	701a      	strb	r2, [r3, #0]
	if (c & 0x8) return 4;
20001686:	1dfb      	adds	r3, r7, #7
20001688:	781b      	ldrb	r3, [r3, #0]
2000168a:	2208      	movs	r2, #8
2000168c:	4013      	ands	r3, r2
2000168e:	d001      	beq.n	20001694 <readColumn+0x1c>
20001690:	2304      	movs	r3, #4
20001692:	e015      	b.n	200016c0 <readColumn+0x48>
	if (c & 0x4) return 3;
20001694:	1dfb      	adds	r3, r7, #7
20001696:	781b      	ldrb	r3, [r3, #0]
20001698:	2204      	movs	r2, #4
2000169a:	4013      	ands	r3, r2
2000169c:	d001      	beq.n	200016a2 <readColumn+0x2a>
2000169e:	2303      	movs	r3, #3
200016a0:	e00e      	b.n	200016c0 <readColumn+0x48>
	if (c & 0x2) return 2;
200016a2:	1dfb      	adds	r3, r7, #7
200016a4:	781b      	ldrb	r3, [r3, #0]
200016a6:	2202      	movs	r2, #2
200016a8:	4013      	ands	r3, r2
200016aa:	d001      	beq.n	200016b0 <readColumn+0x38>
200016ac:	2302      	movs	r3, #2
200016ae:	e007      	b.n	200016c0 <readColumn+0x48>
	if (c & 0x1) return 1;
200016b0:	1dfb      	adds	r3, r7, #7
200016b2:	781b      	ldrb	r3, [r3, #0]
200016b4:	2201      	movs	r2, #1
200016b6:	4013      	ands	r3, r2
200016b8:	d001      	beq.n	200016be <readColumn+0x46>
200016ba:	2301      	movs	r3, #1
200016bc:	e000      	b.n	200016c0 <readColumn+0x48>
	return 0;
200016be:	2300      	movs	r3, #0
}
200016c0:	0018      	movs	r0, r3
200016c2:	46bd      	mov	sp, r7
200016c4:	b002      	add	sp, #8
200016c6:	bd80      	pop	{r7, pc}
200016c8:	40020c11 	andmi	r0, r2, r1, lsl ip

200016cc <print_start_text_ascii>:

//ascii
void print_start_text_ascii()
{
200016cc:	b5b0      	push	{r4, r5, r7, lr}
200016ce:	b088      	sub	sp, #32
200016d0:	af00      	add	r7, sp, #0
	ascii_gotoxy(1,1);
200016d2:	2101      	movs	r1, #1
200016d4:	2001      	movs	r0, #1
200016d6:	f7fe fe4b 	bl	20000370 <ascii_gotoxy>
	char upper[] = "Flags left: ";
200016da:	2110      	movs	r1, #16
200016dc:	187b      	adds	r3, r7, r1
200016de:	4a0d      	ldr	r2, [pc, #52]	; (20001714 <print_start_text_ascii+0x48>)
200016e0:	ca31      	ldmia	r2!, {r0, r4, r5}
200016e2:	c331      	stmia	r3!, {r0, r4, r5}
200016e4:	7812      	ldrb	r2, [r2, #0]
200016e6:	701a      	strb	r2, [r3, #0]
	char lower[] = "Timer: 		";
200016e8:	1d3b      	adds	r3, r7, #4
200016ea:	4a0b      	ldr	r2, [pc, #44]	; (20001718 <print_start_text_ascii+0x4c>)
200016ec:	ca11      	ldmia	r2!, {r0, r4}
200016ee:	c311      	stmia	r3!, {r0, r4}
200016f0:	8812      	ldrh	r2, [r2, #0]
200016f2:	801a      	strh	r2, [r3, #0]
	ascii_write_string(upper);
200016f4:	187b      	adds	r3, r7, r1
200016f6:	0018      	movs	r0, r3
200016f8:	f7fe fe58 	bl	200003ac <ascii_write_string>
	ascii_gotoxy(1,2);
200016fc:	2102      	movs	r1, #2
200016fe:	2001      	movs	r0, #1
20001700:	f7fe fe36 	bl	20000370 <ascii_gotoxy>
	ascii_write_string(lower);
20001704:	1d3b      	adds	r3, r7, #4
20001706:	0018      	movs	r0, r3
20001708:	f7fe fe50 	bl	200003ac <ascii_write_string>
}
2000170c:	46c0      	nop			; (mov r8, r8)
2000170e:	46bd      	mov	sp, r7
20001710:	b008      	add	sp, #32
20001712:	bdb0      	pop	{r4, r5, r7, pc}
20001714:	20002740 	andcs	r2, r0, r0, asr #14
20001718:	20002750 	andcs	r2, r0, r0, asr r7

2000171c <print_flags>:

void print_flags(int f)
{
2000171c:	b580      	push	{r7, lr}
2000171e:	b084      	sub	sp, #16
20001720:	af00      	add	r7, sp, #0
20001722:	6078      	str	r0, [r7, #4]
	if(f > 0)
20001724:	687b      	ldr	r3, [r7, #4]
20001726:	2b00      	cmp	r3, #0
20001728:	dd17      	ble.n	2000175a <print_flags+0x3e>
	{
		ascii_gotoxy(FLAGSOFFSET, 1);
2000172a:	2101      	movs	r1, #1
2000172c:	200c      	movs	r0, #12
2000172e:	f7fe fe1f 	bl	20000370 <ascii_gotoxy>
		char clear[] = "  ";
20001732:	200c      	movs	r0, #12
20001734:	183b      	adds	r3, r7, r0
20001736:	4a12      	ldr	r2, [pc, #72]	; (20001780 <print_flags+0x64>)
20001738:	8811      	ldrh	r1, [r2, #0]
2000173a:	8019      	strh	r1, [r3, #0]
2000173c:	7892      	ldrb	r2, [r2, #2]
2000173e:	709a      	strb	r2, [r3, #2]
		ascii_write_string(clear);
20001740:	183b      	adds	r3, r7, r0
20001742:	0018      	movs	r0, r3
20001744:	f7fe fe32 	bl	200003ac <ascii_write_string>
	
		ascii_gotoxy(FLAGSOFFSET, 1);
20001748:	2101      	movs	r1, #1
2000174a:	200c      	movs	r0, #12
2000174c:	f7fe fe10 	bl	20000370 <ascii_gotoxy>
		ascii_write_number(f);	
20001750:	687b      	ldr	r3, [r7, #4]
20001752:	0018      	movs	r0, r3
20001754:	f7fe fe3f 	bl	200003d6 <ascii_write_number>
		ascii_write_char(45); // - = 45
		f *= (-1);
		ascii_write_number(f);
	}
	
}
20001758:	e00d      	b.n	20001776 <print_flags+0x5a>
		ascii_gotoxy(FLAGSOFFSET, 1);
2000175a:	2101      	movs	r1, #1
2000175c:	200c      	movs	r0, #12
2000175e:	f7fe fe07 	bl	20000370 <ascii_gotoxy>
		ascii_write_char(45); // - = 45
20001762:	202d      	movs	r0, #45	; 0x2d
20001764:	f7fe fe66 	bl	20000434 <ascii_write_char>
		f *= (-1);
20001768:	687b      	ldr	r3, [r7, #4]
2000176a:	425b      	negs	r3, r3
2000176c:	607b      	str	r3, [r7, #4]
		ascii_write_number(f);
2000176e:	687b      	ldr	r3, [r7, #4]
20001770:	0018      	movs	r0, r3
20001772:	f7fe fe30 	bl	200003d6 <ascii_write_number>
}
20001776:	46c0      	nop			; (mov r8, r8)
20001778:	46bd      	mov	sp, r7
2000177a:	b004      	add	sp, #16
2000177c:	bd80      	pop	{r7, pc}
2000177e:	46c0      	nop			; (mov r8, r8)
20001780:	2000275c 	andcs	r2, r0, ip, asr r7

20001784 <print_timer>:

void print_timer(int secs, int tenths)
{
20001784:	b580      	push	{r7, lr}
20001786:	b082      	sub	sp, #8
20001788:	af00      	add	r7, sp, #0
2000178a:	6078      	str	r0, [r7, #4]
2000178c:	6039      	str	r1, [r7, #0]
	ascii_gotoxy(TIMEROFFSET, 2);
2000178e:	2102      	movs	r1, #2
20001790:	2008      	movs	r0, #8
20001792:	f7fe fded 	bl	20000370 <ascii_gotoxy>
	ascii_write_number(secs);
20001796:	687b      	ldr	r3, [r7, #4]
20001798:	0018      	movs	r0, r3
2000179a:	f7fe fe1c 	bl	200003d6 <ascii_write_number>
	ascii_write_char(46); // . = 46
2000179e:	202e      	movs	r0, #46	; 0x2e
200017a0:	f7fe fe48 	bl	20000434 <ascii_write_char>
	ascii_write_number(tenths);
200017a4:	683b      	ldr	r3, [r7, #0]
200017a6:	0018      	movs	r0, r3
200017a8:	f7fe fe15 	bl	200003d6 <ascii_write_number>
}
200017ac:	46c0      	nop			; (mov r8, r8)
200017ae:	46bd      	mov	sp, r7
200017b0:	b002      	add	sp, #8
200017b2:	bd80      	pop	{r7, pc}

200017b4 <play_again>:

int play_again()
{
200017b4:	b5b0      	push	{r4, r5, r7, lr}
200017b6:	b08e      	sub	sp, #56	; 0x38
200017b8:	af00      	add	r7, sp, #0
	char upper[] = "Play again? yes -> D";
200017ba:	2420      	movs	r4, #32
200017bc:	193b      	adds	r3, r7, r4
200017be:	4a1b      	ldr	r2, [pc, #108]	; (2000182c <play_again+0x78>)
200017c0:	ca23      	ldmia	r2!, {r0, r1, r5}
200017c2:	c323      	stmia	r3!, {r0, r1, r5}
200017c4:	ca03      	ldmia	r2!, {r0, r1}
200017c6:	c303      	stmia	r3!, {r0, r1}
200017c8:	7812      	ldrb	r2, [r2, #0]
200017ca:	701a      	strb	r2, [r3, #0]
	char lower[] = "yes -> D, no -> anything";
200017cc:	1d3b      	adds	r3, r7, #4
200017ce:	4a18      	ldr	r2, [pc, #96]	; (20001830 <play_again+0x7c>)
200017d0:	ca23      	ldmia	r2!, {r0, r1, r5}
200017d2:	c323      	stmia	r3!, {r0, r1, r5}
200017d4:	ca23      	ldmia	r2!, {r0, r1, r5}
200017d6:	c323      	stmia	r3!, {r0, r1, r5}
200017d8:	7812      	ldrb	r2, [r2, #0]
200017da:	701a      	strb	r2, [r3, #0]
	ascii_gotoxy(1,1);
200017dc:	2101      	movs	r1, #1
200017de:	2001      	movs	r0, #1
200017e0:	f7fe fdc6 	bl	20000370 <ascii_gotoxy>
	ascii_write_string(upper);
200017e4:	193b      	adds	r3, r7, r4
200017e6:	0018      	movs	r0, r3
200017e8:	f7fe fde0 	bl	200003ac <ascii_write_string>
	//ascii_gotoxy(1,2);
	//ascii_write_string(lower);
	char hitch = 0xFF;
200017ec:	2337      	movs	r3, #55	; 0x37
200017ee:	18fb      	adds	r3, r7, r3
200017f0:	22ff      	movs	r2, #255	; 0xff
200017f2:	701a      	strb	r2, [r3, #0]
	while(1)
	{
		hitch = keyb_enhanced();
200017f4:	2537      	movs	r5, #55	; 0x37
200017f6:	197c      	adds	r4, r7, r5
200017f8:	f7ff fee0 	bl	200015bc <keyb_enhanced>
200017fc:	0003      	movs	r3, r0
200017fe:	7023      	strb	r3, [r4, #0]
		if(hitch != sameKeyReturn && hitch != noKeyReturn)
20001800:	197b      	adds	r3, r7, r5
20001802:	781b      	ldrb	r3, [r3, #0]
20001804:	2bfe      	cmp	r3, #254	; 0xfe
20001806:	d0f5      	beq.n	200017f4 <play_again+0x40>
20001808:	197b      	adds	r3, r7, r5
2000180a:	781b      	ldrb	r3, [r3, #0]
2000180c:	2bff      	cmp	r3, #255	; 0xff
2000180e:	d100      	bne.n	20001812 <play_again+0x5e>
		hitch = keyb_enhanced();
20001810:	e7f0      	b.n	200017f4 <play_again+0x40>
			break;
20001812:	46c0      	nop			; (mov r8, r8)
	}
	return hitch == 0xD;
20001814:	2337      	movs	r3, #55	; 0x37
20001816:	18fb      	adds	r3, r7, r3
20001818:	781b      	ldrb	r3, [r3, #0]
2000181a:	3b0d      	subs	r3, #13
2000181c:	425a      	negs	r2, r3
2000181e:	4153      	adcs	r3, r2
20001820:	b2db      	uxtb	r3, r3
	
20001822:	0018      	movs	r0, r3
20001824:	46bd      	mov	sp, r7
20001826:	b00e      	add	sp, #56	; 0x38
20001828:	bdb0      	pop	{r4, r5, r7, pc}
2000182a:	46c0      	nop			; (mov r8, r8)
2000182c:	20002760 	andcs	r2, r0, r0, ror #14
20001830:	20002778 	andcs	r2, r0, r8, ror r7

20001834 <__udivsi3>:
20001834:	2200      	movs	r2, #0
20001836:	0843      	lsrs	r3, r0, #1
20001838:	428b      	cmp	r3, r1
2000183a:	d374      	bcc.n	20001926 <__udivsi3+0xf2>
2000183c:	0903      	lsrs	r3, r0, #4
2000183e:	428b      	cmp	r3, r1
20001840:	d35f      	bcc.n	20001902 <__udivsi3+0xce>
20001842:	0a03      	lsrs	r3, r0, #8
20001844:	428b      	cmp	r3, r1
20001846:	d344      	bcc.n	200018d2 <__udivsi3+0x9e>
20001848:	0b03      	lsrs	r3, r0, #12
2000184a:	428b      	cmp	r3, r1
2000184c:	d328      	bcc.n	200018a0 <__udivsi3+0x6c>
2000184e:	0c03      	lsrs	r3, r0, #16
20001850:	428b      	cmp	r3, r1
20001852:	d30d      	bcc.n	20001870 <__udivsi3+0x3c>
20001854:	22ff      	movs	r2, #255	; 0xff
20001856:	0209      	lsls	r1, r1, #8
20001858:	ba12      	rev	r2, r2
2000185a:	0c03      	lsrs	r3, r0, #16
2000185c:	428b      	cmp	r3, r1
2000185e:	d302      	bcc.n	20001866 <__udivsi3+0x32>
20001860:	1212      	asrs	r2, r2, #8
20001862:	0209      	lsls	r1, r1, #8
20001864:	d065      	beq.n	20001932 <__udivsi3+0xfe>
20001866:	0b03      	lsrs	r3, r0, #12
20001868:	428b      	cmp	r3, r1
2000186a:	d319      	bcc.n	200018a0 <__udivsi3+0x6c>
2000186c:	e000      	b.n	20001870 <__udivsi3+0x3c>
2000186e:	0a09      	lsrs	r1, r1, #8
20001870:	0bc3      	lsrs	r3, r0, #15
20001872:	428b      	cmp	r3, r1
20001874:	d301      	bcc.n	2000187a <__udivsi3+0x46>
20001876:	03cb      	lsls	r3, r1, #15
20001878:	1ac0      	subs	r0, r0, r3
2000187a:	4152      	adcs	r2, r2
2000187c:	0b83      	lsrs	r3, r0, #14
2000187e:	428b      	cmp	r3, r1
20001880:	d301      	bcc.n	20001886 <__udivsi3+0x52>
20001882:	038b      	lsls	r3, r1, #14
20001884:	1ac0      	subs	r0, r0, r3
20001886:	4152      	adcs	r2, r2
20001888:	0b43      	lsrs	r3, r0, #13
2000188a:	428b      	cmp	r3, r1
2000188c:	d301      	bcc.n	20001892 <__udivsi3+0x5e>
2000188e:	034b      	lsls	r3, r1, #13
20001890:	1ac0      	subs	r0, r0, r3
20001892:	4152      	adcs	r2, r2
20001894:	0b03      	lsrs	r3, r0, #12
20001896:	428b      	cmp	r3, r1
20001898:	d301      	bcc.n	2000189e <__udivsi3+0x6a>
2000189a:	030b      	lsls	r3, r1, #12
2000189c:	1ac0      	subs	r0, r0, r3
2000189e:	4152      	adcs	r2, r2
200018a0:	0ac3      	lsrs	r3, r0, #11
200018a2:	428b      	cmp	r3, r1
200018a4:	d301      	bcc.n	200018aa <__udivsi3+0x76>
200018a6:	02cb      	lsls	r3, r1, #11
200018a8:	1ac0      	subs	r0, r0, r3
200018aa:	4152      	adcs	r2, r2
200018ac:	0a83      	lsrs	r3, r0, #10
200018ae:	428b      	cmp	r3, r1
200018b0:	d301      	bcc.n	200018b6 <__udivsi3+0x82>
200018b2:	028b      	lsls	r3, r1, #10
200018b4:	1ac0      	subs	r0, r0, r3
200018b6:	4152      	adcs	r2, r2
200018b8:	0a43      	lsrs	r3, r0, #9
200018ba:	428b      	cmp	r3, r1
200018bc:	d301      	bcc.n	200018c2 <__udivsi3+0x8e>
200018be:	024b      	lsls	r3, r1, #9
200018c0:	1ac0      	subs	r0, r0, r3
200018c2:	4152      	adcs	r2, r2
200018c4:	0a03      	lsrs	r3, r0, #8
200018c6:	428b      	cmp	r3, r1
200018c8:	d301      	bcc.n	200018ce <__udivsi3+0x9a>
200018ca:	020b      	lsls	r3, r1, #8
200018cc:	1ac0      	subs	r0, r0, r3
200018ce:	4152      	adcs	r2, r2
200018d0:	d2cd      	bcs.n	2000186e <__udivsi3+0x3a>
200018d2:	09c3      	lsrs	r3, r0, #7
200018d4:	428b      	cmp	r3, r1
200018d6:	d301      	bcc.n	200018dc <__udivsi3+0xa8>
200018d8:	01cb      	lsls	r3, r1, #7
200018da:	1ac0      	subs	r0, r0, r3
200018dc:	4152      	adcs	r2, r2
200018de:	0983      	lsrs	r3, r0, #6
200018e0:	428b      	cmp	r3, r1
200018e2:	d301      	bcc.n	200018e8 <__udivsi3+0xb4>
200018e4:	018b      	lsls	r3, r1, #6
200018e6:	1ac0      	subs	r0, r0, r3
200018e8:	4152      	adcs	r2, r2
200018ea:	0943      	lsrs	r3, r0, #5
200018ec:	428b      	cmp	r3, r1
200018ee:	d301      	bcc.n	200018f4 <__udivsi3+0xc0>
200018f0:	014b      	lsls	r3, r1, #5
200018f2:	1ac0      	subs	r0, r0, r3
200018f4:	4152      	adcs	r2, r2
200018f6:	0903      	lsrs	r3, r0, #4
200018f8:	428b      	cmp	r3, r1
200018fa:	d301      	bcc.n	20001900 <__udivsi3+0xcc>
200018fc:	010b      	lsls	r3, r1, #4
200018fe:	1ac0      	subs	r0, r0, r3
20001900:	4152      	adcs	r2, r2
20001902:	08c3      	lsrs	r3, r0, #3
20001904:	428b      	cmp	r3, r1
20001906:	d301      	bcc.n	2000190c <__udivsi3+0xd8>
20001908:	00cb      	lsls	r3, r1, #3
2000190a:	1ac0      	subs	r0, r0, r3
2000190c:	4152      	adcs	r2, r2
2000190e:	0883      	lsrs	r3, r0, #2
20001910:	428b      	cmp	r3, r1
20001912:	d301      	bcc.n	20001918 <__udivsi3+0xe4>
20001914:	008b      	lsls	r3, r1, #2
20001916:	1ac0      	subs	r0, r0, r3
20001918:	4152      	adcs	r2, r2
2000191a:	0843      	lsrs	r3, r0, #1
2000191c:	428b      	cmp	r3, r1
2000191e:	d301      	bcc.n	20001924 <__udivsi3+0xf0>
20001920:	004b      	lsls	r3, r1, #1
20001922:	1ac0      	subs	r0, r0, r3
20001924:	4152      	adcs	r2, r2
20001926:	1a41      	subs	r1, r0, r1
20001928:	d200      	bcs.n	2000192c <__udivsi3+0xf8>
2000192a:	4601      	mov	r1, r0
2000192c:	4152      	adcs	r2, r2
2000192e:	4610      	mov	r0, r2
20001930:	4770      	bx	lr
20001932:	e7ff      	b.n	20001934 <__udivsi3+0x100>
20001934:	b501      	push	{r0, lr}
20001936:	2000      	movs	r0, #0
20001938:	f000 f8f0 	bl	20001b1c <__aeabi_idiv0>
2000193c:	bd02      	pop	{r1, pc}
2000193e:	46c0      	nop			; (mov r8, r8)

20001940 <__aeabi_uidivmod>:
20001940:	2900      	cmp	r1, #0
20001942:	d0f7      	beq.n	20001934 <__udivsi3+0x100>
20001944:	e776      	b.n	20001834 <__udivsi3>
20001946:	4770      	bx	lr

20001948 <__divsi3>:
20001948:	4603      	mov	r3, r0
2000194a:	430b      	orrs	r3, r1
2000194c:	d47f      	bmi.n	20001a4e <__divsi3+0x106>
2000194e:	2200      	movs	r2, #0
20001950:	0843      	lsrs	r3, r0, #1
20001952:	428b      	cmp	r3, r1
20001954:	d374      	bcc.n	20001a40 <__divsi3+0xf8>
20001956:	0903      	lsrs	r3, r0, #4
20001958:	428b      	cmp	r3, r1
2000195a:	d35f      	bcc.n	20001a1c <__divsi3+0xd4>
2000195c:	0a03      	lsrs	r3, r0, #8
2000195e:	428b      	cmp	r3, r1
20001960:	d344      	bcc.n	200019ec <__divsi3+0xa4>
20001962:	0b03      	lsrs	r3, r0, #12
20001964:	428b      	cmp	r3, r1
20001966:	d328      	bcc.n	200019ba <__divsi3+0x72>
20001968:	0c03      	lsrs	r3, r0, #16
2000196a:	428b      	cmp	r3, r1
2000196c:	d30d      	bcc.n	2000198a <__divsi3+0x42>
2000196e:	22ff      	movs	r2, #255	; 0xff
20001970:	0209      	lsls	r1, r1, #8
20001972:	ba12      	rev	r2, r2
20001974:	0c03      	lsrs	r3, r0, #16
20001976:	428b      	cmp	r3, r1
20001978:	d302      	bcc.n	20001980 <__divsi3+0x38>
2000197a:	1212      	asrs	r2, r2, #8
2000197c:	0209      	lsls	r1, r1, #8
2000197e:	d065      	beq.n	20001a4c <__divsi3+0x104>
20001980:	0b03      	lsrs	r3, r0, #12
20001982:	428b      	cmp	r3, r1
20001984:	d319      	bcc.n	200019ba <__divsi3+0x72>
20001986:	e000      	b.n	2000198a <__divsi3+0x42>
20001988:	0a09      	lsrs	r1, r1, #8
2000198a:	0bc3      	lsrs	r3, r0, #15
2000198c:	428b      	cmp	r3, r1
2000198e:	d301      	bcc.n	20001994 <__divsi3+0x4c>
20001990:	03cb      	lsls	r3, r1, #15
20001992:	1ac0      	subs	r0, r0, r3
20001994:	4152      	adcs	r2, r2
20001996:	0b83      	lsrs	r3, r0, #14
20001998:	428b      	cmp	r3, r1
2000199a:	d301      	bcc.n	200019a0 <__divsi3+0x58>
2000199c:	038b      	lsls	r3, r1, #14
2000199e:	1ac0      	subs	r0, r0, r3
200019a0:	4152      	adcs	r2, r2
200019a2:	0b43      	lsrs	r3, r0, #13
200019a4:	428b      	cmp	r3, r1
200019a6:	d301      	bcc.n	200019ac <__divsi3+0x64>
200019a8:	034b      	lsls	r3, r1, #13
200019aa:	1ac0      	subs	r0, r0, r3
200019ac:	4152      	adcs	r2, r2
200019ae:	0b03      	lsrs	r3, r0, #12
200019b0:	428b      	cmp	r3, r1
200019b2:	d301      	bcc.n	200019b8 <__divsi3+0x70>
200019b4:	030b      	lsls	r3, r1, #12
200019b6:	1ac0      	subs	r0, r0, r3
200019b8:	4152      	adcs	r2, r2
200019ba:	0ac3      	lsrs	r3, r0, #11
200019bc:	428b      	cmp	r3, r1
200019be:	d301      	bcc.n	200019c4 <__divsi3+0x7c>
200019c0:	02cb      	lsls	r3, r1, #11
200019c2:	1ac0      	subs	r0, r0, r3
200019c4:	4152      	adcs	r2, r2
200019c6:	0a83      	lsrs	r3, r0, #10
200019c8:	428b      	cmp	r3, r1
200019ca:	d301      	bcc.n	200019d0 <__divsi3+0x88>
200019cc:	028b      	lsls	r3, r1, #10
200019ce:	1ac0      	subs	r0, r0, r3
200019d0:	4152      	adcs	r2, r2
200019d2:	0a43      	lsrs	r3, r0, #9
200019d4:	428b      	cmp	r3, r1
200019d6:	d301      	bcc.n	200019dc <__divsi3+0x94>
200019d8:	024b      	lsls	r3, r1, #9
200019da:	1ac0      	subs	r0, r0, r3
200019dc:	4152      	adcs	r2, r2
200019de:	0a03      	lsrs	r3, r0, #8
200019e0:	428b      	cmp	r3, r1
200019e2:	d301      	bcc.n	200019e8 <__divsi3+0xa0>
200019e4:	020b      	lsls	r3, r1, #8
200019e6:	1ac0      	subs	r0, r0, r3
200019e8:	4152      	adcs	r2, r2
200019ea:	d2cd      	bcs.n	20001988 <__divsi3+0x40>
200019ec:	09c3      	lsrs	r3, r0, #7
200019ee:	428b      	cmp	r3, r1
200019f0:	d301      	bcc.n	200019f6 <__divsi3+0xae>
200019f2:	01cb      	lsls	r3, r1, #7
200019f4:	1ac0      	subs	r0, r0, r3
200019f6:	4152      	adcs	r2, r2
200019f8:	0983      	lsrs	r3, r0, #6
200019fa:	428b      	cmp	r3, r1
200019fc:	d301      	bcc.n	20001a02 <__divsi3+0xba>
200019fe:	018b      	lsls	r3, r1, #6
20001a00:	1ac0      	subs	r0, r0, r3
20001a02:	4152      	adcs	r2, r2
20001a04:	0943      	lsrs	r3, r0, #5
20001a06:	428b      	cmp	r3, r1
20001a08:	d301      	bcc.n	20001a0e <__divsi3+0xc6>
20001a0a:	014b      	lsls	r3, r1, #5
20001a0c:	1ac0      	subs	r0, r0, r3
20001a0e:	4152      	adcs	r2, r2
20001a10:	0903      	lsrs	r3, r0, #4
20001a12:	428b      	cmp	r3, r1
20001a14:	d301      	bcc.n	20001a1a <__divsi3+0xd2>
20001a16:	010b      	lsls	r3, r1, #4
20001a18:	1ac0      	subs	r0, r0, r3
20001a1a:	4152      	adcs	r2, r2
20001a1c:	08c3      	lsrs	r3, r0, #3
20001a1e:	428b      	cmp	r3, r1
20001a20:	d301      	bcc.n	20001a26 <__divsi3+0xde>
20001a22:	00cb      	lsls	r3, r1, #3
20001a24:	1ac0      	subs	r0, r0, r3
20001a26:	4152      	adcs	r2, r2
20001a28:	0883      	lsrs	r3, r0, #2
20001a2a:	428b      	cmp	r3, r1
20001a2c:	d301      	bcc.n	20001a32 <__divsi3+0xea>
20001a2e:	008b      	lsls	r3, r1, #2
20001a30:	1ac0      	subs	r0, r0, r3
20001a32:	4152      	adcs	r2, r2
20001a34:	0843      	lsrs	r3, r0, #1
20001a36:	428b      	cmp	r3, r1
20001a38:	d301      	bcc.n	20001a3e <__divsi3+0xf6>
20001a3a:	004b      	lsls	r3, r1, #1
20001a3c:	1ac0      	subs	r0, r0, r3
20001a3e:	4152      	adcs	r2, r2
20001a40:	1a41      	subs	r1, r0, r1
20001a42:	d200      	bcs.n	20001a46 <__divsi3+0xfe>
20001a44:	4601      	mov	r1, r0
20001a46:	4152      	adcs	r2, r2
20001a48:	4610      	mov	r0, r2
20001a4a:	4770      	bx	lr
20001a4c:	e05d      	b.n	20001b0a <__divsi3+0x1c2>
20001a4e:	0fca      	lsrs	r2, r1, #31
20001a50:	d000      	beq.n	20001a54 <__divsi3+0x10c>
20001a52:	4249      	negs	r1, r1
20001a54:	1003      	asrs	r3, r0, #32
20001a56:	d300      	bcc.n	20001a5a <__divsi3+0x112>
20001a58:	4240      	negs	r0, r0
20001a5a:	4053      	eors	r3, r2
20001a5c:	2200      	movs	r2, #0
20001a5e:	469c      	mov	ip, r3
20001a60:	0903      	lsrs	r3, r0, #4
20001a62:	428b      	cmp	r3, r1
20001a64:	d32d      	bcc.n	20001ac2 <__divsi3+0x17a>
20001a66:	0a03      	lsrs	r3, r0, #8
20001a68:	428b      	cmp	r3, r1
20001a6a:	d312      	bcc.n	20001a92 <__divsi3+0x14a>
20001a6c:	22fc      	movs	r2, #252	; 0xfc
20001a6e:	0189      	lsls	r1, r1, #6
20001a70:	ba12      	rev	r2, r2
20001a72:	0a03      	lsrs	r3, r0, #8
20001a74:	428b      	cmp	r3, r1
20001a76:	d30c      	bcc.n	20001a92 <__divsi3+0x14a>
20001a78:	0189      	lsls	r1, r1, #6
20001a7a:	1192      	asrs	r2, r2, #6
20001a7c:	428b      	cmp	r3, r1
20001a7e:	d308      	bcc.n	20001a92 <__divsi3+0x14a>
20001a80:	0189      	lsls	r1, r1, #6
20001a82:	1192      	asrs	r2, r2, #6
20001a84:	428b      	cmp	r3, r1
20001a86:	d304      	bcc.n	20001a92 <__divsi3+0x14a>
20001a88:	0189      	lsls	r1, r1, #6
20001a8a:	d03a      	beq.n	20001b02 <__divsi3+0x1ba>
20001a8c:	1192      	asrs	r2, r2, #6
20001a8e:	e000      	b.n	20001a92 <__divsi3+0x14a>
20001a90:	0989      	lsrs	r1, r1, #6
20001a92:	09c3      	lsrs	r3, r0, #7
20001a94:	428b      	cmp	r3, r1
20001a96:	d301      	bcc.n	20001a9c <__divsi3+0x154>
20001a98:	01cb      	lsls	r3, r1, #7
20001a9a:	1ac0      	subs	r0, r0, r3
20001a9c:	4152      	adcs	r2, r2
20001a9e:	0983      	lsrs	r3, r0, #6
20001aa0:	428b      	cmp	r3, r1
20001aa2:	d301      	bcc.n	20001aa8 <__divsi3+0x160>
20001aa4:	018b      	lsls	r3, r1, #6
20001aa6:	1ac0      	subs	r0, r0, r3
20001aa8:	4152      	adcs	r2, r2
20001aaa:	0943      	lsrs	r3, r0, #5
20001aac:	428b      	cmp	r3, r1
20001aae:	d301      	bcc.n	20001ab4 <__divsi3+0x16c>
20001ab0:	014b      	lsls	r3, r1, #5
20001ab2:	1ac0      	subs	r0, r0, r3
20001ab4:	4152      	adcs	r2, r2
20001ab6:	0903      	lsrs	r3, r0, #4
20001ab8:	428b      	cmp	r3, r1
20001aba:	d301      	bcc.n	20001ac0 <__divsi3+0x178>
20001abc:	010b      	lsls	r3, r1, #4
20001abe:	1ac0      	subs	r0, r0, r3
20001ac0:	4152      	adcs	r2, r2
20001ac2:	08c3      	lsrs	r3, r0, #3
20001ac4:	428b      	cmp	r3, r1
20001ac6:	d301      	bcc.n	20001acc <__divsi3+0x184>
20001ac8:	00cb      	lsls	r3, r1, #3
20001aca:	1ac0      	subs	r0, r0, r3
20001acc:	4152      	adcs	r2, r2
20001ace:	0883      	lsrs	r3, r0, #2
20001ad0:	428b      	cmp	r3, r1
20001ad2:	d301      	bcc.n	20001ad8 <__divsi3+0x190>
20001ad4:	008b      	lsls	r3, r1, #2
20001ad6:	1ac0      	subs	r0, r0, r3
20001ad8:	4152      	adcs	r2, r2
20001ada:	d2d9      	bcs.n	20001a90 <__divsi3+0x148>
20001adc:	0843      	lsrs	r3, r0, #1
20001ade:	428b      	cmp	r3, r1
20001ae0:	d301      	bcc.n	20001ae6 <__divsi3+0x19e>
20001ae2:	004b      	lsls	r3, r1, #1
20001ae4:	1ac0      	subs	r0, r0, r3
20001ae6:	4152      	adcs	r2, r2
20001ae8:	1a41      	subs	r1, r0, r1
20001aea:	d200      	bcs.n	20001aee <__divsi3+0x1a6>
20001aec:	4601      	mov	r1, r0
20001aee:	4663      	mov	r3, ip
20001af0:	4152      	adcs	r2, r2
20001af2:	105b      	asrs	r3, r3, #1
20001af4:	4610      	mov	r0, r2
20001af6:	d301      	bcc.n	20001afc <__divsi3+0x1b4>
20001af8:	4240      	negs	r0, r0
20001afa:	2b00      	cmp	r3, #0
20001afc:	d500      	bpl.n	20001b00 <__divsi3+0x1b8>
20001afe:	4249      	negs	r1, r1
20001b00:	4770      	bx	lr
20001b02:	4663      	mov	r3, ip
20001b04:	105b      	asrs	r3, r3, #1
20001b06:	d300      	bcc.n	20001b0a <__divsi3+0x1c2>
20001b08:	4240      	negs	r0, r0
20001b0a:	b501      	push	{r0, lr}
20001b0c:	2000      	movs	r0, #0
20001b0e:	f000 f805 	bl	20001b1c <__aeabi_idiv0>
20001b12:	bd02      	pop	{r1, pc}

20001b14 <__aeabi_idivmod>:
20001b14:	2900      	cmp	r1, #0
20001b16:	d0f8      	beq.n	20001b0a <__divsi3+0x1c2>
20001b18:	e716      	b.n	20001948 <__divsi3>
20001b1a:	4770      	bx	lr

20001b1c <__aeabi_idiv0>:
20001b1c:	4770      	bx	lr
20001b1e:	46c0      	nop			; (mov r8, r8)

20001b20 <memcpy>:
20001b20:	2300      	movs	r3, #0
20001b22:	b510      	push	{r4, lr}
20001b24:	429a      	cmp	r2, r3
20001b26:	d100      	bne.n	20001b2a <memcpy+0xa>
20001b28:	bd10      	pop	{r4, pc}
20001b2a:	5ccc      	ldrb	r4, [r1, r3]
20001b2c:	54c4      	strb	r4, [r0, r3]
20001b2e:	3301      	adds	r3, #1
20001b30:	e7f8      	b.n	20001b24 <memcpy+0x4>
	...

20001b34 <tolower>:
20001b34:	2203      	movs	r2, #3
20001b36:	4b03      	ldr	r3, [pc, #12]	; (20001b44 <tolower+0x10>)
20001b38:	5c1b      	ldrb	r3, [r3, r0]
20001b3a:	4013      	ands	r3, r2
20001b3c:	2b01      	cmp	r3, #1
20001b3e:	d100      	bne.n	20001b42 <tolower+0xe>
20001b40:	3020      	adds	r0, #32
20001b42:	4770      	bx	lr
20001b44:	20002792 	mulcs	r0, r2, r7

20001b48 <systick_flag>:
20001b48:	00000000 	andeq	r0, r0, r0

20001b4c <delay_count>:
20001b4c:	00000000 	andeq	r0, r0, r0

20001b50 <counting>:
20001b50:	00000000 	andeq	r0, r0, r0

20001b54 <used_for_rand>:
20001b54:	00000000 	andeq	r0, r0, r0

20001b58 <currX>:
20001b58:	00000000 	andeq	r0, r0, r0

20001b5c <currY>:
20001b5c:	00000000 	andeq	r0, r0, r0

20001b60 <placed_flaggs>:
20001b60:	00000000 	andeq	r0, r0, r0

20001b64 <running>:
20001b64:	00000000 	andeq	r0, r0, r0

20001b68 <gameover>:
20001b68:	00000000 	andeq	r0, r0, r0

20001b6c <current_state>:
20001b6c:	00000000 	andeq	r0, r0, r0

20001b70 <r.4344>:
	...

20001b78 <isFlagPtr>:
20001b78:	00000000 	andeq	r0, r0, r0

20001b7c <board>:
	...

2000220c <position>:
	...

20002224 <seconds>:
20002224:	00000000 	andeq	r0, r0, r0

20002228 <ticks>:
20002228:	00000000 	andeq	r0, r0, r0

2000222c <isBombPtr>:
2000222c:	00000000 	andeq	r0, r0, r0

20002230 <timer_running>:
20002230:	00000000 	andeq	r0, r0, r0

20002234 <zero>:
20002234:	00000030 	andeq	r0, r0, r0, lsr r0
20002238:	00000000 	andeq	r0, r0, r0
2000223c:	01000000 	mrseq	r0, (UNDEF: 0)
20002240:	00010101 	andeq	r0, r1, r1, lsl #2
20002244:	01010000 	mrseq	r0, (UNDEF: 1)
20002248:	01010000 	mrseq	r0, (UNDEF: 1)
2000224c:	00010000 	andeq	r0, r1, r0
20002250:	01000000 	mrseq	r0, (UNDEF: 0)
20002254:	00010000 	andeq	r0, r1, r0
20002258:	01010000 	mrseq	r0, (UNDEF: 1)
2000225c:	00010000 	andeq	r0, r1, r0
20002260:	01000100 	mrseq	r0, (UNDEF: 16)
20002264:	00010000 	andeq	r0, r1, r0
20002268:	01000001 	tsteq	r0, r1
2000226c:	01010000 	mrseq	r0, (UNDEF: 1)
20002270:	01000000 	mrseq	r0, (UNDEF: 0)
20002274:	00010000 	andeq	r0, r1, r0
20002278:	01000000 	mrseq	r0, (UNDEF: 0)
2000227c:	01010000 	mrseq	r0, (UNDEF: 1)
20002280:	01010000 	mrseq	r0, (UNDEF: 1)
20002284:	01000000 	mrseq	r0, (UNDEF: 0)
20002288:	00010101 	andeq	r0, r1, r1, lsl #2
	...

20002298 <one>:
20002298:	00000031 	andeq	r0, r0, r1, lsr r0
	...
200022a4:	00000101 	andeq	r0, r0, r1, lsl #2
200022a8:	01000000 	mrseq	r0, (UNDEF: 0)
200022ac:	00000100 	andeq	r0, r0, r0, lsl #2
200022b0:	00010000 	andeq	r0, r1, r0
200022b4:	00000100 	andeq	r0, r0, r0, lsl #2
200022b8:	00000000 	andeq	r0, r0, r0
200022bc:	00000100 	andeq	r0, r0, r0, lsl #2
200022c0:	00000000 	andeq	r0, r0, r0
200022c4:	00000100 	andeq	r0, r0, r0, lsl #2
200022c8:	00000000 	andeq	r0, r0, r0
200022cc:	00000100 	andeq	r0, r0, r0, lsl #2
200022d0:	00000000 	andeq	r0, r0, r0
200022d4:	00000100 	andeq	r0, r0, r0, lsl #2
200022d8:	00000000 	andeq	r0, r0, r0
200022dc:	00000100 	andeq	r0, r0, r0, lsl #2
200022e0:	00000000 	andeq	r0, r0, r0
200022e4:	00000100 	andeq	r0, r0, r0, lsl #2
200022e8:	01010000 	mrseq	r0, (UNDEF: 1)
200022ec:	01010101 	tsteq	r1, r1, lsl #2
	...

200022fc <two>:
200022fc:	00000032 	andeq	r0, r0, r2, lsr r0
	...
20002308:	00010101 	andeq	r0, r1, r1, lsl #2
2000230c:	01000000 	mrseq	r0, (UNDEF: 0)
20002310:	01010000 	mrseq	r0, (UNDEF: 1)
20002314:	00010000 	andeq	r0, r1, r0
20002318:	01000000 	mrseq	r0, (UNDEF: 0)
2000231c:	00000000 	andeq	r0, r0, r0
20002320:	01000000 	mrseq	r0, (UNDEF: 0)
20002324:	00000000 	andeq	r0, r0, r0
20002328:	00010000 	andeq	r0, r1, r0
2000232c:	00000000 	andeq	r0, r0, r0
20002330:	00000100 	andeq	r0, r0, r0, lsl #2
20002334:	00000000 	andeq	r0, r0, r0
20002338:	00000001 	andeq	r0, r0, r1
2000233c:	01000000 	mrseq	r0, (UNDEF: 0)
20002340:	00000000 	andeq	r0, r0, r0
20002344:	01010000 	mrseq	r0, (UNDEF: 1)
20002348:	00000000 	andeq	r0, r0, r0
2000234c:	01010000 	mrseq	r0, (UNDEF: 1)
20002350:	01010101 	tsteq	r1, r1, lsl #2
	...

20002360 <three>:
20002360:	00000033 	andeq	r0, r0, r3, lsr r0
20002364:	00000000 	andeq	r0, r0, r0
20002368:	01010000 	mrseq	r0, (UNDEF: 1)
2000236c:	00010101 	andeq	r0, r1, r1, lsl #2
20002370:	00000000 	andeq	r0, r0, r0
20002374:	01010000 	mrseq	r0, (UNDEF: 1)
20002378:	00000000 	andeq	r0, r0, r0
2000237c:	01000000 	mrseq	r0, (UNDEF: 0)
20002380:	00000000 	andeq	r0, r0, r0
20002384:	01010000 	mrseq	r0, (UNDEF: 1)
20002388:	01000000 	mrseq	r0, (UNDEF: 0)
2000238c:	00010101 	andeq	r0, r1, r1, lsl #2
20002390:	00000000 	andeq	r0, r0, r0
20002394:	01010000 	mrseq	r0, (UNDEF: 1)
20002398:	00000000 	andeq	r0, r0, r0
2000239c:	01000000 	mrseq	r0, (UNDEF: 0)
200023a0:	00000000 	andeq	r0, r0, r0
200023a4:	01000000 	mrseq	r0, (UNDEF: 0)
200023a8:	00000000 	andeq	r0, r0, r0
200023ac:	01000000 	mrseq	r0, (UNDEF: 0)
200023b0:	01010000 	mrseq	r0, (UNDEF: 1)
200023b4:	00010101 	andeq	r0, r1, r1, lsl #2
	...

200023c4 <four>:
200023c4:	00000034 	andeq	r0, r0, r4, lsr r0
	...
200023d0:	01010000 	mrseq	r0, (UNDEF: 1)
200023d4:	00000000 	andeq	r0, r0, r0
200023d8:	01000100 	mrseq	r0, (UNDEF: 16)
200023dc:	00000000 	andeq	r0, r0, r0
200023e0:	01000001 	tsteq	r0, r1
200023e4:	01000000 	mrseq	r0, (UNDEF: 0)
200023e8:	01000000 	mrseq	r0, (UNDEF: 0)
200023ec:	00010000 	andeq	r0, r1, r0
200023f0:	01000000 	mrseq	r0, (UNDEF: 0)
200023f4:	01010000 	mrseq	r0, (UNDEF: 1)
200023f8:	01010101 	tsteq	r1, r1, lsl #2
200023fc:	00000001 	andeq	r0, r0, r1
20002400:	01000000 	mrseq	r0, (UNDEF: 0)
20002404:	00000000 	andeq	r0, r0, r0
20002408:	01000000 	mrseq	r0, (UNDEF: 0)
2000240c:	00000000 	andeq	r0, r0, r0
20002410:	01000000 	mrseq	r0, (UNDEF: 0)
20002414:	00000000 	andeq	r0, r0, r0
20002418:	01000000 	mrseq	r0, (UNDEF: 0)
	...

20002428 <doll>:
20002428:	00000024 	andeq	r0, r0, r4, lsr #32
2000242c:	00000100 	andeq	r0, r0, r0, lsl #2
20002430:	00000000 	andeq	r0, r0, r0
20002434:	00000100 	andeq	r0, r0, r0, lsl #2
20002438:	01000000 	mrseq	r0, (UNDEF: 0)
2000243c:	01010101 	tsteq	r1, r1, lsl #2
20002440:	01010000 	mrseq	r0, (UNDEF: 1)
20002444:	00000100 	andeq	r0, r0, r0, lsl #2
20002448:	01010000 	mrseq	r0, (UNDEF: 1)
2000244c:	00000100 	andeq	r0, r0, r0, lsl #2
20002450:	01000000 	mrseq	r0, (UNDEF: 0)
20002454:	00000101 	andeq	r0, r0, r1, lsl #2
20002458:	00000000 	andeq	r0, r0, r0
2000245c:	00010101 	andeq	r0, r1, r1, lsl #2
20002460:	00000000 	andeq	r0, r0, r0
20002464:	01010001 	tsteq	r1, r1
20002468:	00000000 	andeq	r0, r0, r0
2000246c:	01010001 	tsteq	r1, r1
20002470:	00010000 	andeq	r0, r1, r0
20002474:	00010101 	andeq	r0, r1, r1, lsl #2
20002478:	01000000 	mrseq	r0, (UNDEF: 0)
2000247c:	00000101 	andeq	r0, r0, r1, lsl #2
20002480:	00000000 	andeq	r0, r0, r0
20002484:	00000001 	andeq	r0, r0, r1
20002488:	00000000 	andeq	r0, r0, r0

2000248c <star>:
2000248c:	0000002a 	andeq	r0, r0, sl, lsr #32
20002490:	00000001 	andeq	r0, r0, r1
20002494:	00010000 	andeq	r0, r1, r0
20002498:	00010001 	andeq	r0, r1, r1
2000249c:	01000000 	mrseq	r0, (UNDEF: 0)
200024a0:	00000101 	andeq	r0, r0, r1, lsl #2
200024a4:	01000000 	mrseq	r0, (UNDEF: 0)
200024a8:	00000101 	andeq	r0, r0, r1, lsl #2
200024ac:	00010000 	andeq	r0, r1, r0
200024b0:	00010001 	andeq	r0, r1, r1
200024b4:	00000000 	andeq	r0, r0, r0
200024b8:	00000001 	andeq	r0, r0, r1
	...

200024f0 <arrow>:
200024f0:	0000005e 	andeq	r0, r0, lr, asr r0
	...
200024fc:	00000100 	andeq	r0, r0, r0, lsl #2
20002500:	00000000 	andeq	r0, r0, r0
20002504:	00010001 	andeq	r0, r1, r1
20002508:	01000000 	mrseq	r0, (UNDEF: 0)
2000250c:	01000000 	mrseq	r0, (UNDEF: 0)
20002510:	00010000 	andeq	r0, r1, r0
20002514:	00000000 	andeq	r0, r0, r0
20002518:	00000001 	andeq	r0, r0, r1
	...

20002554 <flag>:
20002554:	00000020 	andeq	r0, r0, r0, lsr #32
	...
20002560:	00010000 	andeq	r0, r1, r0
20002564:	00000000 	andeq	r0, r0, r0
20002568:	00010100 	andeq	r0, r1, r0, lsl #2
2000256c:	00000000 	andeq	r0, r0, r0
20002570:	00010101 	andeq	r0, r1, r1, lsl #2
20002574:	01000000 	mrseq	r0, (UNDEF: 0)
20002578:	00010101 	andeq	r0, r1, r1, lsl #2
2000257c:	01010000 	mrseq	r0, (UNDEF: 1)
20002580:	00010101 	andeq	r0, r1, r1, lsl #2
20002584:	00000000 	andeq	r0, r0, r0
20002588:	00010000 	andeq	r0, r1, r0
2000258c:	00000000 	andeq	r0, r0, r0
20002590:	00010000 	andeq	r0, r1, r0
20002594:	00000000 	andeq	r0, r0, r0
20002598:	00010000 	andeq	r0, r1, r0
2000259c:	00000000 	andeq	r0, r0, r0
200025a0:	01010100 	mrseq	r0, (UNDEF: 17)
200025a4:	01000000 	mrseq	r0, (UNDEF: 0)
200025a8:	01010101 	tsteq	r1, r1, lsl #2
200025ac:	00000001 	andeq	r0, r0, r1
	...

200025b8 <space>:
200025b8:	00000020 	andeq	r0, r0, r0, lsr #32
	...
2000261c:	00000020 	andeq	r0, r0, r0, lsr #32
20002620:	33323130 	teqcc	r2, #48, 2
20002624:	37363534 			; <UNDEFINED> instruction: 0x37363534
20002628:	00003938 	andeq	r3, r0, r8, lsr r9
2000262c:	200013a0 	andcs	r1, r0, r0, lsr #7
20002630:	200013dc 	ldrdcs	r1, [r0], -ip
20002634:	200013dc 	ldrdcs	r1, [r0], -ip
20002638:	200013dc 	ldrdcs	r1, [r0], -ip
2000263c:	200013dc 	ldrdcs	r1, [r0], -ip
20002640:	200013dc 	ldrdcs	r1, [r0], -ip
20002644:	200013b4 			; <UNDEFINED> instruction: 0x200013b4
20002648:	200013dc 	ldrdcs	r1, [r0], -ip
2000264c:	200013dc 	ldrdcs	r1, [r0], -ip
20002650:	200013dc 	ldrdcs	r1, [r0], -ip
20002654:	200013dc 	ldrdcs	r1, [r0], -ip
20002658:	200013dc 	ldrdcs	r1, [r0], -ip
2000265c:	2000133c 	andcs	r1, r0, ip, lsr r3
20002660:	20001350 	andcs	r1, r0, r0, asr r3
20002664:	20001364 	andcs	r1, r0, r4, ror #6
20002668:	20001378 	andcs	r1, r0, r8, ror r3
2000266c:	2000138c 	andcs	r1, r0, ip, lsl #7
20002670:	200013dc 	ldrdcs	r1, [r0], -ip
20002674:	200013dc 	ldrdcs	r1, [r0], -ip
20002678:	200013dc 	ldrdcs	r1, [r0], -ip
2000267c:	200013dc 	ldrdcs	r1, [r0], -ip
20002680:	200013dc 	ldrdcs	r1, [r0], -ip
20002684:	200013dc 	ldrdcs	r1, [r0], -ip
20002688:	200013dc 	ldrdcs	r1, [r0], -ip
2000268c:	200013dc 	ldrdcs	r1, [r0], -ip
20002690:	200013dc 	ldrdcs	r1, [r0], -ip
20002694:	200013dc 	ldrdcs	r1, [r0], -ip
20002698:	200013dc 	ldrdcs	r1, [r0], -ip
2000269c:	200013dc 	ldrdcs	r1, [r0], -ip
200026a0:	200013dc 	ldrdcs	r1, [r0], -ip
200026a4:	200013dc 	ldrdcs	r1, [r0], -ip
200026a8:	200013dc 	ldrdcs	r1, [r0], -ip
200026ac:	200013dc 	ldrdcs	r1, [r0], -ip
200026b0:	200013dc 	ldrdcs	r1, [r0], -ip
200026b4:	200013dc 	ldrdcs	r1, [r0], -ip
200026b8:	200013dc 	ldrdcs	r1, [r0], -ip
200026bc:	200013dc 	ldrdcs	r1, [r0], -ip
200026c0:	200013dc 	ldrdcs	r1, [r0], -ip
200026c4:	200013dc 	ldrdcs	r1, [r0], -ip
200026c8:	200013dc 	ldrdcs	r1, [r0], -ip
200026cc:	200013dc 	ldrdcs	r1, [r0], -ip
200026d0:	200013dc 	ldrdcs	r1, [r0], -ip
200026d4:	200013dc 	ldrdcs	r1, [r0], -ip
200026d8:	200013dc 	ldrdcs	r1, [r0], -ip
200026dc:	200013dc 	ldrdcs	r1, [r0], -ip
200026e0:	200013dc 	ldrdcs	r1, [r0], -ip
200026e4:	200013dc 	ldrdcs	r1, [r0], -ip
200026e8:	200013dc 	ldrdcs	r1, [r0], -ip
200026ec:	200013dc 	ldrdcs	r1, [r0], -ip
200026f0:	200013dc 	ldrdcs	r1, [r0], -ip
200026f4:	200013dc 	ldrdcs	r1, [r0], -ip
200026f8:	200013dc 	ldrdcs	r1, [r0], -ip
200026fc:	200013dc 	ldrdcs	r1, [r0], -ip
20002700:	200013dc 	ldrdcs	r1, [r0], -ip
20002704:	200013dc 	ldrdcs	r1, [r0], -ip
20002708:	200013dc 	ldrdcs	r1, [r0], -ip
2000270c:	200013dc 	ldrdcs	r1, [r0], -ip
20002710:	200013dc 	ldrdcs	r1, [r0], -ip
20002714:	200013c8 	andcs	r1, r0, r8, asr #7
20002718:	0a030201 	beq	200c2f24 <_ctype_+0xc0793>
2000271c:	0b060504 	bleq	20183b34 <_ctype_+0x1813a3>
20002720:	0c090807 	stceq	8, cr0, [r9], {7}
20002724:	0d0f000e 	stceq	0, cr0, [pc, #-56]	; 200026f4 <space+0x13c>
20002728:	2000165e 	andcs	r1, r0, lr, asr r6
2000272c:	20001636 	andcs	r1, r0, r6, lsr r6
20002730:	2000163e 	andcs	r1, r0, lr, lsr r6
20002734:	20001646 	andcs	r1, r0, r6, asr #12
20002738:	2000164e 	andcs	r1, r0, lr, asr #12
2000273c:	20001656 	andcs	r1, r0, r6, asr r6
20002740:	67616c46 	strbvs	r6, [r1, -r6, asr #24]!
20002744:	656c2073 	strbvs	r2, [ip, #-115]!	; 0xffffff8d
20002748:	203a7466 	eorscs	r7, sl, r6, ror #8
2000274c:	00000000 	andeq	r0, r0, r0
20002750:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
20002754:	09203a72 	stmdbeq	r0!, {r1, r4, r5, r6, r9, fp, ip, sp}
20002758:	00000009 	andeq	r0, r0, r9
2000275c:	00002020 	andeq	r2, r0, r0, lsr #32
20002760:	79616c50 	stmdbvc	r1!, {r4, r6, sl, fp, sp, lr}^
20002764:	61676120 	cmnvs	r7, r0, lsr #2
20002768:	203f6e69 	eorscs	r6, pc, r9, ror #28
2000276c:	20736579 	rsbscs	r6, r3, r9, ror r5
20002770:	44203e2d 	strtmi	r3, [r0], #-3629	; 0xfffff1d3
20002774:	00000000 	andeq	r0, r0, r0
20002778:	20736579 	rsbscs	r6, r3, r9, ror r5
2000277c:	44203e2d 	strtmi	r3, [r0], #-3629	; 0xfffff1d3
20002780:	6f6e202c 	svcvs	0x006e202c
20002784:	203e2d20 	eorscs	r2, lr, r0, lsr #26
20002788:	74796e61 	ldrbtvc	r6, [r9], #-3681	; 0xfffff19f
2000278c:	676e6968 	strbvs	r6, [lr, -r8, ror #18]!
	...

20002791 <_ctype_>:
20002791:	20202000 	eorcs	r2, r0, r0
20002795:	20202020 	eorcs	r2, r0, r0, lsr #32
20002799:	28282020 	stmdacs	r8!, {r5, sp}
2000279d:	20282828 	eorcs	r2, r8, r8, lsr #16
200027a1:	20202020 	eorcs	r2, r0, r0, lsr #32
200027a5:	20202020 	eorcs	r2, r0, r0, lsr #32
200027a9:	20202020 	eorcs	r2, r0, r0, lsr #32
200027ad:	20202020 	eorcs	r2, r0, r0, lsr #32
200027b1:	10108820 	andsne	r8, r0, r0, lsr #16
200027b5:	10101010 	andsne	r1, r0, r0, lsl r0
200027b9:	10101010 	andsne	r1, r0, r0, lsl r0
200027bd:	10101010 	andsne	r1, r0, r0, lsl r0
200027c1:	04040410 	streq	r0, [r4], #-1040	; 0xfffffbf0
200027c5:	04040404 	streq	r0, [r4], #-1028	; 0xfffffbfc
200027c9:	10040404 	andne	r0, r4, r4, lsl #8
200027cd:	10101010 	andsne	r1, r0, r0, lsl r0
200027d1:	41411010 	cmpmi	r1, r0, lsl r0
200027d5:	41414141 	cmpmi	r1, r1, asr #2
200027d9:	01010101 	tsteq	r1, r1, lsl #2
200027dd:	01010101 	tsteq	r1, r1, lsl #2
200027e1:	01010101 	tsteq	r1, r1, lsl #2
200027e5:	01010101 	tsteq	r1, r1, lsl #2
200027e9:	01010101 	tsteq	r1, r1, lsl #2
200027ed:	10101010 	andsne	r1, r0, r0, lsl r0
200027f1:	42421010 	submi	r1, r2, #16
200027f5:	42424242 	submi	r4, r2, #536870916	; 0x20000004
200027f9:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
200027fd:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
20002801:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
20002805:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
20002809:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
2000280d:	10101010 	andsne	r1, r0, r0, lsl r0
20002811:	00000020 	andeq	r0, r0, r0, lsr #32
	...

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	00001120 	andeq	r1, r0, r0, lsr #2
       4:	00000004 	andeq	r0, r0, r4
       8:	01040000 	mrseq	r0, (UNDEF: 4)
       c:	000002d9 	ldrdeq	r0, [r0], -r9
      10:	0001ad0c 	andeq	sl, r1, ip, lsl #26
      14:	00037900 	andeq	r7, r3, r0, lsl #18
	...
      24:	046f0200 	strbteq	r0, [pc], #-512	; 2c <startup-0x1fffffd4>
      28:	05610000 	strbeq	r0, [r1, #-0]!
      2c:	004d1006 	subeq	r1, sp, r6
      30:	76030000 	strvc	r0, [r3], -r0
      34:	05006c61 	streq	r6, [r0, #-3169]	; 0xfffff39f
      38:	004d0707 	subeq	r0, sp, r7, lsl #14
      3c:	04000000 	streq	r0, [r0], #-0
      40:	00000030 	andeq	r0, r0, r0, lsr r0
      44:	54070805 	strpl	r0, [r7], #-2053	; 0xfffff7fb
      48:	01000000 	mrseq	r0, (UNDEF: 0)
      4c:	08010500 	stmdaeq	r1, {r8, sl}
      50:	000002d4 	ldrdeq	r0, [r0], -r4
      54:	00004d06 	andeq	r4, r0, r6, lsl #26
      58:	00006a00 	andeq	r6, r0, r0, lsl #20
      5c:	006a0700 	rsbeq	r0, sl, r0, lsl #14
      60:	070b0000 	streq	r0, [fp, -r0]
      64:	0000006a 	andeq	r0, r0, sl, rrx
      68:	04050007 	streq	r0, [r5], #-7
      6c:	0003e907 	andeq	lr, r3, r7, lsl #18
      70:	019b0800 	orrseq	r0, fp, r0, lsl #16
      74:	09050000 	stmdbeq	r5, {}	; <UNPREDICTABLE>
      78:	00002503 	andeq	r2, r0, r3, lsl #10
      7c:	06310900 	ldrteq	r0, [r1], -r0, lsl #18
      80:	0b050000 	bleq	140088 <startup-0x1febff78>
      84:	0000710a 	andeq	r7, r0, sl, lsl #2
      88:	34030500 	strcc	r0, [r3], #-1280	; 0xfffffb00
      8c:	0a200022 	beq	80011c <startup-0x1f7ffee4>
      90:	00656e6f 	rsbeq	r6, r5, pc, ror #28
      94:	710a1805 	tstvc	sl, r5, lsl #16
      98:	05000000 	streq	r0, [r0, #-0]
      9c:	00229803 	eoreq	r9, r2, r3, lsl #16
      a0:	77740a20 	ldrbvc	r0, [r4, -r0, lsr #20]!
      a4:	2505006f 	strcs	r0, [r5, #-111]	; 0xffffff91
      a8:	0000710a 	andeq	r7, r0, sl, lsl #2
      ac:	fc030500 	stc2	5, cr0, [r3], {-0}
      b0:	09200022 	stmdbeq	r0!, {r1, r5}
      b4:	000004d3 	ldrdeq	r0, [r0], -r3
      b8:	710a3105 	tstvc	sl, r5, lsl #2
      bc:	05000000 	streq	r0, [r0, #-0]
      c0:	00236003 	eoreq	r6, r3, r3
      c4:	05f70920 	ldrbeq	r0, [r7, #2336]!	; 0x920
      c8:	3d050000 	stccc	0, cr0, [r5, #-0]
      cc:	0000710a 	andeq	r7, r0, sl, lsl #2
      d0:	c4030500 	strgt	r0, [r3], #-1280	; 0xfffffb00
      d4:	09200023 	stmdbeq	r0!, {r0, r1, r5}
      d8:	00000000 	andeq	r0, r0, r0
      dc:	710a4905 	tstvc	sl, r5, lsl #18
      e0:	05000000 	streq	r0, [r0, #-0]
      e4:	00242803 	eoreq	r2, r4, r3, lsl #16
      e8:	05b40920 	ldreq	r0, [r4, #2336]!	; 0x920
      ec:	55050000 	strpl	r0, [r5, #-0]
      f0:	0000710a 	andeq	r7, r0, sl, lsl #2
      f4:	8c030500 	cfstr32hi	mvfx0, [r3], {-0}
      f8:	09200024 	stmdbeq	r0!, {r2, r5}
      fc:	00000369 	andeq	r0, r0, r9, ror #6
     100:	710a6105 	tstvc	sl, r5, lsl #2
     104:	05000000 	streq	r0, [r0, #-0]
     108:	0024f003 	eoreq	pc, r4, r3
     10c:	00130920 	andseq	r0, r3, r0, lsr #18
     110:	6d050000 	stcvs	0, cr0, [r5, #-0]
     114:	0000710a 	andeq	r7, r0, sl, lsl #2
     118:	54030500 	strpl	r0, [r3], #-1280	; 0xfffffb00
     11c:	09200025 	stmdbeq	r0!, {r0, r2, r5}
     120:	00000363 	andeq	r0, r0, r3, ror #6
     124:	710a7905 	tstvc	sl, r5, lsl #18
     128:	05000000 	streq	r0, [r0, #-0]
     12c:	0025b803 	eoreq	fp, r5, r3, lsl #16
     130:	000b0b20 	andeq	r0, fp, r0, lsr #22
     134:	0d010000 	stceq	0, cr0, [r1, #-0]
     138:	00014a15 	andeq	r4, r1, r5, lsl sl
     13c:	48030500 	stmdami	r3, {r8, sl}
     140:	0c20001b 	stceq	0, cr0, [r0], #-108	; 0xffffff94
     144:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
     148:	430d0074 	movwmi	r0, #53364	; 0xd074
     14c:	0b000001 	bleq	158 <startup-0x1ffffea8>
     150:	00000038 	andeq	r0, r0, r8, lsr r0
     154:	4a150e01 	bmi	543960 <startup-0x1fabc6a0>
     158:	05000001 	streq	r0, [r0, #-1]
     15c:	001b4c03 	andseq	r4, fp, r3, lsl #24
     160:	06190b20 	ldreq	r0, [r9], -r0, lsr #22
     164:	10010000 	andne	r0, r1, r0
     168:	00014a15 	andeq	r4, r1, r5, lsl sl
     16c:	50030500 	andpl	r0, r3, r0, lsl #10
     170:	0b20001b 	bleq	8001e4 <startup-0x1f7ffe1c>
     174:	00000355 	andeq	r0, r0, r5, asr r3
     178:	4a151101 	bmi	544584 <startup-0x1fabba7c>
     17c:	05000001 	streq	r0, [r0, #-1]
     180:	001b5403 	andseq	r5, fp, r3, lsl #8
     184:	00050920 	andeq	r0, r5, r0, lsr #18
     188:	18020000 	stmdane	r2, {}	; <UNPREDICTABLE>
     18c:	00014a0e 	andeq	r4, r1, lr, lsl #20
     190:	28030500 	stmdacs	r3, {r8, sl}
     194:	09200022 	stmdbeq	r0!, {r1, r5}
     198:	0000042a 	andeq	r0, r0, sl, lsr #8
     19c:	4a0e1902 	bmi	3865ac <startup-0x1fc79a54>
     1a0:	05000001 	streq	r0, [r0, #-1]
     1a4:	00222403 	eoreq	r2, r2, r3, lsl #8
     1a8:	05db0920 	ldrbeq	r0, [fp, #2336]	; 0x920
     1ac:	1a020000 	bne	801b4 <startup-0x1ff7fe4c>
     1b0:	00014305 	andeq	r4, r1, r5, lsl #6
     1b4:	30030500 	andcc	r0, r3, r0, lsl #10
     1b8:	09200022 	stmdbeq	r0!, {r1, r5}
     1bc:	00000463 	andeq	r0, r0, r3, ror #8
     1c0:	43053004 	movwmi	r3, #20484	; 0x5004
     1c4:	05000001 	streq	r0, [r0, #-1]
     1c8:	001b5803 	andseq	r5, fp, r3, lsl #16
     1cc:	04690920 	strbteq	r0, [r9], #-2336	; 0xfffff6e0
     1d0:	31040000 	mrscc	r0, (UNDEF: 4)
     1d4:	00014305 	andeq	r4, r1, r5, lsl #6
     1d8:	5c030500 	cfstr32pl	mvfx0, [r3], {-0}
     1dc:	0920001b 	stmdbeq	r0!, {r0, r1, r3, r4}
     1e0:	00000648 	andeq	r0, r0, r8, asr #12
     1e4:	43053404 	movwmi	r3, #21508	; 0x5404
     1e8:	05000001 	streq	r0, [r0, #-1]
     1ec:	001b6003 	andseq	r6, fp, r3
     1f0:	00c90220 	sbceq	r0, r9, r0, lsr #4
     1f4:	04180000 	ldreq	r0, [r8], #-0
     1f8:	02490837 	subeq	r0, r9, #3604480	; 0x370000
     1fc:	78030000 	stmdavc	r3, {}	; <UNPREDICTABLE>
     200:	06390400 	ldrteq	r0, [r9], -r0, lsl #8
     204:	00000143 	andeq	r0, r0, r3, asr #2
     208:	00790300 	rsbseq	r0, r9, r0, lsl #6
     20c:	43083904 	movwmi	r3, #35076	; 0x8904
     210:	04000001 	streq	r0, [r0], #-1
     214:	00015104 	andeq	r5, r1, r4, lsl #2
     218:	0b390400 	bleq	e41220 <startup-0x1f1bede0>
     21c:	00000143 	andeq	r0, r0, r3, asr #2
     220:	04d90408 	ldrbeq	r0, [r9], #1032	; 0x408
     224:	3a040000 	bcc	10022c <startup-0x1feffdd4>
     228:	00014306 	andeq	r4, r1, r6, lsl #6
     22c:	a0040c00 	andge	r0, r4, r0, lsl #24
     230:	04000004 	streq	r0, [r0], #-4
     234:	01430f3a 	cmpeq	r3, sl, lsr pc
     238:	04100000 	ldreq	r0, [r0], #-0
     23c:	00000097 	muleq	r0, r7, r0
     240:	43153a04 	tstmi	r5, #4, 20	; 0x4000
     244:	14000001 	strne	r0, [r0], #-1
     248:	02a00900 	adceq	r0, r0, #0, 18
     24c:	3b040000 	blcc	100254 <startup-0x1feffdac>
     250:	0001f102 	andeq	pc, r1, r2, lsl #2
     254:	0c030500 	cfstr32eq	mvfx0, [r3], {-0}
     258:	02200022 	eoreq	r0, r0, #34	; 0x22
     25c:	000004bf 			; <UNDEFINED> instruction: 0x000004bf
     260:	083c040c 	ldmdaeq	ip!, {r2, r3, sl}
     264:	0000028c 	andeq	r0, r0, ip, lsl #5
     268:	04007803 	streq	r7, [r0], #-2051	; 0xfffff7fd
     26c:	0143063e 	cmpeq	r3, lr, lsr r6
     270:	03000000 	movweq	r0, #0
     274:	3e040079 	mcrcc	0, 0, r0, cr4, cr9, {3}
     278:	00014308 	andeq	r4, r1, r8, lsl #6
     27c:	c6040400 	strgt	r0, [r4], -r0, lsl #8
     280:	04000004 	streq	r0, [r0], #-4
     284:	0143063f 	cmpeq	r3, pc, lsr r6
     288:	00080000 	andeq	r0, r8, r0
     28c:	0001f106 	andeq	pc, r1, r6, lsl #2
     290:	0002a200 	andeq	sl, r2, r0, lsl #4
     294:	006a0700 	rsbeq	r0, sl, r0, lsl #14
     298:	070d0000 	streq	r0, [sp, -r0]
     29c:	0000006a 	andeq	r0, r0, sl, rrx
     2a0:	e9090004 	stmdb	r9, {r2}
     2a4:	04000004 	streq	r0, [r0], #-4
     2a8:	028c124e 	addeq	r1, ip, #-536870908	; 0xe0000004
     2ac:	03050000 	movweq	r0, #20480	; 0x5000
     2b0:	20001b7c 	andcs	r1, r0, ip, ror fp
     2b4:	0005e109 	andeq	lr, r5, r9, lsl #2
     2b8:	054f0400 	strbeq	r0, [pc, #-1024]	; fffffec0 <_ctype_+0xdfffd72f>
     2bc:	00000143 	andeq	r0, r0, r3, asr #2
     2c0:	1b640305 	blne	1900edc <startup-0x1e6ff124>
     2c4:	40092000 	andmi	r2, r9, r0
     2c8:	04000002 	streq	r0, [r0], #-2
     2cc:	01430550 	cmpeq	r3, r0, asr r5
     2d0:	03050000 	movweq	r0, #20480	; 0x5000
     2d4:	20001b68 	andcs	r1, r0, r8, ror #22
     2d8:	0001430e 	andeq	r4, r1, lr, lsl #6
     2dc:	0002e700 	andeq	lr, r2, r0, lsl #14
     2e0:	01f10f00 	mvnseq	r0, r0, lsl #30
     2e4:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
     2e8:	0000011e 	andeq	r0, r0, lr, lsl r1
     2ec:	f9076d04 			; <UNDEFINED> instruction: 0xf9076d04
     2f0:	05000002 	streq	r0, [r0, #-2]
     2f4:	00222c03 	eoreq	r2, r2, r3, lsl #24
     2f8:	d8041020 	stmdale	r4, {r5, ip}
     2fc:	09000002 	stmdbeq	r0, {r1}
     300:	0000036f 	andeq	r0, r0, pc, ror #6
     304:	f9076e04 			; <UNDEFINED> instruction: 0xf9076e04
     308:	05000002 	streq	r0, [r0, #-2]
     30c:	001b7803 	andseq	r7, fp, r3, lsl #16
     310:	005f1120 	subseq	r1, pc, r0, lsr #2
     314:	fa040000 	blx	10031c <startup-0x1feffce4>
     318:	03240f01 			; <UNDEFINED> instruction: 0x03240f01
     31c:	03050000 	movweq	r0, #20480	; 0x5000
     320:	20001b6c 	andcs	r1, r0, ip, ror #22
     324:	cb080105 	blgt	200740 <startup-0x1fdff8c0>
     328:	12000002 	andne	r0, r0, #2
     32c:	00000656 	andeq	r0, r0, r6, asr r6
     330:	05026304 	streq	r6, [r2, #-772]	; 0xfffffcfc
     334:	00000143 	andeq	r0, r0, r3, asr #2
     338:	200017b4 			; <UNDEFINED> instruction: 0x200017b4
     33c:	00000080 	andeq	r0, r0, r0, lsl #1
     340:	03789c01 	cmneq	r8, #256	; 0x100
     344:	02130000 	andseq	r0, r3, #0
     348:	04000002 	streq	r0, [r0], #-2
     34c:	78070265 	stmdavc	r7, {r0, r2, r5, r6, r9}
     350:	02000003 	andeq	r0, r0, #3
     354:	2b135891 	blcs	4d65a0 <startup-0x1fb29a60>
     358:	04000006 	streq	r0, [r0], #-6
     35c:	88070266 	stmdahi	r7, {r1, r2, r5, r6, r9}
     360:	03000003 	movweq	r0, #3
     364:	137fbc91 	cmnne	pc, #37120	; 0x9100
     368:	00000107 	andeq	r0, r0, r7, lsl #2
     36c:	07026b04 	streq	r6, [r2, -r4, lsl #22]
     370:	0000004d 	andeq	r0, r0, sp, asr #32
     374:	006f9102 	rsbeq	r9, pc, r2, lsl #2
     378:	00004d06 	andeq	r4, r0, r6, lsl #26
     37c:	00038800 	andeq	r8, r3, r0, lsl #16
     380:	006a0700 	rsbeq	r0, sl, r0, lsl #14
     384:	00140000 	andseq	r0, r4, r0
     388:	00004d06 	andeq	r4, r0, r6, lsl #26
     38c:	00039800 	andeq	r9, r3, r0, lsl #16
     390:	006a0700 	rsbeq	r0, sl, r0, lsl #14
     394:	00180000 	andseq	r0, r8, r0
     398:	00045714 	andeq	r5, r4, r4, lsl r7
     39c:	025b0400 	subseq	r0, fp, #0, 8
     3a0:	00178406 	andseq	r8, r7, r6, lsl #8
     3a4:	00003020 	andeq	r3, r0, r0, lsr #32
     3a8:	d09c0100 	addsle	r0, ip, r0, lsl #2
     3ac:	15000003 	strne	r0, [r0, #-3]
     3b0:	000000c4 	andeq	r0, r0, r4, asr #1
     3b4:	16025b04 	strne	r5, [r2], -r4, lsl #22
     3b8:	00000143 	andeq	r0, r0, r3, asr #2
     3bc:	15749102 	ldrbne	r9, [r4, #-258]!	; 0xfffffefe
     3c0:	00000622 	andeq	r0, r0, r2, lsr #12
     3c4:	20025b04 	andcs	r5, r2, r4, lsl #22
     3c8:	00000143 	andeq	r0, r0, r3, asr #2
     3cc:	00709102 	rsbseq	r9, r0, r2, lsl #2
     3d0:	00029414 	andeq	r9, r2, r4, lsl r4
     3d4:	02470400 	subeq	r0, r7, #0, 8
     3d8:	00171c06 	andseq	r1, r7, r6, lsl #24
     3dc:	00006820 	andeq	r6, r0, r0, lsr #16
     3e0:	109c0100 	addsne	r0, ip, r0, lsl #2
     3e4:	16000004 	strne	r0, [r0], -r4
     3e8:	47040066 	strmi	r0, [r4, -r6, rrx]
     3ec:	01431602 	cmpeq	r3, r2, lsl #12
     3f0:	91020000 	mrsls	r0, (UNDEF: 2)
     3f4:	172a176c 	strne	r1, [sl, -ip, ror #14]!
     3f8:	002e2000 	eoreq	r2, lr, r0
     3fc:	5b130000 	blpl	4c0404 <startup-0x1fb3fbfc>
     400:	04000005 	streq	r0, [r0], #-5
     404:	1008024c 	andne	r0, r8, ip, asr #4
     408:	02000004 	andeq	r0, r0, #4
     40c:	00007491 	muleq	r0, r1, r4
     410:	00004d06 	andeq	r4, r0, r6, lsl #26
     414:	00042000 	andeq	r2, r4, r0
     418:	006a0700 	rsbeq	r0, sl, r0, lsl #14
     41c:	00020000 	andeq	r0, r2, r0
     420:	00018418 	andeq	r8, r1, r8, lsl r4
     424:	023d0400 	eorseq	r0, sp, #0, 8
     428:	0016cc06 	andseq	ip, r6, r6, lsl #24
     42c:	00005020 	andeq	r5, r0, r0, lsr #32
     430:	589c0100 	ldmpl	ip, {r8}
     434:	13000004 	movwne	r0, #4
     438:	00000202 	andeq	r0, r0, r2, lsl #4
     43c:	07024004 	streq	r4, [r2, -r4]
     440:	00000458 	andeq	r0, r0, r8, asr r4
     444:	13609102 	cmnne	r0, #-2147483648	; 0x80000000
     448:	0000062b 	andeq	r0, r0, fp, lsr #12
     44c:	07024104 	streq	r4, [r2, -r4, lsl #2]
     450:	00000468 	andeq	r0, r0, r8, ror #8
     454:	00549102 	subseq	r9, r4, r2, lsl #2
     458:	00004d06 	andeq	r4, r0, r6, lsl #26
     45c:	00046800 	andeq	r6, r4, r0, lsl #16
     460:	006a0700 	rsbeq	r0, sl, r0, lsl #14
     464:	000c0000 	andeq	r0, ip, r0
     468:	00004d06 	andeq	r4, r0, r6, lsl #26
     46c:	00047800 	andeq	r7, r4, r0, lsl #16
     470:	006a0700 	rsbeq	r0, sl, r0, lsl #14
     474:	00090000 	andeq	r0, r9, r0
     478:	0000d319 	andeq	sp, r0, r9, lsl r3
     47c:	022e0400 	eoreq	r0, lr, #0, 8
     480:	00014305 	andeq	r4, r1, r5, lsl #6
     484:	00167800 	andseq	r7, r6, r0, lsl #16
     488:	00005420 	andeq	r5, r0, r0, lsr #8
     48c:	a29c0100 	addsge	r0, ip, #0, 2
     490:	1a000004 	bne	4a8 <startup-0x1ffffb58>
     494:	33040063 	movwcc	r0, #16483	; 0x4063
     498:	03241002 			; <UNDEFINED> instruction: 0x03241002
     49c:	91020000 	mrsls	r0, (UNDEF: 2)
     4a0:	821b0077 	andshi	r0, fp, #119	; 0x77
     4a4:	04000000 	streq	r0, [r0], #-0
     4a8:	1c060221 	sfmne	f0, 4, [r6], {33}	; 0x21
     4ac:	5c200016 	stcpl	0, cr0, [r0], #-88	; 0xffffffa8
     4b0:	01000000 	mrseq	r0, (UNDEF: 0)
     4b4:	0004ca9c 	muleq	r4, ip, sl
     4b8:	6f721600 	svcvs	0x00721600
     4bc:	21040077 	tstcs	r4, r7, ror r0
     4c0:	01431602 	cmpeq	r3, r2, lsl #12
     4c4:	91020000 	mrsls	r0, (UNDEF: 2)
     4c8:	211c0074 	tstcs	ip, r4, ror r0
     4cc:	04000005 	streq	r0, [r0], #-5
     4d0:	240f020e 	strcs	r0, [pc], #-526	; 4d8 <startup-0x1ffffb28>
     4d4:	bc000003 	stclt	0, cr0, [r0], {3}
     4d8:	60200015 	eorvs	r0, r0, r5, lsl r0
     4dc:	01000000 	mrseq	r0, (UNDEF: 0)
     4e0:	0004fe9c 	muleq	r4, ip, lr
     4e4:	15ec1700 	strbne	r1, [ip, #1792]!	; 0x700
     4e8:	001e2000 	andseq	r2, lr, r0
     4ec:	631a0000 	tstvs	sl, #0
     4f0:	02190400 	andseq	r0, r9, #0, 8
     4f4:	00032411 	andeq	r2, r3, r1, lsl r4
     4f8:	6f910200 	svcvs	0x00910200
     4fc:	781c0000 	ldmdavc	ip, {}	; <UNPREDICTABLE>
     500:	04000005 	streq	r0, [r0], #-5
     504:	240f01fd 	strcs	r0, [pc], #-509	; 50c <startup-0x1ffffaf4>
     508:	54000003 	strpl	r0, [r0], #-3
     50c:	68200015 	stmdavs	r0!, {r0, r2, r4}
     510:	01000000 	mrseq	r0, (UNDEF: 0)
     514:	00055e9c 	muleq	r5, ip, lr
     518:	01a41300 			; <UNDEFINED> instruction: 0x01a41300
     51c:	ff040000 			; <UNDEFINED> instruction: 0xff040000
     520:	055e1001 	ldrbeq	r1, [lr, #-1]
     524:	91020000 	mrsls	r0, (UNDEF: 2)
     528:	15661758 	strbne	r1, [r6, #-1880]!	; 0xfffff8a8
     52c:	00402000 	subeq	r2, r0, r0
     530:	721a0000 	andsvc	r0, sl, #0
     534:	0400776f 	streq	r7, [r0], #-1903	; 0xfffff891
     538:	430a0200 	movwmi	r0, #41472	; 0xa200
     53c:	02000001 	andeq	r0, r0, #1
     540:	6c176c91 	ldcvs	12, cr6, [r7], {145}	; 0x91
     544:	2e200015 	miacs	acc0, r5, r0
     548:	1a000000 	bne	550 <startup-0x1ffffab0>
     54c:	006c6f63 	rsbeq	r6, ip, r3, ror #30
     550:	07020304 	streq	r0, [r2, -r4, lsl #6]
     554:	00000143 	andeq	r0, r0, r3, asr #2
     558:	00689102 	rsbeq	r9, r8, r2, lsl #2
     55c:	24060000 	strcs	r0, [r6], #-0
     560:	6e000003 	cdpvs	0, 0, cr0, cr0, cr3, {0}
     564:	07000005 	streq	r0, [r0, -r5]
     568:	0000006a 	andeq	r0, r0, sl, rrx
     56c:	321d000f 	andscc	r0, sp, #15
     570:	04000004 	streq	r0, [r0], #-4
     574:	f80601ea 			; <UNDEFINED> instruction: 0xf80601ea
     578:	5c200014 	stcpl	0, cr0, [r0], #-80	; 0xffffffb0
     57c:	01000000 	mrseq	r0, (UNDEF: 0)
     580:	054d1b9c 	strbeq	r1, [sp, #-2972]	; 0xfffff464
     584:	e4040000 	str	r0, [r4], #-0
     588:	14f20601 	ldrbtne	r0, [r2], #1537	; 0x601
     58c:	00062000 	andeq	r2, r6, r0
     590:	9c010000 	stcls	0, cr0, [r1], {-0}
     594:	000005b3 			; <UNDEFINED> instruction: 0x000005b3
     598:	04007816 	streq	r7, [r0], #-2070	; 0xfffff7ea
     59c:	431e01e4 	tstmi	lr, #228, 2	; 0x39
     5a0:	01000001 	tsteq	r0, r1
     5a4:	00791650 	rsbseq	r1, r9, r0, asr r6
     5a8:	2501e404 	strcs	lr, [r1, #-1028]	; 0xfffffbfc
     5ac:	00000143 	andeq	r0, r0, r3, asr #2
     5b0:	1b005101 	blne	149bc <startup-0x1ffeb644>
     5b4:	00000255 	andeq	r0, r0, r5, asr r2
     5b8:	0601de04 	streq	sp, [r1], -r4, lsl #28
     5bc:	200014ec 	andcs	r1, r0, ip, ror #9
     5c0:	00000006 	andeq	r0, r0, r6
     5c4:	05e59c01 	strbeq	r9, [r5, #3073]!	; 0xc01
     5c8:	78160000 	ldmdavc	r6, {}	; <UNPREDICTABLE>
     5cc:	01de0400 	bicseq	r0, lr, r0, lsl #8
     5d0:	0001431c 	andeq	r4, r1, ip, lsl r3
     5d4:	16500100 	ldrbne	r0, [r0], -r0, lsl #2
     5d8:	de040079 	mcrle	0, 0, r0, cr4, cr9, {3}
     5dc:	01432301 	cmpeq	r3, r1, lsl #6
     5e0:	51010000 	mrspl	r0, (UNDEF: 1)
     5e4:	00de1e00 	sbcseq	r1, lr, r0, lsl #28
     5e8:	d8040000 	stmdale	r4, {}	; <UNPREDICTABLE>
     5ec:	14e60601 	strbtne	r0, [r6], #1537	; 0x601
     5f0:	00062000 	andeq	r2, r6, r0
     5f4:	9c010000 	stcls	0, cr0, [r1], {-0}
     5f8:	0001311e 	andeq	r3, r1, lr, lsl r1
     5fc:	01d20400 	bicseq	r0, r2, r0, lsl #8
     600:	0014e006 	andseq	lr, r4, r6
     604:	00000620 	andeq	r0, r0, r0, lsr #12
     608:	149c0100 	ldrne	r0, [ip], #256	; 0x100
     60c:	00000440 	andeq	r0, r0, r0, asr #8
     610:	0601c604 	streq	ip, [r1], -r4, lsl #12
     614:	2000145c 	andcs	r1, r0, ip, asr r4
     618:	00000084 	andeq	r0, r0, r4, lsl #1
     61c:	06b49c01 	ldrteq	r9, [r4], r1, lsl #24
     620:	78160000 	ldmdavc	r6, {}	; <UNPREDICTABLE>
     624:	01c60400 	biceq	r0, r6, r0, lsl #8
     628:	00014315 	andeq	r4, r1, r5, lsl r3
     62c:	64910200 	ldrvs	r0, [r1], #512	; 0x200
     630:	04007916 	streq	r7, [r0], #-2326	; 0xfffff6ea
     634:	431c01c6 	tstmi	ip, #-2147483599	; 0x80000031
     638:	02000001 	andeq	r0, r0, #1
     63c:	63166091 	tstvs	r6, #145	; 0x91
     640:	c6040068 	strgt	r0, [r4], -r8, rrx
     644:	00712801 	rsbseq	r2, r1, r1, lsl #16
     648:	91020000 	mrsls	r0, (UNDEF: 2)
     64c:	14701778 	ldrbtne	r1, [r0], #-1912	; 0xfffff888
     650:	00602000 	rsbeq	r2, r0, r0
     654:	691a0000 	ldmdbvs	sl, {}	; <UNPREDICTABLE>
     658:	01c80400 	biceq	r0, r8, r0, lsl #8
     65c:	0001430a 	andeq	r4, r1, sl, lsl #6
     660:	6c910200 	lfmvs	f0, 4, [r1], {0}
     664:	00147617 	andseq	r7, r4, r7, lsl r6
     668:	00004e20 	andeq	r4, r0, r0, lsr #28
     66c:	006a1a00 	rsbeq	r1, sl, r0, lsl #20
     670:	0b01c904 	bleq	72a88 <startup-0x1ff8d578>
     674:	00000143 	andeq	r0, r0, r3, asr #2
     678:	1f689102 	svcne	0x00689102
     67c:	20001492 	mulcs	r0, r2, r4
     680:	00000012 	andeq	r0, r0, r2, lsl r0
     684:	00000698 	muleq	r0, r8, r6
     688:	00025520 	andeq	r5, r2, r0, lsr #10
     68c:	01cb0400 	biceq	r0, fp, r0, lsl #8
     690:	00014304 	andeq	r4, r1, r4, lsl #6
     694:	00002100 	andeq	r2, r0, r0, lsl #2
     698:	0014a617 	andseq	sl, r4, r7, lsl r6
     69c:	00001220 	andeq	r1, r0, r0, lsr #4
     6a0:	054d2000 	strbeq	r2, [sp, #-0]
     6a4:	cd040000 	stcgt	0, cr0, [r4, #-0]
     6a8:	01430401 	cmpeq	r3, r1, lsl #8
     6ac:	00210000 	eoreq	r0, r1, r0
     6b0:	00000000 	andeq	r0, r0, r0
     6b4:	00022514 	andeq	r2, r2, r4, lsl r5
     6b8:	01a20400 			; <UNDEFINED> instruction: 0x01a20400
     6bc:	00131c06 	andseq	r1, r3, r6, lsl #24
     6c0:	00014020 	andeq	r4, r1, r0, lsr #32
     6c4:	fc9c0100 	ldc2	1, cr0, [ip], {0}
     6c8:	16000006 	strne	r0, [r0], -r6
     6cc:	04006863 	streq	r6, [r0], #-2147	; 0xfffff79d
     6d0:	4d1501a2 	ldfmis	f0, [r5, #-648]	; 0xfffffd78
     6d4:	03000000 	movweq	r0, #0
     6d8:	137eff91 	cmnne	lr, #580	; 0x244	; <UNPREDICTABLE>
     6dc:	000004ef 	andeq	r0, r0, pc, ror #9
     6e0:	0b01a404 	bleq	696f8 <startup-0x1ff96908>
     6e4:	00000071 	andeq	r0, r0, r1, ror r0
     6e8:	7f849103 	svcvc	0x00849103
     6ec:	00044020 	andeq	r4, r4, r0, lsr #32
     6f0:	01c30400 	biceq	r0, r3, r0, lsl #8
     6f4:	00014302 	andeq	r4, r1, r2, lsl #6
     6f8:	00002100 	andeq	r2, r0, r0, lsl #2
     6fc:	00041b1b 	andeq	r1, r4, fp, lsl fp
     700:	019c0400 	orrseq	r0, ip, r0, lsl #8
     704:	0012f606 	andseq	pc, r2, r6, lsl #12
     708:	00002620 	andeq	r2, r0, r0, lsr #12
     70c:	309c0100 	addscc	r0, ip, r0, lsl #2
     710:	16000007 	strne	r0, [r0], -r7
     714:	9c040078 	stcls	0, cr0, [r4], {120}	; 0x78
     718:	01431101 	cmpeq	r3, r1, lsl #2
     71c:	91020000 	mrsls	r0, (UNDEF: 2)
     720:	00791674 	rsbseq	r1, r9, r4, ror r6
     724:	18019c04 	stmdane	r1, {r2, sl, fp, ip, pc}
     728:	00000143 	andeq	r0, r0, r3, asr #2
     72c:	00709102 	rsbseq	r9, r0, r2, lsl #2
     730:	00006d1b 	andeq	r6, r0, fp, lsl sp
     734:	018b0400 	orreq	r0, fp, r0, lsl #8
     738:	0011f806 	andseq	pc, r1, r6, lsl #16
     73c:	0000fe20 	andeq	pc, r0, r0, lsr #28
     740:	869c0100 	ldrhi	r0, [ip], r0, lsl #2
     744:	16000007 	strne	r0, [r0], -r7
     748:	8b040062 	blhi	1008d8 <startup-0x1feff728>
     74c:	07962301 	ldreq	r2, [r6, r1, lsl #6]
     750:	91020000 	mrsls	r0, (UNDEF: 2)
     754:	1200176c 	andne	r1, r0, #108, 14	; 0x1b00000
     758:	00ec2000 	rsceq	r2, ip, r0
     75c:	781a0000 	ldmdavc	sl, {}	; <UNPREDICTABLE>
     760:	018d0400 	orreq	r0, sp, r0, lsl #8
     764:	0001430a 	andeq	r4, r1, sl, lsl #6
     768:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     76c:	00120617 	andseq	r0, r2, r7, lsl r6
     770:	0000da20 	andeq	sp, r0, r0, lsr #20
     774:	00791a00 	rsbseq	r1, r9, r0, lsl #20
     778:	0b018f04 	bleq	64390 <startup-0x1ff9bc70>
     77c:	00000143 	andeq	r0, r0, r3, asr #2
     780:	00709102 	rsbseq	r9, r0, r2, lsl #2
     784:	f1060000 	cps	#0
     788:	96000001 	strls	r0, [r0], -r1
     78c:	07000007 	streq	r0, [r0, -r7]
     790:	0000006a 	andeq	r0, r0, sl, rrx
     794:	04100004 	ldreq	r0, [r0], #-4
     798:	00000786 	andeq	r0, r0, r6, lsl #15
     79c:	0004f81c 	andeq	pc, r4, ip, lsl r8	; <UNPREDICTABLE>
     7a0:	01710400 	cmneq	r1, r0, lsl #8
     7a4:	0007e907 	andeq	lr, r7, r7, lsl #18
     7a8:	00117800 	andseq	r7, r1, r0, lsl #16
     7ac:	00008020 	andeq	r8, r0, r0, lsr #32
     7b0:	e99c0100 	ldmib	ip, {r8}
     7b4:	16000007 	strne	r0, [r0], -r7
     7b8:	04006863 	streq	r6, [r0], #-2147	; 0xfffff79d
     7bc:	4d1b0171 	ldfmis	f0, [fp, #-452]	; 0xfffffe3c
     7c0:	02000000 	andeq	r0, r0, #0
     7c4:	29227791 	stmdbcs	r2!, {r0, r4, r7, r8, r9, sl, ip, sp, lr}
     7c8:	06000006 	streq	r0, [r0], -r6
     7cc:	00014300 	andeq	r4, r1, r0, lsl #6
     7d0:	0007d700 	andeq	sp, r7, r0, lsl #14
     7d4:	1a002100 	bne	8bdc <startup-0x1fff7424>
     7d8:	74040072 	strvc	r0, [r4], #-114	; 0xffffff8e
     7dc:	07ef0d01 	strbeq	r0, [pc, r1, lsl #26]!
     7e0:	03050000 	movweq	r0, #20480	; 0x5000
     7e4:	20001b70 	andcs	r1, r0, r0, ror fp
     7e8:	43041000 	movwmi	r1, #16384	; 0x4000
     7ec:	06000001 	streq	r0, [r0], -r1
     7f0:	00000143 	andeq	r0, r0, r3, asr #2
     7f4:	000007ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
     7f8:	00006a07 	andeq	r6, r0, r7, lsl #20
     7fc:	14000100 	strne	r0, [r0], #-256	; 0xffffff00
     800:	000000bc 	strheq	r0, [r0], -ip
     804:	06015d04 	streq	r5, [r1], -r4, lsl #26
     808:	200010f8 	strdcs	r1, [r0], -r8
     80c:	00000080 	andeq	r0, r0, r0, lsl #1
     810:	083f9c01 	ldmdaeq	pc!, {r0, sl, fp, ip, pc}	; <UNPREDICTABLE>
     814:	70160000 	andsvc	r0, r6, r0
     818:	015d0400 	cmpeq	sp, r0, lsl #8
     81c:	0001f11f 	andeq	pc, r1, pc, lsl r1	; <UNPREDICTABLE>
     820:	70910200 	addsvc	r0, r1, r0, lsl #4
     824:	00112817 	andseq	r2, r1, r7, lsl r8
     828:	00001a20 	andeq	r1, r0, r0, lsr #20
     82c:	68631a00 	stmdavs	r3!, {r9, fp, ip}^
     830:	62040073 	andvs	r0, r4, #115	; 0x73
     834:	04680801 	strbteq	r0, [r8], #-2049	; 0xfffff7ff
     838:	91020000 	mrsls	r0, (UNDEF: 2)
     83c:	19000054 	stmdbne	r0, {r2, r4, r6}
     840:	0000047f 	andeq	r0, r0, pc, ror r4
     844:	05015404 	streq	r5, [r1, #-1028]	; 0xfffffbfc
     848:	00000143 	andeq	r0, r0, r3, asr #2
     84c:	200010c4 	andcs	r1, r0, r4, asr #1
     850:	00000034 	andeq	r0, r0, r4, lsr r0
     854:	08779c01 	ldmdaeq	r7!, {r0, sl, fp, ip, pc}^
     858:	78160000 	ldmdavc	r6, {}	; <UNPREDICTABLE>
     85c:	01540400 	cmpeq	r4, r0, lsl #8
     860:	00014312 	andeq	r4, r1, r2, lsl r3
     864:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     868:	04007916 	streq	r7, [r0], #-2326	; 0xfffff6ea
     86c:	43190154 	tstmi	r9, #84, 2
     870:	02000001 	andeq	r0, r0, #1
     874:	1c007091 	stcne	0, cr7, [r0], {145}	; 0x91
     878:	000004bb 			; <UNDEFINED> instruction: 0x000004bb
     87c:	0f014004 	svceq	0x00014004
     880:	0000025b 	andeq	r0, r0, fp, asr r2
     884:	20001008 	andcs	r1, r0, r8
     888:	000000bc 	strheq	r0, [r0], -ip
     88c:	08e19c01 	stmiaeq	r1!, {r0, sl, fp, ip, pc}^
     890:	70160000 	andsvc	r0, r6, r0
     894:	01400400 	cmpeq	r0, r0, lsl #8
     898:	00025b28 	andeq	r5, r2, r8, lsr #22
     89c:	50910200 	addspl	r0, r1, r0, lsl #4
     8a0:	00047815 	andeq	r7, r4, r5, lsl r8
     8a4:	01400400 	cmpeq	r0, r0, lsl #8
     8a8:	00004d30 	andeq	r4, r0, r0, lsr sp
     8ac:	00910200 	addseq	r0, r1, r0, lsl #4
     8b0:	00058013 	andeq	r8, r5, r3, lsl r0
     8b4:	01440400 	cmpeq	r4, r0, lsl #8
     8b8:	0007e907 	andeq	lr, r7, r7, lsl #18
     8bc:	6c910200 	lfmvs	f0, 4, [r1], {0}
     8c0:	0000fb13 	andeq	pc, r0, r3, lsl fp	; <UNPREDICTABLE>
     8c4:	01480400 	cmpeq	r8, r0, lsl #8
     8c8:	00014306 	andeq	r4, r1, r6, lsl #6
     8cc:	68910200 	ldmvs	r1, {r9}
     8d0:	00010113 	andeq	r0, r1, r3, lsl r1
     8d4:	01490400 	cmpeq	r9, r0, lsl #8
     8d8:	00014306 	andeq	r4, r1, r6, lsl #6
     8dc:	64910200 	ldrvs	r0, [r1], #512	; 0x200
     8e0:	021e1900 	andseq	r1, lr, #0, 18
     8e4:	3a040000 	bcc	1008ec <startup-0x1feff714>
     8e8:	01430501 	cmpeq	r3, r1, lsl #10
     8ec:	0fe20000 	svceq	0x00e20000
     8f0:	00262000 	eoreq	r2, r6, r0
     8f4:	9c010000 	stcls	0, cr0, [r1], {-0}
     8f8:	0000090d 	andeq	r0, r0, sp, lsl #18
     8fc:	736f7016 	cmnvc	pc, #22
     900:	013a0400 	teqeq	sl, r0, lsl #8
     904:	0001f11d 	andeq	pc, r1, sp, lsl r1	; <UNPREDICTABLE>
     908:	70910200 	addsvc	r0, r1, r0, lsl #4
     90c:	014a1900 	cmpeq	sl, r0, lsl #18
     910:	36040000 	strcc	r0, [r4], -r0
     914:	01430501 	cmpeq	r3, r1, lsl #10
     918:	0fbc0000 	svceq	0x00bc0000
     91c:	00262000 	eoreq	r2, r6, r0
     920:	9c010000 	stcls	0, cr0, [r1], {-0}
     924:	00000939 	andeq	r0, r0, r9, lsr r9
     928:	736f7016 	cmnvc	pc, #22
     92c:	01360400 	teqeq	r6, r0, lsl #8
     930:	0001f11d 	andeq	pc, r1, sp, lsl r1	; <UNPREDICTABLE>
     934:	70910200 	addsvc	r0, r1, r0, lsl #4
     938:	009e1c00 	addseq	r1, lr, r0, lsl #24
     93c:	2c040000 	stccs	0, cr0, [r4], {-0}
     940:	01430501 	cmpeq	r3, r1, lsl #10
     944:	0f080000 	svceq	0x00080000
     948:	00b42000 	adcseq	r2, r4, r0
     94c:	9c010000 	stcls	0, cr0, [r1], {-0}
     950:	000009c1 	andeq	r0, r0, r1, asr #19
     954:	04007816 	streq	r7, [r0], #-2070	; 0xfffff7ea
     958:	4319012c 	tstmi	r9, #44, 2
     95c:	02000001 	andeq	r0, r0, #1
     960:	79165c91 	ldmdbvc	r6, {r0, r4, r7, sl, fp, ip, lr}
     964:	012c0400 			; <UNDEFINED> instruction: 0x012c0400
     968:	00014320 	andeq	r4, r1, r0, lsr #6
     96c:	58910200 	ldmpl	r1, {r9}
     970:	00017315 	andeq	r7, r1, r5, lsl r3
     974:	012c0400 			; <UNDEFINED> instruction: 0x012c0400
     978:	0002f929 	andeq	pc, r2, r9, lsr #18
     97c:	54910200 	ldrpl	r0, [r1], #512	; 0x200
     980:	00050713 	andeq	r0, r5, r3, lsl r7
     984:	012e0400 			; <UNDEFINED> instruction: 0x012e0400
     988:	00014306 	andeq	r4, r1, r6, lsl #6
     98c:	6c910200 	lfmvs	f0, 4, [r1], {0}
     990:	000f1817 	andeq	r1, pc, r7, lsl r8	; <UNPREDICTABLE>
     994:	00009620 	andeq	r9, r0, r0, lsr #12
     998:	00691a00 	rsbeq	r1, r9, r0, lsl #20
     99c:	0a012f04 	beq	4c5b4 <startup-0x1ffb3a4c>
     9a0:	00000143 	andeq	r0, r0, r3, asr #2
     9a4:	17689102 	strbne	r9, [r8, -r2, lsl #2]!
     9a8:	20000f20 	andcs	r0, r0, r0, lsr #30
     9ac:	00000082 	andeq	r0, r0, r2, lsl #1
     9b0:	04006a1a 	streq	r6, [r0], #-2586	; 0xfffff5e6
     9b4:	430b0130 	movwmi	r0, #45360	; 0xb130
     9b8:	02000001 	andeq	r0, r0, #1
     9bc:	00006491 	muleq	r0, r1, r4
     9c0:	00f31400 	rscseq	r1, r3, r0, lsl #8
     9c4:	0b040000 	bleq	1009cc <startup-0x1feff634>
     9c8:	0cac0601 	stceq	6, cr0, [ip], #4
     9cc:	025c2000 	subseq	r2, ip, #0
     9d0:	9c010000 	stcls	0, cr0, [r1], {-0}
     9d4:	00000a97 	muleq	r0, r7, sl
     9d8:	04007816 	streq	r7, [r0], #-2070	; 0xfffff7ea
     9dc:	4312010b 	tstmi	r2, #-1073741822	; 0xc0000002
     9e0:	02000001 	andeq	r0, r0, #1
     9e4:	79165491 	ldmdbvc	r6, {r0, r4, r7, sl, ip, lr}
     9e8:	010b0400 	tsteq	fp, r0, lsl #8
     9ec:	00014319 	andeq	r4, r1, r9, lsl r3
     9f0:	50910200 	addspl	r0, r1, r0, lsl #4
     9f4:	00063613 	andeq	r3, r6, r3, lsl r6
     9f8:	011a0400 	tsteq	sl, r0, lsl #8
     9fc:	00014306 	andeq	r4, r1, r6, lsl #6
     a00:	5c910200 	lfmpl	f0, 4, [r1], {0}
     a04:	00009e23 	andeq	r9, r0, r3, lsr #28
     a08:	20eb0400 	rsccs	r0, fp, r0, lsl #8
     a0c:	00000143 	andeq	r0, r0, r3, asr #2
     a10:	00000a16 	andeq	r0, r0, r6, lsl sl
     a14:	dc1f0021 	ldcle	0, cr0, [pc], {33}	; 0x21
     a18:	d220000c 	eorle	r0, r0, #12
     a1c:	66000000 	strvs	r0, [r0], -r0
     a20:	2300000a 	movwcs	r0, #10
     a24:	0000009e 	muleq	r0, lr, r0
     a28:	4320eb04 			; <UNDEFINED> instruction: 0x4320eb04
     a2c:	35000001 	strcc	r0, [r0, #-1]
     a30:	2100000a 	tstcs	r0, sl
     a34:	0d241700 	stceq	7, cr1, [r4, #-0]
     a38:	00882000 	addeq	r2, r8, r0
     a3c:	691a0000 	ldmdbvs	sl, {}	; <UNPREDICTABLE>
     a40:	01120400 	tsteq	r2, r0, lsl #8
     a44:	0001430b 	andeq	r4, r1, fp, lsl #6
     a48:	6c910200 	lfmvs	f0, 4, [r1], {0}
     a4c:	000d2c17 	andeq	r2, sp, r7, lsl ip
     a50:	00007420 	andeq	r7, r0, r0, lsr #8
     a54:	006a1a00 	rsbeq	r1, sl, r0, lsl #20
     a58:	0c011304 	stceq	3, cr1, [r1], {4}
     a5c:	00000143 	andeq	r0, r0, r3, asr #2
     a60:	00689102 	rsbeq	r9, r8, r2, lsl #2
     a64:	4a170000 	bmi	5c0a6c <startup-0x1fa3f594>
     a68:	aa20000e 	bge	800aa8 <startup-0x1f7ff558>
     a6c:	1a000000 	bne	a74 <startup-0x1ffff58c>
     a70:	23040069 	movwcs	r0, #16489	; 0x4069
     a74:	01430b01 	cmpeq	r3, r1, lsl #22
     a78:	91020000 	mrsls	r0, (UNDEF: 2)
     a7c:	0e521764 	cdpeq	7, 5, cr1, cr2, cr4, {3}
     a80:	00942000 	addseq	r2, r4, r0
     a84:	6a1a0000 	bvs	680a8c <startup-0x1f97f574>
     a88:	01240400 			; <UNDEFINED> instruction: 0x01240400
     a8c:	0001430c 	andeq	r4, r1, ip, lsl #6
     a90:	60910200 	addsvs	r0, r1, r0, lsl #4
     a94:	24000000 	strcs	r0, [r0], #-0
     a98:	0000008e 	andeq	r0, r0, lr, lsl #1
     a9c:	06010504 	streq	r0, [r1], -r4, lsl #10
     aa0:	20000c94 	mulcs	r0, r4, ip
     aa4:	00000018 	andeq	r0, r0, r8, lsl r0
     aa8:	44259c01 	strtmi	r9, [r5], #-3073	; 0xfffff3ff
     aac:	04000000 	streq	r0, [r0], #-0
     ab0:	0b5806fc 	bleq	16026a8 <startup-0x1e9fd958>
     ab4:	013c2000 	teqeq	ip, r0
     ab8:	9c010000 	stcls	0, cr0, [r1], {-0}
     abc:	00000ace 	andeq	r0, r0, lr, asr #21
     ac0:	04007026 	streq	r7, [r0], #-38	; 0xffffffda
     ac4:	025b1efc 	subseq	r1, fp, #252, 28	; 0xfc0
     ac8:	91020000 	mrsls	r0, (UNDEF: 2)
     acc:	d2270064 	eorle	r0, r7, #100	; 0x64
     ad0:	04000003 	streq	r0, [r0], #-3
     ad4:	0aea06f2 	beq	ffa826a4 <_ctype_+0xdfa7ff13>
     ad8:	006e2000 	rsbeq	r2, lr, r0
     adc:	9c010000 	stcls	0, cr0, [r1], {-0}
     ae0:	00000b13 	andeq	r0, r0, r3, lsl fp
     ae4:	000af017 	andeq	pc, sl, r7, lsl r0	; <UNPREDICTABLE>
     ae8:	00005a20 	andeq	r5, r0, r0, lsr #20
     aec:	00692800 	rsbeq	r2, r9, r0, lsl #16
     af0:	430af404 	movwmi	pc, #41988	; 0xa404	; <UNPREDICTABLE>
     af4:	02000001 	andeq	r0, r0, #1
     af8:	f6177491 			; <UNDEFINED> instruction: 0xf6177491
     afc:	4820000a 	stmdami	r0!, {r1, r3}
     b00:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
     b04:	f504006a 			; <UNDEFINED> instruction: 0xf504006a
     b08:	0001430b 	andeq	r4, r1, fp, lsl #6
     b0c:	70910200 	addsvc	r0, r1, r0, lsl #4
     b10:	25000000 	strcs	r0, [r0, #-0]
     b14:	000003c4 	andeq	r0, r0, r4, asr #7
     b18:	b806ed04 	stmdalt	r6, {r2, r8, sl, fp, sp, lr, pc}
     b1c:	3220000a 	eorcc	r0, r0, #10
     b20:	01000000 	mrseq	r0, (UNDEF: 0)
     b24:	000b379c 	muleq	fp, ip, r7
     b28:	00702600 	rsbseq	r2, r0, r0, lsl #12
     b2c:	5b22ed04 	blpl	8bbf44 <startup-0x1f7440bc>
     b30:	02000002 	andeq	r0, r0, #2
     b34:	25006c91 	strcs	r6, [r0, #-3217]	; 0xfffff36f
     b38:	00000213 	andeq	r0, r0, r3, lsl r2
     b3c:	a406d804 	strge	sp, [r6], #-2052	; 0xfffff7fc
     b40:	14200009 	strtne	r0, [r0], #-9
     b44:	01000001 	tsteq	r0, r1
     b48:	000be99c 	muleq	fp, ip, r9
     b4c:	00702600 	rsbseq	r2, r0, r0, lsl #12
     b50:	5b1fd804 	blpl	7f6b68 <startup-0x1f809498>
     b54:	02000002 	andeq	r0, r0, #2
     b58:	4b0b4c91 	blmi	2d3da4 <startup-0x1fd2c25c>
     b5c:	04000004 	streq	r0, [r0], #-4
     b60:	014306db 	ldrdeq	r0, [r3, #-107]	; 0xffffff95
     b64:	91020000 	mrsls	r0, (UNDEF: 2)
     b68:	09bc1f6c 	ldmibeq	ip!, {r2, r3, r5, r6, r8, r9, sl, fp, ip}
     b6c:	008c2000 	addeq	r2, ip, r0
     b70:	0ba20000 	bleq	fe880b78 <_ctype_+0xde87e3e7>
     b74:	74280000 	strtvc	r0, [r8], #-0
     b78:	04007473 	streq	r7, [r0], #-1139	; 0xfffffb8d
     b7c:	014307df 	ldrdeq	r0, [r3, #-127]	; 0xffffff81
     b80:	91020000 	mrsls	r0, (UNDEF: 2)
     b84:	78722860 	ldmdavc	r2!, {r5, r6, fp, sp}^
     b88:	07e00400 	strbeq	r0, [r0, r0, lsl #8]!
     b8c:	00000143 	andeq	r0, r0, r3, asr #2
     b90:	285c9102 	ldmdacs	ip, {r1, r8, ip, pc}^
     b94:	04007972 	streq	r7, [r0], #-2418	; 0xfffff68e
     b98:	014307e1 	smlaltteq	r0, r3, r1, r7
     b9c:	91020000 	mrsls	r0, (UNDEF: 2)
     ba0:	52170058 	andspl	r0, r7, #88	; 0x58
     ba4:	5420000a 	strtpl	r0, [r0], #-10
     ba8:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
     bac:	e9040069 	stmdb	r4, {r0, r3, r5, r6}
     bb0:	0001430a 	andeq	r4, r1, sl, lsl #6
     bb4:	68910200 	ldmvs	r1, {r9}
     bb8:	000a5817 	andeq	r5, sl, r7, lsl r8
     bbc:	00004220 	andeq	r4, r0, r0, lsr #4
     bc0:	006a2800 	rsbeq	r2, sl, r0, lsl #16
     bc4:	430bea04 	movwmi	lr, #47620	; 0xba04
     bc8:	02000001 	andeq	r0, r0, #1
     bcc:	5e176491 	cfcmpspl	r6, mvf7, mvf1
     bd0:	3020000a 	eorcc	r0, r0, sl
     bd4:	29000000 	stmdbcs	r0, {}	; <UNPREDICTABLE>
     bd8:	0000009e 	muleq	r0, lr, r0
     bdc:	4320eb04 			; <UNDEFINED> instruction: 0x4320eb04
     be0:	21000001 	tstcs	r0, r1
     be4:	00000000 	andeq	r0, r0, r0
     be8:	01282a00 			; <UNDEFINED> instruction: 0x01282a00
     bec:	cb040000 	blgt	100bf4 <startup-0x1feff40c>
     bf0:	00090806 	andeq	r0, r9, r6, lsl #16
     bf4:	00009c20 	andeq	r9, r0, r0, lsr #24
     bf8:	4c9c0100 	ldfmis	f0, [ip], {0}
     bfc:	0b00000c 	bleq	c34 <startup-0x1ffff3cc>
     c00:	000005e9 	andeq	r0, r0, r9, ror #11
     c04:	4306cd04 	movwmi	ip, #27908	; 0x6d04
     c08:	02000001 	andeq	r0, r0, #1
     c0c:	ae0b6891 	mcrge	8, 0, r6, cr11, cr1, {4}
     c10:	04000000 	streq	r0, [r0], #-0
     c14:	014306ce 	smlalbteq	r0, r3, lr, r6
     c18:	91020000 	mrsls	r0, (UNDEF: 2)
     c1c:	09161774 	ldmdbeq	r6, {r2, r4, r5, r6, r8, r9, sl, ip}
     c20:	00722000 	rsbseq	r2, r2, r0
     c24:	78280000 	stmdavc	r8!, {}	; <UNPREDICTABLE>
     c28:	0acf0400 	beq	ff3c1c30 <_ctype_+0xdf3bf49f>
     c2c:	00000143 	andeq	r0, r0, r3, asr #2
     c30:	17709102 	ldrbne	r9, [r0, -r2, lsl #2]!
     c34:	2000091c 	andcs	r0, r0, ip, lsl r9
     c38:	00000060 	andeq	r0, r0, r0, rrx
     c3c:	04007928 	streq	r7, [r0], #-2344	; 0xfffff6d8
     c40:	01430bd0 	ldrdeq	r0, [r3, #-176]	; 0xffffff50
     c44:	91020000 	mrsls	r0, (UNDEF: 2)
     c48:	0000006c 	andeq	r0, r0, ip, rrx
     c4c:	00043b2b 	andeq	r3, r4, fp, lsr #22
     c50:	05710400 	ldrbeq	r0, [r1, #-1024]!	; 0xfffffc00
     c54:	00000143 	andeq	r0, r0, r3, asr #2
     c58:	20000712 	andcs	r0, r0, r2, lsl r7
     c5c:	000001f6 	strdeq	r0, [r0], -r6
     c60:	0ccc9c01 	stcleq	12, cr9, [ip], {1}
     c64:	30170000 	andscc	r0, r7, r0
     c68:	9c200007 	stcls	0, cr0, [r0], #-28	; 0xffffffe4
     c6c:	23000001 	movwcs	r0, #1
     c70:	000000de 	ldrdeq	r0, [r0], -lr
     c74:	43037c04 	movwmi	r7, #15364	; 0x3c04
     c78:	81000001 	tsthi	r0, r1
     c7c:	2100000c 	tstcs	r0, ip
     c80:	00180b00 	andseq	r0, r8, r0, lsl #22
     c84:	7e040000 	cdpvc	0, 0, cr0, cr4, cr0, {0}
     c88:	00014307 	andeq	r4, r1, r7, lsl #6
     c8c:	6c910200 	lfmvs	f0, 4, [r1], {0}
     c90:	04007028 	streq	r7, [r0], #-40	; 0xffffffd8
     c94:	025b117f 	subseq	r1, fp, #-1073741793	; 0xc000001f
     c98:	91020000 	mrsls	r0, (UNDEF: 2)
     c9c:	040f0b58 	streq	r0, [pc], #-2904	; ca4 <startup-0x1ffff35c>
     ca0:	82040000 	andhi	r0, r4, #0
     ca4:	00004d08 	andeq	r4, r0, r8, lsl #26
     ca8:	6b910200 	blvs	fe4414b0 <_ctype_+0xde43ed1f>
     cac:	0004220b 	andeq	r2, r4, fp, lsl #4
     cb0:	08830400 	stmeq	r3, {sl}
     cb4:	0000004d 	andeq	r0, r0, sp, asr #32
     cb8:	0b6a9102 	bleq	1aa50c8 <startup-0x1e55af38>
     cbc:	000005fc 	strdeq	r0, [r0], -ip
     cc0:	43078404 	movwmi	r8, #29700	; 0x7404
     cc4:	02000001 	andeq	r0, r0, #1
     cc8:	00006491 	muleq	r0, r1, r4
     ccc:	0005b92c 	andeq	fp, r5, ip, lsr #18
     cd0:	060b0400 	streq	r0, [fp], -r0, lsl #8
     cd4:	20000000 	andcs	r0, r0, r0
     cd8:	00000012 	andeq	r0, r0, r2, lsl r0
     cdc:	49259c01 	stmdbmi	r5!, {r0, sl, fp, ip, pc}
     ce0:	03000002 	movweq	r0, #2
     ce4:	06ee06ad 	strbteq	r0, [lr], sp, lsr #13
     ce8:	00242000 	eoreq	r2, r4, r0
     cec:	9c010000 	stcls	0, cr0, [r1], {-0}
     cf0:	00000d03 	andeq	r0, r0, r3, lsl #26
     cf4:	00736d26 	rsbseq	r6, r3, r6, lsr #26
     cf8:	6a1fad03 	bvs	7ec10c <startup-0x1f813ef4>
     cfc:	02000000 	andeq	r0, r0, #0
     d00:	25007491 	strcs	r7, [r0, #-1169]	; 0xfffffb6f
     d04:	0000052f 	andeq	r0, r0, pc, lsr #10
     d08:	a8069d03 	stmdage	r6, {r0, r1, r8, sl, fp, ip, pc}
     d0c:	46200006 	strtmi	r0, [r0], -r6
     d10:	01000000 	mrseq	r0, (UNDEF: 0)
     d14:	000d289c 	muleq	sp, ip, r8
     d18:	73752600 	cmnvc	r5, #0, 12
     d1c:	1f9d0300 	svcne	0x009d0300
     d20:	0000006a 	andeq	r0, r0, sl, rrx
     d24:	00749102 	rsbseq	r9, r4, r2, lsl #2
     d28:	0002752d 	andeq	r7, r2, sp, lsr #10
     d2c:	068f0300 	streq	r0, [pc], r0, lsl #6
     d30:	20000664 	andcs	r0, r0, r4, ror #12
     d34:	00000044 	andeq	r0, r0, r4, asr #32
     d38:	a92e9c01 	stmdbge	lr!, {r0, sl, fp, ip, pc}
     d3c:	03000002 	movweq	r0, #2
     d40:	061c0686 	ldreq	r0, [ip], -r6, lsl #13
     d44:	00482000 	subeq	r2, r8, r0
     d48:	9c010000 	stcls	0, cr0, [r1], {-0}
     d4c:	00000d6b 	andeq	r0, r0, fp, ror #26
     d50:	03007826 	movweq	r7, #2086	; 0x826
     d54:	004d2186 	subeq	r2, sp, r6, lsl #3
     d58:	91020000 	mrsls	r0, (UNDEF: 2)
     d5c:	0063286f 	rsbeq	r2, r3, pc, ror #16
     d60:	4d078803 	stcmi	8, cr8, [r7, #-12]
     d64:	02000000 	andeq	r0, r0, #0
     d68:	2e007791 	mcrcs	7, 0, r7, cr0, cr1, {4}
     d6c:	0000048d 	andeq	r0, r0, sp, lsl #9
     d70:	e4068003 	str	r8, [r6], #-3
     d74:	38200005 	stmdacc	r0!, {r0, r2}
     d78:	01000000 	mrseq	r0, (UNDEF: 0)
     d7c:	000d9c9c 	muleq	sp, ip, ip
     d80:	00782600 	rsbseq	r2, r8, r0, lsl #12
     d84:	4d1f8003 	ldcmi	0, cr8, [pc, #-12]	; d80 <startup-0x1ffff280>
     d88:	02000000 	andeq	r0, r0, #0
     d8c:	63286f91 			; <UNDEFINED> instruction: 0x63286f91
     d90:	07820300 	streq	r0, [r2, r0, lsl #6]
     d94:	0000004d 	andeq	r0, r0, sp, asr #32
     d98:	00779102 	rsbseq	r9, r7, r2, lsl #2
     d9c:	00056125 	andeq	r6, r5, r5, lsr #2
     da0:	06790300 	ldrbteq	r0, [r9], -r0, lsl #6
     da4:	200005b4 			; <UNDEFINED> instruction: 0x200005b4
     da8:	00000030 	andeq	r0, r0, r0, lsr r0
     dac:	0dc29c01 	stcleq	12, cr9, [r2, #4]
     db0:	63260000 			; <UNDEFINED> instruction: 0x63260000
     db4:	0300646d 	movweq	r6, #1133	; 0x46d
     db8:	004d2279 	subeq	r2, sp, r9, ror r2
     dbc:	91020000 	mrsls	r0, (UNDEF: 2)
     dc0:	0d250077 	stceq	0, cr0, [r5, #-476]!	; 0xfffffe24
     dc4:	03000005 	movweq	r0, #5
     dc8:	058a0673 	streq	r0, [sl, #1651]	; 0x673
     dcc:	002a2000 	eoreq	r2, sl, r0
     dd0:	9c010000 	stcls	0, cr0, [r1], {-0}
     dd4:	00000de8 	andeq	r0, r0, r8, ror #27
     dd8:	646d6326 	strbtvs	r6, [sp], #-806	; 0xfffffcda
     ddc:	1f730300 	svcne	0x00730300
     de0:	0000004d 	andeq	r0, r0, sp, asr #32
     de4:	00779102 	rsbseq	r9, r7, r2, lsl #2
     de8:	00004e25 	andeq	r4, r0, r5, lsr #28
     dec:	066d0300 	strbteq	r0, [sp], -r0, lsl #6
     df0:	20000560 	andcs	r0, r0, r0, ror #10
     df4:	0000002a 	andeq	r0, r0, sl, lsr #32
     df8:	0e0e9c01 	cdpeq	12, 0, cr9, cr14, cr1, {0}
     dfc:	af2f0000 	svcge	0x002f0000
     e00:	03000005 	movweq	r0, #5
     e04:	004d1c6d 	subeq	r1, sp, sp, ror #24
     e08:	91020000 	mrsls	r0, (UNDEF: 2)
     e0c:	a5300077 	ldrge	r0, [r0, #-119]!	; 0xffffff89
     e10:	03000004 	movweq	r0, #4
     e14:	03240f64 			; <UNDEFINED> instruction: 0x03240f64
     e18:	052c0000 	streq	r0, [ip, #-0]!
     e1c:	00342000 	eorseq	r2, r4, r0
     e20:	9c010000 	stcls	0, cr0, [r1], {-0}
     e24:	00000e37 	andeq	r0, r0, r7, lsr lr
     e28:	00767228 	rsbseq	r7, r6, r8, lsr #4
     e2c:	24106903 	ldrcs	r6, [r0], #-2307	; 0xfffff6fd
     e30:	02000003 	andeq	r0, r0, #3
     e34:	30007791 	mulcc	r0, r1, r7
     e38:	0000053b 	andeq	r0, r0, fp, lsr r5
     e3c:	240f5b03 	strcs	r5, [pc], #-2819	; e44 <startup-0x1ffff1bc>
     e40:	ec000003 	stc	0, cr0, [r0], {3}
     e44:	40200004 	eormi	r0, r0, r4
     e48:	01000000 	mrseq	r0, (UNDEF: 0)
     e4c:	000e609c 	muleq	lr, ip, r0
     e50:	76722800 	ldrbtvc	r2, [r2], -r0, lsl #16
     e54:	10600300 	rsbne	r0, r0, r0, lsl #6
     e58:	00000324 	andeq	r0, r0, r4, lsr #6
     e5c:	006f9102 	rsbeq	r9, pc, r2, lsl #2
     e60:	0005a430 	andeq	sl, r5, r0, lsr r4
     e64:	0f510300 	svceq	0x00510300
     e68:	00000324 	andeq	r0, r0, r4, lsr #6
     e6c:	200004ac 	andcs	r0, r0, ip, lsr #9
     e70:	00000040 	andeq	r0, r0, r0, asr #32
     e74:	0e899c01 	cdpeq	12, 8, cr9, cr9, cr1, {0}
     e78:	72280000 	eorvc	r0, r8, #0
     e7c:	56030076 			; <UNDEFINED> instruction: 0x56030076
     e80:	00032410 	andeq	r2, r3, r0, lsl r4
     e84:	6f910200 	svcvs	0x00910200
     e88:	02672500 	rsbeq	r2, r7, #0, 10
     e8c:	49030000 	stmdbmi	r3, {}	; <UNPREDICTABLE>
     e90:	00047006 	andeq	r7, r4, r6
     e94:	00003c20 	andeq	r3, r0, r0, lsr #24
     e98:	af9c0100 	svcge	0x009c0100
     e9c:	2600000e 	strcs	r0, [r0], -lr
     ea0:	00646d63 	rsbeq	r6, r4, r3, ror #26
     ea4:	4d194903 	vldrmi.16	s8, [r9, #-6]	; <UNPREDICTABLE>
     ea8:	02000000 	andeq	r0, r0, #0
     eac:	25007791 	strcs	r7, [r0, #-1937]	; 0xfffff86f
     eb0:	0000010d 	andeq	r0, r0, sp, lsl #2
     eb4:	34064203 	strcc	r4, [r6], #-515	; 0xfffffdfd
     eb8:	3c200004 	stccc	0, cr0, [r0], #-16
     ebc:	01000000 	mrseq	r0, (UNDEF: 0)
     ec0:	000ed49c 	muleq	lr, ip, r4
     ec4:	68632600 	stmdavs	r3!, {r9, sl, sp}^
     ec8:	1c420300 	mcrrne	3, 0, r0, r2, cr0
     ecc:	0000004d 	andeq	r0, r0, sp, asr #32
     ed0:	00779102 	rsbseq	r9, r7, r2, lsl #2
     ed4:	0005c125 	andeq	ip, r5, r5, lsr #2
     ed8:	06370300 	ldrteq	r0, [r7], -r0, lsl #6
     edc:	200003d6 	ldrdcs	r0, [r0], -r6
     ee0:	0000005e 	andeq	r0, r0, lr, asr r0
     ee4:	0f229c01 	svceq	0x00229c01
     ee8:	6e260000 	cdpvs	0, 2, cr0, cr6, cr0, {0}
     eec:	03006d75 	movweq	r6, #3445	; 0xd75
     ef0:	01431d37 	cmpeq	r3, r7, lsr sp
     ef4:	91020000 	mrsls	r0, (UNDEF: 2)
     ef8:	03f4176c 	mvnseq	r1, #108, 14	; 0x1b00000
     efc:	00382000 	eorseq	r2, r8, r0
     f00:	860b0000 	strhi	r0, [fp], -r0
     f04:	03000005 	movweq	r0, #5
     f08:	0143073c 	cmpeq	r3, ip, lsr r7
     f0c:	91020000 	mrsls	r0, (UNDEF: 2)
     f10:	04880b74 	streq	r0, [r8], #2932	; 0xb74
     f14:	3d030000 	stccc	0, cr0, [r3, #-0]
     f18:	00014307 	andeq	r4, r1, r7, lsl #6
     f1c:	70910200 	addsvc	r0, r1, r0, lsl #4
     f20:	81250000 			; <UNDEFINED> instruction: 0x81250000
     f24:	03000002 	movweq	r0, #2
     f28:	03ac0632 			; <UNDEFINED> instruction: 0x03ac0632
     f2c:	002a2000 	eoreq	r2, sl, r0
     f30:	9c010000 	stcls	0, cr0, [r1], {-0}
     f34:	00000f46 	andeq	r0, r0, r6, asr #30
     f38:	03007026 	movweq	r7, #38	; 0x26
     f3c:	0f462032 	svceq	0x00462032
     f40:	91020000 	mrsls	r0, (UNDEF: 2)
     f44:	04100074 	ldreq	r0, [r0], #-116	; 0xffffff8c
     f48:	0000004d 	andeq	r0, r0, sp, asr #32
     f4c:	00041525 	andeq	r1, r4, r5, lsr #10
     f50:	062c0300 	strteq	r0, [ip], -r0, lsl #6
     f54:	20000370 	andcs	r0, r0, r0, ror r3
     f58:	0000003c 	andeq	r0, r0, ip, lsr r0
     f5c:	0f8c9c01 	svceq	0x008c9c01
     f60:	78260000 	stmdavc	r6!, {}	; <UNPREDICTABLE>
     f64:	172c0300 	strne	r0, [ip, -r0, lsl #6]!
     f68:	00000143 	andeq	r0, r0, r3, asr #2
     f6c:	266c9102 	strbtcs	r9, [ip], -r2, lsl #2
     f70:	2c030079 	stccs	0, cr0, [r3], {121}	; 0x79
     f74:	0001431e 	andeq	r4, r1, lr, lsl r3
     f78:	68910200 	ldmvs	r1, {r9}
     f7c:	0004e10b 	andeq	lr, r4, fp, lsl #2
     f80:	062e0300 	strteq	r0, [lr], -r0, lsl #6
     f84:	00000143 	andeq	r0, r0, r3, asr #2
     f88:	00749102 	rsbseq	r9, r4, r2, lsl #2
     f8c:	00063d27 	andeq	r3, r6, r7, lsr #26
     f90:	06250300 	strteq	r0, [r5], -r0, lsl #6
     f94:	20000344 	andcs	r0, r0, r4, asr #6
     f98:	0000002c 	andeq	r0, r0, ip, lsr #32
     f9c:	0fb19c01 	svceq	0x00b19c01
     fa0:	15290000 	strne	r0, [r9, #-0]!
     fa4:	03000004 	movweq	r0, #4
     fa8:	0143022a 	cmpeq	r3, sl, lsr #4
     fac:	00210000 	eoreq	r0, r1, r0
     fb0:	00242d00 	eoreq	r2, r4, r0, lsl #26
     fb4:	48020000 	stmdami	r2, {}	; <UNPREDICTABLE>
     fb8:	00032406 	andeq	r2, r3, r6, lsl #8
     fbc:	00002020 	andeq	r2, r0, r0, lsr #32
     fc0:	2e9c0100 	fmlcse	f0, f4, f0
     fc4:	00000178 	andeq	r0, r0, r8, ror r1
     fc8:	dc064002 	stcle	0, cr4, [r6], {2}
     fcc:	48200002 	stmdami	r0!, {r1}
     fd0:	01000000 	mrseq	r0, (UNDEF: 0)
     fd4:	000fe79c 	muleq	pc, ip, r7	; <UNPREDICTABLE>
     fd8:	00722600 	rsbseq	r2, r2, r0, lsl #12
     fdc:	43164002 	tstmi	r6, #2
     fe0:	02000001 	andeq	r0, r0, #1
     fe4:	27007491 			; <UNDEFINED> instruction: 0x27007491
     fe8:	000005d4 	ldrdeq	r0, [r0], -r4
     fec:	b4063a02 	strlt	r3, [r6], #-2562	; 0xfffff5fe
     ff0:	28200002 	stmdacs	r0!, {r1}
     ff4:	01000000 	mrseq	r0, (UNDEF: 0)
     ff8:	00100c9c 	mulseq	r0, ip, ip
     ffc:	01782900 	cmneq	r8, r0, lsl #18
    1000:	3d020000 	stccc	0, cr0, [r2, #-0]
    1004:	00014302 	andeq	r4, r1, r2, lsl #6
    1008:	00002100 	andeq	r2, r0, r0, lsl #2
    100c:	00022f2d 	andeq	r2, r2, sp, lsr #30
    1010:	062f0200 	strteq	r0, [pc], -r0, lsl #4
    1014:	2000026c 	andcs	r0, r0, ip, ror #4
    1018:	00000048 	andeq	r0, r0, r8, asr #32
    101c:	f62d9c01 			; <UNDEFINED> instruction: 0xf62d9c01
    1020:	02000003 	andeq	r0, r0, #3
    1024:	01c8061d 	biceq	r0, r8, sp, lsl r6
    1028:	00a42000 	adceq	r2, r4, r0
    102c:	9c010000 	stcls	0, cr0, [r1], {-0}
    1030:	00014425 	andeq	r4, r1, r5, lsr #8
    1034:	06510100 	ldrbeq	r0, [r1], -r0, lsl #2
    1038:	2000017c 	andcs	r0, r0, ip, ror r1
    103c:	0000004c 	andeq	r0, r0, ip, asr #32
    1040:	10569c01 	subsne	r9, r6, r1, lsl #24
    1044:	3e2f0000 	cdpcc	0, 2, cr0, cr15, cr0, {0}
    1048:	01000000 	mrseq	r0, (UNDEF: 0)
    104c:	006a1a51 	rsbeq	r1, sl, r1, asr sl
    1050:	91020000 	mrsls	r0, (UNDEF: 2)
    1054:	8b2c0074 	blhi	b0122c <startup-0x1f4fedd4>
    1058:	01000005 	tsteq	r0, r5
    105c:	014c064a 	cmpeq	ip, sl, asr #12
    1060:	00302000 	eorseq	r2, r0, r0
    1064:	9c010000 	stcls	0, cr0, [r1], {-0}
    1068:	00060531 	andeq	r0, r6, r1, lsr r5
    106c:	063f0100 	ldrteq	r0, [pc], -r0, lsl #2
    1070:	20000108 	andcs	r0, r0, r8, lsl #2
    1074:	00000044 	andeq	r0, r0, r4, asr #32
    1078:	5f259c01 	svcpl	0x00259c01
    107c:	01000001 	tsteq	r0, r1
    1080:	00e80639 	rsceq	r0, r8, r9, lsr r6
    1084:	00202000 	eoreq	r2, r0, r0
    1088:	9c010000 	stcls	0, cr0, [r1], {-0}
    108c:	000010c5 	andeq	r1, r0, r5, asr #1
    1090:	0000f41f 	andeq	pc, r0, pc, lsl r4	; <UNPREDICTABLE>
    1094:	00000420 	andeq	r0, r0, r0, lsr #8
    1098:	0010ac00 	andseq	sl, r0, r0, lsl #24
    109c:	058b2900 	streq	r2, [fp, #2304]	; 0x900
    10a0:	3b010000 	blcc	410a8 <startup-0x1ffbef58>
    10a4:	00014314 	andeq	r4, r1, r4, lsl r3
    10a8:	00002100 	andeq	r2, r0, r0, lsl #2
    10ac:	0000fa17 	andeq	pc, r0, r7, lsl sl	; <UNPREDICTABLE>
    10b0:	00000420 	andeq	r0, r0, r0, lsr #8
    10b4:	06052900 	streq	r2, [r5], -r0, lsl #18
    10b8:	3c010000 	stccc	0, cr0, [r1], {-0}
    10bc:	00014307 	andeq	r4, r1, r7, lsl #6
    10c0:	00002100 	andeq	r2, r0, r0, lsl #2
    10c4:	03dc2c00 	bicseq	r2, ip, #0, 24
    10c8:	31010000 	mrscc	r0, (UNDEF: 1)
    10cc:	0000b806 	andeq	fp, r0, r6, lsl #16
    10d0:	00003020 	andeq	r3, r0, r0, lsr #32
    10d4:	2d9c0100 	ldfcss	f0, [ip]
    10d8:	00000402 	andeq	r0, r0, r2, lsl #8
    10dc:	a0062b01 	andge	r2, r6, r1, lsl #22
    10e0:	18200000 	stmdane	r0!, {}	; <UNPREDICTABLE>
    10e4:	01000000 	mrseq	r0, (UNDEF: 0)
    10e8:	00792d9c 			; <UNDEFINED> instruction: 0x00792d9c
    10ec:	25010000 	strcs	r0, [r1, #-0]
    10f0:	00008006 	andeq	r8, r0, r6
    10f4:	00002020 	andeq	r2, r0, r0, lsr #32
    10f8:	329c0100 	addscc	r0, ip, #0, 2
    10fc:	000002be 			; <UNDEFINED> instruction: 0x000002be
    1100:	43051f01 	movwmi	r1, #24321	; 0x5f01
    1104:	5c000001 	stcpl	0, cr0, [r0], {1}
    1108:	24200000 	strtcs	r0, [r0], #-0
    110c:	01000000 	mrseq	r0, (UNDEF: 0)
    1110:	02082d9c 	andeq	r2, r8, #156, 26	; 0x2700
    1114:	16010000 	strne	r0, [r1], -r0
    1118:	00001406 	andeq	r1, r0, r6, lsl #8
    111c:	00004820 	andeq	r4, r0, r0, lsr #16
    1120:	009c0100 	addseq	r0, ip, r0, lsl #2

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
   c:	10011117 	andne	r1, r1, r7, lsl r1
  10:	02000017 	andeq	r0, r0, #23
  14:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
  18:	0b3a0b0b 	bleq	e82c4c <startup-0x1f17d3b4>
  1c:	0b390b3b 	bleq	e42d10 <startup-0x1f1bd2f0>
  20:	00001301 	andeq	r1, r0, r1, lsl #6
  24:	03000d03 	movweq	r0, #3331	; 0xd03
  28:	3b0b3a08 	blcc	2ce850 <startup-0x1fd317b0>
  2c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
  30:	000b3813 	andeq	r3, fp, r3, lsl r8
  34:	000d0400 	andeq	r0, sp, r0, lsl #8
  38:	0b3a0e03 	bleq	e8384c <startup-0x1f17c7b4>
  3c:	0b390b3b 	bleq	e42d30 <startup-0x1f1bd2d0>
  40:	0b381349 	bleq	e04d6c <startup-0x1f1fb294>
  44:	24050000 	strcs	r0, [r5], #-0
  48:	3e0b0b00 	vmlacc.f64	d0, d11, d0
  4c:	000e030b 	andeq	r0, lr, fp, lsl #6
  50:	01010600 	tsteq	r1, r0, lsl #12
  54:	13011349 	movwne	r1, #4937	; 0x1349
  58:	21070000 	mrscs	r0, (UNDEF: 7)
  5c:	2f134900 	svccs	0x00134900
  60:	0800000b 	stmdaeq	r0, {r0, r1, r3}
  64:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
  68:	0b3b0b3a 	bleq	ec2d58 <startup-0x1f13d2a8>
  6c:	13490b39 	movtne	r0, #39737	; 0x9b39
  70:	34090000 	strcc	r0, [r9], #-0
  74:	3a0e0300 	bcc	380c7c <startup-0x1fc7f384>
  78:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  7c:	3f13490b 	svccc	0x0013490b
  80:	00180219 	andseq	r0, r8, r9, lsl r2
  84:	00340a00 	eorseq	r0, r4, r0, lsl #20
  88:	0b3a0803 	bleq	e8209c <startup-0x1f17df64>
  8c:	0b390b3b 	bleq	e42d80 <startup-0x1f1bd280>
  90:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
  94:	00001802 	andeq	r1, r0, r2, lsl #16
  98:	0300340b 	movweq	r3, #1035	; 0x40b
  9c:	3b0b3a0e 	blcc	2ce8dc <startup-0x1fd31724>
  a0:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
  a4:	00180213 	andseq	r0, r8, r3, lsl r2
  a8:	00240c00 	eoreq	r0, r4, r0, lsl #24
  ac:	0b3e0b0b 	bleq	f82ce0 <startup-0x1f07d320>
  b0:	00000803 	andeq	r0, r0, r3, lsl #16
  b4:	4900350d 	stmdbmi	r0, {r0, r2, r3, r8, sl, ip, sp}
  b8:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
  bc:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
  c0:	13011349 	movwne	r1, #4937	; 0x1349
  c4:	050f0000 	streq	r0, [pc, #-0]	; cc <startup-0x1fffff34>
  c8:	00134900 	andseq	r4, r3, r0, lsl #18
  cc:	000f1000 	andeq	r1, pc, r0
  d0:	13490b0b 	movtne	r0, #39691	; 0x9b0b
  d4:	34110000 	ldrcc	r0, [r1], #-0
  d8:	3a0e0300 	bcc	380ce0 <startup-0x1fc7f320>
  dc:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
  e0:	3f13490b 	svccc	0x0013490b
  e4:	00180219 	andseq	r0, r8, r9, lsl r2
  e8:	012e1200 			; <UNDEFINED> instruction: 0x012e1200
  ec:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
  f0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
  f4:	13490b39 	movtne	r0, #39737	; 0x9b39
  f8:	06120111 			; <UNDEFINED> instruction: 0x06120111
  fc:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 100:	00130119 	andseq	r0, r3, r9, lsl r1
 104:	00341300 	eorseq	r1, r4, r0, lsl #6
 108:	0b3a0e03 	bleq	e8391c <startup-0x1f17c6e4>
 10c:	0b39053b 	bleq	e41600 <startup-0x1f1bea00>
 110:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 114:	2e140000 	cdpcs	0, 1, cr0, cr4, cr0, {0}
 118:	03193f01 	tsteq	r9, #1, 30
 11c:	3b0b3a0e 	blcc	2ce95c <startup-0x1fd316a4>
 120:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
 124:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 128:	96184006 	ldrls	r4, [r8], -r6
 12c:	13011942 	movwne	r1, #6466	; 0x1942
 130:	05150000 	ldreq	r0, [r5, #-0]
 134:	3a0e0300 	bcc	380d3c <startup-0x1fc7f2c4>
 138:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 13c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 140:	16000018 			; <UNDEFINED> instruction: 0x16000018
 144:	08030005 	stmdaeq	r3, {r0, r2}
 148:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 14c:	13490b39 	movtne	r0, #39737	; 0x9b39
 150:	00001802 	andeq	r1, r0, r2, lsl #16
 154:	11010b17 	tstne	r1, r7, lsl fp
 158:	00061201 	andeq	r1, r6, r1, lsl #4
 15c:	012e1800 			; <UNDEFINED> instruction: 0x012e1800
 160:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 164:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 168:	01110b39 	tsteq	r1, r9, lsr fp
 16c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 170:	01194296 			; <UNDEFINED> instruction: 0x01194296
 174:	19000013 	stmdbne	r0, {r0, r1, r4}
 178:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 17c:	0b3a0e03 	bleq	e83990 <startup-0x1f17c670>
 180:	0b39053b 	bleq	e41674 <startup-0x1f1be98c>
 184:	13491927 	movtne	r1, #39207	; 0x9927
 188:	06120111 			; <UNDEFINED> instruction: 0x06120111
 18c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 190:	00130119 	andseq	r0, r3, r9, lsl r1
 194:	00341a00 	eorseq	r1, r4, r0, lsl #20
 198:	0b3a0803 	bleq	e821ac <startup-0x1f17de54>
 19c:	0b39053b 	bleq	e41690 <startup-0x1f1be970>
 1a0:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 1a4:	2e1b0000 	cdpcs	0, 1, cr0, cr11, cr0, {0}
 1a8:	03193f01 	tsteq	r9, #1, 30
 1ac:	3b0b3a0e 	blcc	2ce9ec <startup-0x1fd31614>
 1b0:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
 1b4:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 1b8:	97184006 	ldrls	r4, [r8, -r6]
 1bc:	13011942 	movwne	r1, #6466	; 0x1942
 1c0:	2e1c0000 	cdpcs	0, 1, cr0, cr12, cr0, {0}
 1c4:	03193f01 	tsteq	r9, #1, 30
 1c8:	3b0b3a0e 	blcc	2cea08 <startup-0x1fd315f8>
 1cc:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
 1d0:	11134919 	tstne	r3, r9, lsl r9
 1d4:	40061201 	andmi	r1, r6, r1, lsl #4
 1d8:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 1dc:	00001301 	andeq	r1, r0, r1, lsl #6
 1e0:	3f002e1d 	svccc	0x00002e1d
 1e4:	3a0e0319 	bcc	380e50 <startup-0x1fc7f1b0>
 1e8:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 1ec:	1119270b 	tstne	r9, fp, lsl #14
 1f0:	40061201 	andmi	r1, r6, r1, lsl #4
 1f4:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 1f8:	2e1e0000 	cdpcs	0, 1, cr0, cr14, cr0, {0}
 1fc:	03193f00 	tsteq	r9, #0, 30
 200:	3b0b3a0e 	blcc	2cea40 <startup-0x1fd315c0>
 204:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
 208:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 20c:	97184006 	ldrls	r4, [r8, -r6]
 210:	00001942 	andeq	r1, r0, r2, asr #18
 214:	11010b1f 	tstne	r1, pc, lsl fp
 218:	01061201 	tsteq	r6, r1, lsl #4
 21c:	20000013 	andcs	r0, r0, r3, lsl r0
 220:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 224:	0b3a0e03 	bleq	e83a38 <startup-0x1f17c5c8>
 228:	0b39053b 	bleq	e4171c <startup-0x1f1be8e4>
 22c:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
 230:	18210000 	stmdane	r1!, {}	; <UNPREDICTABLE>
 234:	22000000 	andcs	r0, r0, #0
 238:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 23c:	0b3a0e03 	bleq	e83a50 <startup-0x1f17c5b0>
 240:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 244:	1301193c 	movwne	r1, #6460	; 0x193c
 248:	2e230000 	cdpcs	0, 2, cr0, cr3, cr0, {0}
 24c:	03193f01 	tsteq	r9, #1, 30
 250:	3b0b3a0e 	blcc	2cea90 <startup-0x1fd31570>
 254:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 258:	01193c13 	tsteq	r9, r3, lsl ip
 25c:	24000013 	strcs	r0, [r0], #-19	; 0xffffffed
 260:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 264:	0b3a0e03 	bleq	e83a78 <startup-0x1f17c588>
 268:	0b39053b 	bleq	e4175c <startup-0x1f1be8a4>
 26c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 270:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 274:	25000019 	strcs	r0, [r0, #-25]	; 0xffffffe7
 278:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 27c:	0b3a0e03 	bleq	e83a90 <startup-0x1f17c570>
 280:	0b390b3b 	bleq	e42f74 <startup-0x1f1bd08c>
 284:	01111927 	tsteq	r1, r7, lsr #18
 288:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 28c:	01194296 			; <UNDEFINED> instruction: 0x01194296
 290:	26000013 			; <UNDEFINED> instruction: 0x26000013
 294:	08030005 	stmdaeq	r3, {r0, r2}
 298:	0b3b0b3a 	bleq	ec2f88 <startup-0x1f13d078>
 29c:	13490b39 	movtne	r0, #39737	; 0x9b39
 2a0:	00001802 	andeq	r1, r0, r2, lsl #16
 2a4:	3f012e27 	svccc	0x00012e27
 2a8:	3a0e0319 	bcc	380f14 <startup-0x1fc7f0ec>
 2ac:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 2b0:	1201110b 	andne	r1, r1, #-1073741822	; 0xc0000002
 2b4:	96184006 	ldrls	r4, [r8], -r6
 2b8:	13011942 	movwne	r1, #6466	; 0x1942
 2bc:	34280000 	strtcc	r0, [r8], #-0
 2c0:	3a080300 	bcc	200ec8 <startup-0x1fdff138>
 2c4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 2c8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 2cc:	29000018 	stmdbcs	r0, {r3, r4}
 2d0:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 2d4:	0b3a0e03 	bleq	e83ae8 <startup-0x1f17c518>
 2d8:	0b390b3b 	bleq	e42fcc <startup-0x1f1bd034>
 2dc:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
 2e0:	2e2a0000 	cdpcs	0, 2, cr0, cr10, cr0, {0}
 2e4:	03193f01 	tsteq	r9, #1, 30
 2e8:	3b0b3a0e 	blcc	2ceb28 <startup-0x1fd314d8>
 2ec:	110b390b 	tstne	fp, fp, lsl #18
 2f0:	40061201 	andmi	r1, r6, r1, lsl #4
 2f4:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 2f8:	00001301 	andeq	r1, r0, r1, lsl #6
 2fc:	3f012e2b 	svccc	0x00012e2b
 300:	3a0e0319 	bcc	380f6c <startup-0x1fc7f094>
 304:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 308:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 30c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 310:	96184006 	ldrls	r4, [r8], -r6
 314:	13011942 	movwne	r1, #6466	; 0x1942
 318:	2e2c0000 	cdpcs	0, 2, cr0, cr12, cr0, {0}
 31c:	03193f00 	tsteq	r9, #0, 30
 320:	3b0b3a0e 	blcc	2ceb60 <startup-0x1fd314a0>
 324:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 328:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 32c:	97184006 	ldrls	r4, [r8, -r6]
 330:	00001942 	andeq	r1, r0, r2, asr #18
 334:	3f002e2d 	svccc	0x00002e2d
 338:	3a0e0319 	bcc	380fa4 <startup-0x1fc7f05c>
 33c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 340:	1201110b 	andne	r1, r1, #-1073741822	; 0xc0000002
 344:	97184006 	ldrls	r4, [r8, -r6]
 348:	00001942 	andeq	r1, r0, r2, asr #18
 34c:	3f012e2e 	svccc	0x00012e2e
 350:	3a0e0319 	bcc	380fbc <startup-0x1fc7f044>
 354:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 358:	1119270b 	tstne	r9, fp, lsl #14
 35c:	40061201 	andmi	r1, r6, r1, lsl #4
 360:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 364:	00001301 	andeq	r1, r0, r1, lsl #6
 368:	0300052f 	movweq	r0, #1327	; 0x52f
 36c:	3b0b3a0e 	blcc	2cebac <startup-0x1fd31454>
 370:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 374:	00180213 	andseq	r0, r8, r3, lsl r2
 378:	012e3000 			; <UNDEFINED> instruction: 0x012e3000
 37c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 380:	0b3b0b3a 	bleq	ec3070 <startup-0x1f13cf90>
 384:	13490b39 	movtne	r0, #39737	; 0x9b39
 388:	06120111 			; <UNDEFINED> instruction: 0x06120111
 38c:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 390:	00130119 	andseq	r0, r3, r9, lsl r1
 394:	002e3100 	eoreq	r3, lr, r0, lsl #2
 398:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 39c:	0b3b0b3a 	bleq	ec308c <startup-0x1f13cf74>
 3a0:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 3a4:	06120111 			; <UNDEFINED> instruction: 0x06120111
 3a8:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 3ac:	32000019 	andcc	r0, r0, #25
 3b0:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 3b4:	0b3a0e03 	bleq	e83bc8 <startup-0x1f17c438>
 3b8:	0b390b3b 	bleq	e430ac <startup-0x1f1bcf54>
 3bc:	01111349 	tsteq	r1, r9, asr #6
 3c0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 3c4:	00194297 	mulseq	r9, r7, r2
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000014 	andcs	r0, r0, r4, lsl r0
  14:	00001820 	andeq	r1, r0, r0, lsr #16
  18:	20000000 	andcs	r0, r0, r0
  1c:	00000012 	andeq	r0, r0, r2, lsl r0
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000014 	andcs	r0, r0, r4, lsl r0
   4:	20001834 	andcs	r1, r0, r4, lsr r8
   8:	20000000 	andcs	r0, r0, r0
   c:	20000012 	andcs	r0, r0, r2, lsl r0
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	00000b00 	andeq	r0, r0, r0, lsl #22
   4:	00b50003 	adcseq	r0, r5, r3
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	43010000 	movwmi	r0, #4096	; 0x1000
  1c:	68432f3a 	stmdavs	r3, {r1, r3, r4, r5, r8, r9, sl, fp, sp}^
  20:	656d6c61 	strbvs	r6, [sp, #-3169]!	; 0xfffff39f
  24:	592f7372 	stmdbpl	pc!, {r1, r4, r5, r6, r8, r9, ip, sp, lr}	; <UNPREDICTABLE>
  28:	31726165 	cmncc	r2, r5, ror #2
  2c:	34504c2f 	ldrbcc	r4, [r0], #-3119	; 0xfffff3d1
  30:	504f4d2f 	subpl	r4, pc, pc, lsr #26
  34:	504f4d2f 	subpl	r4, pc, pc, lsr #26
  38:	62614c2f 	rsbvs	r4, r1, #12032	; 0x2f00
  3c:	694d3562 	stmdbvs	sp, {r1, r5, r6, r8, sl, ip, sp}^
  40:	7753656e 	ldrbvc	r6, [r3, -lr, ror #10]
  44:	65706565 	ldrbvs	r6, [r0, #-1381]!	; 0xfffffa9b
  48:	696d2f72 	stmdbvs	sp!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
  4c:	7753656e 	ldrbvc	r6, [r3, -lr, ror #10]
  50:	65706565 	ldrbvs	r6, [r0, #-1381]!	; 0xfffffa9b
  54:	2f444772 	svccs	0x00444772
  58:	656e694d 	strbvs	r6, [lr, #-2381]!	; 0xfffff6b3
  5c:	65657753 	strbvs	r7, [r5, #-1875]!	; 0xfffff8ad
  60:	47726570 			; <UNDEFINED> instruction: 0x47726570
  64:	73000044 	movwvc	r0, #68	; 0x44
  68:	69747379 	ldmdbvs	r4!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}^
  6c:	682e6b63 	stmdavs	lr!, {r0, r1, r5, r6, r8, r9, fp, sp, lr}
  70:	00000100 	andeq	r0, r0, r0, lsl #2
  74:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
  78:	682e3672 	stmdavs	lr!, {r1, r4, r5, r6, r9, sl, ip, sp}
  7c:	00000100 	andeq	r0, r0, r0, lsl #2
  80:	49435341 	stmdbmi	r3, {r0, r6, r8, r9, ip, lr}^
  84:	73694449 	cmnvc	r9, #1224736768	; 0x49000000
  88:	00682e70 	rsbeq	r2, r8, r0, ror lr
  8c:	73000001 	movwvc	r0, #1
  90:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
  94:	632e7075 			; <UNDEFINED> instruction: 0x632e7075
  98:	00000100 	andeq	r0, r0, r0, lsl #2
  9c:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
  a0:	6f665f73 	svcvs	0x00665f73
  a4:	69645f72 	stmdbvs	r4!, {r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
  a8:	682e7073 	stmdavs	lr!, {r0, r1, r4, r5, r6, ip, sp, lr}
  ac:	00000100 	andeq	r0, r0, r0, lsl #2
  b0:	6975623c 	ldmdbvs	r5!, {r2, r3, r4, r5, r9, sp, lr}^
  b4:	692d746c 	pushvs	{r2, r3, r5, r6, sl, ip, sp, lr}
  b8:	00003e6e 	andeq	r3, r0, lr, ror #28
  bc:	05000000 	streq	r0, [r0, #-0]
  c0:	02050001 	andeq	r0, r5, #1
  c4:	20000014 	andcs	r0, r0, r4, lsl r0
  c8:	05011603 	streq	r1, [r1, #-1539]	; 0xfffff9fd
  cc:	04052f05 	streq	r2, [r5], #-3845	; 0xfffff0fb
  d0:	2f10052e 	svccs	0x0010052e
  d4:	053d0205 	ldreq	r0, [sp, #-517]!	; 0xfffffdfb
  d8:	0205200c 	andeq	r2, r5, #12
  dc:	200c052f 	andcs	r0, ip, pc, lsr #10
  e0:	052f0205 	streq	r0, [pc, #-517]!	; fffffee3 <_ctype_+0xdfffd752>
  e4:	0205200b 	andeq	r2, r5, #11
  e8:	200c052f 	andcs	r0, ip, pc, lsr #10
  ec:	05370f05 	ldreq	r0, [r7, #-3845]!	; 0xfffff0fb
  f0:	05ca2601 	strbeq	r2, [sl, #1537]	; 0x601
  f4:	04052f05 	streq	r2, [r5], #-3845	; 0xfffff0fb
  f8:	2f0a052e 	svccs	0x000a052e
  fc:	053d0e05 	ldreq	r0, [sp, #-3589]!	; 0xfffff1fb
 100:	05842101 	streq	r2, [r4, #257]	; 0x101
 104:	0c052f02 	stceq	15, cr2, [r5], {2}
 108:	2f100520 	svccs	0x00100520
 10c:	853d0105 	ldrhi	r0, [sp, #-261]!	; 0xfffffefb
 110:	05300205 	ldreq	r0, [r0, #-517]!	; 0xfffffdfb
 114:	01052023 	tsteq	r5, r3, lsr #32
 118:	0205772f 	andeq	r7, r5, #12320768	; 0xbc0000
 11c:	200c052f 	andcs	r0, ip, pc, lsr #10
 120:	052f0205 	streq	r0, [pc, #-517]!	; ffffff23 <_ctype_+0xdfffd792>
 124:	0205200c 	andeq	r2, r5, #12
 128:	200b052f 	andcs	r0, fp, pc, lsr #10
 12c:	052f0205 	streq	r0, [pc, #-517]!	; ffffff2f <_ctype_+0xdfffd79e>
 130:	0105200c 	tsteq	r5, ip
 134:	0505a12f 	streq	sl, [r5, #-303]	; 0xfffffed1
 138:	2e04052f 	cfsh32cs	mvfx0, mvfx4, #31
 13c:	02001405 	andeq	r1, r0, #83886080	; 0x5000000
 140:	052e0104 	streq	r0, [lr, #-260]!	; 0xfffffefc
 144:	04020001 	streq	r0, [r2], #-1
 148:	07053001 	streq	r3, [r5, -r1]
 14c:	2f01051f 	svccs	0x0001051f
 150:	2f02055b 	svccs	0x0002055b
 154:	05200c05 	streq	r0, [r0, #-3077]!	; 0xfffff3fb
 158:	12052f0e 	andne	r2, r5, #14, 30	; 0x38
 15c:	2e040559 	cfrshl32cs	mvfx4, mvfx9, r0
 160:	02001805 	andeq	r1, r0, #327680	; 0x50000
 164:	052e0104 	streq	r0, [lr, #-260]!	; 0xfffffefc
 168:	04020001 	streq	r0, [r2], #-1
 16c:	11053401 	tstne	r5, r1, lsl #8
 170:	3d0d051d 	cfstr32cc	mvfx0, [sp, #-116]	; 0xffffff8c
 174:	ae3e0105 	rsfgee	f0, f6, f5
 178:	052f0205 	streq	r0, [pc, #-517]!	; ffffff7b <_ctype_+0xdfffd7ea>
 17c:	0205200c 	andeq	r2, r5, #12
 180:	200c052f 	andcs	r0, ip, pc, lsr #10
 184:	052f0205 	streq	r0, [pc, #-517]!	; ffffff87 <_ctype_+0xdfffd7f6>
 188:	0205200b 	andeq	r2, r5, #11
 18c:	200c052f 	andcs	r0, ip, pc, lsr #10
 190:	a02f0105 	eorge	r0, pc, r5, lsl #2
 194:	054b0505 	strbeq	r0, [fp, #-1285]	; 0xfffffafb
 198:	0b052e04 	bleq	14b9b0 <startup-0x1feb4650>
 19c:	3d04052f 	cfstr32cc	mvfx0, [r4, #-188]	; 0xffffff44
 1a0:	053d0e05 	ldreq	r0, [sp, #-3589]!	; 0xfffff1fb
 1a4:	02053d0f 	andeq	r3, r5, #960	; 0x3c0
 1a8:	3714053d 			; <UNDEFINED> instruction: 0x3714053d
 1ac:	05301305 	ldreq	r1, [r0, #-773]!	; 0xfffffcfb
 1b0:	02042401 	andeq	r2, r4, #16777216	; 0x1000000
 1b4:	05ba4503 	ldreq	r4, [sl, #1283]!	; 0x503
 1b8:	0a052f08 	beq	14bde0 <startup-0x1feb4220>
 1bc:	3d0c053d 	cfstr32cc	mvfx0, [ip, #-244]	; 0xffffff0c
 1c0:	05840305 	streq	r0, [r4, #773]	; 0x305
 1c4:	12054a0f 	andne	r4, r5, #61440	; 0xf000
 1c8:	7702052f 	strvc	r0, [r2, -pc, lsr #10]
 1cc:	05200c05 	streq	r0, [r0, #-3077]!	; 0xfffff3fb
 1d0:	0f052f05 	svceq	0x00052f05
 1d4:	2f0d0520 	svccs	0x000d0520
 1d8:	05830c05 	streq	r0, [r3, #3077]	; 0xc05
 1dc:	01058310 	tsteq	r5, r0, lsl r3
 1e0:	05b0083d 	ldreq	r0, [r0, #2109]!	; 0x83d
 1e4:	07052f0b 	streq	r2, [r5, -fp, lsl #30]
 1e8:	590b0583 	stmdbpl	fp, {r0, r1, r7, r8, sl}
 1ec:	052e0405 	streq	r0, [lr, #-1029]!	; 0xfffffbfb
 1f0:	0b053009 	bleq	14c21c <startup-0x1feb3de4>
 1f4:	5a01053d 	bpl	416f0 <startup-0x1ffbe910>
 1f8:	2f120593 	svccs	0x00120593
 1fc:	05661005 	strbeq	r1, [r6, #-5]!
 200:	01052f02 	tsteq	r5, r2, lsl #30
 204:	04055b59 	streq	r5, [r5], #-2905	; 0xfffff4a7
 208:	3d0d054b 	cfstr32cc	mvfx0, [sp, #-300]	; 0xfffffed4
 20c:	83100592 	tsthi	r0, #612368384	; 0x24800000
 210:	923d0105 	eorsls	r0, sp, #1073741825	; 0x40000001
 214:	052f0805 	streq	r0, [pc, #-2053]!	; fffffa17 <_ctype_+0xdfffd286>
 218:	01053d0a 	tsteq	r5, sl, lsl #26
 21c:	0303043d 	movweq	r0, #13373	; 0x343d
 220:	0205825a 	andeq	r8, r5, #-1610612731	; 0xa0000005
 224:	200d052f 	andcs	r0, sp, pc, lsr #10
 228:	3d2f0205 	sfmcc	f0, 4, [pc, #-20]!	; 21c <startup-0x1ffffde4>
 22c:	4b01053d 	blmi	41728 <startup-0x1ffbe8d8>
 230:	59060576 	stmdbpl	r6, {r1, r2, r4, r5, r6, r8, sl}
 234:	003d2405 	eorseq	r2, sp, r5, lsl #8
 238:	06010402 	streq	r0, [r1], -r2, lsl #8
 23c:	0402003c 	streq	r0, [r2], #-60	; 0xffffffc4
 240:	0a053c02 	beq	14f250 <startup-0x1feb0db0>
 244:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
 248:	22052006 	andcs	r2, r5, #6
 24c:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
 250:	00020521 	andeq	r0, r2, r1, lsr #10
 254:	66040402 	strvs	r0, [r4], -r2, lsl #8
 258:	02000105 	andeq	r0, r0, #1073741825	; 0x40000001
 25c:	4c4b0404 	cfstrdmi	mvd0, [fp], {4}
 260:	054b0705 	strbeq	r0, [fp, #-1797]	; 0xfffff8fb
 264:	03052116 	movweq	r2, #20758	; 0x5116
 268:	4908053c 	stmdbmi	r8, {r2, r3, r4, r5, r8, sl}
 26c:	052e0705 	streq	r0, [lr, #-1797]!	; 0xfffff8fb
 270:	055a3001 	ldrbeq	r3, [sl, #-1]
 274:	03054b04 	movweq	r4, #23300	; 0x5b04
 278:	7b01053d 	blvc	41774 <startup-0x1ffbe88c>
 27c:	751b0705 	ldrvc	r0, [fp, #-1797]	; 0xfffff8fb
 280:	75750305 	ldrbvc	r0, [r5, #-773]!	; 0xfffffcfb
 284:	4c760105 	ldfmie	f0, [r6], #-20	; 0xffffffec
 288:	05670705 	strbeq	r0, [r7, #-1797]!	; 0xfffff8fb
 28c:	04020009 	streq	r0, [r2], #-9
 290:	1d052001 	stcne	0, cr2, [r5, #-4]
 294:	01040200 	mrseq	r0, R12_usr
 298:	0007053c 	andeq	r0, r7, ip, lsr r5
 29c:	3c010402 	cfstrscc	mvf0, [r1], {2}
 2a0:	3d2f0205 	sfmcc	f0, 4, [pc, #-20]!	; 294 <startup-0x1ffffd6c>
 2a4:	3d010559 	cfstr32cc	mvfx0, [r1, #-356]	; 0xfffffe9c
 2a8:	6707054c 	strvs	r0, [r7, -ip, asr #10]
 2ac:	02000905 	andeq	r0, r0, #81920	; 0x14000
 2b0:	05200104 	streq	r0, [r0, #-260]!	; 0xfffffefc
 2b4:	0402001d 	streq	r0, [r2], #-29	; 0xffffffe3
 2b8:	07053c01 	streq	r3, [r5, -r1, lsl #24]
 2bc:	01040200 	mrseq	r0, R12_usr
 2c0:	2f02053c 	svccs	0x0002053c
 2c4:	0105593d 	tsteq	r5, sp, lsr r9
 2c8:	02054d3d 	andeq	r4, r5, #3904	; 0xf40
 2cc:	200d053d 	andcs	r0, sp, sp, lsr r5
 2d0:	3d2f0205 	sfmcc	f0, 4, [pc, #-20]!	; 2c4 <startup-0x1ffffd3c>
 2d4:	053d1505 	ldreq	r1, [sp, #-1285]!	; 0xfffffafb
 2d8:	0d055902 	vstreq.16	s10, [r5, #-4]	; <UNPREDICTABLE>
 2dc:	2f090520 	svccs	0x00090520
 2e0:	a12f0105 			; <UNDEFINED> instruction: 0xa12f0105
 2e4:	053d0205 	ldreq	r0, [sp, #-517]!	; 0xfffffdfb
 2e8:	0205200d 	andeq	r2, r5, #13
 2ec:	15053d2f 	strne	r3, [r5, #-3375]	; 0xfffff2d1
 2f0:	5902053d 	stmdbpl	r2, {r0, r2, r3, r4, r5, r8, sl}
 2f4:	05200d05 	streq	r0, [r0, #-3333]!	; 0xfffff2fb
 2f8:	01052f09 	tsteq	r5, r9, lsl #30
 2fc:	0205a02f 	andeq	sl, r5, #47	; 0x2f
 300:	052f3d3d 	streq	r3, [pc, #-3389]!	; fffff5cb <_ctype_+0xdfffce3a>
 304:	10052f15 	andne	r2, r5, r5, lsl pc
 308:	3d020520 	cfstr32cc	mvfx0, [r2, #-128]	; 0xffffff80
 30c:	053d0905 	ldreq	r0, [sp, #-2309]!	; 0xfffff6fb
 310:	05762f01 	ldrbeq	r2, [r6, #-3841]!	; 0xfffff0ff
 314:	3d3d6702 	ldccc	7, cr6, [sp, #-8]!
 318:	4c590105 	ldfmie	f0, [r9], {5}
 31c:	3d670205 	sfmcc	f0, 2, [r7, #-20]!	; 0xffffffec
 320:	5901053d 	stmdbpl	r1, {r0, r2, r3, r4, r5, r8, sl}
 324:	6702054c 	strvs	r0, [r2, -ip, asr #10]
 328:	200f053d 	andcs	r0, pc, sp, lsr r5	; <UNPREDICTABLE>
 32c:	2f3d0205 	svccs	0x003d0205
 330:	683d0105 	ldmdavs	sp!, {r0, r2, r8}
 334:	05680605 	strbeq	r0, [r8, #-1541]!	; 0xfffff9fb
 338:	0e052004 	cdpeq	0, 0, cr2, cr5, cr4, {0}
 33c:	6602054b 	strvs	r0, [r2], -fp, asr #10
 340:	05200e05 	streq	r0, [r0, #-3589]!	; 0xfffff1fb
 344:	05684b01 	strbeq	r4, [r8, #-2817]!	; 0xfffff4ff
 348:	04056806 	streq	r6, [r5], #-2054	; 0xfffff7fa
 34c:	4b080520 	blmi	2017d4 <startup-0x1fdfe82c>
 350:	059e0405 	ldreq	r0, [lr, #1029]	; 0x405
 354:	0e052f02 	cdpeq	15, 0, cr2, cr5, cr2, {0}
 358:	67010520 	strvs	r0, [r1, -r0, lsr #10]
 35c:	3202056a 	andcc	r0, r2, #444596224	; 0x1a800000
 360:	05200c05 	streq	r0, [r0, #-3077]!	; 0xfffff3fb
 364:	0c052f02 	stceq	15, cr2, [r5], {2}
 368:	2f020520 	svccs	0x00020520
 36c:	05200b05 	streq	r0, [r0, #-2821]!	; 0xfffff4fb
 370:	0c052f02 	stceq	15, cr2, [r5], {2}
 374:	2f070520 	svccs	0x00070520
 378:	02000905 	andeq	r0, r0, #81920	; 0x14000
 37c:	05200104 	streq	r0, [r0, #-260]!	; 0xfffffefc
 380:	04020013 	streq	r0, [r2], #-19	; 0xffffffed
 384:	07052e01 	streq	r2, [r5, -r1, lsl #28]
 388:	01040200 	mrseq	r0, R12_usr
 38c:	2102053c 	tstcs	r2, ip, lsr r5
 390:	05200c05 	streq	r0, [r0, #-3077]!	; 0xfffff3fb
 394:	05a22f01 	streq	r2, [r2, #3841]!	; 0xf01
 398:	04054c05 	streq	r4, [r5], #-3077	; 0xfffff3fb
 39c:	3e070583 	cfsh32cc	mvfx0, mvfx7, #-61
 3a0:	2f220305 	svccs	0x00220305
 3a4:	05052f2f 	streq	r2, [r5, #-3887]	; 0xfffff0d1
 3a8:	0307052f 	movweq	r0, #29999	; 0x752f
 3ac:	01053c7a 	tsteq	r5, sl, ror ip
 3b0:	02055b44 	andeq	r5, r5, #68, 22	; 0x11000
 3b4:	9f01054b 	svcls	0x0001054b
 3b8:	42030404 	andmi	r0, r3, #4, 8	; 0x4000000
 3bc:	3d02054a 	cfstr32cc	mvfx0, [r2, #-296]	; 0xfffffed8
 3c0:	3d300c05 	ldccc	12, cr0, [r0, #-20]!	; 0xffffffec
 3c4:	053d0a05 	ldreq	r0, [sp, #-2565]!	; 0xfffff5fb
 3c8:	03053f07 	movweq	r3, #24327	; 0x5f07
 3cc:	07052f22 	streq	r2, [r5, -r2, lsr #30]
 3d0:	3f3d304b 	svccc	0x003d304b
 3d4:	4b300305 	blmi	c00ff0 <startup-0x1f3ff010>
 3d8:	0c052f3e 	stceq	15, cr2, [r5], {62}	; 0x3e
 3dc:	3e080575 	cfrshl64cc	mvdx8, mvdx5, r0
 3e0:	87230405 	strhi	r0, [r3, -r5, lsl #8]!
 3e4:	052f0c05 	streq	r0, [pc, #-3077]!	; fffff7e7 <_ctype_+0xdfffd056>
 3e8:	07056706 	streq	r6, [r5, -r6, lsl #14]
 3ec:	3e0c055a 	cfrshl32cc	mvfx12, mvfx10, r0
 3f0:	05590f05 	ldrbeq	r0, [r9, #-3845]	; 0xfffff0fb
 3f4:	0e053107 	adfeqs	f3, f5, f7
 3f8:	59050559 	stmdbpl	r5, {r0, r3, r4, r6, r8, sl}
 3fc:	05850805 	streq	r0, [r5, #2053]	; 0x805
 400:	13053e07 	movwne	r3, #24071	; 0x5e07
 404:	2f070567 	svccs	0x00070567
 408:	05320605 	ldreq	r0, [r2, #-1541]!	; 0xfffff9fb
 40c:	06051f07 	streq	r1, [r5], -r7, lsl #30
 410:	78672283 	stmdavc	r7!, {r0, r1, r7, r9, sp}^
 414:	05220805 	streq	r0, [r2, #-2053]!	; 0xfffff7fb
 418:	04020016 	streq	r0, [r2], #-22	; 0xffffffea
 41c:	26055801 	strcs	r5, [r5], -r1, lsl #16
 420:	02040200 	andeq	r0, r4, #0, 4
 424:	0036054a 	eorseq	r0, r6, sl, asr #10
 428:	4a030402 	bmi	c1438 <startup-0x1ff3ebc8>
 42c:	054b0b05 	strbeq	r0, [fp, #-2821]	; 0xfffff4fb
 430:	0405ad06 	streq	sl, [r5], #-3334	; 0xfffff2fa
 434:	2b060523 	blcs	1818c8 <startup-0x1fe7e738>
 438:	590f0524 	stmdbpl	pc, {r2, r5, r8, sl}	; <UNPREDICTABLE>
 43c:	052f0605 	streq	r0, [pc, #-1541]!	; fffffe3f <_ctype_+0xdfffd6ae>
 440:	0402001e 	streq	r0, [r2], #-30	; 0xffffffe2
 444:	31055801 	tstcc	r5, r1, lsl #16
 448:	02040200 	andeq	r0, r4, #0, 4
 44c:	00430558 	subeq	r0, r3, r8, asr r5
 450:	4a030402 	bmi	c1460 <startup-0x1ff3eba0>
 454:	02005505 	andeq	r5, r0, #20971520	; 0x1400000
 458:	054a0404 	strbeq	r0, [sl, #-1028]	; 0xfffffbfc
 45c:	09054b0d 	stmdbeq	r5, {r0, r2, r3, r8, r9, fp, lr}
 460:	053c4f03 	ldreq	r4, [ip, #-3843]!	; 0xfffff0fd
 464:	03052e08 	movweq	r2, #24072	; 0x5e08
 468:	2f3c3603 	svccs	0x003c3603
 46c:	052f0d05 	streq	r0, [pc, #-3333]!	; fffff76f <_ctype_+0xdfffcfde>
 470:	11053c0b 	tstne	r5, fp, lsl #24
 474:	3d0c052f 	cfstr32cc	mvfx0, [ip, #-188]	; 0xffffff44
 478:	b3030805 	movwlt	r0, #14341	; 0x3805
 47c:	07053c7f 	smlsdxeq	r5, pc, ip, r3	; <UNPREDICTABLE>
 480:	0309052e 	movweq	r0, #38190	; 0x952e
 484:	053c00cf 	ldreq	r0, [ip, #-207]!	; 0xffffff31
 488:	76082101 	strvc	r2, [r8], -r1, lsl #2
 48c:	2f3d0605 	svccs	0x003d0605
 490:	052f0a05 	streq	r0, [pc, #-2565]!	; fffffa93 <_ctype_+0xdfffd302>
 494:	0b052e02 	bleq	14bca4 <startup-0x1feb435c>
 498:	2e030521 	cfsh32cs	mvfx0, mvfx3, #17
 49c:	05221205 	streq	r1, [r2, #-517]!	; 0xfffffdfb
 4a0:	2805f206 	stmdacs	r5, {r1, r2, r9, ip, sp, lr, pc}
 4a4:	01040200 	mrseq	r0, R12_usr
 4a8:	001a052e 	andseq	r0, sl, lr, lsr #10
 4ac:	f2010402 	vshl.s8	d0, d2, d1
 4b0:	052f1205 	streq	r1, [pc, #-517]!	; 2b3 <startup-0x1ffffd4d>
 4b4:	0402001e 	streq	r0, [r2], #-30	; 0xffffffe2
 4b8:	03053902 	movweq	r3, #22786	; 0x5902
 4bc:	01040200 	mrseq	r0, R12_usr
 4c0:	001d053c 	andseq	r0, sp, ip, lsr r5
 4c4:	3b020402 	blcc	814d4 <startup-0x1ff7eb2c>
 4c8:	02000205 	andeq	r0, r0, #1342177280	; 0x50000000
 4cc:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 4d0:	0c054204 	sfmeq	f4, 4, [r5], {4}
 4d4:	3d01053d 	cfstr32cc	mvfx0, [r1, #-244]	; 0xffffff0c
 4d8:	76060584 	strvc	r0, [r6], -r4, lsl #11
 4dc:	052f0205 	streq	r0, [pc, #-517]!	; 2df <startup-0x1ffffd21>
 4e0:	0d052f07 	stceq	15, cr2, [r5, #-28]	; 0xffffffe4
 4e4:	4b0c0522 	blmi	301974 <startup-0x1fcfe68c>
 4e8:	053c0705 	ldreq	r0, [ip, #-1797]!	; 0xfffff8fb
 4ec:	0705670c 	streq	r6, [r5, -ip, lsl #14]
 4f0:	6713053c 			; <UNDEFINED> instruction: 0x6713053c
 4f4:	05f20505 	ldrbeq	r0, [r2, #1285]!	; 0x505
 4f8:	04020029 	streq	r0, [r2], #-41	; 0xffffffd7
 4fc:	1e052e01 	cdpne	14, 0, cr2, cr5, cr1, {0}
 500:	01040200 	mrseq	r0, R12_usr
 504:	0036052e 	eorseq	r0, r6, lr, lsr #10
 508:	3c020402 	cfstrscc	mvf0, [r2], {2}
 50c:	02002c05 	andeq	r2, r0, #1280	; 0x500
 510:	052e0204 	streq	r0, [lr, #-516]!	; 0xfffffdfc
 514:	0f053e17 	svceq	0x00053e17
 518:	07051308 	streq	r1, [r5, -r8, lsl #6]
 51c:	053c7803 	ldreq	r7, [ip, #-2051]!	; 0xfffff7fd
 520:	3c0b0302 	stccc	3, cr0, [fp], {2}
 524:	052f0a05 	streq	r0, [pc, #-2565]!	; fffffb27 <_ctype_+0xdfffd396>
 528:	0b052e02 	bleq	14bd38 <startup-0x1feb42c8>
 52c:	2e030521 	cfsh32cs	mvfx0, mvfx3, #17
 530:	02002005 	andeq	r2, r0, #5
 534:	05210304 	streq	r0, [r1, #-772]!	; 0xfffffcfc
 538:	0402001e 	streq	r0, [r2], #-30	; 0xffffffe2
 53c:	02008203 	andeq	r8, r0, #805306368	; 0x30000000
 540:	05f10304 	ldrbeq	r0, [r1, #772]!	; 0x304
 544:	04020003 	streq	r0, [r2], #-3
 548:	1b053c01 	blne	14f554 <startup-0x1feb0aac>
 54c:	02040200 	andeq	r0, r4, #0, 4
 550:	0002053b 	andeq	r0, r2, fp, lsr r5
 554:	3c010402 	cfstrscc	mvf0, [r1], {2}
 558:	923f0105 	eorsls	r0, pc, #1073741825	; 0x40000001
 55c:	67750205 	ldrbvs	r0, [r5, -r5, lsl #4]!
 560:	4c830105 	stfmis	f0, [r3], {5}
 564:	053d0a05 	ldreq	r0, [sp, #-2565]!	; 0xfffff5fb
 568:	0b052e02 	bleq	14bd78 <startup-0x1feb4288>
 56c:	2e030521 	cfsh32cs	mvfx0, mvfx3, #17
 570:	05211205 	streq	r1, [r1, #-517]!	; 0xfffffdfb
 574:	6730f206 	ldrvs	pc, [r0, -r6, lsl #4]!
 578:	02001e05 	andeq	r1, r0, #5, 28	; 0x50
 57c:	05380204 	ldreq	r0, [r8, #-516]!	; 0xfffffdfc
 580:	04020003 	streq	r0, [r2], #-3
 584:	1b053c01 	blne	14f590 <startup-0x1feb0a70>
 588:	02040200 	andeq	r0, r4, #0, 4
 58c:	0002053b 	andeq	r0, r2, fp, lsr r5
 590:	3c010402 	cfstrscc	mvf0, [r1], {2}
 594:	76430105 	strbvc	r0, [r3], -r5, lsl #2
 598:	05750c05 	ldrbeq	r0, [r5, #-3077]!	; 0xfffff3fb
 59c:	14052e11 	strne	r2, [r5], #-3601	; 0xfffff1ef
 5a0:	d604052e 	strle	r0, [r4], -lr, lsr #10
 5a4:	053e2405 	ldreq	r2, [lr, #-1029]!	; 0xfffffbfb
 5a8:	2c052e29 	stccs	14, cr2, [r5], {41}	; 0x29
 5ac:	d635052e 	ldrtle	r0, [r5], -lr, lsr #10
 5b0:	05200905 	streq	r0, [r0, #-2309]!	; 0xfffff6fb
 5b4:	3a052e0e 	bcc	14bdf4 <startup-0x1feb420c>
 5b8:	901a052e 	andsls	r0, sl, lr, lsr #10
 5bc:	2e1f05d7 	mrccs	5, 0, r0, cr15, cr7, {6}
 5c0:	052e2205 	streq	r2, [lr, #-517]!	; 0xfffffdfb
 5c4:	2e05d640 	cfmadd32cs	mvax2, mvfx13, mvfx5, mvfx0
 5c8:	01040200 	mrseq	r0, R12_usr
 5cc:	0040052e 	subeq	r0, r0, lr, lsr #10
 5d0:	2e010402 	cdpcs	4, 0, cr0, cr1, cr2, {0}
 5d4:	02004305 	andeq	r4, r0, #335544320	; 0x14000000
 5d8:	052e0204 	streq	r0, [lr, #-516]!	; 0xfffffdfc
 5dc:	04020040 	streq	r0, [r2], #-64	; 0xffffffc0
 5e0:	11052e02 	tstne	r5, r2, lsl #28
 5e4:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
 5e8:	00130520 	andseq	r0, r3, r0, lsr #10
 5ec:	2f040402 	svccs	0x00040402
 5f0:	02003a05 	andeq	r3, r0, #20480	; 0x5000
 5f4:	052e0404 	streq	r0, [lr, #-1028]!	; 0xfffffbfc
 5f8:	04020036 	streq	r0, [r2], #-54	; 0xffffffca
 5fc:	3a052e01 	bcc	14be08 <startup-0x1feb41f8>
 600:	01040200 	mrseq	r0, R12_usr
 604:	004a052e 	subeq	r0, sl, lr, lsr #10
 608:	2e020402 	cdpcs	4, 0, cr0, cr2, cr2, {0}
 60c:	02003a05 	andeq	r3, r0, #20480	; 0x5000
 610:	052e0204 	streq	r0, [lr, #-516]!	; 0xfffffdfc
 614:	04020010 	streq	r0, [r2], #-16
 618:	11052004 	tstne	r5, r4
 61c:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
 620:	0016052f 	andseq	r0, r6, pc, lsr #10
 624:	2e040402 	cdpcs	4, 0, cr0, cr4, cr2, {0}
 628:	02000205 	andeq	r0, r0, #1342177280	; 0x50000000
 62c:	052e0404 	streq	r0, [lr, #-1028]!	; 0xfffffbfc
 630:	059a0803 	ldreq	r0, [sl, #2051]	; 0x803
 634:	05a02501 	streq	r2, [r0, #1281]!	; 0x501
 638:	0b052f02 	bleq	14c248 <startup-0x1feb3db8>
 63c:	3d01052f 	cfstr32cc	mvfx0, [r1, #-188]	; 0xffffff44
 640:	5910055b 	ldmdbpl	r0, {r0, r1, r3, r4, r6, r8, sl}
 644:	05f20405 	ldrbeq	r0, [r2, #1029]!	; 0x405
 648:	04053f10 	streq	r3, [r5], #-3856	; 0xfffff0f0
 64c:	001c05f2 			; <UNDEFINED> instruction: 0x001c05f2
 650:	2e010402 	cdpcs	4, 0, cr0, cr1, cr2, {0}
 654:	02003f05 	andeq	r3, r0, #5, 30
 658:	05820104 	streq	r0, [r2, #260]	; 0x104
 65c:	04020018 	streq	r0, [r2], #-24	; 0xffffffe8
 660:	0b058201 	bleq	160e6c <startup-0x1fe9f194>
 664:	3c030530 	cfstr32cc	mvfx0, [r3], {48}	; 0x30
 668:	05210c05 	streq	r0, [r1, #-3077]!	; 0xfffff3fb
 66c:	0f053c04 	svceq	0x00053c04
 670:	3c140521 	cfldr32cc	mvfx0, [r4], {33}	; 0x21
 674:	053c1705 	ldreq	r1, [ip, #-1797]!	; 0xfffff8fb
 678:	2705d607 	strcs	sp, [r5, -r7, lsl #12]
 67c:	01040200 	mrseq	r0, R12_usr
 680:	0024052e 	eoreq	r0, r4, lr, lsr #10
 684:	9e010402 	cdpls	4, 0, cr0, cr1, cr2, {0}
 688:	02003a05 	andeq	r3, r0, #20480	; 0x5000
 68c:	05200204 	streq	r0, [r0, #-516]!	; 0xfffffdfc
 690:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
 694:	06053c03 	streq	r3, [r5], -r3, lsl #24
 698:	001d053e 	andseq	r0, sp, lr, lsr r5
 69c:	8d020402 	cfstrshi	mvf0, [r2, #-8]
 6a0:	02000405 	andeq	r0, r0, #83886080	; 0x5000000
 6a4:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 6a8:	0402001b 	streq	r0, [r2], #-27	; 0xffffffe5
 6ac:	03053b02 	movweq	r3, #23298	; 0x5b02
 6b0:	01040200 	mrseq	r0, R12_usr
 6b4:	0f05423c 	svceq	0x0005423c
 6b8:	91100522 	tstls	r0, r2, lsr #10
 6bc:	05f20405 	ldrbeq	r0, [r2, #1029]!	; 0x405
 6c0:	052f3003 	streq	r3, [pc, #-3]!	; 6c5 <startup-0x1ffff93b>
 6c4:	02052215 	andeq	r2, r5, #1342177281	; 0x50000001
 6c8:	04051308 	streq	r1, [r5], #-776	; 0xfffffcf8
 6cc:	0b05ad08 	bleq	16baf4 <startup-0x1fe9450c>
 6d0:	3c03053d 	cfstr32cc	mvfx0, [r3], {61}	; 0x3d
 6d4:	05210c05 	streq	r0, [r1, #-3077]!	; 0xfffff3fb
 6d8:	08053c04 	stmdaeq	r5, {r2, sl, fp, ip, sp}
 6dc:	9e070521 	cfsh32ls	mvfx0, mvfx7, #17
 6e0:	02002505 	andeq	r2, r0, #20971520	; 0x1400000
 6e4:	05200104 	streq	r0, [r0, #-260]!	; 0xfffffefc
 6e8:	0402002a 	streq	r0, [r2], #-42	; 0xffffffd6
 6ec:	2d053c01 	stccs	12, cr3, [r5, #-4]
 6f0:	01040200 	mrseq	r0, R12_usr
 6f4:	001b053c 	andseq	r0, fp, ip, lsr r5
 6f8:	d6010402 	strle	r0, [r1], -r2, lsl #8
 6fc:	02004405 	andeq	r4, r0, #83886080	; 0x5000000
 700:	052e0204 	streq	r0, [lr, #-516]!	; 0xfffffdfc
 704:	04020049 	streq	r0, [r2], #-73	; 0xffffffb7
 708:	4c053c02 	stcmi	12, cr3, [r5], {2}
 70c:	02040200 	andeq	r0, r4, #0, 4
 710:	003a053c 	eorseq	r0, sl, ip, lsr r5
 714:	d6020402 	strle	r0, [r2], -r2, lsl #8
 718:	05310605 	ldreq	r0, [r1, #-1541]!	; 0xfffff9fb
 71c:	0402001d 	streq	r0, [r2], #-29	; 0xffffffe3
 720:	04058c02 	streq	r8, [r5], #-3074	; 0xfffff3fe
 724:	01040200 	mrseq	r0, R12_usr
 728:	001c053c 	andseq	r0, ip, ip, lsr r5
 72c:	3b020402 	blcc	8173c <startup-0x1ff7e8c4>
 730:	02000305 	andeq	r0, r0, #335544320	; 0x14000000
 734:	033c0104 	teqeq	ip, #4, 2
 738:	01054a6b 	tsteq	r5, fp, ror #20
 73c:	92201d03 	eorls	r1, r0, #3, 26	; 0xc0
 740:	05670605 	strbeq	r0, [r7, #-1541]!	; 0xfffff9fb
 744:	02052f0a 	andeq	r2, r5, #10, 30	; 0x28
 748:	210b053c 	tstcs	fp, ip, lsr r5
 74c:	053c0305 	ldreq	r0, [ip, #-773]!	; 0xfffffcfb
 750:	06052107 	streq	r2, [r5], -r7, lsl #2
 754:	2114059e 			; <UNDEFINED> instruction: 0x2114059e
 758:	053c1905 	ldreq	r1, [ip, #-2309]!	; 0xfffff6fb
 75c:	07053c08 	streq	r3, [r5, -r8, lsl #24]
 760:	23059e08 	movwcs	r9, #24072	; 0x5e08
 764:	01040200 	mrseq	r0, R12_usr
 768:	0026052e 	eoreq	r0, r6, lr, lsr #10
 76c:	3c020402 	cfstrscc	mvf0, [r2], {2}
 770:	053d0b05 	ldreq	r0, [sp, #-2821]!	; 0xfffff4fb
 774:	0402001c 	streq	r0, [r2], #-28	; 0xffffffe4
 778:	03053902 	movweq	r3, #22786	; 0x5902
 77c:	01040200 	mrseq	r0, R12_usr
 780:	001b053c 	andseq	r0, fp, ip, lsr r5
 784:	3b020402 	blcc	81794 <startup-0x1ff7e86c>
 788:	02000205 	andeq	r0, r0, #1342177280	; 0x50000000
 78c:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 790:	01054109 	tsteq	r5, r9, lsl #2
 794:	0c056821 	stceq	8, cr6, [r5], {33}	; 0x21
 798:	3d01059f 	cfstr32cc	mvfx0, [r1, #-636]	; 0xfffffd84
 79c:	9f0c0568 	svcls	0x000c0568
 7a0:	6a3d0105 	bvs	f40bbc <startup-0x1f0bf444>
 7a4:	05841105 	streq	r1, [r4, #261]	; 0x105
 7a8:	02052e16 	andeq	r2, r5, #352	; 0x160
 7ac:	080a052e 	stmdaeq	sl, {r1, r2, r3, r5, r8, sl}
 7b0:	850f0592 	strhi	r0, [pc, #-1426]	; 226 <startup-0x1ffffdda>
 7b4:	052e1405 	streq	r1, [lr, #-1029]!	; 0xfffffbfb
 7b8:	0f052e06 	svceq	0x00052e06
 7bc:	2e1c052f 	cfmul64cs	mvdx0, mvdx12, mvdx15
 7c0:	052e1405 	streq	r1, [lr, #-1029]!	; 0xfffffbfb
 7c4:	05052006 	streq	r2, [r5, #-6]
 7c8:	7404052f 	strvc	r0, [r4], #-1327	; 0xfffffad1
 7cc:	3d220705 	stccc	7, cr0, [r2, #-20]!	; 0xffffffec
 7d0:	833e0205 	teqhi	lr, #1342177280	; 0x50000000
 7d4:	053d0905 	ldreq	r0, [sp, #-2309]!	; 0xfffff6fb
 7d8:	05694b01 	strbeq	r4, [r9, #-2817]!	; 0xfffff4ff
 7dc:	0b055904 	bleq	156bf4 <startup-0x1fea940c>
 7e0:	01040200 	mrseq	r0, R12_usr
 7e4:	3d0a053c 	cfstr32cc	mvfx0, [sl, #-240]	; 0xffffff10
 7e8:	052f0905 	streq	r0, [pc, #-2309]!	; fffffeeb <_ctype_+0xdfffd75a>
 7ec:	04020010 	streq	r0, [r2], #-16
 7f0:	0a053c01 	beq	14f7fc <startup-0x1feb0804>
 7f4:	0105303d 	tsteq	r5, sp, lsr r0
 7f8:	02054c21 	andeq	r4, r5, #8448	; 0x2100
 7fc:	9106059f 			; <UNDEFINED> instruction: 0x9106059f
 800:	053c0405 	ldreq	r0, [ip, #-1029]!	; 0xfffffbfb
 804:	12053008 	andne	r3, r5, #8
 808:	2e030567 	cfsh32cs	mvfx0, mvfx3, #55
 80c:	0d030105 	stfeqs	f0, [r3, #-20]	; 0xffffffec
 810:	030b0558 	movweq	r0, #46424	; 0xb558
 814:	09052079 	stmdbeq	r5, {r0, r3, r4, r5, r6, sp}
 818:	3003053c 	andcc	r0, r3, ip, lsr r5
 81c:	05410105 	strbeq	r0, [r1, #-261]	; 0xfffffefb
 820:	01051e03 	tsteq	r5, r3, lsl #28
 824:	0705bc5a 	smlsdeq	r5, sl, ip, fp
 828:	66050567 	strvs	r0, [r5], -r7, ror #10
 82c:	05300205 	ldreq	r0, [r0, #-517]!	; 0xfffffdfb
 830:	053dcb09 	ldreq	ip, [sp, #-2825]!	; 0xfffff4f7
 834:	09054b04 	stmdbeq	r5, {r2, r8, r9, fp, lr}
 838:	04053d22 	streq	r3, [r5], #-3362	; 0xfffff2de
 83c:	2209053d 	andcs	r0, r9, #255852544	; 0xf400000
 840:	3d04054b 	cfstr32cc	mvfx0, [r4, #-300]	; 0xfffffed4
 844:	3d220905 			; <UNDEFINED> instruction: 0x3d220905
 848:	053d0405 	ldreq	r0, [sp, #-1029]!	; 0xfffffbfb
 84c:	01052209 	tsteq	r5, r9, lsl #4
 850:	0a056921 	beq	15acdc <startup-0x1fea5324>
 854:	2e02054b 	cfsh32cs	mvfx0, mvfx2, #43
 858:	05220b05 	streq	r0, [r2, #-2821]!	; 0xfffff4fb
 85c:	05052e03 	streq	r2, [r5, #-3587]	; 0xfffff1fd
 860:	03040200 	movweq	r0, #16896	; 0x4200
 864:	000e0522 	andeq	r0, lr, r2, lsr #10
 868:	82030402 	andhi	r0, r3, #33554432	; 0x2000000
 86c:	02000505 	andeq	r0, r0, #20971520	; 0x1400000
 870:	05750304 	ldrbeq	r0, [r5, #-772]!	; 0xfffffcfc
 874:	0402000e 	streq	r0, [r2], #-14
 878:	05058203 	streq	r8, [r5, #-515]	; 0xfffffdfd
 87c:	03040200 	movweq	r0, #16896	; 0x4200
 880:	001a0591 	mulseq	sl, r1, r5
 884:	82030402 	andhi	r0, r3, #33554432	; 0x2000000
 888:	02000505 	andeq	r0, r0, #20971520	; 0x1400000
 88c:	05910304 	ldreq	r0, [r1, #772]	; 0x304
 890:	04020014 	streq	r0, [r2], #-20	; 0xffffffec
 894:	05058203 	streq	r8, [r5, #-515]	; 0xfffffdfd
 898:	03040200 	movweq	r0, #16896	; 0x4200
 89c:	00130591 	mulseq	r3, r1, r5
 8a0:	82030402 	andhi	r0, r3, #33554432	; 0x2000000
 8a4:	02000505 	andeq	r0, r0, #20971520	; 0x1400000
 8a8:	05910304 	ldreq	r0, [r1, #772]	; 0x304
 8ac:	04020011 	streq	r0, [r2], #-17	; 0xffffffef
 8b0:	1e058203 	cdpne	2, 0, cr8, cr5, cr3, {0}
 8b4:	03040200 	movweq	r0, #16896	; 0x4200
 8b8:	05907903 	ldreq	r7, [r0, #2307]	; 0x903
 8bc:	04020003 	streq	r0, [r2], #-3
 8c0:	1d053c01 	stcne	12, cr3, [r5, #-4]
 8c4:	02040200 	andeq	r0, r4, #0, 4
 8c8:	0002053a 	andeq	r0, r2, sl, lsr r5
 8cc:	3c010402 	cfstrscc	mvf0, [r1], {2}
 8d0:	0c030105 	stfeqs	f0, [r3], {5}
 8d4:	09055c3c 	stmdbeq	r5, {r2, r3, r4, r5, sl, fp, ip, lr}
 8d8:	01053d59 	tsteq	r5, r9, asr sp
 8dc:	0205853d 	andeq	r8, r5, #255852544	; 0xf400000
 8e0:	a10c0568 	tstge	ip, r8, ror #10
 8e4:	05910305 	ldreq	r0, [r1, #773]	; 0x305
 8e8:	0305220c 	movweq	r2, #21004	; 0x520c
 8ec:	220c0591 	andcs	r0, ip, #608174080	; 0x24400000
 8f0:	05910305 	ldreq	r0, [r1, #773]	; 0x305
 8f4:	0305220c 	movweq	r2, #21004	; 0x520c
 8f8:	220c0591 	andcs	r0, ip, #608174080	; 0x24400000
 8fc:	05910305 	ldreq	r0, [r1, #773]	; 0x305
 900:	0305220c 	movweq	r2, #21004	; 0x520c
 904:	220c0591 	andcs	r0, ip, #608174080	; 0x24400000
 908:	05910305 	ldreq	r0, [r1, #773]	; 0x305
 90c:	0305220c 	movweq	r2, #21004	; 0x520c
 910:	220c0591 	andcs	r0, ip, #608174080	; 0x24400000
 914:	05910305 	ldreq	r0, [r1, #773]	; 0x305
 918:	01052202 	tsteq	r5, r2, lsl #4
 91c:	af089108 	svcge	0x00089108
 920:	059f0a05 	ldreq	r0, [pc, #2565]	; 132d <startup-0x1fffecd3>
 924:	0b052e02 	bleq	14c134 <startup-0x1feb3ecc>
 928:	2e030521 	cfsh32cs	mvfx0, mvfx3, #17
 92c:	05211305 	streq	r1, [r1, #-773]!	; 0xfffffcfb
 930:	04059005 	streq	r9, [r5], #-5
 934:	1f05a02f 	svcne	0x0005a02f
 938:	02040200 	andeq	r0, r4, #0, 4
 93c:	0003058c 	andeq	r0, r3, ip, lsl #11
 940:	3c010402 	cfstrscc	mvf0, [r1], {2}
 944:	02001e05 	andeq	r1, r0, #5, 28	; 0x50
 948:	053b0204 	ldreq	r0, [fp, #-516]!	; 0xfffffdfc
 94c:	04020002 	streq	r0, [r2], #-2
 950:	01053c01 	tsteq	r5, r1, lsl #24
 954:	02058742 	andeq	r8, r5, #17301504	; 0x1080000
 958:	01051321 	tsteq	r5, r1, lsr #6
 95c:	02052321 	andeq	r2, r5, #-2080374784	; 0x84000000
 960:	01051321 	tsteq	r5, r1, lsr #6
 964:	02052321 	andeq	r2, r5, #-2080374784	; 0x84000000
 968:	01051321 	tsteq	r5, r1, lsr #6
 96c:	02052321 	andeq	r2, r5, #-2080374784	; 0x84000000
 970:	01051321 	tsteq	r5, r1, lsr #6
 974:	02052321 	andeq	r2, r5, #-2080374784	; 0x84000000
 978:	200e052f 	andcs	r0, lr, pc, lsr #10
 97c:	053d0205 	ldreq	r0, [sp, #-517]!	; 0xfffffdfb
 980:	0205200f 	andeq	r2, r5, #15
 984:	200e052f 	andcs	r0, lr, pc, lsr #10
 988:	053d0205 	ldreq	r0, [sp, #-517]!	; 0xfffffdfb
 98c:	02052010 	andeq	r2, r5, #16
 990:	200c052f 	andcs	r0, ip, pc, lsr #10
 994:	2f2f0205 	svccs	0x002f0205
 998:	052f2f2f 	streq	r2, [pc, #-3887]!	; fffffa71 <_ctype_+0xdfffd2e0>
 99c:	1a082f01 	bne	20c5a8 <startup-0x1fdf3a58>
 9a0:	053d1005 	ldreq	r1, [sp, #-5]!
 9a4:	0205670a 	andeq	r6, r5, #2621440	; 0x280000
 9a8:	2203052e 	andcs	r0, r3, #192937984	; 0xb800000
 9ac:	05590d05 	ldrbeq	r0, [r9, #-3333]	; 0xfffff2fb
 9b0:	04054b05 	streq	r4, [r5], #-2821	; 0xfffff4fb
 9b4:	3d17053e 	cfldr32cc	mvfx0, [r7, #-248]	; 0xffffff08
 9b8:	052e2005 	streq	r2, [lr, #-5]!
 9bc:	13052e1a 	movwne	r2, #24090	; 0x5e1a
 9c0:	001e0520 	andseq	r0, lr, r0, lsr #10
 9c4:	03020402 	movweq	r0, #9218	; 0x2402
 9c8:	02053c79 	andeq	r3, r5, #30976	; 0x7900
 9cc:	01040200 	mrseq	r0, R12_usr
 9d0:	3c0a033c 	stccc	3, cr0, [sl], {60}	; 0x3c
 9d4:	053d0905 	ldreq	r0, [sp, #-2309]!	; 0xfffff6fb
 9d8:	04020001 	streq	r0, [r2], #-1
 9dc:	05772101 	ldrbeq	r2, [r7, #-257]!	; 0xfffffeff
 9e0:	04053d13 	streq	r3, [r5], #-3347	; 0xfffff2ed
 9e4:	3003052e 	andcc	r0, r3, lr, lsr #10
 9e8:	053d0605 	ldreq	r0, [sp, #-1541]!	; 0xfffff9fb
 9ec:	13053c05 	movwne	r3, #23557	; 0x5c05
 9f0:	3d0a052f 	cfstr32cc	mvfx0, [sl, #-188]	; 0xffffff44
 9f4:	05301305 	ldreq	r1, [r0, #-773]!	; 0xfffffcfb
 9f8:	15052e04 	strne	r2, [r5, #-3588]	; 0xfffff1fc
 9fc:	59050530 	stmdbpl	r5, {r4, r5, r8, sl}
 a00:	054b1205 	strbeq	r1, [fp, #-517]	; 0xfffffdfb
 a04:	01053d0a 	tsteq	r5, sl, lsl #26
 a08:	0b05933f 	bleq	16570c <startup-0x1fe9a8f4>
 a0c:	201a05cc 	andscs	r0, sl, ip, asr #11
 a10:	052e0305 	streq	r0, [lr, #-773]!	; 0xfffffcfb
 a14:	1a05210b 	bne	148e48 <startup-0x1feb71b8>
 a18:	2e030520 	cfsh32cs	mvfx0, mvfx3, #16
 a1c:	05210b05 	streq	r0, [r1, #-2821]!	; 0xfffff4fb
 a20:	0305201a 	movweq	r2, #20506	; 0x501a
 a24:	210b052e 	tstcs	fp, lr, lsr #10
 a28:	05201a05 	streq	r1, [r0, #-2565]!	; 0xfffff5fb
 a2c:	0b052e03 	bleq	14c240 <startup-0x1feb3dc0>
 a30:	201a0521 	andscs	r0, sl, r1, lsr #10
 a34:	052e0305 	streq	r0, [lr, #-773]!	; 0xfffffcfb
 a38:	1a05210b 	bne	148e6c <startup-0x1feb7194>
 a3c:	2e030520 	cfsh32cs	mvfx0, mvfx3, #16
 a40:	92220105 	eorls	r0, r2, #1073741825	; 0x40000001
 a44:	05410605 	strbeq	r0, [r1, #-1541]	; 0xfffff9fb
 a48:	08052004 	stmdaeq	r5, {r2, sp}
 a4c:	4a05053d 	bmi	141f48 <startup-0x1febe0b8>
 a50:	02001605 	andeq	r1, r0, #5242880	; 0x500000
 a54:	05200104 	streq	r0, [r0, #-260]!	; 0xfffffefc
 a58:	05052f08 	streq	r2, [r5, #-3848]	; 0xfffff0f8
 a5c:	0016054a 	andseq	r0, r6, sl, asr #10
 a60:	20010402 	andcs	r0, r1, r2, lsl #8
 a64:	052f0805 	streq	r0, [pc, #-2053]!	; 267 <startup-0x1ffffd99>
 a68:	16054a05 	strne	r4, [r5], -r5, lsl #20
 a6c:	01040200 	mrseq	r0, R12_usr
 a70:	2f080520 	svccs	0x00080520
 a74:	054a0505 	strbeq	r0, [sl, #-1285]	; 0xfffffafb
 a78:	04020016 	streq	r0, [r2], #-22	; 0xffffffea
 a7c:	09052001 	stmdbeq	r5, {r0, sp}
 a80:	2101052f 	tstcs	r1, pc, lsr #10
 a84:	3d02056a 	cfstr32cc	mvfx0, [r2, #-424]	; 0xfffffe58
 a88:	754b0705 	strbvc	r0, [fp, #-1797]	; 0xfffff8fb
 a8c:	4b670205 	blmi	19c12a8 <startup-0x1e63ed58>
 a90:	4b01054b 	blmi	41fc4 <startup-0x1ffbe03c>
 a94:	4b040585 	blmi	1020b0 <startup-0x1fefdf50>
 a98:	053e0305 	ldreq	r0, [lr, #-773]!	; 0xfffffcfb
 a9c:	03054b08 	movweq	r4, #23304	; 0x5b08
 aa0:	054b4c75 	strbeq	r4, [fp, #-3189]	; 0xfffff38b
 aa4:	4a090301 	bmi	2416b0 <startup-0x1fdbe950>
 aa8:	7a030305 	bvc	c16c4 <startup-0x1ff3e93c>
 aac:	05054b20 	streq	r4, [r5, #-2848]	; 0xfffff4e0
 ab0:	3d03053d 	cfstr32cc	mvfx0, [r3, #-244]	; 0xffffff0c
 ab4:	774d0105 	strbvc	r0, [sp, -r5, lsl #2]
 ab8:	4b590205 	blmi	16412d4 <startup-0x1e9bed2c>
 abc:	01053d4b 	tsteq	r5, fp, asr #26
 ac0:	07054d4b 	streq	r4, [r5, -fp, asr #26]
 ac4:	0205913d 	andeq	r9, r5, #1073741839	; 0x4000000f
 ac8:	07054b83 	streq	r4, [r5, -r3, lsl #23]
 acc:	4d0b054d 	cfstr32mi	mvfx0, [fp, #-308]	; 0xfffffecc
 ad0:	05670505 	strbeq	r0, [r7, #-1285]!	; 0xfffffafb
 ad4:	0402001d 	streq	r0, [r2], #-29	; 0xffffffe3
 ad8:	09054a01 	stmdbeq	r5, {r0, r9, fp, lr}
 adc:	22040549 	andcs	r0, r4, #306184192	; 0x12400000
 ae0:	05220f05 	streq	r0, [r2, #-3845]!	; 0xfffff0fb
 ae4:	09027601 	stmdbeq	r2, {r0, r9, sl, ip, sp, lr}
 ae8:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
 aec:	00010504 	andeq	r0, r1, r4, lsl #10
 af0:	00000205 	andeq	r0, r0, r5, lsl #4
 af4:	0b032000 	bleq	c8afc <startup-0x1ff37504>
 af8:	22211301 	eorcs	r1, r1, #67108864	; 0x4000000
 afc:	02134b30 	andseq	r4, r3, #48, 22	; 0xc000
 b00:	01010001 	tsteq	r1, r1

Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	6c6c6f64 	stclvs	15, cr6, [ip], #-400	; 0xfffffe70
   4:	63697400 	cmnvs	r9, #0, 8
   8:	7300736b 	movwvc	r7, #875	; 0x36b
   c:	69747379 	ldmdbvs	r4!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}^
  10:	665f6b63 	ldrbvs	r6, [pc], -r3, ror #22
  14:	0067616c 	rsbeq	r6, r7, ip, ror #2
  18:	656d6167 	strbvs	r6, [sp, #-359]!	; 0xfffffe99
  1c:	72617453 	rsbvc	r7, r1, #1392508928	; 0x53000000
  20:	00646574 	rsbeq	r6, r4, r4, ror r5
  24:	65736572 	ldrbvs	r6, [r3, #-1394]!	; 0xfffffa8e
  28:	69745f74 	ldmdbvs	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
  2c:	0072656d 	rsbseq	r6, r2, sp, ror #10
  30:	74746170 	ldrbtvc	r6, [r4], #-368	; 0xfffffe90
  34:	006e7265 	rsbeq	r7, lr, r5, ror #4
  38:	616c6564 	cmnvs	ip, r4, ror #10
  3c:	6f635f79 	svcvs	0x00635f79
  40:	00746e75 	rsbseq	r6, r4, r5, ror lr
  44:	63616c70 	cmnvs	r1, #112, 24	; 0x7000
  48:	616c4665 	cmnvs	ip, r5, ror #12
  4c:	73610067 	cmnvc	r1, #103	; 0x67
  50:	5f696963 	svcpl	0x00696963
  54:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
  58:	61645f65 	cmnvs	r4, r5, ror #30
  5c:	63006174 	movwvs	r6, #372	; 0x174
  60:	65727275 	ldrbvs	r7, [r2, #-629]!	; 0xfffffd8b
  64:	735f746e 	cmpvc	pc, #1845493760	; 0x6e000000
  68:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
  6c:	65726300 	ldrbvs	r6, [r2, #-768]!	; 0xfffffd00
  70:	42657461 	rsbmi	r7, r5, #1627389952	; 0x61000000
  74:	6472616f 	ldrbtvs	r6, [r2], #-367	; 0xfffffe91
  78:	646e6500 	strbtvs	r6, [lr], #-1280	; 0xfffffb00
  7c:	6e61725f 	mcrvs	2, 3, r7, cr1, cr15, {2}
  80:	63610064 	cmnvs	r1, #100	; 0x64
  84:	61766974 	cmnvs	r6, r4, ror r9
  88:	6f526574 	svcvs	0x00526574
  8c:	61670077 	smcvs	28679	; 0x7007
  90:	764f656d 	strbvc	r6, [pc], -sp, ror #10
  94:	6f007265 	svcvs	0x00007265
  98:	656e6570 	strbvs	r6, [lr, #-1392]!	; 0xfffffa90
  9c:	6f630064 	svcvs	0x00630064
  a0:	42746e75 	rsbsmi	r6, r4, #1872	; 0x750
  a4:	4f626d6f 	svcmi	0x00626d6f
  a8:	616c4672 	smcvs	50274	; 0xc462
  ac:	706f0067 	rsbvc	r0, pc, r7, rrx
  b0:	64656e65 	strbtvs	r6, [r5], #-3685	; 0xfffff19b
  b4:	61757153 	cmnvs	r5, r3, asr r1
  b8:	00736572 	rsbseq	r6, r3, r2, ror r5
  bc:	77617264 	strbvc	r7, [r1, -r4, ror #4]!
  c0:	00736f50 	rsbseq	r6, r3, r0, asr pc
  c4:	73636573 	cmnvc	r3, #482344960	; 0x1cc00000
  c8:	736f5000 	cmnvc	pc, #0
  cc:	6f697469 	svcvs	0x00697469
  d0:	7200736e 	andvc	r7, r0, #-1207959551	; 0xb8000001
  d4:	43646165 	cmnmi	r4, #1073741849	; 0x40000019
  d8:	6d756c6f 	ldclvs	12, cr6, [r5, #-444]!	; 0xfffffe44
  dc:	7267006e 	rsbvc	r0, r7, #110	; 0x6e
  e0:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
  e4:	6c635f63 	stclvs	15, cr5, [r3], #-396	; 0xfffffe74
  e8:	5f726165 	svcpl	0x00726165
  ec:	65726373 	ldrbvs	r6, [r2, #-883]!	; 0xfffffc8d
  f0:	6f006e65 	svcvs	0x00006e65
  f4:	506e6570 	rsbpl	r6, lr, r0, ror r5
  f8:	6e00736f 	cdpvs	3, 0, cr7, cr0, cr15, {3}
  fc:	58747865 	ldmdapl	r4!, {r0, r2, r5, r6, fp, ip, sp, lr}^
 100:	78656e00 	stmdavc	r5!, {r9, sl, fp, sp, lr}^
 104:	68005974 	stmdavs	r0, {r2, r4, r5, r6, r8, fp, ip, lr}
 108:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
 10c:	63736100 	cmnvs	r3, #0, 2
 110:	775f6969 	ldrbvc	r6, [pc, -r9, ror #18]
 114:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 118:	6168635f 	cmnvs	r8, pc, asr r3
 11c:	73690072 	cmnvc	r9, #114	; 0x72
 120:	626d6f42 	rsbvs	r6, sp, #264	; 0x108
 124:	00727450 	rsbseq	r7, r2, r0, asr r4
 128:	63656863 	cmnvs	r5, #6488064	; 0x630000
 12c:	6e69576b 	cdpvs	7, 6, cr5, cr9, cr11, {3}
 130:	61726700 	cmnvs	r2, r0, lsl #14
 134:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 138:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
 13c:	6c616974 			; <UNDEFINED> instruction: 0x6c616974
 140:	00657a69 	rsbeq	r7, r5, r9, ror #20
 144:	616c6564 	cmnvs	ip, r4, ror #10
 148:	73690079 	cmnvc	r9, #121	; 0x79
 14c:	626d6f42 	rsbvs	r6, sp, #264	; 0x108
 150:	6d756e00 	ldclvs	14, cr6, [r5, #-0]
 154:	4f726562 	svcmi	0x00726562
 158:	6d6f4266 	sfmvs	f4, 2, [pc, #-408]!	; ffffffc8 <_ctype_+0xdfffd837>
 15c:	73007362 	movwvc	r7, #866	; 0x362
 160:	69747379 	ldmdbvs	r4!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}^
 164:	695f6b63 	ldmdbvs	pc, {r0, r1, r5, r6, r8, r9, fp, sp, lr}^	; <UNPREDICTABLE>
 168:	685f7172 	ldmdavs	pc, {r1, r4, r5, r6, r8, ip, sp, lr}^	; <UNPREDICTABLE>
 16c:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
 170:	66007265 	strvs	r7, [r0], -r5, ror #4
 174:	00636e75 	rsbeq	r6, r3, r5, ror lr
 178:	5f746573 	svcpl	0x00746573
 17c:	6e6e7572 	mcrvs	5, 3, r7, cr14, cr2, {3}
 180:	00676e69 	rsbeq	r6, r7, r9, ror #28
 184:	6e697270 	mcrvs	2, 3, r7, cr9, cr0, {3}
 188:	74735f74 	ldrbtvc	r5, [r3], #-3956	; 0xfffff08c
 18c:	5f747261 	svcpl	0x00747261
 190:	74786574 	ldrbtvc	r6, [r8], #-1396	; 0xfffffa8c
 194:	6373615f 	cmnvs	r3, #-1073741801	; 0xc0000017
 198:	44006969 	strmi	r6, [r0], #-2409	; 0xfffff697
 19c:	43505349 	cmpmi	r0, #603979777	; 0x24000001
 1a0:	00524148 	subseq	r4, r2, r8, asr #2
 1a4:	5679656b 	ldrbtpl	r6, [r9], -fp, ror #10
 1a8:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
 1ac:	2f3a4300 	svccs	0x003a4300
 1b0:	6c616843 	stclvs	8, cr6, [r1], #-268	; 0xfffffef4
 1b4:	7372656d 	cmnvc	r2, #457179136	; 0x1b400000
 1b8:	6165592f 	cmnvs	r5, pc, lsr #18
 1bc:	4c2f3172 	stfmis	f3, [pc], #-456	; fffffffc <_ctype_+0xdfffd86b>
 1c0:	4d2f3450 	cfstrsmi	mvf3, [pc, #-320]!	; 88 <startup-0x1fffff78>
 1c4:	4d2f504f 	stcmi	0, cr5, [pc, #-316]!	; 90 <startup-0x1fffff70>
 1c8:	4c2f504f 	stcmi	0, cr5, [pc], #-316	; 94 <startup-0x1fffff6c>
 1cc:	35626261 	strbcc	r6, [r2, #-609]!	; 0xfffffd9f
 1d0:	656e694d 	strbvs	r6, [lr, #-2381]!	; 0xfffff6b3
 1d4:	65657753 	strbvs	r7, [r5, #-1875]!	; 0xfffff8ad
 1d8:	2f726570 	svccs	0x00726570
 1dc:	656e696d 	strbvs	r6, [lr, #-2413]!	; 0xfffff693
 1e0:	65657753 	strbvs	r7, [r5, #-1875]!	; 0xfffff8ad
 1e4:	47726570 			; <UNDEFINED> instruction: 0x47726570
 1e8:	694d2f44 	stmdbvs	sp, {r2, r6, r8, r9, sl, fp, sp}^
 1ec:	7753656e 	ldrbvc	r6, [r3, -lr, ror #10]
 1f0:	65706565 	ldrbvs	r6, [r0, #-1381]!	; 0xfffffa9b
 1f4:	2f444772 	svccs	0x00444772
 1f8:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 1fc:	2e707574 	mrccs	5, 3, r7, cr0, cr4, {3}
 200:	70750063 	rsbsvc	r0, r5, r3, rrx
 204:	00726570 	rsbseq	r6, r2, r0, ror r5
 208:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 20c:	61725f74 	cmnvs	r2, r4, ror pc
 210:	7000646e 	andvc	r6, r0, lr, ror #8
 214:	6563616c 	strbvs	r6, [r3, #-364]!	; 0xfffffe94
 218:	626d6f42 	rsbvs	r6, sp, #264	; 0x108
 21c:	73690073 	cmnvc	r9, #115	; 0x73
 220:	67616c46 	strbvs	r6, [r1, -r6, asr #24]!
 224:	69727000 	ldmdbvs	r2!, {ip, sp, lr}^
 228:	6f54746e 	svcvs	0x0054746e
 22c:	74004447 	strvc	r4, [r0], #-1095	; 0xfffffbb9
 230:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
 234:	6e695f36 	mcrvs	15, 3, r5, cr9, cr6, {1}
 238:	72726574 	rsbsvc	r6, r2, #116, 10	; 0x1d000000
 23c:	00747075 	rsbseq	r7, r4, r5, ror r0
 240:	656d6167 	strbvs	r6, [sp, #-359]!	; 0xfffffe99
 244:	7265766f 	rsbvc	r7, r5, #116391936	; 0x6f00000
 248:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 24c:	6d5f7961 	vldrvs.16	s15, [pc, #-194]	; 192 <startup-0x1ffffe6e>	; <UNPREDICTABLE>
 250:	696c6c69 	stmdbvs	ip!, {r0, r3, r5, r6, sl, fp, sp, lr}^
 254:	61726700 	cmnvs	r2, r0, lsl #14
 258:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 25c:	7869705f 	stmdavc	r9!, {r0, r1, r2, r3, r4, r6, ip, sp, lr}^
 260:	735f6c65 	cmpvc	pc, #25856	; 0x6500
 264:	61007465 	tstvs	r0, r5, ror #8
 268:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 26c:	6d6f635f 	stclvs	3, cr6, [pc, #-380]!	; f8 <startup-0x1fffff08>
 270:	646e616d 	strbtvs	r6, [lr], #-365	; 0xfffffe93
 274:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 278:	325f7961 	subscc	r7, pc, #1589248	; 0x184000
 27c:	736e3035 	cmnvc	lr, #53	; 0x35
 280:	63736100 	cmnvs	r3, #0, 2
 284:	775f6969 	ldrbvc	r6, [pc, -r9, ror #18]
 288:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 28c:	7274735f 	rsbsvc	r7, r4, #2080374785	; 0x7c000001
 290:	00676e69 	rsbeq	r6, r7, r9, ror #28
 294:	6e697270 	mcrvs	2, 3, r7, cr9, cr0, {3}
 298:	6c665f74 	stclvs	15, cr5, [r6], #-464	; 0xfffffe30
 29c:	00736761 	rsbseq	r6, r3, r1, ror #14
 2a0:	69736f70 	ldmdbvs	r3!, {r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 2a4:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 2a8:	63736100 	cmnvs	r3, #0, 2
 2ac:	635f6969 	cmpvs	pc, #1720320	; 0x1a4000
 2b0:	5f6c7274 	svcpl	0x006c7274
 2b4:	5f746962 	svcpl	0x00746962
 2b8:	61656c63 	cmnvs	r5, r3, ror #24
 2bc:	65670072 	strbvs	r0, [r7, #-114]!	; 0xffffff8e
 2c0:	61725f74 	cmnvs	r2, r4, ror pc
 2c4:	765f646e 	ldrbvc	r6, [pc], -lr, ror #8
 2c8:	75006c61 	strvc	r6, [r0, #-3169]	; 0xfffff39f
 2cc:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
 2d0:	2064656e 	rsbcs	r6, r4, lr, ror #10
 2d4:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
 2d8:	554e4700 	strbpl	r4, [lr, #-1792]	; 0xfffff900
 2dc:	39394320 	ldmdbcc	r9!, {r5, r8, r9, lr}
 2e0:	322e3920 	eorcc	r3, lr, #32, 18	; 0x80000
 2e4:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
 2e8:	31393130 	teqcc	r9, r0, lsr r1
 2ec:	20353230 	eorscs	r3, r5, r0, lsr r2
 2f0:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
 2f4:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
 2f8:	415b2029 	cmpmi	fp, r9, lsr #32
 2fc:	612f4d52 			; <UNDEFINED> instruction: 0x612f4d52
 300:	392d6d72 	pushcc	{r1, r4, r5, r6, r8, sl, fp, sp, lr}
 304:	6172622d 	cmnvs	r2, sp, lsr #4
 308:	2068636e 	rsbcs	r6, r8, lr, ror #6
 30c:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
 310:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
 314:	37373220 	ldrcc	r3, [r7, -r0, lsr #4]!
 318:	5d393935 			; <UNDEFINED> instruction: 0x5d393935
 31c:	746d2d20 	strbtvc	r2, [sp], #-3360	; 0xfffff2e0
 320:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
 324:	666d2d20 	strbtvs	r2, [sp], -r0, lsr #26
 328:	74616f6c 	strbtvc	r6, [r1], #-3948	; 0xfffff094
 32c:	6962612d 	stmdbvs	r2!, {r0, r2, r3, r5, r8, sp, lr}^
 330:	666f733d 			; <UNDEFINED> instruction: 0x666f733d
 334:	6d2d2074 	stcvs	0, cr2, [sp, #-464]!	; 0xfffffe30
 338:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
 33c:	6d72613d 	ldfvse	f6, [r2, #-244]!	; 0xffffff0c
 340:	6d2d3676 	stcvs	6, cr3, [sp, #-472]!	; 0xfffffe28
 344:	20672d20 	rsbcs	r2, r7, r0, lsr #26
 348:	20304f2d 	eorscs	r4, r0, sp, lsr #30
 34c:	6474732d 	ldrbtvs	r7, [r4], #-813	; 0xfffffcd3
 350:	3939633d 	ldmdbcc	r9!, {r0, r2, r3, r4, r5, r8, r9, sp, lr}
 354:	65737500 	ldrbvs	r7, [r3, #-1280]!	; 0xfffffb00
 358:	6f665f64 	svcvs	0x00665f64
 35c:	61725f72 	cmnvs	r2, r2, ror pc
 360:	7300646e 	movwvc	r6, #1134	; 0x46e
 364:	65636170 	strbvs	r6, [r3, #-368]!	; 0xfffffe90
 368:	72726100 	rsbsvc	r6, r2, #0, 2
 36c:	6900776f 	stmdbvs	r0, {r0, r1, r2, r3, r5, r6, r8, r9, sl, ip, sp, lr}
 370:	616c4673 	smcvs	50275	; 0xc463
 374:	72745067 	rsbsvc	r5, r4, #103	; 0x67
 378:	5c3a4300 	ldcpl	3, cr4, [sl], #-0
 37c:	6c616843 	stclvs	8, cr6, [r1], #-268	; 0xfffffef4
 380:	7372656d 	cmnvc	r2, #457179136	; 0x1b400000
 384:	6165595c 	cmnvs	r5, ip, asr r9
 388:	4c5c3172 	ldfmie	f3, [ip], {114}	; 0x72
 38c:	4d5c3450 	cfldrdmi	mvd3, [ip, #-320]	; 0xfffffec0
 390:	4d5c504f 	ldclmi	0, cr5, [ip, #-316]	; 0xfffffec4
 394:	4c5c504f 	mrrcmi	0, 4, r5, ip, cr15
 398:	35626261 	strbcc	r6, [r2, #-609]!	; 0xfffffd9f
 39c:	656e694d 	strbvs	r6, [lr, #-2381]!	; 0xfffff6b3
 3a0:	65657753 	strbvs	r7, [r5, #-1875]!	; 0xfffff8ad
 3a4:	5c726570 	cfldr64pl	mvdx6, [r2], #-448	; 0xfffffe40
 3a8:	656e696d 	strbvs	r6, [lr, #-2413]!	; 0xfffff693
 3ac:	65657753 	strbvs	r7, [r5, #-1875]!	; 0xfffff8ad
 3b0:	47726570 			; <UNDEFINED> instruction: 0x47726570
 3b4:	694d5c44 	stmdbvs	sp, {r2, r6, sl, fp, ip, lr}^
 3b8:	7753656e 	ldrbvc	r6, [r3, -lr, ror #10]
 3bc:	65706565 	ldrbvs	r6, [r0, #-1381]!	; 0xfffffa9b
 3c0:	00444772 	subeq	r4, r4, r2, ror r7
 3c4:	656b616d 	strbvs	r6, [fp, #-365]!	; 0xfffffe93
 3c8:	73726946 	cmnvc	r2, #1146880	; 0x118000
 3cc:	65704f74 	ldrbvs	r4, [r0, #-3956]!	; 0xfffff08c
 3d0:	6873006e 	ldmdavs	r3!, {r1, r2, r3, r5, r6}^
 3d4:	6f42776f 	svcvs	0x0042776f
 3d8:	0073626d 	rsbseq	r6, r3, sp, ror #4
 3dc:	616c6564 	cmnvs	ip, r4, ror #10
 3e0:	6d315f79 	ldcvs	15, cr5, [r1, #-484]!	; 0xfffffe1c
 3e4:	6f726b69 	svcvs	0x00726b69
 3e8:	736e7500 	cmnvc	lr, #0, 10
 3ec:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
 3f0:	6e692064 	cdpvs	0, 6, cr2, cr9, cr4, {3}
 3f4:	69740074 	ldmdbvs	r4!, {r2, r4, r5, r6}^
 3f8:	3672656d 	ldrbtcc	r6, [r2], -sp, ror #10
 3fc:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
 400:	79730074 	ldmdbvc	r3!, {r2, r4, r5, r6}^
 404:	63695473 	cmnvs	r9, #1929379840	; 0x73000000
 408:	6e695f6b 	cdpvs	15, 6, cr5, cr9, cr11, {3}
 40c:	68007469 	stmdavs	r0, {r0, r3, r5, r6, sl, ip, sp, lr}
 410:	68437469 	stmdavs	r3, {r0, r3, r5, r6, sl, ip, sp, lr}^
 414:	63736100 	cmnvs	r3, #0, 2
 418:	675f6969 	ldrbvs	r6, [pc, -r9, ror #18]
 41c:	786f746f 	stmdavc	pc!, {r0, r1, r2, r3, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
 420:	616c0079 	smcvs	49161	; 0xc009
 424:	654b7473 	strbvs	r7, [fp, #-1139]	; 0xfffffb8d
 428:	65730079 	ldrbvs	r0, [r3, #-121]!	; 0xffffff87
 42c:	646e6f63 	strbtvs	r6, [lr], #-3939	; 0xfffff09d
 430:	6e690073 	mcrvs	0, 3, r0, cr9, cr3, {3}
 434:	615f7469 	cmpvs	pc, r9, ror #8
 438:	6d007070 	stcvs	0, cr7, [r0, #-448]	; 0xfffffe40
 43c:	006e6961 	rsbeq	r6, lr, r1, ror #18
 440:	6e697270 	mcrvs	2, 3, r7, cr9, cr0, {3}
 444:	6d754e74 	ldclvs	14, cr4, [r5, #-464]!	; 0xfffffe30
 448:	70007441 	andvc	r7, r0, r1, asr #8
 44c:	6563616c 	strbvs	r6, [r3, #-364]!	; 0xfffffe94
 450:	6d6f4264 	sfmvs	f4, 2, [pc, #-400]!	; 2c8 <startup-0x1ffffd38>
 454:	70007362 	andvc	r7, r0, r2, ror #6
 458:	746e6972 	strbtvc	r6, [lr], #-2418	; 0xfffff68e
 45c:	6d69745f 	cfstrdvs	mvd7, [r9, #-380]!	; 0xfffffe84
 460:	63007265 	movwvs	r7, #613	; 0x265
 464:	58727275 	ldmdapl	r2!, {r0, r2, r4, r5, r6, r9, ip, sp, lr}^
 468:	72756300 	rsbsvc	r6, r5, #0, 6
 46c:	64005972 	strvs	r5, [r0], #-2418	; 0xfffff68e
 470:	43707369 	cmnmi	r0, #-1543503871	; 0xa4000001
 474:	00726168 	rsbseq	r6, r2, r8, ror #2
 478:	65766f6d 	ldrbvs	r6, [r6, #-3949]!	; 0xfffff093
 47c:	76006843 	strvc	r6, [r0], -r3, asr #16
 480:	64696c61 	strbtvs	r6, [r9], #-3169	; 0xfffff39f
 484:	00736f50 	rsbseq	r6, r3, r0, asr pc
 488:	73656e6f 	cmnvc	r5, #1776	; 0x6f0
 48c:	63736100 	cmnvs	r3, #0, 2
 490:	635f6969 	cmpvs	pc, #1720320	; 0x1a4000
 494:	5f6c7274 	svcpl	0x006c7274
 498:	5f746962 	svcpl	0x00746962
 49c:	00746573 	rsbseq	r6, r4, r3, ror r5
 4a0:	626d6f62 	rsbvs	r6, sp, #392	; 0x188
 4a4:	63736100 	cmnvs	r3, #0, 2
 4a8:	725f6969 	subsvc	r6, pc, #1720320	; 0x1a4000
 4ac:	5f646165 	svcpl	0x00646165
 4b0:	746e6f63 	strbtvc	r6, [lr], #-3939	; 0xfffff09d
 4b4:	6c6c6f72 	stclvs	15, cr6, [ip], #-456	; 0xfffffe38
 4b8:	6d007265 	sfmvs	f7, 4, [r0, #-404]	; 0xfffffe6c
 4bc:	5065766f 	rsbpl	r7, r5, pc, ror #12
 4c0:	6579616c 	ldrbvs	r6, [r9, #-364]!	; 0xfffffe94
 4c4:	6c700072 	ldclvs	0, cr0, [r0], #-456	; 0xfffffe38
 4c8:	64656361 	strbtvs	r6, [r5], #-865	; 0xfffffc9f
 4cc:	67616c46 	strbvs	r6, [r1, -r6, asr #24]!
 4d0:	74007367 	strvc	r7, [r0], #-871	; 0xfffffc99
 4d4:	65657268 	strbvs	r7, [r5, #-616]!	; 0xfffffd98
 4d8:	616c6600 	cmnvs	ip, r0, lsl #12
 4dc:	64656767 	strbtvs	r6, [r5], #-1895	; 0xfffff899
 4e0:	64646100 	strbtvs	r6, [r4], #-256	; 0xffffff00
 4e4:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
 4e8:	616f6200 	cmnvs	pc, r0, lsl #4
 4ec:	70006472 	andvc	r6, r0, r2, ror r4
 4f0:	746e6972 	strbtvc	r6, [lr], #-2418	; 0xfffff68e
 4f4:	0068635f 	rsbeq	r6, r8, pc, asr r3
 4f8:	4e746567 	cdpmi	5, 7, cr6, cr4, cr7, {3}
 4fc:	59587765 	ldmdbpl	r8, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
 500:	6d6f7246 	sfmvs	f7, 2, [pc, #-280]!	; 3f0 <startup-0x1ffffc10>
 504:	66006843 	strvs	r6, [r0], -r3, asr #16
 508:	646e756f 	strbtvs	r7, [lr], #-1391	; 0xfffffa91
 50c:	63736100 	cmnvs	r3, #0, 2
 510:	775f6969 	ldrbvc	r6, [pc, -r9, ror #18]
 514:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 518:	6d6f635f 	stclvs	3, cr6, [pc, #-380]!	; 3a4 <startup-0x1ffffc5c>
 51c:	646e616d 	strbtvs	r6, [lr], #-365	; 0xfffffe93
 520:	79656b00 	stmdbvc	r5!, {r8, r9, fp, sp, lr}^
 524:	6e655f62 	cdpvs	15, 6, cr5, cr5, cr2, {3}
 528:	636e6168 	cmnvs	lr, #104, 2
 52c:	64006465 	strvs	r6, [r0], #-1125	; 0xfffffb9b
 530:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 534:	63696d5f 	cmnvs	r9, #6080	; 0x17c0
 538:	61006f72 	tstvs	r0, r2, ror pc
 53c:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 540:	6165725f 	cmnvs	r5, pc, asr r2
 544:	74735f64 	ldrbtvc	r5, [r3], #-3940	; 0xfffff09c
 548:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
 54c:	61726700 	cmnvs	r2, r0, lsl #14
 550:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 554:	7869705f 	stmdavc	r9!, {r0, r1, r2, r3, r4, r6, ip, sp, lr}^
 558:	635f6c65 	cmpvs	pc, #25856	; 0x6500
 55c:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
 560:	63736100 	cmnvs	r3, #0, 2
 564:	775f6969 	ldrbvc	r6, [pc, -r9, ror #18]
 568:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 56c:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
 570:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	; 3a8 <startup-0x1ffffc58>
 574:	0072656c 	rsbseq	r6, r2, ip, ror #10
 578:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
 57c:	0079654b 	rsbseq	r6, r9, fp, asr #10
 580:	5877656e 	ldmdapl	r7!, {r1, r2, r3, r5, r6, r8, sl, sp, lr}^
 584:	65740059 	ldrbvs	r0, [r4, #-89]!	; 0xffffffa7
 588:	7300736e 	movwvc	r7, #878	; 0x36e
 58c:	69747379 	ldmdbvs	r4!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}^
 590:	695f6b63 	ldmdbvs	pc, {r0, r1, r5, r6, r8, r9, fp, sp, lr}^	; <UNPREDICTABLE>
 594:	685f7172 	ldmdavs	pc, {r1, r4, r5, r6, r8, ip, sp, lr}^	; <UNPREDICTABLE>
 598:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
 59c:	725f7265 	subsvc	r7, pc, #1342177286	; 0x50000006
 5a0:	00646e61 	rsbeq	r6, r4, r1, ror #28
 5a4:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 5a8:	65725f69 	ldrbvs	r5, [r2, #-3945]!	; 0xfffff097
 5ac:	645f6461 	ldrbvs	r6, [pc], #-1121	; 5b4 <startup-0x1ffffa4c>
 5b0:	00617461 	rsbeq	r7, r1, r1, ror #8
 5b4:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 5b8:	61747300 	cmnvs	r4, r0, lsl #6
 5bc:	70757472 	rsbsvc	r7, r5, r2, ror r4
 5c0:	63736100 	cmnvs	r3, #0, 2
 5c4:	775f6969 	ldrbvc	r6, [pc, -r9, ror #18]
 5c8:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 5cc:	6d756e5f 	ldclvs	14, cr6, [r5, #-380]!	; 0xfffffe84
 5d0:	00726562 	rsbseq	r6, r2, r2, ror #10
 5d4:	67676f74 			; <UNDEFINED> instruction: 0x67676f74
 5d8:	745f656c 	ldrbvc	r6, [pc], #-1388	; 5e0 <startup-0x1ffffa20>
 5dc:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
 5e0:	6e75725f 	mrcvs	2, 3, r7, cr5, cr15, {2}
 5e4:	676e696e 	strbvs	r6, [lr, -lr, ror #18]!
 5e8:	75717300 	ldrbvc	r7, [r1, #-768]!	; 0xfffffd00
 5ec:	73657261 	cmnvc	r5, #268435462	; 0x10000006
 5f0:	704f6f54 	subvc	r6, pc, r4, asr pc	; <UNPREDICTABLE>
 5f4:	66006e65 	strvs	r6, [r0], -r5, ror #28
 5f8:	0072756f 	rsbseq	r7, r2, pc, ror #10
 5fc:	6d61536e 	stclvs	3, cr5, [r1, #-440]!	; 0xfffffe48
 600:	79654b65 	stmdbvc	r5!, {r0, r2, r5, r6, r8, r9, fp, lr}^
 604:	73797300 	cmnvc	r9, #0, 6
 608:	6b636974 	blvs	18dabe0 <startup-0x1e725420>
 60c:	7172695f 	cmnvc	r2, pc, asr r9
 610:	6e61685f 	mcrvs	8, 3, r6, cr1, cr15, {2}
 614:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
 618:	756f635f 	strbvc	r6, [pc, #-863]!	; 2c1 <startup-0x1ffffd3f>
 61c:	6e69746e 	cdpvs	4, 6, cr7, cr9, cr14, {3}
 620:	65740067 	ldrbvs	r0, [r4, #-103]!	; 0xffffff99
 624:	7368746e 	cmnvc	r8, #1845493760	; 0x6e000000
 628:	6c6f7400 	cfstrdvs	mvd7, [pc], #-0	; 630 <startup-0x1ffff9d0>
 62c:	7265776f 	rsbvc	r7, r5, #29097984	; 0x1bc0000
 630:	72657a00 	rsbvc	r7, r5, #0, 20
 634:	426e006f 	rsbmi	r0, lr, #111	; 0x6f
 638:	73626d6f 	cmnvc	r2, #7104	; 0x1bc0
 63c:	63736100 	cmnvs	r3, #0, 2
 640:	695f6969 	ldmdbvs	pc, {r0, r3, r5, r6, r8, fp, sp, lr}^	; <UNPREDICTABLE>
 644:	0074696e 	rsbseq	r6, r4, lr, ror #18
 648:	63616c70 	cmnvs	r1, #112, 24	; 0x7000
 64c:	665f6465 	ldrbvs	r6, [pc], -r5, ror #8
 650:	6767616c 	strbvs	r6, [r7, -ip, ror #2]!
 654:	6c700073 	ldclvs	0, cr0, [r0], #-460	; 0xfffffe34
 658:	615f7961 	cmpvs	pc, r1, ror #18
 65c:	6e696167 	powvsez	f6, f1, f7
	...

Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	206d7241 	rsbcs	r7, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d39 	eorscc	r2, r2, r9, lsr sp
  30:	712d3931 			; <UNDEFINED> instruction: 0x712d3931
  34:	616d2d34 	cmnvs	sp, r4, lsr sp
  38:	29726f6a 	ldmdbcs	r2!, {r1, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
  3c:	322e3920 	eorcc	r3, lr, #32, 18	; 0x80000
  40:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  44:	31393130 	teqcc	r9, r0, lsr r1
  48:	20353230 	eorscs	r3, r5, r0, lsr r2
  4c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  50:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  54:	415b2029 	cmpmi	fp, r9, lsr #32
  58:	612f4d52 			; <UNDEFINED> instruction: 0x612f4d52
  5c:	392d6d72 	pushcc	{r1, r4, r5, r6, r8, sl, fp, sp, lr}
  60:	6172622d 	cmnvs	r2, sp, lsr #4
  64:	2068636e 	rsbcs	r6, r8, lr, ror #6
  68:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
  6c:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
  70:	37373220 	ldrcc	r3, [r7, -r0, lsr #4]!
  74:	5d393935 			; <UNDEFINED> instruction: 0x5d393935
	...

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002b41 	andeq	r2, r0, r1, asr #22
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000021 	andeq	r0, r0, r1, lsr #32
  10:	2d533605 	ldclcs	6, cr3, [r3, #-20]	; 0xffffffec
  14:	0c06004d 	stceq	0, cr0, [r6], {77}	; 0x4d
  18:	01094d07 	tsteq	r9, r7, lsl #26
  1c:	01140412 	tsteq	r4, r2, lsl r4
  20:	03170115 	tsteq	r7, #1073741829	; 0x40000005
  24:	01190118 	tsteq	r9, r8, lsl r1
  28:	061e011a 			; <UNDEFINED> instruction: 0x061e011a

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	00000018 	andeq	r0, r0, r8, lsl r0
  14:	00000000 	andeq	r0, r0, r0
  18:	20000014 	andcs	r0, r0, r4, lsl r0
  1c:	00000048 	andeq	r0, r0, r8, asr #32
  20:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  24:	41018e02 	tstmi	r1, r2, lsl #28
  28:	0000070d 	andeq	r0, r0, sp, lsl #14
  2c:	00000018 	andeq	r0, r0, r8, lsl r0
  30:	00000000 	andeq	r0, r0, r0
  34:	2000005c 	andcs	r0, r0, ip, asr r0
  38:	00000024 	andeq	r0, r0, r4, lsr #32
  3c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  40:	41018e02 	tstmi	r1, r2, lsl #28
  44:	0000070d 	andeq	r0, r0, sp, lsl #14
  48:	00000018 	andeq	r0, r0, r8, lsl r0
  4c:	00000000 	andeq	r0, r0, r0
  50:	20000080 	andcs	r0, r0, r0, lsl #1
  54:	00000020 	andeq	r0, r0, r0, lsr #32
  58:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  5c:	41018e02 	tstmi	r1, r2, lsl #28
  60:	0000070d 	andeq	r0, r0, sp, lsl #14
  64:	00000018 	andeq	r0, r0, r8, lsl r0
  68:	00000000 	andeq	r0, r0, r0
  6c:	200000a0 	andcs	r0, r0, r0, lsr #1
  70:	00000018 	andeq	r0, r0, r8, lsl r0
  74:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  78:	41018e02 	tstmi	r1, r2, lsl #28
  7c:	0000070d 	andeq	r0, r0, sp, lsl #14
  80:	00000018 	andeq	r0, r0, r8, lsl r0
  84:	00000000 	andeq	r0, r0, r0
  88:	200000b8 	strhcs	r0, [r0], -r8
  8c:	00000030 	andeq	r0, r0, r0, lsr r0
  90:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  94:	41018e02 	tstmi	r1, r2, lsl #28
  98:	0000070d 	andeq	r0, r0, sp, lsl #14
  9c:	00000018 	andeq	r0, r0, r8, lsl r0
  a0:	00000000 	andeq	r0, r0, r0
  a4:	200000e8 	andcs	r0, r0, r8, ror #1
  a8:	00000020 	andeq	r0, r0, r0, lsr #32
  ac:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  b0:	41018e02 	tstmi	r1, r2, lsl #28
  b4:	0000070d 	andeq	r0, r0, sp, lsl #14
  b8:	00000018 	andeq	r0, r0, r8, lsl r0
  bc:	00000000 	andeq	r0, r0, r0
  c0:	20000108 	andcs	r0, r0, r8, lsl #2
  c4:	00000044 	andeq	r0, r0, r4, asr #32
  c8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  cc:	41018e02 	tstmi	r1, r2, lsl #28
  d0:	0000070d 	andeq	r0, r0, sp, lsl #14
  d4:	00000018 	andeq	r0, r0, r8, lsl r0
  d8:	00000000 	andeq	r0, r0, r0
  dc:	2000014c 	andcs	r0, r0, ip, asr #2
  e0:	00000030 	andeq	r0, r0, r0, lsr r0
  e4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  e8:	41018e02 	tstmi	r1, r2, lsl #28
  ec:	0000070d 	andeq	r0, r0, sp, lsl #14
  f0:	0000001c 	andeq	r0, r0, ip, lsl r0
  f4:	00000000 	andeq	r0, r0, r0
  f8:	2000017c 	andcs	r0, r0, ip, ror r1
  fc:	0000004c 	andeq	r0, r0, ip, asr #32
 100:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 104:	41018e02 	tstmi	r1, r2, lsl #28
 108:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 10c:	00000007 	andeq	r0, r0, r7
 110:	00000018 	andeq	r0, r0, r8, lsl r0
 114:	00000000 	andeq	r0, r0, r0
 118:	200001c8 	andcs	r0, r0, r8, asr #3
 11c:	000000a4 	andeq	r0, r0, r4, lsr #1
 120:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 124:	41018e02 	tstmi	r1, r2, lsl #28
 128:	0000070d 	andeq	r0, r0, sp, lsl #14
 12c:	00000018 	andeq	r0, r0, r8, lsl r0
 130:	00000000 	andeq	r0, r0, r0
 134:	2000026c 	andcs	r0, r0, ip, ror #4
 138:	00000048 	andeq	r0, r0, r8, asr #32
 13c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 140:	41018e02 	tstmi	r1, r2, lsl #28
 144:	0000070d 	andeq	r0, r0, sp, lsl #14
 148:	00000018 	andeq	r0, r0, r8, lsl r0
 14c:	00000000 	andeq	r0, r0, r0
 150:	200002b4 			; <UNDEFINED> instruction: 0x200002b4
 154:	00000028 	andeq	r0, r0, r8, lsr #32
 158:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 15c:	41018e02 	tstmi	r1, r2, lsl #28
 160:	0000070d 	andeq	r0, r0, sp, lsl #14
 164:	0000001c 	andeq	r0, r0, ip, lsl r0
 168:	00000000 	andeq	r0, r0, r0
 16c:	200002dc 	ldrdcs	r0, [r0], -ip
 170:	00000048 	andeq	r0, r0, r8, asr #32
 174:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 178:	41018e02 	tstmi	r1, r2, lsl #28
 17c:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 180:	00000007 	andeq	r0, r0, r7
 184:	00000018 	andeq	r0, r0, r8, lsl r0
 188:	00000000 	andeq	r0, r0, r0
 18c:	20000324 	andcs	r0, r0, r4, lsr #6
 190:	00000020 	andeq	r0, r0, r0, lsr #32
 194:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 198:	41018e02 	tstmi	r1, r2, lsl #28
 19c:	0000070d 	andeq	r0, r0, sp, lsl #14
 1a0:	00000018 	andeq	r0, r0, r8, lsl r0
 1a4:	00000000 	andeq	r0, r0, r0
 1a8:	20000344 	andcs	r0, r0, r4, asr #6
 1ac:	0000002c 	andeq	r0, r0, ip, lsr #32
 1b0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 1b4:	41018e02 	tstmi	r1, r2, lsl #28
 1b8:	0000070d 	andeq	r0, r0, sp, lsl #14
 1bc:	0000001c 	andeq	r0, r0, ip, lsl r0
 1c0:	00000000 	andeq	r0, r0, r0
 1c4:	20000370 	andcs	r0, r0, r0, ror r3
 1c8:	0000003c 	andeq	r0, r0, ip, lsr r0
 1cc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 1d0:	41018e02 	tstmi	r1, r2, lsl #28
 1d4:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 1d8:	00000007 	andeq	r0, r0, r7
 1dc:	0000001c 	andeq	r0, r0, ip, lsl r0
 1e0:	00000000 	andeq	r0, r0, r0
 1e4:	200003ac 	andcs	r0, r0, ip, lsr #7
 1e8:	0000002a 	andeq	r0, r0, sl, lsr #32
 1ec:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 1f0:	41018e02 	tstmi	r1, r2, lsl #28
 1f4:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 1f8:	00000007 	andeq	r0, r0, r7
 1fc:	0000001c 	andeq	r0, r0, ip, lsl r0
 200:	00000000 	andeq	r0, r0, r0
 204:	200003d6 	ldrdcs	r0, [r0], -r6
 208:	0000005e 	andeq	r0, r0, lr, asr r0
 20c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 210:	41018e02 	tstmi	r1, r2, lsl #28
 214:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 218:	00000007 	andeq	r0, r0, r7
 21c:	0000001c 	andeq	r0, r0, ip, lsl r0
 220:	00000000 	andeq	r0, r0, r0
 224:	20000434 	andcs	r0, r0, r4, lsr r4
 228:	0000003c 	andeq	r0, r0, ip, lsr r0
 22c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 230:	41018e02 	tstmi	r1, r2, lsl #28
 234:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 238:	00000007 	andeq	r0, r0, r7
 23c:	0000001c 	andeq	r0, r0, ip, lsl r0
 240:	00000000 	andeq	r0, r0, r0
 244:	20000470 	andcs	r0, r0, r0, ror r4
 248:	0000003c 	andeq	r0, r0, ip, lsr r0
 24c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 250:	41018e02 	tstmi	r1, r2, lsl #28
 254:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 258:	00000007 	andeq	r0, r0, r7
 25c:	0000001c 	andeq	r0, r0, ip, lsl r0
 260:	00000000 	andeq	r0, r0, r0
 264:	200004ac 	andcs	r0, r0, ip, lsr #9
 268:	00000040 	andeq	r0, r0, r0, asr #32
 26c:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
 270:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 274:	180e4101 	stmdane	lr, {r0, r8, lr}
 278:	00070d41 	andeq	r0, r7, r1, asr #26
 27c:	0000001c 	andeq	r0, r0, ip, lsl r0
 280:	00000000 	andeq	r0, r0, r0
 284:	200004ec 	andcs	r0, r0, ip, ror #9
 288:	00000040 	andeq	r0, r0, r0, asr #32
 28c:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
 290:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 294:	180e4101 	stmdane	lr, {r0, r8, lr}
 298:	00070d41 	andeq	r0, r7, r1, asr #26
 29c:	0000001c 	andeq	r0, r0, ip, lsl r0
 2a0:	00000000 	andeq	r0, r0, r0
 2a4:	2000052c 	andcs	r0, r0, ip, lsr #10
 2a8:	00000034 	andeq	r0, r0, r4, lsr r0
 2ac:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 2b0:	41018e02 	tstmi	r1, r2, lsl #28
 2b4:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 2b8:	00000007 	andeq	r0, r0, r7
 2bc:	0000001c 	andeq	r0, r0, ip, lsl r0
 2c0:	00000000 	andeq	r0, r0, r0
 2c4:	20000560 	andcs	r0, r0, r0, ror #10
 2c8:	0000002a 	andeq	r0, r0, sl, lsr #32
 2cc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 2d0:	41018e02 	tstmi	r1, r2, lsl #28
 2d4:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 2d8:	00000007 	andeq	r0, r0, r7
 2dc:	0000001c 	andeq	r0, r0, ip, lsl r0
 2e0:	00000000 	andeq	r0, r0, r0
 2e4:	2000058a 	andcs	r0, r0, sl, lsl #11
 2e8:	0000002a 	andeq	r0, r0, sl, lsr #32
 2ec:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 2f0:	41018e02 	tstmi	r1, r2, lsl #28
 2f4:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 2f8:	00000007 	andeq	r0, r0, r7
 2fc:	0000001c 	andeq	r0, r0, ip, lsl r0
 300:	00000000 	andeq	r0, r0, r0
 304:	200005b4 			; <UNDEFINED> instruction: 0x200005b4
 308:	00000030 	andeq	r0, r0, r0, lsr r0
 30c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 310:	41018e02 	tstmi	r1, r2, lsl #28
 314:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 318:	00000007 	andeq	r0, r0, r7
 31c:	0000001c 	andeq	r0, r0, ip, lsl r0
 320:	00000000 	andeq	r0, r0, r0
 324:	200005e4 	andcs	r0, r0, r4, ror #11
 328:	00000038 	andeq	r0, r0, r8, lsr r0
 32c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 330:	41018e02 	tstmi	r1, r2, lsl #28
 334:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 338:	00000007 	andeq	r0, r0, r7
 33c:	0000001c 	andeq	r0, r0, ip, lsl r0
 340:	00000000 	andeq	r0, r0, r0
 344:	2000061c 	andcs	r0, r0, ip, lsl r6
 348:	00000048 	andeq	r0, r0, r8, asr #32
 34c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 350:	41018e02 	tstmi	r1, r2, lsl #28
 354:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 358:	00000007 	andeq	r0, r0, r7
 35c:	00000018 	andeq	r0, r0, r8, lsl r0
 360:	00000000 	andeq	r0, r0, r0
 364:	20000664 	andcs	r0, r0, r4, ror #12
 368:	00000044 	andeq	r0, r0, r4, asr #32
 36c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 370:	41018e02 	tstmi	r1, r2, lsl #28
 374:	0000070d 	andeq	r0, r0, sp, lsl #14
 378:	0000001c 	andeq	r0, r0, ip, lsl r0
 37c:	00000000 	andeq	r0, r0, r0
 380:	200006a8 	andcs	r0, r0, r8, lsr #13
 384:	00000046 	andeq	r0, r0, r6, asr #32
 388:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 38c:	41018e02 	tstmi	r1, r2, lsl #28
 390:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 394:	00000007 	andeq	r0, r0, r7
 398:	0000001c 	andeq	r0, r0, ip, lsl r0
 39c:	00000000 	andeq	r0, r0, r0
 3a0:	200006ee 	andcs	r0, r0, lr, ror #13
 3a4:	00000024 	andeq	r0, r0, r4, lsr #32
 3a8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 3ac:	41018e02 	tstmi	r1, r2, lsl #28
 3b0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 3b4:	00000007 	andeq	r0, r0, r7
 3b8:	0000000c 	andeq	r0, r0, ip
 3bc:	00000000 	andeq	r0, r0, r0
 3c0:	20000000 	andcs	r0, r0, r0
 3c4:	00000012 	andeq	r0, r0, r2, lsl r0
 3c8:	00000020 	andeq	r0, r0, r0, lsr #32
 3cc:	00000000 	andeq	r0, r0, r0
 3d0:	20000712 	andcs	r0, r0, r2, lsl r7
 3d4:	000001f6 	strdeq	r0, [r0], -r6
 3d8:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
 3dc:	87038504 	strhi	r8, [r3, -r4, lsl #10]
 3e0:	41018e02 	tstmi	r1, r2, lsl #28
 3e4:	0c41300e 	mcrreq	0, 0, r3, r1, cr14
 3e8:	00002807 	andeq	r2, r0, r7, lsl #16
 3ec:	0000001c 	andeq	r0, r0, ip, lsl r0
 3f0:	00000000 	andeq	r0, r0, r0
 3f4:	20000908 	andcs	r0, r0, r8, lsl #18
 3f8:	0000009c 	muleq	r0, ip, r0
 3fc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 400:	41018e02 	tstmi	r1, r2, lsl #28
 404:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 408:	00000007 	andeq	r0, r0, r7
 40c:	0000001c 	andeq	r0, r0, ip, lsl r0
 410:	00000000 	andeq	r0, r0, r0
 414:	200009a4 	andcs	r0, r0, r4, lsr #19
 418:	00000114 	andeq	r0, r0, r4, lsl r1
 41c:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
 420:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 424:	380e4101 	stmdacc	lr, {r0, r8, lr}
 428:	00070d41 	andeq	r0, r7, r1, asr #26
 42c:	0000001c 	andeq	r0, r0, ip, lsl r0
 430:	00000000 	andeq	r0, r0, r0
 434:	20000ab8 			; <UNDEFINED> instruction: 0x20000ab8
 438:	00000032 	andeq	r0, r0, r2, lsr r0
 43c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 440:	41018e02 	tstmi	r1, r2, lsl #28
 444:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 448:	00000007 	andeq	r0, r0, r7
 44c:	0000001c 	andeq	r0, r0, ip, lsl r0
 450:	00000000 	andeq	r0, r0, r0
 454:	20000aea 	andcs	r0, r0, sl, ror #21
 458:	0000006e 	andeq	r0, r0, lr, rrx
 45c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 460:	41018e02 	tstmi	r1, r2, lsl #28
 464:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 468:	00000007 	andeq	r0, r0, r7
 46c:	00000020 	andeq	r0, r0, r0, lsr #32
 470:	00000000 	andeq	r0, r0, r0
 474:	20000b58 	andcs	r0, r0, r8, asr fp
 478:	0000013c 	andeq	r0, r0, ip, lsr r1
 47c:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
 480:	87038504 	strhi	r8, [r3, -r4, lsl #10]
 484:	41018e02 	tstmi	r1, r2, lsl #28
 488:	0c41280e 	mcrreq	8, 0, r2, r1, cr14
 48c:	00002007 	andeq	r2, r0, r7
 490:	00000018 	andeq	r0, r0, r8, lsl r0
 494:	00000000 	andeq	r0, r0, r0
 498:	20000c94 	mulcs	r0, r4, ip
 49c:	00000018 	andeq	r0, r0, r8, lsl r0
 4a0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 4a4:	41018e02 	tstmi	r1, r2, lsl #28
 4a8:	0000070d 	andeq	r0, r0, sp, lsl #14
 4ac:	00000020 	andeq	r0, r0, r0, lsr #32
 4b0:	00000000 	andeq	r0, r0, r0
 4b4:	20000cac 	andcs	r0, r0, ip, lsr #25
 4b8:	0000025c 	andeq	r0, r0, ip, asr r2
 4bc:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
 4c0:	87038504 	strhi	r8, [r3, -r4, lsl #10]
 4c4:	41018e02 	tstmi	r1, r2, lsl #28
 4c8:	0c41380e 	mcrreq	8, 0, r3, r1, cr14
 4cc:	00003007 	andeq	r3, r0, r7
 4d0:	00000020 	andeq	r0, r0, r0, lsr #32
 4d4:	00000000 	andeq	r0, r0, r0
 4d8:	20000f08 	andcs	r0, r0, r8, lsl #30
 4dc:	000000b4 	strheq	r0, [r0], -r4
 4e0:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
 4e4:	87038504 	strhi	r8, [r3, -r4, lsl #10]
 4e8:	41018e02 	tstmi	r1, r2, lsl #28
 4ec:	0c41380e 	mcrreq	8, 0, r3, r1, cr14
 4f0:	00003007 	andeq	r3, r0, r7
 4f4:	00000020 	andeq	r0, r0, r0, lsr #32
 4f8:	00000000 	andeq	r0, r0, r0
 4fc:	20000fbc 			; <UNDEFINED> instruction: 0x20000fbc
 500:	00000026 	andeq	r0, r0, r6, lsr #32
 504:	41100e41 	tstmi	r0, r1, asr #28
 508:	0884200e 	stmeq	r4, {r1, r2, r3, sp}
 50c:	06870785 	streq	r0, [r7], r5, lsl #15
 510:	0d41058e 	cfstr64eq	mvdx0, [r1, #-568]	; 0xfffffdc8
 514:	00000007 	andeq	r0, r0, r7
 518:	00000020 	andeq	r0, r0, r0, lsr #32
 51c:	00000000 	andeq	r0, r0, r0
 520:	20000fe2 	andcs	r0, r0, r2, ror #31
 524:	00000026 	andeq	r0, r0, r6, lsr #32
 528:	41100e41 	tstmi	r0, r1, asr #28
 52c:	0884200e 	stmeq	r4, {r1, r2, r3, sp}
 530:	06870785 	streq	r0, [r7], r5, lsl #15
 534:	0d41058e 	cfstr64eq	mvdx0, [r1, #-568]	; 0xfffffdc8
 538:	00000007 	andeq	r0, r0, r7
 53c:	00000020 	andeq	r0, r0, r0, lsr #32
 540:	00000000 	andeq	r0, r0, r0
 544:	20001008 	andcs	r1, r0, r8
 548:	000000bc 	strheq	r0, [r0], -ip
 54c:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
 550:	87038504 	strhi	r8, [r3, -r4, lsl #10]
 554:	41018e02 	tstmi	r1, r2, lsl #28
 558:	0c41380e 	mcrreq	8, 0, r3, r1, cr14
 55c:	00003007 	andeq	r3, r0, r7
 560:	0000001c 	andeq	r0, r0, ip, lsl r0
 564:	00000000 	andeq	r0, r0, r0
 568:	200010c4 	andcs	r1, r0, r4, asr #1
 56c:	00000034 	andeq	r0, r0, r4, lsr r0
 570:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 574:	41018e02 	tstmi	r1, r2, lsl #28
 578:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 57c:	00000007 	andeq	r0, r0, r7
 580:	00000020 	andeq	r0, r0, r0, lsr #32
 584:	00000000 	andeq	r0, r0, r0
 588:	200010f8 	strdcs	r1, [r0], -r8
 58c:	00000080 	andeq	r0, r0, r0, lsl #1
 590:	41100e41 	tstmi	r0, r1, asr #28
 594:	0884200e 	stmeq	r4, {r1, r2, r3, sp}
 598:	06870785 	streq	r0, [r7], r5, lsl #15
 59c:	0e41058e 	cdpeq	5, 4, cr0, cr1, cr14, {4}
 5a0:	070d4130 	smladxeq	sp, r0, r1, r4
 5a4:	0000001c 	andeq	r0, r0, ip, lsl r0
 5a8:	00000000 	andeq	r0, r0, r0
 5ac:	20001178 	andcs	r1, r0, r8, ror r1
 5b0:	00000080 	andeq	r0, r0, r0, lsl #1
 5b4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 5b8:	41018e02 	tstmi	r1, r2, lsl #28
 5bc:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 5c0:	00000007 	andeq	r0, r0, r7
 5c4:	0000001c 	andeq	r0, r0, ip, lsl r0
 5c8:	00000000 	andeq	r0, r0, r0
 5cc:	200011f8 	strdcs	r1, [r0], -r8
 5d0:	000000fe 	strdeq	r0, [r0], -lr
 5d4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 5d8:	41018e02 	tstmi	r1, r2, lsl #28
 5dc:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 5e0:	00000007 	andeq	r0, r0, r7
 5e4:	0000001c 	andeq	r0, r0, ip, lsl r0
 5e8:	00000000 	andeq	r0, r0, r0
 5ec:	200012f6 	strdcs	r1, [r0], -r6
 5f0:	00000026 	andeq	r0, r0, r6, lsr #32
 5f4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 5f8:	41018e02 	tstmi	r1, r2, lsl #28
 5fc:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 600:	00000007 	andeq	r0, r0, r7
 604:	00000024 	andeq	r0, r0, r4, lsr #32
 608:	00000000 	andeq	r0, r0, r0
 60c:	2000131c 	andcs	r1, r0, ip, lsl r3
 610:	00000140 	andeq	r0, r0, r0, asr #2
 614:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
 618:	86048505 	strhi	r8, [r4], -r5, lsl #10
 61c:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 620:	e80e4101 	stmda	lr, {r0, r8, lr}
 624:	070c4101 	streq	r4, [ip, -r1, lsl #2]
 628:	00000188 	andeq	r0, r0, r8, lsl #3
 62c:	0000001c 	andeq	r0, r0, ip, lsl r0
 630:	00000000 	andeq	r0, r0, r0
 634:	2000145c 	andcs	r1, r0, ip, asr r4
 638:	00000084 	andeq	r0, r0, r4, lsl #1
 63c:	41080e41 	tstmi	r8, r1, asr #28
 640:	0487100e 	streq	r1, [r7], #14
 644:	0e41038e 	cdpeq	3, 4, cr0, cr1, cr14, {4}
 648:	070d4120 	streq	r4, [sp, -r0, lsr #2]
 64c:	0000000c 	andeq	r0, r0, ip
 650:	00000000 	andeq	r0, r0, r0
 654:	200014e0 	andcs	r1, r0, r0, ror #9
 658:	00000006 	andeq	r0, r0, r6
 65c:	0000000c 	andeq	r0, r0, ip
 660:	00000000 	andeq	r0, r0, r0
 664:	200014e6 	andcs	r1, r0, r6, ror #9
 668:	00000006 	andeq	r0, r0, r6
 66c:	0000000c 	andeq	r0, r0, ip
 670:	00000000 	andeq	r0, r0, r0
 674:	200014ec 	andcs	r1, r0, ip, ror #9
 678:	00000006 	andeq	r0, r0, r6
 67c:	0000000c 	andeq	r0, r0, ip
 680:	00000000 	andeq	r0, r0, r0
 684:	200014f2 	strdcs	r1, [r0], -r2
 688:	00000006 	andeq	r0, r0, r6
 68c:	00000018 	andeq	r0, r0, r8, lsl r0
 690:	00000000 	andeq	r0, r0, r0
 694:	200014f8 	strdcs	r1, [r0], -r8
 698:	0000005c 	andeq	r0, r0, ip, asr r0
 69c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 6a0:	41018e02 	tstmi	r1, r2, lsl #28
 6a4:	0000070d 	andeq	r0, r0, sp, lsl #14
 6a8:	0000001c 	andeq	r0, r0, ip, lsl r0
 6ac:	00000000 	andeq	r0, r0, r0
 6b0:	20001554 	andcs	r1, r0, r4, asr r5
 6b4:	00000068 	andeq	r0, r0, r8, rrx
 6b8:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
 6bc:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 6c0:	280e4101 	stmdacs	lr, {r0, r8, lr}
 6c4:	00070d41 	andeq	r0, r7, r1, asr #26
 6c8:	0000001c 	andeq	r0, r0, ip, lsl r0
 6cc:	00000000 	andeq	r0, r0, r0
 6d0:	200015bc 			; <UNDEFINED> instruction: 0x200015bc
 6d4:	00000060 	andeq	r0, r0, r0, rrx
 6d8:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
 6dc:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 6e0:	180e4101 	stmdane	lr, {r0, r8, lr}
 6e4:	00070d41 	andeq	r0, r7, r1, asr #26
 6e8:	0000001c 	andeq	r0, r0, ip, lsl r0
 6ec:	00000000 	andeq	r0, r0, r0
 6f0:	2000161c 	andcs	r1, r0, ip, lsl r6
 6f4:	0000005c 	andeq	r0, r0, ip, asr r0
 6f8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 6fc:	41018e02 	tstmi	r1, r2, lsl #28
 700:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 704:	00000007 	andeq	r0, r0, r7
 708:	0000001c 	andeq	r0, r0, ip, lsl r0
 70c:	00000000 	andeq	r0, r0, r0
 710:	20001678 	andcs	r1, r0, r8, ror r6
 714:	00000054 	andeq	r0, r0, r4, asr r0
 718:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 71c:	41018e02 	tstmi	r1, r2, lsl #28
 720:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 724:	00000007 	andeq	r0, r0, r7
 728:	00000020 	andeq	r0, r0, r0, lsr #32
 72c:	00000000 	andeq	r0, r0, r0
 730:	200016cc 	andcs	r1, r0, ip, asr #13
 734:	00000050 	andeq	r0, r0, r0, asr r0
 738:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
 73c:	87038504 	strhi	r8, [r3, -r4, lsl #10]
 740:	41018e02 	tstmi	r1, r2, lsl #28
 744:	0d41300e 	stcleq	0, cr3, [r1, #-56]	; 0xffffffc8
 748:	00000007 	andeq	r0, r0, r7
 74c:	0000001c 	andeq	r0, r0, ip, lsl r0
 750:	00000000 	andeq	r0, r0, r0
 754:	2000171c 	andcs	r1, r0, ip, lsl r7
 758:	00000068 	andeq	r0, r0, r8, rrx
 75c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 760:	41018e02 	tstmi	r1, r2, lsl #28
 764:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 768:	00000007 	andeq	r0, r0, r7
 76c:	0000001c 	andeq	r0, r0, ip, lsl r0
 770:	00000000 	andeq	r0, r0, r0
 774:	20001784 	andcs	r1, r0, r4, lsl #15
 778:	00000030 	andeq	r0, r0, r0, lsr r0
 77c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 780:	41018e02 	tstmi	r1, r2, lsl #28
 784:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 788:	00000007 	andeq	r0, r0, r7
 78c:	00000020 	andeq	r0, r0, r0, lsr #32
 790:	00000000 	andeq	r0, r0, r0
 794:	200017b4 			; <UNDEFINED> instruction: 0x200017b4
 798:	00000080 	andeq	r0, r0, r0, lsl #1
 79c:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
 7a0:	87038504 	strhi	r8, [r3, -r4, lsl #10]
 7a4:	41018e02 	tstmi	r1, r2, lsl #28
 7a8:	0d41480e 	stcleq	8, cr4, [r1, #-56]	; 0xffffffc8
 7ac:	00000007 	andeq	r0, r0, r7
 7b0:	0000000c 	andeq	r0, r0, ip
 7b4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 7b8:	7c010001 	stcvc	0, cr0, [r1], {1}
 7bc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 7c0:	0000000c 	andeq	r0, r0, ip
 7c4:	000007b0 			; <UNDEFINED> instruction: 0x000007b0
 7c8:	20001835 	andcs	r1, r0, r5, lsr r8
 7cc:	0000010a 	andeq	r0, r0, sl, lsl #2
 7d0:	0000000c 	andeq	r0, r0, ip
 7d4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 7d8:	7c010001 	stcvc	0, cr0, [r1], {1}
 7dc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 7e0:	0000000c 	andeq	r0, r0, ip
 7e4:	000007d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 7e8:	20001949 	andcs	r1, r0, r9, asr #18
 7ec:	000001cc 	andeq	r0, r0, ip, asr #3
 7f0:	0000000c 	andeq	r0, r0, ip
 7f4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 7f8:	7c020001 	stcvc	0, cr0, [r2], {1}
 7fc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 800:	00000014 	andeq	r0, r0, r4, lsl r0
 804:	000007f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 808:	20001b20 	andcs	r1, r0, r0, lsr #22
 80c:	00000012 	andeq	r0, r0, r2, lsl r0
 810:	84080e42 	strhi	r0, [r8], #-3650	; 0xfffff1be
 814:	00018e02 	andeq	r8, r1, r2, lsl #28
 818:	0000000c 	andeq	r0, r0, ip
 81c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 820:	7c020001 	stcvc	0, cr0, [r2], {1}
 824:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 828:	0000000c 	andeq	r0, r0, ip
 82c:	00000818 	andeq	r0, r0, r8, lsl r8
 830:	20001b34 	andcs	r1, r0, r4, lsr fp
 834:	00000014 	andeq	r0, r0, r4, lsl r0
