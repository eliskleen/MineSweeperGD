
Debug/MineSweeperGD:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:
#include <chars_for_disp.h>
//#include <systick.h>
__attribute__((naked)) __attribute__((section (".start_section")) )
void startup ( void )
{
__asm__ volatile(" LDR R0,=0x2001C000\n");		/* set stack */
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <startup+0xc>)
__asm__ volatile(" MOV SP,R0\n");
20000002:	4685      	mov	sp, r0
__asm__ volatile(" BL main\n");					/* call main */
20000004:	f000 f804 	bl	20000010 <main>
__asm__ volatile(".L1: B .L1\n");				/* never return */
20000008:	e7fe      	b.n	20000008 <startup+0x8>
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <main>:
int (*isBombPtr)(struct Positions);
int (*isFlagPtr)(struct Positions);


int main(void)
{   
20000010:	b5b0      	push	{r4, r5, r7, lr}
20000012:	b08c      	sub	sp, #48	; 0x30
20000014:	af02      	add	r7, sp, #8
	init_app();
20000016:	f000 fe73 	bl	20000d00 <init_app>
	graphic_clear_screen();
2000001a:	f000 fe68 	bl	20000cee <graphic_clear_screen>
	isBombPtr = isBomb;
2000001e:	4b64      	ldr	r3, [pc, #400]	; (200001b0 <main+0x1a0>)
20000020:	4a64      	ldr	r2, [pc, #400]	; (200001b4 <main+0x1a4>)
20000022:	601a      	str	r2, [r3, #0]
	isFlagPtr = isFlag;
20000024:	4b64      	ldr	r3, [pc, #400]	; (200001b8 <main+0x1a8>)
20000026:	4a65      	ldr	r2, [pc, #404]	; (200001bc <main+0x1ac>)
20000028:	601a      	str	r2, [r3, #0]
	createBoard(&board);
2000002a:	4b65      	ldr	r3, [pc, #404]	; (200001c0 <main+0x1b0>)
2000002c:	0018      	movs	r0, r3
2000002e:	f000 fd2b 	bl	20000a88 <createBoard>
	int gameStarted = 0;
20000032:	2300      	movs	r3, #0
20000034:	627b      	str	r3, [r7, #36]	; 0x24
	struct Player p;
	p.x = 1;
20000036:	2110      	movs	r1, #16
20000038:	187b      	adds	r3, r7, r1
2000003a:	2201      	movs	r2, #1
2000003c:	601a      	str	r2, [r3, #0]
	p.y = 0;
2000003e:	187b      	adds	r3, r7, r1
20000040:	2200      	movs	r2, #0
20000042:	605a      	str	r2, [r3, #4]
	char hitCh;
	char lastKey;
	int nSameKey = 0;
20000044:	2300      	movs	r3, #0
20000046:	61fb      	str	r3, [r7, #28]
	movePlayer(p, 0x06);
20000048:	0038      	movs	r0, r7
2000004a:	187b      	adds	r3, r7, r1
2000004c:	2206      	movs	r2, #6
2000004e:	9200      	str	r2, [sp, #0]
20000050:	6819      	ldr	r1, [r3, #0]
20000052:	685a      	ldr	r2, [r3, #4]
20000054:	689b      	ldr	r3, [r3, #8]
20000056:	f000 fc21 	bl	2000089c <movePlayer>
	drawPos(board[0][0]);
2000005a:	4b59      	ldr	r3, [pc, #356]	; (200001c0 <main+0x1b0>)
2000005c:	466a      	mov	r2, sp
2000005e:	0011      	movs	r1, r2
20000060:	001a      	movs	r2, r3
20000062:	3210      	adds	r2, #16
20000064:	ca11      	ldmia	r2!, {r0, r4}
20000066:	c111      	stmia	r1!, {r0, r4}
20000068:	6818      	ldr	r0, [r3, #0]
2000006a:	6859      	ldr	r1, [r3, #4]
2000006c:	689a      	ldr	r2, [r3, #8]
2000006e:	68db      	ldr	r3, [r3, #12]
20000070:	f000 fc8c 	bl	2000098c <drawPos>
	running = 1;
20000074:	4b53      	ldr	r3, [pc, #332]	; (200001c4 <main+0x1b4>)
20000076:	2201      	movs	r2, #1
20000078:	601a      	str	r2, [r3, #0]
	while(running)
2000007a:	e08f      	b.n	2000019c <main+0x18c>
	{
		checkWin();
2000007c:	f000 f8a4 	bl	200001c8 <checkWin>
		hitCh = keyb_enhanced();
20000080:	2523      	movs	r5, #35	; 0x23
20000082:	197c      	adds	r4, r7, r5
20000084:	f000 fe94 	bl	20000db0 <keyb_enhanced>
20000088:	0003      	movs	r3, r0
2000008a:	7023      	strb	r3, [r4, #0]
		if( hitCh != noKeyReturn)
2000008c:	002a      	movs	r2, r5
2000008e:	18bb      	adds	r3, r7, r2
20000090:	781b      	ldrb	r3, [r3, #0]
20000092:	2bff      	cmp	r3, #255	; 0xff
20000094:	d100      	bne.n	20000098 <main+0x88>
20000096:	e065      	b.n	20000164 <main+0x154>
		{
			if(nSameKey >= sameKeyMax)
20000098:	69fb      	ldr	r3, [r7, #28]
2000009a:	2b1d      	cmp	r3, #29
2000009c:	dd06      	ble.n	200000ac <main+0x9c>
			{
				hitCh = lastKey;
2000009e:	18bb      	adds	r3, r7, r2
200000a0:	2222      	movs	r2, #34	; 0x22
200000a2:	18ba      	adds	r2, r7, r2
200000a4:	7812      	ldrb	r2, [r2, #0]
200000a6:	701a      	strb	r2, [r3, #0]
				nSameKey = 0;
200000a8:	2300      	movs	r3, #0
200000aa:	61fb      	str	r3, [r7, #28]
			}
			if(hitCh == noKeyReturn)
200000ac:	2323      	movs	r3, #35	; 0x23
200000ae:	18fb      	adds	r3, r7, r3
200000b0:	781b      	ldrb	r3, [r3, #0]
200000b2:	2bff      	cmp	r3, #255	; 0xff
200000b4:	d101      	bne.n	200000ba <main+0xaa>
				nSameKey = 0;
200000b6:	2300      	movs	r3, #0
200000b8:	61fb      	str	r3, [r7, #28]
			if(hitCh != sameKeyReturn)
200000ba:	2223      	movs	r2, #35	; 0x23
200000bc:	18bb      	adds	r3, r7, r2
200000be:	781b      	ldrb	r3, [r3, #0]
200000c0:	2bfe      	cmp	r3, #254	; 0xfe
200000c2:	d004      	beq.n	200000ce <main+0xbe>
				lastKey = hitCh;
200000c4:	2322      	movs	r3, #34	; 0x22
200000c6:	18fb      	adds	r3, r7, r3
200000c8:	18ba      	adds	r2, r7, r2
200000ca:	7812      	ldrb	r2, [r2, #0]
200000cc:	701a      	strb	r2, [r3, #0]
			switch(hitCh)
200000ce:	2323      	movs	r3, #35	; 0x23
200000d0:	18fb      	adds	r3, r7, r3
200000d2:	781b      	ldrb	r3, [r3, #0]
200000d4:	2b0e      	cmp	r3, #14
200000d6:	d024      	beq.n	20000122 <main+0x112>
200000d8:	dc26      	bgt.n	20000128 <main+0x118>
200000da:	2b0a      	cmp	r3, #10
200000dc:	d002      	beq.n	200000e4 <main+0xd4>
200000de:	2b0b      	cmp	r3, #11
200000e0:	d017      	beq.n	20000112 <main+0x102>
200000e2:	e021      	b.n	20000128 <main+0x118>
			{
				case 0xA: // open
				 if(!gameStarted)
200000e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200000e6:	2b00      	cmp	r3, #0
200000e8:	d109      	bne.n	200000fe <main+0xee>
				 {
					makeFirstOpen(p);
200000ea:	2310      	movs	r3, #16
200000ec:	18fb      	adds	r3, r7, r3
200000ee:	6818      	ldr	r0, [r3, #0]
200000f0:	6859      	ldr	r1, [r3, #4]
200000f2:	689a      	ldr	r2, [r3, #8]
200000f4:	f000 f93a 	bl	2000036c <makeFirstOpen>
					gameStarted = 1;
200000f8:	2301      	movs	r3, #1
200000fa:	627b      	str	r3, [r7, #36]	; 0x24
				 }
				 else
					openPos(p.x, p.y);
				 break;
200000fc:	e035      	b.n	2000016a <main+0x15a>
					openPos(p.x, p.y);
200000fe:	2110      	movs	r1, #16
20000100:	187b      	adds	r3, r7, r1
20000102:	681a      	ldr	r2, [r3, #0]
20000104:	187b      	adds	r3, r7, r1
20000106:	685b      	ldr	r3, [r3, #4]
20000108:	0019      	movs	r1, r3
2000010a:	0010      	movs	r0, r2
2000010c:	f000 fa18 	bl	20000540 <openPos>
				 break;
20000110:	e02b      	b.n	2000016a <main+0x15a>
				case 0xB: // place flag
				 placeFlag(p);
20000112:	2310      	movs	r3, #16
20000114:	18fb      	adds	r3, r7, r3
20000116:	6818      	ldr	r0, [r3, #0]
20000118:	6859      	ldr	r1, [r3, #4]
2000011a:	689a      	ldr	r2, [r3, #8]
2000011c:	f000 f976 	bl	2000040c <placeFlag>
				 break;
20000120:	e023      	b.n	2000016a <main+0x15a>
				case 0xE:
				 showBombs();
20000122:	f000 f93c 	bl	2000039e <showBombs>
				 break;
20000126:	e020      	b.n	2000016a <main+0x15a>
				default:	//move
				 if(hitCh == 0x2 || hitCh == 0x4 || hitCh == 0x8 || hitCh == 0x6)
20000128:	2223      	movs	r2, #35	; 0x23
2000012a:	18bb      	adds	r3, r7, r2
2000012c:	781b      	ldrb	r3, [r3, #0]
2000012e:	2b02      	cmp	r3, #2
20000130:	d00b      	beq.n	2000014a <main+0x13a>
20000132:	18bb      	adds	r3, r7, r2
20000134:	781b      	ldrb	r3, [r3, #0]
20000136:	2b04      	cmp	r3, #4
20000138:	d007      	beq.n	2000014a <main+0x13a>
2000013a:	18bb      	adds	r3, r7, r2
2000013c:	781b      	ldrb	r3, [r3, #0]
2000013e:	2b08      	cmp	r3, #8
20000140:	d003      	beq.n	2000014a <main+0x13a>
20000142:	18bb      	adds	r3, r7, r2
20000144:	781b      	ldrb	r3, [r3, #0]
20000146:	2b06      	cmp	r3, #6
20000148:	d10e      	bne.n	20000168 <main+0x158>
					p = movePlayer(p, hitCh);
2000014a:	2310      	movs	r3, #16
2000014c:	18f8      	adds	r0, r7, r3
2000014e:	18fb      	adds	r3, r7, r3
20000150:	2223      	movs	r2, #35	; 0x23
20000152:	18ba      	adds	r2, r7, r2
20000154:	7812      	ldrb	r2, [r2, #0]
20000156:	9200      	str	r2, [sp, #0]
20000158:	6819      	ldr	r1, [r3, #0]
2000015a:	685a      	ldr	r2, [r3, #4]
2000015c:	689b      	ldr	r3, [r3, #8]
2000015e:	f000 fb9d 	bl	2000089c <movePlayer>
				 break;
20000162:	e001      	b.n	20000168 <main+0x158>
			}
			
		}
20000164:	46c0      	nop			; (mov r8, r8)
20000166:	e000      	b.n	2000016a <main+0x15a>
				 break;
20000168:	46c0      	nop			; (mov r8, r8)
		if(hitCh == sameKeyReturn && (lastKey == 0x2 || lastKey == 0x4 || lastKey == 0x8 || lastKey == 0x6))
2000016a:	2323      	movs	r3, #35	; 0x23
2000016c:	18fb      	adds	r3, r7, r3
2000016e:	781b      	ldrb	r3, [r3, #0]
20000170:	2bfe      	cmp	r3, #254	; 0xfe
20000172:	d113      	bne.n	2000019c <main+0x18c>
20000174:	2222      	movs	r2, #34	; 0x22
20000176:	18bb      	adds	r3, r7, r2
20000178:	781b      	ldrb	r3, [r3, #0]
2000017a:	2b02      	cmp	r3, #2
2000017c:	d00b      	beq.n	20000196 <main+0x186>
2000017e:	18bb      	adds	r3, r7, r2
20000180:	781b      	ldrb	r3, [r3, #0]
20000182:	2b04      	cmp	r3, #4
20000184:	d007      	beq.n	20000196 <main+0x186>
20000186:	18bb      	adds	r3, r7, r2
20000188:	781b      	ldrb	r3, [r3, #0]
2000018a:	2b08      	cmp	r3, #8
2000018c:	d003      	beq.n	20000196 <main+0x186>
2000018e:	18bb      	adds	r3, r7, r2
20000190:	781b      	ldrb	r3, [r3, #0]
20000192:	2b06      	cmp	r3, #6
20000194:	d102      	bne.n	2000019c <main+0x18c>
			nSameKey++;
20000196:	69fb      	ldr	r3, [r7, #28]
20000198:	3301      	adds	r3, #1
2000019a:	61fb      	str	r3, [r7, #28]
	while(running)
2000019c:	4b09      	ldr	r3, [pc, #36]	; (200001c4 <main+0x1b4>)
2000019e:	681b      	ldr	r3, [r3, #0]
200001a0:	2b00      	cmp	r3, #0
200001a2:	d000      	beq.n	200001a6 <main+0x196>
200001a4:	e76a      	b.n	2000007c <main+0x6c>
		// do stuff depending on key_code
	}
	return 0;
200001a6:	2300      	movs	r3, #0
}
200001a8:	0018      	movs	r0, r3
200001aa:	46bd      	mov	sp, r7
200001ac:	b00a      	add	sp, #40	; 0x28
200001ae:	bdb0      	pop	{r4, r5, r7, pc}
200001b0:	20001960 	andcs	r1, r0, r0, ror #18
200001b4:	20000851 	andcs	r0, r0, r1, asr r8
200001b8:	200012b4 			; <UNDEFINED> instruction: 0x200012b4
200001bc:	20000877 	andcs	r0, r0, r7, ror r8
200001c0:	200012b8 			; <UNDEFINED> instruction: 0x200012b8
200001c4:	20001294 	mulcs	r0, r4, r2

200001c8 <checkWin>:
void checkWin()
{
200001c8:	b580      	push	{r7, lr}
200001ca:	b084      	sub	sp, #16
200001cc:	af00      	add	r7, sp, #0
	int squaresToOpen = sizeX*sizeY - Bombs;
200001ce:	233c      	movs	r3, #60	; 0x3c
200001d0:	603b      	str	r3, [r7, #0]
	int openedSquares = 0;
200001d2:	2300      	movs	r3, #0
200001d4:	60fb      	str	r3, [r7, #12]
	for(int x = 0; x < sizeX; x++)
200001d6:	2300      	movs	r3, #0
200001d8:	60bb      	str	r3, [r7, #8]
200001da:	e032      	b.n	20000242 <checkWin+0x7a>
		for(int y = 0; y < sizeY; y++)
200001dc:	2300      	movs	r3, #0
200001de:	607b      	str	r3, [r7, #4]
200001e0:	e029      	b.n	20000236 <checkWin+0x6e>
		{
			if(board[x][y].opened && board[x][y].bomb == 0)
200001e2:	481f      	ldr	r0, [pc, #124]	; (20000260 <checkWin+0x98>)
200001e4:	687b      	ldr	r3, [r7, #4]
200001e6:	68b9      	ldr	r1, [r7, #8]
200001e8:	001a      	movs	r2, r3
200001ea:	0052      	lsls	r2, r2, #1
200001ec:	18d2      	adds	r2, r2, r3
200001ee:	00d3      	lsls	r3, r2, #3
200001f0:	001a      	movs	r2, r3
200001f2:	000b      	movs	r3, r1
200001f4:	011b      	lsls	r3, r3, #4
200001f6:	1a5b      	subs	r3, r3, r1
200001f8:	00db      	lsls	r3, r3, #3
200001fa:	18d3      	adds	r3, r2, r3
200001fc:	18c3      	adds	r3, r0, r3
200001fe:	3314      	adds	r3, #20
20000200:	681b      	ldr	r3, [r3, #0]
20000202:	2b00      	cmp	r3, #0
20000204:	d014      	beq.n	20000230 <checkWin+0x68>
20000206:	4816      	ldr	r0, [pc, #88]	; (20000260 <checkWin+0x98>)
20000208:	687b      	ldr	r3, [r7, #4]
2000020a:	68b9      	ldr	r1, [r7, #8]
2000020c:	001a      	movs	r2, r3
2000020e:	0052      	lsls	r2, r2, #1
20000210:	18d2      	adds	r2, r2, r3
20000212:	00d3      	lsls	r3, r2, #3
20000214:	001a      	movs	r2, r3
20000216:	000b      	movs	r3, r1
20000218:	011b      	lsls	r3, r3, #4
2000021a:	1a5b      	subs	r3, r3, r1
2000021c:	00db      	lsls	r3, r3, #3
2000021e:	18d3      	adds	r3, r2, r3
20000220:	18c3      	adds	r3, r0, r3
20000222:	3310      	adds	r3, #16
20000224:	681b      	ldr	r3, [r3, #0]
20000226:	2b00      	cmp	r3, #0
20000228:	d102      	bne.n	20000230 <checkWin+0x68>
				openedSquares++;
2000022a:	68fb      	ldr	r3, [r7, #12]
2000022c:	3301      	adds	r3, #1
2000022e:	60fb      	str	r3, [r7, #12]
		for(int y = 0; y < sizeY; y++)
20000230:	687b      	ldr	r3, [r7, #4]
20000232:	3301      	adds	r3, #1
20000234:	607b      	str	r3, [r7, #4]
20000236:	687b      	ldr	r3, [r7, #4]
20000238:	2b04      	cmp	r3, #4
2000023a:	ddd2      	ble.n	200001e2 <checkWin+0x1a>
	for(int x = 0; x < sizeX; x++)
2000023c:	68bb      	ldr	r3, [r7, #8]
2000023e:	3301      	adds	r3, #1
20000240:	60bb      	str	r3, [r7, #8]
20000242:	68bb      	ldr	r3, [r7, #8]
20000244:	2b0d      	cmp	r3, #13
20000246:	ddc9      	ble.n	200001dc <checkWin+0x14>
		}
	if(openedSquares == squaresToOpen)
20000248:	68fa      	ldr	r2, [r7, #12]
2000024a:	683b      	ldr	r3, [r7, #0]
2000024c:	429a      	cmp	r2, r3
2000024e:	d102      	bne.n	20000256 <checkWin+0x8e>
		running = 0;
20000250:	4b04      	ldr	r3, [pc, #16]	; (20000264 <checkWin+0x9c>)
20000252:	2200      	movs	r2, #0
20000254:	601a      	str	r2, [r3, #0]
}
20000256:	46c0      	nop			; (mov r8, r8)
20000258:	46bd      	mov	sp, r7
2000025a:	b004      	add	sp, #16
2000025c:	bd80      	pop	{r7, pc}
2000025e:	46c0      	nop			; (mov r8, r8)
20000260:	200012b8 			; <UNDEFINED> instruction: 0x200012b8
20000264:	20001294 	mulcs	r0, r4, r2

20000268 <placeBombs>:
void placeBombs(struct Player p)
{
20000268:	b590      	push	{r4, r7, lr}
2000026a:	b08b      	sub	sp, #44	; 0x2c
2000026c:	af00      	add	r7, sp, #0
2000026e:	1d3b      	adds	r3, r7, #4
20000270:	6018      	str	r0, [r3, #0]
20000272:	6059      	str	r1, [r3, #4]
20000274:	609a      	str	r2, [r3, #8]
	 // du kan göra en räknarkrets som du kan läsa av värdet på!!!
	int placedBombs = 0;
20000276:	2300      	movs	r3, #0
20000278:	627b      	str	r3, [r7, #36]	; 0x24
	while(placedBombs < Bombs)
2000027a:	e041      	b.n	20000300 <placeBombs+0x98>
	{
		int rx = get_rand_val() % sizeX;
2000027c:	f000 fe46 	bl	20000f0c <get_rand_val>
20000280:	0003      	movs	r3, r0
20000282:	210e      	movs	r1, #14
20000284:	0018      	movs	r0, r3
20000286:	f000 ffe7 	bl	20001258 <__aeabi_idivmod>
2000028a:	000b      	movs	r3, r1
2000028c:	61bb      	str	r3, [r7, #24]
		int ry = get_rand_val() % sizeY;
2000028e:	f000 fe3d 	bl	20000f0c <get_rand_val>
20000292:	0003      	movs	r3, r0
20000294:	2105      	movs	r1, #5
20000296:	0018      	movs	r0, r3
20000298:	f000 ffde 	bl	20001258 <__aeabi_idivmod>
2000029c:	000b      	movs	r3, r1
2000029e:	617b      	str	r3, [r7, #20]
		if(board[rx][ry].bomb == 0 && (rx != p.x && ry != p.y))
200002a0:	4830      	ldr	r0, [pc, #192]	; (20000364 <placeBombs+0xfc>)
200002a2:	697b      	ldr	r3, [r7, #20]
200002a4:	69b9      	ldr	r1, [r7, #24]
200002a6:	001a      	movs	r2, r3
200002a8:	0052      	lsls	r2, r2, #1
200002aa:	18d2      	adds	r2, r2, r3
200002ac:	00d3      	lsls	r3, r2, #3
200002ae:	001a      	movs	r2, r3
200002b0:	000b      	movs	r3, r1
200002b2:	011b      	lsls	r3, r3, #4
200002b4:	1a5b      	subs	r3, r3, r1
200002b6:	00db      	lsls	r3, r3, #3
200002b8:	18d3      	adds	r3, r2, r3
200002ba:	18c3      	adds	r3, r0, r3
200002bc:	3310      	adds	r3, #16
200002be:	681b      	ldr	r3, [r3, #0]
200002c0:	2b00      	cmp	r3, #0
200002c2:	d11d      	bne.n	20000300 <placeBombs+0x98>
200002c4:	1d3b      	adds	r3, r7, #4
200002c6:	681b      	ldr	r3, [r3, #0]
200002c8:	69ba      	ldr	r2, [r7, #24]
200002ca:	429a      	cmp	r2, r3
200002cc:	d018      	beq.n	20000300 <placeBombs+0x98>
200002ce:	1d3b      	adds	r3, r7, #4
200002d0:	685b      	ldr	r3, [r3, #4]
200002d2:	697a      	ldr	r2, [r7, #20]
200002d4:	429a      	cmp	r2, r3
200002d6:	d013      	beq.n	20000300 <placeBombs+0x98>
		{
			board[rx][ry].bomb = 1;
200002d8:	4822      	ldr	r0, [pc, #136]	; (20000364 <placeBombs+0xfc>)
200002da:	697b      	ldr	r3, [r7, #20]
200002dc:	69b9      	ldr	r1, [r7, #24]
200002de:	001a      	movs	r2, r3
200002e0:	0052      	lsls	r2, r2, #1
200002e2:	18d2      	adds	r2, r2, r3
200002e4:	00d3      	lsls	r3, r2, #3
200002e6:	001a      	movs	r2, r3
200002e8:	000b      	movs	r3, r1
200002ea:	011b      	lsls	r3, r3, #4
200002ec:	1a5b      	subs	r3, r3, r1
200002ee:	00db      	lsls	r3, r3, #3
200002f0:	18d3      	adds	r3, r2, r3
200002f2:	18c3      	adds	r3, r0, r3
200002f4:	3310      	adds	r3, #16
200002f6:	2201      	movs	r2, #1
200002f8:	601a      	str	r2, [r3, #0]
			placedBombs++;
200002fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200002fc:	3301      	adds	r3, #1
200002fe:	627b      	str	r3, [r7, #36]	; 0x24
	while(placedBombs < Bombs)
20000300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20000302:	2b09      	cmp	r3, #9
20000304:	ddba      	ble.n	2000027c <placeBombs+0x14>
		}
	}
	for(int i = 0; i<sizeX; i++)
20000306:	2300      	movs	r3, #0
20000308:	623b      	str	r3, [r7, #32]
2000030a:	e023      	b.n	20000354 <placeBombs+0xec>
		for(int j = 0; j < sizeY; j++)
2000030c:	2300      	movs	r3, #0
2000030e:	61fb      	str	r3, [r7, #28]
20000310:	e01a      	b.n	20000348 <placeBombs+0xe0>
			board[i][j].numberOfBombs = countBombOrFlag(i, j, isBombPtr);
20000312:	4b15      	ldr	r3, [pc, #84]	; (20000368 <placeBombs+0x100>)
20000314:	681a      	ldr	r2, [r3, #0]
20000316:	69f9      	ldr	r1, [r7, #28]
20000318:	6a3b      	ldr	r3, [r7, #32]
2000031a:	0018      	movs	r0, r3
2000031c:	f000 fa3e 	bl	2000079c <countBombOrFlag>
20000320:	0004      	movs	r4, r0
20000322:	4810      	ldr	r0, [pc, #64]	; (20000364 <placeBombs+0xfc>)
20000324:	69fb      	ldr	r3, [r7, #28]
20000326:	6a39      	ldr	r1, [r7, #32]
20000328:	001a      	movs	r2, r3
2000032a:	0052      	lsls	r2, r2, #1
2000032c:	18d2      	adds	r2, r2, r3
2000032e:	00d3      	lsls	r3, r2, #3
20000330:	001a      	movs	r2, r3
20000332:	000b      	movs	r3, r1
20000334:	011b      	lsls	r3, r3, #4
20000336:	1a5b      	subs	r3, r3, r1
20000338:	00db      	lsls	r3, r3, #3
2000033a:	18d3      	adds	r3, r2, r3
2000033c:	18c3      	adds	r3, r0, r3
2000033e:	3308      	adds	r3, #8
20000340:	601c      	str	r4, [r3, #0]
		for(int j = 0; j < sizeY; j++)
20000342:	69fb      	ldr	r3, [r7, #28]
20000344:	3301      	adds	r3, #1
20000346:	61fb      	str	r3, [r7, #28]
20000348:	69fb      	ldr	r3, [r7, #28]
2000034a:	2b04      	cmp	r3, #4
2000034c:	dde1      	ble.n	20000312 <placeBombs+0xaa>
	for(int i = 0; i<sizeX; i++)
2000034e:	6a3b      	ldr	r3, [r7, #32]
20000350:	3301      	adds	r3, #1
20000352:	623b      	str	r3, [r7, #32]
20000354:	6a3b      	ldr	r3, [r7, #32]
20000356:	2b0d      	cmp	r3, #13
20000358:	ddd8      	ble.n	2000030c <placeBombs+0xa4>
}
2000035a:	46c0      	nop			; (mov r8, r8)
2000035c:	46c0      	nop			; (mov r8, r8)
2000035e:	46bd      	mov	sp, r7
20000360:	b00b      	add	sp, #44	; 0x2c
20000362:	bd90      	pop	{r4, r7, pc}
20000364:	200012b8 			; <UNDEFINED> instruction: 0x200012b8
20000368:	20001960 	andcs	r1, r0, r0, ror #18

2000036c <makeFirstOpen>:
void makeFirstOpen(struct Player p)
{
2000036c:	b580      	push	{r7, lr}
2000036e:	b084      	sub	sp, #16
20000370:	af00      	add	r7, sp, #0
20000372:	1d3b      	adds	r3, r7, #4
20000374:	6018      	str	r0, [r3, #0]
20000376:	6059      	str	r1, [r3, #4]
20000378:	609a      	str	r2, [r3, #8]
	placeBombs(p);
2000037a:	1d3b      	adds	r3, r7, #4
2000037c:	6818      	ldr	r0, [r3, #0]
2000037e:	6859      	ldr	r1, [r3, #4]
20000380:	689a      	ldr	r2, [r3, #8]
20000382:	f7ff ff71 	bl	20000268 <placeBombs>
	openPos(p.x, p.y);
20000386:	1d3b      	adds	r3, r7, #4
20000388:	681a      	ldr	r2, [r3, #0]
2000038a:	1d3b      	adds	r3, r7, #4
2000038c:	685b      	ldr	r3, [r3, #4]
2000038e:	0019      	movs	r1, r3
20000390:	0010      	movs	r0, r2
20000392:	f000 f8d5 	bl	20000540 <openPos>
}
20000396:	46c0      	nop			; (mov r8, r8)
20000398:	46bd      	mov	sp, r7
2000039a:	b004      	add	sp, #16
2000039c:	bd80      	pop	{r7, pc}

2000039e <showBombs>:
void showBombs()
{
2000039e:	b580      	push	{r7, lr}
200003a0:	b082      	sub	sp, #8
200003a2:	af00      	add	r7, sp, #0
	for(int i = 0; i<sizeX; i++)
200003a4:	2300      	movs	r3, #0
200003a6:	607b      	str	r3, [r7, #4]
200003a8:	e026      	b.n	200003f8 <showBombs+0x5a>
		for(int j = 0; j < sizeY; j++)
200003aa:	2300      	movs	r3, #0
200003ac:	603b      	str	r3, [r7, #0]
200003ae:	e01d      	b.n	200003ec <showBombs+0x4e>
			if(board[i][j].bomb)
200003b0:	4815      	ldr	r0, [pc, #84]	; (20000408 <showBombs+0x6a>)
200003b2:	683b      	ldr	r3, [r7, #0]
200003b4:	6879      	ldr	r1, [r7, #4]
200003b6:	001a      	movs	r2, r3
200003b8:	0052      	lsls	r2, r2, #1
200003ba:	18d2      	adds	r2, r2, r3
200003bc:	00d3      	lsls	r3, r2, #3
200003be:	001a      	movs	r2, r3
200003c0:	000b      	movs	r3, r1
200003c2:	011b      	lsls	r3, r3, #4
200003c4:	1a5b      	subs	r3, r3, r1
200003c6:	00db      	lsls	r3, r3, #3
200003c8:	18d3      	adds	r3, r2, r3
200003ca:	18c3      	adds	r3, r0, r3
200003cc:	3310      	adds	r3, #16
200003ce:	681b      	ldr	r3, [r3, #0]
200003d0:	2b00      	cmp	r3, #0
200003d2:	d008      	beq.n	200003e6 <showBombs+0x48>
				{
					gotoxy(startX + i, startY + j);
200003d4:	683a      	ldr	r2, [r7, #0]
200003d6:	687b      	ldr	r3, [r7, #4]
200003d8:	0011      	movs	r1, r2
200003da:	0018      	movs	r0, r3
200003dc:	f000 fb8f 	bl	20000afe <gotoxy>
					printToGD(bombCh);
200003e0:	202a      	movs	r0, #42	; 0x2a
200003e2:	f000 fb9f 	bl	20000b24 <printToGD>
		for(int j = 0; j < sizeY; j++)
200003e6:	683b      	ldr	r3, [r7, #0]
200003e8:	3301      	adds	r3, #1
200003ea:	603b      	str	r3, [r7, #0]
200003ec:	683b      	ldr	r3, [r7, #0]
200003ee:	2b04      	cmp	r3, #4
200003f0:	ddde      	ble.n	200003b0 <showBombs+0x12>
	for(int i = 0; i<sizeX; i++)
200003f2:	687b      	ldr	r3, [r7, #4]
200003f4:	3301      	adds	r3, #1
200003f6:	607b      	str	r3, [r7, #4]
200003f8:	687b      	ldr	r3, [r7, #4]
200003fa:	2b0d      	cmp	r3, #13
200003fc:	ddd5      	ble.n	200003aa <showBombs+0xc>
				}
}
200003fe:	46c0      	nop			; (mov r8, r8)
20000400:	46c0      	nop			; (mov r8, r8)
20000402:	46bd      	mov	sp, r7
20000404:	b002      	add	sp, #8
20000406:	bd80      	pop	{r7, pc}
20000408:	200012b8 			; <UNDEFINED> instruction: 0x200012b8

2000040c <placeFlag>:
void placeFlag(struct Player p)
{
2000040c:	b5b0      	push	{r4, r5, r7, lr}
2000040e:	b086      	sub	sp, #24
20000410:	af02      	add	r7, sp, #8
20000412:	1d3b      	adds	r3, r7, #4
20000414:	6018      	str	r0, [r3, #0]
20000416:	6059      	str	r1, [r3, #4]
20000418:	609a      	str	r2, [r3, #8]
	if(board[p.x][p.y].opened)
2000041a:	1d3b      	adds	r3, r7, #4
2000041c:	6819      	ldr	r1, [r3, #0]
2000041e:	1d3b      	adds	r3, r7, #4
20000420:	685b      	ldr	r3, [r3, #4]
20000422:	483f      	ldr	r0, [pc, #252]	; (20000520 <placeFlag+0x114>)
20000424:	001a      	movs	r2, r3
20000426:	0052      	lsls	r2, r2, #1
20000428:	18d2      	adds	r2, r2, r3
2000042a:	00d3      	lsls	r3, r2, #3
2000042c:	001a      	movs	r2, r3
2000042e:	000b      	movs	r3, r1
20000430:	011b      	lsls	r3, r3, #4
20000432:	1a5b      	subs	r3, r3, r1
20000434:	00db      	lsls	r3, r3, #3
20000436:	18d3      	adds	r3, r2, r3
20000438:	18c3      	adds	r3, r0, r3
2000043a:	3314      	adds	r3, #20
2000043c:	681b      	ldr	r3, [r3, #0]
2000043e:	2b00      	cmp	r3, #0
20000440:	d169      	bne.n	20000516 <placeFlag+0x10a>
		return;
	board[p.x][p.y].flagged = (board[p.x][p.y].flagged + 1) % 2;
20000442:	1d3b      	adds	r3, r7, #4
20000444:	6819      	ldr	r1, [r3, #0]
20000446:	1d3b      	adds	r3, r7, #4
20000448:	685b      	ldr	r3, [r3, #4]
2000044a:	4835      	ldr	r0, [pc, #212]	; (20000520 <placeFlag+0x114>)
2000044c:	001a      	movs	r2, r3
2000044e:	0052      	lsls	r2, r2, #1
20000450:	18d2      	adds	r2, r2, r3
20000452:	00d3      	lsls	r3, r2, #3
20000454:	001a      	movs	r2, r3
20000456:	000b      	movs	r3, r1
20000458:	011b      	lsls	r3, r3, #4
2000045a:	1a5b      	subs	r3, r3, r1
2000045c:	00db      	lsls	r3, r3, #3
2000045e:	18d3      	adds	r3, r2, r3
20000460:	18c3      	adds	r3, r0, r3
20000462:	330c      	adds	r3, #12
20000464:	681b      	ldr	r3, [r3, #0]
20000466:	1c5a      	adds	r2, r3, #1
20000468:	1d3b      	adds	r3, r7, #4
2000046a:	6819      	ldr	r1, [r3, #0]
2000046c:	1d3b      	adds	r3, r7, #4
2000046e:	6858      	ldr	r0, [r3, #4]
20000470:	4b2c      	ldr	r3, [pc, #176]	; (20000524 <placeFlag+0x118>)
20000472:	4013      	ands	r3, r2
20000474:	d504      	bpl.n	20000480 <placeFlag+0x74>
20000476:	3b01      	subs	r3, #1
20000478:	2202      	movs	r2, #2
2000047a:	4252      	negs	r2, r2
2000047c:	4313      	orrs	r3, r2
2000047e:	3301      	adds	r3, #1
20000480:	001d      	movs	r5, r3
20000482:	4c27      	ldr	r4, [pc, #156]	; (20000520 <placeFlag+0x114>)
20000484:	0002      	movs	r2, r0
20000486:	0052      	lsls	r2, r2, #1
20000488:	1812      	adds	r2, r2, r0
2000048a:	00d3      	lsls	r3, r2, #3
2000048c:	001a      	movs	r2, r3
2000048e:	000b      	movs	r3, r1
20000490:	011b      	lsls	r3, r3, #4
20000492:	1a5b      	subs	r3, r3, r1
20000494:	00db      	lsls	r3, r3, #3
20000496:	18d3      	adds	r3, r2, r3
20000498:	18e3      	adds	r3, r4, r3
2000049a:	330c      	adds	r3, #12
2000049c:	601d      	str	r5, [r3, #0]
	p.placedFlaggs = board[p.x][p.y].flagged ? p.placedFlaggs + 1 : p.placedFlaggs -1;
2000049e:	1d3b      	adds	r3, r7, #4
200004a0:	6819      	ldr	r1, [r3, #0]
200004a2:	1d3b      	adds	r3, r7, #4
200004a4:	685b      	ldr	r3, [r3, #4]
200004a6:	481e      	ldr	r0, [pc, #120]	; (20000520 <placeFlag+0x114>)
200004a8:	001a      	movs	r2, r3
200004aa:	0052      	lsls	r2, r2, #1
200004ac:	18d2      	adds	r2, r2, r3
200004ae:	00d3      	lsls	r3, r2, #3
200004b0:	001a      	movs	r2, r3
200004b2:	000b      	movs	r3, r1
200004b4:	011b      	lsls	r3, r3, #4
200004b6:	1a5b      	subs	r3, r3, r1
200004b8:	00db      	lsls	r3, r3, #3
200004ba:	18d3      	adds	r3, r2, r3
200004bc:	18c3      	adds	r3, r0, r3
200004be:	330c      	adds	r3, #12
200004c0:	681b      	ldr	r3, [r3, #0]
200004c2:	2b00      	cmp	r3, #0
200004c4:	d003      	beq.n	200004ce <placeFlag+0xc2>
200004c6:	1d3b      	adds	r3, r7, #4
200004c8:	689b      	ldr	r3, [r3, #8]
200004ca:	1c5a      	adds	r2, r3, #1
200004cc:	e002      	b.n	200004d4 <placeFlag+0xc8>
200004ce:	1d3b      	adds	r3, r7, #4
200004d0:	689b      	ldr	r3, [r3, #8]
200004d2:	1e5a      	subs	r2, r3, #1
200004d4:	1d3b      	adds	r3, r7, #4
200004d6:	609a      	str	r2, [r3, #8]
	drawPos(board[p.x][p.y]);
200004d8:	1d3b      	adds	r3, r7, #4
200004da:	6819      	ldr	r1, [r3, #0]
200004dc:	1d3b      	adds	r3, r7, #4
200004de:	685b      	ldr	r3, [r3, #4]
200004e0:	4c0f      	ldr	r4, [pc, #60]	; (20000520 <placeFlag+0x114>)
200004e2:	001a      	movs	r2, r3
200004e4:	0052      	lsls	r2, r2, #1
200004e6:	18d2      	adds	r2, r2, r3
200004e8:	00d3      	lsls	r3, r2, #3
200004ea:	001a      	movs	r2, r3
200004ec:	000b      	movs	r3, r1
200004ee:	011b      	lsls	r3, r3, #4
200004f0:	1a5b      	subs	r3, r3, r1
200004f2:	00db      	lsls	r3, r3, #3
200004f4:	18d3      	adds	r3, r2, r3
200004f6:	2110      	movs	r1, #16
200004f8:	18e2      	adds	r2, r4, r3
200004fa:	1851      	adds	r1, r2, r1
200004fc:	466a      	mov	r2, sp
200004fe:	c921      	ldmia	r1!, {r0, r5}
20000500:	c221      	stmia	r2!, {r0, r5}
20000502:	5918      	ldr	r0, [r3, r4]
20000504:	18e2      	adds	r2, r4, r3
20000506:	6851      	ldr	r1, [r2, #4]
20000508:	18e2      	adds	r2, r4, r3
2000050a:	6892      	ldr	r2, [r2, #8]
2000050c:	18e3      	adds	r3, r4, r3
2000050e:	68db      	ldr	r3, [r3, #12]
20000510:	f000 fa3c 	bl	2000098c <drawPos>
20000514:	e000      	b.n	20000518 <placeFlag+0x10c>
		return;
20000516:	46c0      	nop			; (mov r8, r8)
}
20000518:	46bd      	mov	sp, r7
2000051a:	b004      	add	sp, #16
2000051c:	bdb0      	pop	{r4, r5, r7, pc}
2000051e:	46c0      	nop			; (mov r8, r8)
20000520:	200012b8 			; <UNDEFINED> instruction: 0x200012b8
20000524:	80000001 	andhi	r0, r0, r1

20000528 <gameOver>:
void gameOver()
{
20000528:	b580      	push	{r7, lr}
2000052a:	af00      	add	r7, sp, #0
	showBombs();
2000052c:	f7ff ff37 	bl	2000039e <showBombs>
	running = 0;
20000530:	4b02      	ldr	r3, [pc, #8]	; (2000053c <gameOver+0x14>)
20000532:	2200      	movs	r2, #0
20000534:	601a      	str	r2, [r3, #0]
}
20000536:	46c0      	nop			; (mov r8, r8)
20000538:	46bd      	mov	sp, r7
2000053a:	bd80      	pop	{r7, pc}
2000053c:	20001294 	mulcs	r0, r4, r2

20000540 <openPos>:

void openPos(int x, int y)
{
20000540:	b5b0      	push	{r4, r5, r7, lr}
20000542:	b08a      	sub	sp, #40	; 0x28
20000544:	af02      	add	r7, sp, #8
20000546:	6078      	str	r0, [r7, #4]
20000548:	6039      	str	r1, [r7, #0]
	if(board[x][y].flagged)
2000054a:	4891      	ldr	r0, [pc, #580]	; (20000790 <openPos+0x250>)
2000054c:	683b      	ldr	r3, [r7, #0]
2000054e:	6879      	ldr	r1, [r7, #4]
20000550:	001a      	movs	r2, r3
20000552:	0052      	lsls	r2, r2, #1
20000554:	18d2      	adds	r2, r2, r3
20000556:	00d3      	lsls	r3, r2, #3
20000558:	001a      	movs	r2, r3
2000055a:	000b      	movs	r3, r1
2000055c:	011b      	lsls	r3, r3, #4
2000055e:	1a5b      	subs	r3, r3, r1
20000560:	00db      	lsls	r3, r3, #3
20000562:	18d3      	adds	r3, r2, r3
20000564:	18c3      	adds	r3, r0, r3
20000566:	330c      	adds	r3, #12
20000568:	681b      	ldr	r3, [r3, #0]
2000056a:	2b00      	cmp	r3, #0
2000056c:	d000      	beq.n	20000570 <openPos+0x30>
2000056e:	e10b      	b.n	20000788 <openPos+0x248>
		return;
	
	if(board[x][y].opened && (countBombOrFlag(x,y, isBombPtr) == countBombOrFlag(x,y,isFlagPtr))) //open all connected positions
20000570:	4887      	ldr	r0, [pc, #540]	; (20000790 <openPos+0x250>)
20000572:	683b      	ldr	r3, [r7, #0]
20000574:	6879      	ldr	r1, [r7, #4]
20000576:	001a      	movs	r2, r3
20000578:	0052      	lsls	r2, r2, #1
2000057a:	18d2      	adds	r2, r2, r3
2000057c:	00d3      	lsls	r3, r2, #3
2000057e:	001a      	movs	r2, r3
20000580:	000b      	movs	r3, r1
20000582:	011b      	lsls	r3, r3, #4
20000584:	1a5b      	subs	r3, r3, r1
20000586:	00db      	lsls	r3, r3, #3
20000588:	18d3      	adds	r3, r2, r3
2000058a:	18c3      	adds	r3, r0, r3
2000058c:	3314      	adds	r3, #20
2000058e:	681b      	ldr	r3, [r3, #0]
20000590:	2b00      	cmp	r3, #0
20000592:	d056      	beq.n	20000642 <openPos+0x102>
20000594:	4b7f      	ldr	r3, [pc, #508]	; (20000794 <openPos+0x254>)
20000596:	681a      	ldr	r2, [r3, #0]
20000598:	6839      	ldr	r1, [r7, #0]
2000059a:	687b      	ldr	r3, [r7, #4]
2000059c:	0018      	movs	r0, r3
2000059e:	f000 f8fd 	bl	2000079c <countBombOrFlag>
200005a2:	0004      	movs	r4, r0
200005a4:	4b7c      	ldr	r3, [pc, #496]	; (20000798 <openPos+0x258>)
200005a6:	681a      	ldr	r2, [r3, #0]
200005a8:	6839      	ldr	r1, [r7, #0]
200005aa:	687b      	ldr	r3, [r7, #4]
200005ac:	0018      	movs	r0, r3
200005ae:	f000 f8f5 	bl	2000079c <countBombOrFlag>
200005b2:	0003      	movs	r3, r0
200005b4:	429c      	cmp	r4, r3
200005b6:	d144      	bne.n	20000642 <openPos+0x102>
	{
		for(int i = -1; i<= 1; i++)
200005b8:	2301      	movs	r3, #1
200005ba:	425b      	negs	r3, r3
200005bc:	61fb      	str	r3, [r7, #28]
200005be:	e03c      	b.n	2000063a <openPos+0xfa>
			for(int j = -1; j <= 1; j++)
200005c0:	2301      	movs	r3, #1
200005c2:	425b      	negs	r3, r3
200005c4:	61bb      	str	r3, [r7, #24]
200005c6:	e032      	b.n	2000062e <openPos+0xee>
				if(board[x+i][y+j].opened == 0 && validPos(x+i, y+j) && !(i == 0 && j == 0))
200005c8:	687a      	ldr	r2, [r7, #4]
200005ca:	69fb      	ldr	r3, [r7, #28]
200005cc:	18d1      	adds	r1, r2, r3
200005ce:	683a      	ldr	r2, [r7, #0]
200005d0:	69bb      	ldr	r3, [r7, #24]
200005d2:	18d3      	adds	r3, r2, r3
200005d4:	486e      	ldr	r0, [pc, #440]	; (20000790 <openPos+0x250>)
200005d6:	001a      	movs	r2, r3
200005d8:	0052      	lsls	r2, r2, #1
200005da:	18d2      	adds	r2, r2, r3
200005dc:	00d3      	lsls	r3, r2, #3
200005de:	001a      	movs	r2, r3
200005e0:	000b      	movs	r3, r1
200005e2:	011b      	lsls	r3, r3, #4
200005e4:	1a5b      	subs	r3, r3, r1
200005e6:	00db      	lsls	r3, r3, #3
200005e8:	18d3      	adds	r3, r2, r3
200005ea:	18c3      	adds	r3, r0, r3
200005ec:	3314      	adds	r3, #20
200005ee:	681b      	ldr	r3, [r3, #0]
200005f0:	2b00      	cmp	r3, #0
200005f2:	d119      	bne.n	20000628 <openPos+0xe8>
200005f4:	687a      	ldr	r2, [r7, #4]
200005f6:	69fb      	ldr	r3, [r7, #28]
200005f8:	18d0      	adds	r0, r2, r3
200005fa:	683a      	ldr	r2, [r7, #0]
200005fc:	69bb      	ldr	r3, [r7, #24]
200005fe:	18d3      	adds	r3, r2, r3
20000600:	0019      	movs	r1, r3
20000602:	f000 f9a9 	bl	20000958 <validPos>
20000606:	1e03      	subs	r3, r0, #0
20000608:	d00e      	beq.n	20000628 <openPos+0xe8>
2000060a:	69fb      	ldr	r3, [r7, #28]
2000060c:	2b00      	cmp	r3, #0
2000060e:	d102      	bne.n	20000616 <openPos+0xd6>
20000610:	69bb      	ldr	r3, [r7, #24]
20000612:	2b00      	cmp	r3, #0
20000614:	d008      	beq.n	20000628 <openPos+0xe8>
				{
					openPos(x+i, y+j);
20000616:	687a      	ldr	r2, [r7, #4]
20000618:	69fb      	ldr	r3, [r7, #28]
2000061a:	18d0      	adds	r0, r2, r3
2000061c:	683a      	ldr	r2, [r7, #0]
2000061e:	69bb      	ldr	r3, [r7, #24]
20000620:	18d3      	adds	r3, r2, r3
20000622:	0019      	movs	r1, r3
20000624:	f7ff ff8c 	bl	20000540 <openPos>
			for(int j = -1; j <= 1; j++)
20000628:	69bb      	ldr	r3, [r7, #24]
2000062a:	3301      	adds	r3, #1
2000062c:	61bb      	str	r3, [r7, #24]
2000062e:	69bb      	ldr	r3, [r7, #24]
20000630:	2b01      	cmp	r3, #1
20000632:	ddc9      	ble.n	200005c8 <openPos+0x88>
		for(int i = -1; i<= 1; i++)
20000634:	69fb      	ldr	r3, [r7, #28]
20000636:	3301      	adds	r3, #1
20000638:	61fb      	str	r3, [r7, #28]
2000063a:	69fb      	ldr	r3, [r7, #28]
2000063c:	2b01      	cmp	r3, #1
2000063e:	ddbf      	ble.n	200005c0 <openPos+0x80>
				}
		return;
20000640:	e0a3      	b.n	2000078a <openPos+0x24a>
	}
	int nBombs = countBombOrFlag(x, y,isBombPtr);
20000642:	4b54      	ldr	r3, [pc, #336]	; (20000794 <openPos+0x254>)
20000644:	681a      	ldr	r2, [r3, #0]
20000646:	6839      	ldr	r1, [r7, #0]
20000648:	687b      	ldr	r3, [r7, #4]
2000064a:	0018      	movs	r0, r3
2000064c:	f000 f8a6 	bl	2000079c <countBombOrFlag>
20000650:	0003      	movs	r3, r0
20000652:	60fb      	str	r3, [r7, #12]
	if(board[x][y].bomb)
20000654:	484e      	ldr	r0, [pc, #312]	; (20000790 <openPos+0x250>)
20000656:	683b      	ldr	r3, [r7, #0]
20000658:	6879      	ldr	r1, [r7, #4]
2000065a:	001a      	movs	r2, r3
2000065c:	0052      	lsls	r2, r2, #1
2000065e:	18d2      	adds	r2, r2, r3
20000660:	00d3      	lsls	r3, r2, #3
20000662:	001a      	movs	r2, r3
20000664:	000b      	movs	r3, r1
20000666:	011b      	lsls	r3, r3, #4
20000668:	1a5b      	subs	r3, r3, r1
2000066a:	00db      	lsls	r3, r3, #3
2000066c:	18d3      	adds	r3, r2, r3
2000066e:	18c3      	adds	r3, r0, r3
20000670:	3310      	adds	r3, #16
20000672:	681b      	ldr	r3, [r3, #0]
20000674:	2b00      	cmp	r3, #0
20000676:	d002      	beq.n	2000067e <openPos+0x13e>
	{
		gameOver();
20000678:	f7ff ff56 	bl	20000528 <gameOver>
		return;
2000067c:	e085      	b.n	2000078a <openPos+0x24a>
	}
	board[x][y].opened = 1;
2000067e:	4844      	ldr	r0, [pc, #272]	; (20000790 <openPos+0x250>)
20000680:	683b      	ldr	r3, [r7, #0]
20000682:	6879      	ldr	r1, [r7, #4]
20000684:	001a      	movs	r2, r3
20000686:	0052      	lsls	r2, r2, #1
20000688:	18d2      	adds	r2, r2, r3
2000068a:	00d3      	lsls	r3, r2, #3
2000068c:	001a      	movs	r2, r3
2000068e:	000b      	movs	r3, r1
20000690:	011b      	lsls	r3, r3, #4
20000692:	1a5b      	subs	r3, r3, r1
20000694:	00db      	lsls	r3, r3, #3
20000696:	18d3      	adds	r3, r2, r3
20000698:	18c3      	adds	r3, r0, r3
2000069a:	3314      	adds	r3, #20
2000069c:	2201      	movs	r2, #1
2000069e:	601a      	str	r2, [r3, #0]
	drawPos(board[x][y]);
200006a0:	4c3b      	ldr	r4, [pc, #236]	; (20000790 <openPos+0x250>)
200006a2:	683b      	ldr	r3, [r7, #0]
200006a4:	6879      	ldr	r1, [r7, #4]
200006a6:	001a      	movs	r2, r3
200006a8:	0052      	lsls	r2, r2, #1
200006aa:	18d2      	adds	r2, r2, r3
200006ac:	00d3      	lsls	r3, r2, #3
200006ae:	001a      	movs	r2, r3
200006b0:	000b      	movs	r3, r1
200006b2:	011b      	lsls	r3, r3, #4
200006b4:	1a5b      	subs	r3, r3, r1
200006b6:	00db      	lsls	r3, r3, #3
200006b8:	18d3      	adds	r3, r2, r3
200006ba:	2110      	movs	r1, #16
200006bc:	18e2      	adds	r2, r4, r3
200006be:	1851      	adds	r1, r2, r1
200006c0:	466a      	mov	r2, sp
200006c2:	c921      	ldmia	r1!, {r0, r5}
200006c4:	c221      	stmia	r2!, {r0, r5}
200006c6:	5918      	ldr	r0, [r3, r4]
200006c8:	18e2      	adds	r2, r4, r3
200006ca:	6851      	ldr	r1, [r2, #4]
200006cc:	18e2      	adds	r2, r4, r3
200006ce:	6892      	ldr	r2, [r2, #8]
200006d0:	18e3      	adds	r3, r4, r3
200006d2:	68db      	ldr	r3, [r3, #12]
200006d4:	f000 f95a 	bl	2000098c <drawPos>
	if(nBombs == 0)
200006d8:	68fb      	ldr	r3, [r7, #12]
200006da:	2b00      	cmp	r3, #0
200006dc:	d155      	bne.n	2000078a <openPos+0x24a>
		for(int i = -1; i <= 1; i++)
200006de:	2301      	movs	r3, #1
200006e0:	425b      	negs	r3, r3
200006e2:	617b      	str	r3, [r7, #20]
200006e4:	e04c      	b.n	20000780 <openPos+0x240>
			for(int j = -1; j <= 1; j++)
200006e6:	2301      	movs	r3, #1
200006e8:	425b      	negs	r3, r3
200006ea:	613b      	str	r3, [r7, #16]
200006ec:	e042      	b.n	20000774 <openPos+0x234>
				if(validPos(x+i, y+j) && board[x+i][y+j].opened == 0 && board[x+i][y+j].bomb == 0)
200006ee:	687a      	ldr	r2, [r7, #4]
200006f0:	697b      	ldr	r3, [r7, #20]
200006f2:	18d0      	adds	r0, r2, r3
200006f4:	683a      	ldr	r2, [r7, #0]
200006f6:	693b      	ldr	r3, [r7, #16]
200006f8:	18d3      	adds	r3, r2, r3
200006fa:	0019      	movs	r1, r3
200006fc:	f000 f92c 	bl	20000958 <validPos>
20000700:	1e03      	subs	r3, r0, #0
20000702:	d034      	beq.n	2000076e <openPos+0x22e>
20000704:	687a      	ldr	r2, [r7, #4]
20000706:	697b      	ldr	r3, [r7, #20]
20000708:	18d1      	adds	r1, r2, r3
2000070a:	683a      	ldr	r2, [r7, #0]
2000070c:	693b      	ldr	r3, [r7, #16]
2000070e:	18d3      	adds	r3, r2, r3
20000710:	481f      	ldr	r0, [pc, #124]	; (20000790 <openPos+0x250>)
20000712:	001a      	movs	r2, r3
20000714:	0052      	lsls	r2, r2, #1
20000716:	18d2      	adds	r2, r2, r3
20000718:	00d3      	lsls	r3, r2, #3
2000071a:	001a      	movs	r2, r3
2000071c:	000b      	movs	r3, r1
2000071e:	011b      	lsls	r3, r3, #4
20000720:	1a5b      	subs	r3, r3, r1
20000722:	00db      	lsls	r3, r3, #3
20000724:	18d3      	adds	r3, r2, r3
20000726:	18c3      	adds	r3, r0, r3
20000728:	3314      	adds	r3, #20
2000072a:	681b      	ldr	r3, [r3, #0]
2000072c:	2b00      	cmp	r3, #0
2000072e:	d11e      	bne.n	2000076e <openPos+0x22e>
20000730:	687a      	ldr	r2, [r7, #4]
20000732:	697b      	ldr	r3, [r7, #20]
20000734:	18d1      	adds	r1, r2, r3
20000736:	683a      	ldr	r2, [r7, #0]
20000738:	693b      	ldr	r3, [r7, #16]
2000073a:	18d3      	adds	r3, r2, r3
2000073c:	4814      	ldr	r0, [pc, #80]	; (20000790 <openPos+0x250>)
2000073e:	001a      	movs	r2, r3
20000740:	0052      	lsls	r2, r2, #1
20000742:	18d2      	adds	r2, r2, r3
20000744:	00d3      	lsls	r3, r2, #3
20000746:	001a      	movs	r2, r3
20000748:	000b      	movs	r3, r1
2000074a:	011b      	lsls	r3, r3, #4
2000074c:	1a5b      	subs	r3, r3, r1
2000074e:	00db      	lsls	r3, r3, #3
20000750:	18d3      	adds	r3, r2, r3
20000752:	18c3      	adds	r3, r0, r3
20000754:	3310      	adds	r3, #16
20000756:	681b      	ldr	r3, [r3, #0]
20000758:	2b00      	cmp	r3, #0
2000075a:	d108      	bne.n	2000076e <openPos+0x22e>
				{
					//Sleep(10);
					openPos(x+i, y+j);
2000075c:	687a      	ldr	r2, [r7, #4]
2000075e:	697b      	ldr	r3, [r7, #20]
20000760:	18d0      	adds	r0, r2, r3
20000762:	683a      	ldr	r2, [r7, #0]
20000764:	693b      	ldr	r3, [r7, #16]
20000766:	18d3      	adds	r3, r2, r3
20000768:	0019      	movs	r1, r3
2000076a:	f7ff fee9 	bl	20000540 <openPos>
			for(int j = -1; j <= 1; j++)
2000076e:	693b      	ldr	r3, [r7, #16]
20000770:	3301      	adds	r3, #1
20000772:	613b      	str	r3, [r7, #16]
20000774:	693b      	ldr	r3, [r7, #16]
20000776:	2b01      	cmp	r3, #1
20000778:	ddb9      	ble.n	200006ee <openPos+0x1ae>
		for(int i = -1; i <= 1; i++)
2000077a:	697b      	ldr	r3, [r7, #20]
2000077c:	3301      	adds	r3, #1
2000077e:	617b      	str	r3, [r7, #20]
20000780:	697b      	ldr	r3, [r7, #20]
20000782:	2b01      	cmp	r3, #1
20000784:	ddaf      	ble.n	200006e6 <openPos+0x1a6>
20000786:	e000      	b.n	2000078a <openPos+0x24a>
		return;
20000788:	46c0      	nop			; (mov r8, r8)
				}

}
2000078a:	46bd      	mov	sp, r7
2000078c:	b008      	add	sp, #32
2000078e:	bdb0      	pop	{r4, r5, r7, pc}
20000790:	200012b8 			; <UNDEFINED> instruction: 0x200012b8
20000794:	20001960 	andcs	r1, r0, r0, ror #18
20000798:	200012b4 			; <UNDEFINED> instruction: 0x200012b4

2000079c <countBombOrFlag>:
int countBombOrFlag(int x, int y, int (*func)(struct Positions))
{
2000079c:	b5b0      	push	{r4, r5, r7, lr}
2000079e:	b08a      	sub	sp, #40	; 0x28
200007a0:	af02      	add	r7, sp, #8
200007a2:	60f8      	str	r0, [r7, #12]
200007a4:	60b9      	str	r1, [r7, #8]
200007a6:	607a      	str	r2, [r7, #4]
	int found = 0;
200007a8:	2300      	movs	r3, #0
200007aa:	61fb      	str	r3, [r7, #28]
	for(int i = -1; i <= 1; i++)
200007ac:	2301      	movs	r3, #1
200007ae:	425b      	negs	r3, r3
200007b0:	61bb      	str	r3, [r7, #24]
200007b2:	e043      	b.n	2000083c <countBombOrFlag+0xa0>
		for(int j = -1; j <= 1; j++)
200007b4:	2301      	movs	r3, #1
200007b6:	425b      	negs	r3, r3
200007b8:	617b      	str	r3, [r7, #20]
200007ba:	e039      	b.n	20000830 <countBombOrFlag+0x94>
			if(validPos(x+i, y+j))
200007bc:	68fa      	ldr	r2, [r7, #12]
200007be:	69bb      	ldr	r3, [r7, #24]
200007c0:	18d0      	adds	r0, r2, r3
200007c2:	68ba      	ldr	r2, [r7, #8]
200007c4:	697b      	ldr	r3, [r7, #20]
200007c6:	18d3      	adds	r3, r2, r3
200007c8:	0019      	movs	r1, r3
200007ca:	f000 f8c5 	bl	20000958 <validPos>
200007ce:	1e03      	subs	r3, r0, #0
200007d0:	d02b      	beq.n	2000082a <countBombOrFlag+0x8e>
				if(func(board[x+i][y+j]) == 1 && !(i == 0 && j == 0))
200007d2:	68fa      	ldr	r2, [r7, #12]
200007d4:	69bb      	ldr	r3, [r7, #24]
200007d6:	18d1      	adds	r1, r2, r3
200007d8:	68ba      	ldr	r2, [r7, #8]
200007da:	697b      	ldr	r3, [r7, #20]
200007dc:	18d3      	adds	r3, r2, r3
200007de:	4c1b      	ldr	r4, [pc, #108]	; (2000084c <countBombOrFlag+0xb0>)
200007e0:	001a      	movs	r2, r3
200007e2:	0052      	lsls	r2, r2, #1
200007e4:	18d2      	adds	r2, r2, r3
200007e6:	00d3      	lsls	r3, r2, #3
200007e8:	001a      	movs	r2, r3
200007ea:	000b      	movs	r3, r1
200007ec:	011b      	lsls	r3, r3, #4
200007ee:	1a5b      	subs	r3, r3, r1
200007f0:	00db      	lsls	r3, r3, #3
200007f2:	18d3      	adds	r3, r2, r3
200007f4:	2110      	movs	r1, #16
200007f6:	18e2      	adds	r2, r4, r3
200007f8:	1851      	adds	r1, r2, r1
200007fa:	466a      	mov	r2, sp
200007fc:	c921      	ldmia	r1!, {r0, r5}
200007fe:	c221      	stmia	r2!, {r0, r5}
20000800:	5918      	ldr	r0, [r3, r4]
20000802:	18e2      	adds	r2, r4, r3
20000804:	6851      	ldr	r1, [r2, #4]
20000806:	18e2      	adds	r2, r4, r3
20000808:	6892      	ldr	r2, [r2, #8]
2000080a:	18e3      	adds	r3, r4, r3
2000080c:	68db      	ldr	r3, [r3, #12]
2000080e:	687c      	ldr	r4, [r7, #4]
20000810:	47a0      	blx	r4
20000812:	0003      	movs	r3, r0
20000814:	2b01      	cmp	r3, #1
20000816:	d108      	bne.n	2000082a <countBombOrFlag+0x8e>
20000818:	69bb      	ldr	r3, [r7, #24]
2000081a:	2b00      	cmp	r3, #0
2000081c:	d102      	bne.n	20000824 <countBombOrFlag+0x88>
2000081e:	697b      	ldr	r3, [r7, #20]
20000820:	2b00      	cmp	r3, #0
20000822:	d002      	beq.n	2000082a <countBombOrFlag+0x8e>
					found++;
20000824:	69fb      	ldr	r3, [r7, #28]
20000826:	3301      	adds	r3, #1
20000828:	61fb      	str	r3, [r7, #28]
		for(int j = -1; j <= 1; j++)
2000082a:	697b      	ldr	r3, [r7, #20]
2000082c:	3301      	adds	r3, #1
2000082e:	617b      	str	r3, [r7, #20]
20000830:	697b      	ldr	r3, [r7, #20]
20000832:	2b01      	cmp	r3, #1
20000834:	ddc2      	ble.n	200007bc <countBombOrFlag+0x20>
	for(int i = -1; i <= 1; i++)
20000836:	69bb      	ldr	r3, [r7, #24]
20000838:	3301      	adds	r3, #1
2000083a:	61bb      	str	r3, [r7, #24]
2000083c:	69bb      	ldr	r3, [r7, #24]
2000083e:	2b01      	cmp	r3, #1
20000840:	ddb8      	ble.n	200007b4 <countBombOrFlag+0x18>
	return found;
20000842:	69fb      	ldr	r3, [r7, #28]
}
20000844:	0018      	movs	r0, r3
20000846:	46bd      	mov	sp, r7
20000848:	b008      	add	sp, #32
2000084a:	bdb0      	pop	{r4, r5, r7, pc}
2000084c:	200012b8 			; <UNDEFINED> instruction: 0x200012b8

20000850 <isBomb>:
int isBomb(struct Positions pos)
{
20000850:	b084      	sub	sp, #16
20000852:	b5b0      	push	{r4, r5, r7, lr}
20000854:	af00      	add	r7, sp, #0
20000856:	250c      	movs	r5, #12
20000858:	1d3c      	adds	r4, r7, #4
2000085a:	1964      	adds	r4, r4, r5
2000085c:	6020      	str	r0, [r4, #0]
2000085e:	6061      	str	r1, [r4, #4]
20000860:	60a2      	str	r2, [r4, #8]
20000862:	60e3      	str	r3, [r4, #12]
	return pos.bomb;
20000864:	1d3b      	adds	r3, r7, #4
20000866:	195b      	adds	r3, r3, r5
20000868:	691b      	ldr	r3, [r3, #16]
}
2000086a:	0018      	movs	r0, r3
2000086c:	46bd      	mov	sp, r7
2000086e:	bcb0      	pop	{r4, r5, r7}
20000870:	bc08      	pop	{r3}
20000872:	b004      	add	sp, #16
20000874:	4718      	bx	r3

20000876 <isFlag>:
int isFlag(struct Positions pos)
{
20000876:	b084      	sub	sp, #16
20000878:	b5b0      	push	{r4, r5, r7, lr}
2000087a:	af00      	add	r7, sp, #0
2000087c:	250c      	movs	r5, #12
2000087e:	1d3c      	adds	r4, r7, #4
20000880:	1964      	adds	r4, r4, r5
20000882:	6020      	str	r0, [r4, #0]
20000884:	6061      	str	r1, [r4, #4]
20000886:	60a2      	str	r2, [r4, #8]
20000888:	60e3      	str	r3, [r4, #12]
	return pos.flagged;
2000088a:	1d3b      	adds	r3, r7, #4
2000088c:	195b      	adds	r3, r3, r5
2000088e:	68db      	ldr	r3, [r3, #12]
}
20000890:	0018      	movs	r0, r3
20000892:	46bd      	mov	sp, r7
20000894:	bcb0      	pop	{r4, r5, r7}
20000896:	bc08      	pop	{r3}
20000898:	b004      	add	sp, #16
2000089a:	4718      	bx	r3

2000089c <movePlayer>:


struct Player movePlayer(struct Player p, char moveCh)
{
2000089c:	b5b0      	push	{r4, r5, r7, lr}
2000089e:	b08a      	sub	sp, #40	; 0x28
200008a0:	af02      	add	r7, sp, #8
200008a2:	60f8      	str	r0, [r7, #12]
200008a4:	0038      	movs	r0, r7
200008a6:	6001      	str	r1, [r0, #0]
200008a8:	6042      	str	r2, [r0, #4]
200008aa:	6083      	str	r3, [r0, #8]
	
	drawPos(board[p.x][p.y]);
200008ac:	003b      	movs	r3, r7
200008ae:	6819      	ldr	r1, [r3, #0]
200008b0:	003b      	movs	r3, r7
200008b2:	685b      	ldr	r3, [r3, #4]
200008b4:	4c27      	ldr	r4, [pc, #156]	; (20000954 <movePlayer+0xb8>)
200008b6:	001a      	movs	r2, r3
200008b8:	0052      	lsls	r2, r2, #1
200008ba:	18d2      	adds	r2, r2, r3
200008bc:	00d3      	lsls	r3, r2, #3
200008be:	001a      	movs	r2, r3
200008c0:	000b      	movs	r3, r1
200008c2:	011b      	lsls	r3, r3, #4
200008c4:	1a5b      	subs	r3, r3, r1
200008c6:	00db      	lsls	r3, r3, #3
200008c8:	18d3      	adds	r3, r2, r3
200008ca:	2110      	movs	r1, #16
200008cc:	18e2      	adds	r2, r4, r3
200008ce:	1851      	adds	r1, r2, r1
200008d0:	466a      	mov	r2, sp
200008d2:	c921      	ldmia	r1!, {r0, r5}
200008d4:	c221      	stmia	r2!, {r0, r5}
200008d6:	5918      	ldr	r0, [r3, r4]
200008d8:	18e2      	adds	r2, r4, r3
200008da:	6851      	ldr	r1, [r2, #4]
200008dc:	18e2      	adds	r2, r4, r3
200008de:	6892      	ldr	r2, [r2, #8]
200008e0:	18e3      	adds	r3, r4, r3
200008e2:	68db      	ldr	r3, [r3, #12]
200008e4:	f000 f852 	bl	2000098c <drawPos>
	int *newXY;
	newXY = getNewXYFromCh(moveCh);
200008e8:	2330      	movs	r3, #48	; 0x30
200008ea:	18fb      	adds	r3, r7, r3
200008ec:	781b      	ldrb	r3, [r3, #0]
200008ee:	0018      	movs	r0, r3
200008f0:	f000 f88a 	bl	20000a08 <getNewXYFromCh>
200008f4:	0003      	movs	r3, r0
200008f6:	61fb      	str	r3, [r7, #28]
	//TODO:
	//check if valid move
	int nextX = p.x + *newXY;
200008f8:	003b      	movs	r3, r7
200008fa:	681a      	ldr	r2, [r3, #0]
200008fc:	69fb      	ldr	r3, [r7, #28]
200008fe:	681b      	ldr	r3, [r3, #0]
20000900:	18d3      	adds	r3, r2, r3
20000902:	61bb      	str	r3, [r7, #24]
	int nextY = p.y + *(newXY +1);
20000904:	003b      	movs	r3, r7
20000906:	685a      	ldr	r2, [r3, #4]
20000908:	69fb      	ldr	r3, [r7, #28]
2000090a:	3304      	adds	r3, #4
2000090c:	681b      	ldr	r3, [r3, #0]
2000090e:	18d3      	adds	r3, r2, r3
20000910:	617b      	str	r3, [r7, #20]
	if(validPos(nextX, nextY))
20000912:	697a      	ldr	r2, [r7, #20]
20000914:	69bb      	ldr	r3, [r7, #24]
20000916:	0011      	movs	r1, r2
20000918:	0018      	movs	r0, r3
2000091a:	f000 f81d 	bl	20000958 <validPos>
2000091e:	1e03      	subs	r3, r0, #0
20000920:	d005      	beq.n	2000092e <movePlayer+0x92>
	{
		p.x = nextX;
20000922:	003b      	movs	r3, r7
20000924:	69ba      	ldr	r2, [r7, #24]
20000926:	601a      	str	r2, [r3, #0]
		p.y = nextY;
20000928:	003b      	movs	r3, r7
2000092a:	697a      	ldr	r2, [r7, #20]
2000092c:	605a      	str	r2, [r3, #4]
	}
	gotoxy(startX + p.x, startY + p.y);
2000092e:	003b      	movs	r3, r7
20000930:	681a      	ldr	r2, [r3, #0]
20000932:	003b      	movs	r3, r7
20000934:	685b      	ldr	r3, [r3, #4]
20000936:	0019      	movs	r1, r3
20000938:	0010      	movs	r0, r2
2000093a:	f000 f8e0 	bl	20000afe <gotoxy>
	printToGD(playerCh);
2000093e:	2024      	movs	r0, #36	; 0x24
20000940:	f000 f8f0 	bl	20000b24 <printToGD>
	return p;
20000944:	68fb      	ldr	r3, [r7, #12]
20000946:	003a      	movs	r2, r7
20000948:	ca13      	ldmia	r2!, {r0, r1, r4}
2000094a:	c313      	stmia	r3!, {r0, r1, r4}
}
2000094c:	68f8      	ldr	r0, [r7, #12]
2000094e:	46bd      	mov	sp, r7
20000950:	b008      	add	sp, #32
20000952:	bdb0      	pop	{r4, r5, r7, pc}
20000954:	200012b8 			; <UNDEFINED> instruction: 0x200012b8

20000958 <validPos>:

int validPos(int x, int y)
{
20000958:	b580      	push	{r7, lr}
2000095a:	b082      	sub	sp, #8
2000095c:	af00      	add	r7, sp, #0
2000095e:	6078      	str	r0, [r7, #4]
20000960:	6039      	str	r1, [r7, #0]
	if(x < 0 || x >= sizeX)
20000962:	687b      	ldr	r3, [r7, #4]
20000964:	2b00      	cmp	r3, #0
20000966:	db02      	blt.n	2000096e <validPos+0x16>
20000968:	687b      	ldr	r3, [r7, #4]
2000096a:	2b0d      	cmp	r3, #13
2000096c:	dd01      	ble.n	20000972 <validPos+0x1a>
		return 0;
2000096e:	2300      	movs	r3, #0
20000970:	e008      	b.n	20000984 <validPos+0x2c>
	else if(y < 0 || y >= sizeY)
20000972:	683b      	ldr	r3, [r7, #0]
20000974:	2b00      	cmp	r3, #0
20000976:	db02      	blt.n	2000097e <validPos+0x26>
20000978:	683b      	ldr	r3, [r7, #0]
2000097a:	2b04      	cmp	r3, #4
2000097c:	dd01      	ble.n	20000982 <validPos+0x2a>
		return 0;
2000097e:	2300      	movs	r3, #0
20000980:	e000      	b.n	20000984 <validPos+0x2c>
	else
		return 1;
20000982:	2301      	movs	r3, #1
}
20000984:	0018      	movs	r0, r3
20000986:	46bd      	mov	sp, r7
20000988:	b002      	add	sp, #8
2000098a:	bd80      	pop	{r7, pc}

2000098c <drawPos>:
void drawPos(struct Positions p)
{
2000098c:	b084      	sub	sp, #16
2000098e:	b5b0      	push	{r4, r5, r7, lr}
20000990:	b084      	sub	sp, #16
20000992:	af00      	add	r7, sp, #0
20000994:	2520      	movs	r5, #32
20000996:	197c      	adds	r4, r7, r5
20000998:	6020      	str	r0, [r4, #0]
2000099a:	6061      	str	r1, [r4, #4]
2000099c:	60a2      	str	r2, [r4, #8]
2000099e:	60e3      	str	r3, [r4, #12]
	gotoxy(startX + p.x, startY + p.y);
200009a0:	002c      	movs	r4, r5
200009a2:	193b      	adds	r3, r7, r4
200009a4:	681a      	ldr	r2, [r3, #0]
200009a6:	193b      	adds	r3, r7, r4
200009a8:	685b      	ldr	r3, [r3, #4]
200009aa:	0019      	movs	r1, r3
200009ac:	0010      	movs	r0, r2
200009ae:	f000 f8a6 	bl	20000afe <gotoxy>
	if(p.opened)
200009b2:	0021      	movs	r1, r4
200009b4:	187b      	adds	r3, r7, r1
200009b6:	695b      	ldr	r3, [r3, #20]
200009b8:	2b00      	cmp	r3, #0
200009ba:	d00d      	beq.n	200009d8 <drawPos+0x4c>
	{
		char chs[] = {'0','1','2','3','4','5','6','7','8','9'};
200009bc:	1d3b      	adds	r3, r7, #4
200009be:	4a10      	ldr	r2, [pc, #64]	; (20000a00 <drawPos+0x74>)
200009c0:	ca11      	ldmia	r2!, {r0, r4}
200009c2:	c311      	stmia	r3!, {r0, r4}
200009c4:	8812      	ldrh	r2, [r2, #0]
200009c6:	801a      	strh	r2, [r3, #0]
		printToGD(chs[p.numberOfBombs]);
200009c8:	187b      	adds	r3, r7, r1
200009ca:	689b      	ldr	r3, [r3, #8]
200009cc:	1d3a      	adds	r2, r7, #4
200009ce:	5cd3      	ldrb	r3, [r2, r3]
200009d0:	0018      	movs	r0, r3
200009d2:	f000 f8a7 	bl	20000b24 <printToGD>
		printToGD(flagCh);
	}
	else
		printToGD(" ");
		
}
200009d6:	e00c      	b.n	200009f2 <drawPos+0x66>
	else if(p.flagged)
200009d8:	2320      	movs	r3, #32
200009da:	18fb      	adds	r3, r7, r3
200009dc:	68db      	ldr	r3, [r3, #12]
200009de:	2b00      	cmp	r3, #0
200009e0:	d003      	beq.n	200009ea <drawPos+0x5e>
		printToGD(flagCh);
200009e2:	205e      	movs	r0, #94	; 0x5e
200009e4:	f000 f89e 	bl	20000b24 <printToGD>
}
200009e8:	e003      	b.n	200009f2 <drawPos+0x66>
		printToGD(" ");
200009ea:	4b06      	ldr	r3, [pc, #24]	; (20000a04 <drawPos+0x78>)
200009ec:	0018      	movs	r0, r3
200009ee:	f000 f899 	bl	20000b24 <printToGD>
}
200009f2:	46c0      	nop			; (mov r8, r8)
200009f4:	46bd      	mov	sp, r7
200009f6:	b004      	add	sp, #16
200009f8:	bcb0      	pop	{r4, r5, r7}
200009fa:	bc08      	pop	{r3}
200009fc:	b004      	add	sp, #16
200009fe:	4718      	bx	r3
20000a00:	20001cec 	andcs	r1, r0, ip, ror #25
20000a04:	20001ce8 	andcs	r1, r0, r8, ror #25

20000a08 <getNewXYFromCh>:
int * getNewXYFromCh(char ch)
{
20000a08:	b580      	push	{r7, lr}
20000a0a:	b082      	sub	sp, #8
20000a0c:	af00      	add	r7, sp, #0
20000a0e:	0002      	movs	r2, r0
20000a10:	1dfb      	adds	r3, r7, #7
20000a12:	701a      	strb	r2, [r3, #0]
	ch = tolower(ch);
20000a14:	1dfb      	adds	r3, r7, #7
20000a16:	781b      	ldrb	r3, [r3, #0]
20000a18:	0018      	movs	r0, r3
20000a1a:	f000 fc2d 	bl	20001278 <tolower>
20000a1e:	0002      	movs	r2, r0
20000a20:	1dfb      	adds	r3, r7, #7
20000a22:	701a      	strb	r2, [r3, #0]
	static int r[2];
	switch(ch)
20000a24:	1dfb      	adds	r3, r7, #7
20000a26:	781b      	ldrb	r3, [r3, #0]
20000a28:	2b08      	cmp	r3, #8
20000a2a:	d010      	beq.n	20000a4e <getNewXYFromCh+0x46>
20000a2c:	dc25      	bgt.n	20000a7a <getNewXYFromCh+0x72>
20000a2e:	2b06      	cmp	r3, #6
20000a30:	d01c      	beq.n	20000a6c <getNewXYFromCh+0x64>
20000a32:	dc22      	bgt.n	20000a7a <getNewXYFromCh+0x72>
20000a34:	2b02      	cmp	r3, #2
20000a36:	d002      	beq.n	20000a3e <getNewXYFromCh+0x36>
20000a38:	2b04      	cmp	r3, #4
20000a3a:	d00f      	beq.n	20000a5c <getNewXYFromCh+0x54>
20000a3c:	e01d      	b.n	20000a7a <getNewXYFromCh+0x72>
	{
		case 0x2:
		 r[0] = 0;
20000a3e:	4b11      	ldr	r3, [pc, #68]	; (20000a84 <getNewXYFromCh+0x7c>)
20000a40:	2200      	movs	r2, #0
20000a42:	601a      	str	r2, [r3, #0]
		 r[1] = -1;
20000a44:	4b0f      	ldr	r3, [pc, #60]	; (20000a84 <getNewXYFromCh+0x7c>)
20000a46:	2201      	movs	r2, #1
20000a48:	4252      	negs	r2, r2
20000a4a:	605a      	str	r2, [r3, #4]
		 break;
20000a4c:	e015      	b.n	20000a7a <getNewXYFromCh+0x72>
		case 0x8:
		 r[0] = 0;
20000a4e:	4b0d      	ldr	r3, [pc, #52]	; (20000a84 <getNewXYFromCh+0x7c>)
20000a50:	2200      	movs	r2, #0
20000a52:	601a      	str	r2, [r3, #0]
		 r[1] = 1;
20000a54:	4b0b      	ldr	r3, [pc, #44]	; (20000a84 <getNewXYFromCh+0x7c>)
20000a56:	2201      	movs	r2, #1
20000a58:	605a      	str	r2, [r3, #4]
		 break;
20000a5a:	e00e      	b.n	20000a7a <getNewXYFromCh+0x72>
		case 0x4:
		 r[0] = -1;
20000a5c:	4b09      	ldr	r3, [pc, #36]	; (20000a84 <getNewXYFromCh+0x7c>)
20000a5e:	2201      	movs	r2, #1
20000a60:	4252      	negs	r2, r2
20000a62:	601a      	str	r2, [r3, #0]
		 r[1] = 0;
20000a64:	4b07      	ldr	r3, [pc, #28]	; (20000a84 <getNewXYFromCh+0x7c>)
20000a66:	2200      	movs	r2, #0
20000a68:	605a      	str	r2, [r3, #4]
		 break;
20000a6a:	e006      	b.n	20000a7a <getNewXYFromCh+0x72>
		case 0x6:
		 r[0] = 1;
20000a6c:	4b05      	ldr	r3, [pc, #20]	; (20000a84 <getNewXYFromCh+0x7c>)
20000a6e:	2201      	movs	r2, #1
20000a70:	601a      	str	r2, [r3, #0]
		 r[1] = 0;
20000a72:	4b04      	ldr	r3, [pc, #16]	; (20000a84 <getNewXYFromCh+0x7c>)
20000a74:	2200      	movs	r2, #0
20000a76:	605a      	str	r2, [r3, #4]
		 break;
20000a78:	46c0      	nop			; (mov r8, r8)
	}
	return r;
20000a7a:	4b02      	ldr	r3, [pc, #8]	; (20000a84 <getNewXYFromCh+0x7c>)
}
20000a7c:	0018      	movs	r0, r3
20000a7e:	46bd      	mov	sp, r7
20000a80:	b002      	add	sp, #8
20000a82:	bd80      	pop	{r7, pc}
20000a84:	200012ac 	andcs	r1, r0, ip, lsr #5

20000a88 <createBoard>:

void createBoard(struct Positions b[sizeX][sizeY])
{
20000a88:	b580      	push	{r7, lr}
20000a8a:	b084      	sub	sp, #16
20000a8c:	af00      	add	r7, sp, #0
20000a8e:	6078      	str	r0, [r7, #4]
	for(int x = 0; x < sizeX; x++)
20000a90:	2300      	movs	r3, #0
20000a92:	60fb      	str	r3, [r7, #12]
20000a94:	e02b      	b.n	20000aee <createBoard+0x66>
	{
		for(int y = 0; y < sizeY; y++) 
20000a96:	2300      	movs	r3, #0
20000a98:	60bb      	str	r3, [r7, #8]
20000a9a:	e022      	b.n	20000ae2 <createBoard+0x5a>
		{
			b[x][y].x = x;
20000a9c:	68fa      	ldr	r2, [r7, #12]
20000a9e:	0013      	movs	r3, r2
20000aa0:	011b      	lsls	r3, r3, #4
20000aa2:	1a9b      	subs	r3, r3, r2
20000aa4:	00db      	lsls	r3, r3, #3
20000aa6:	001a      	movs	r2, r3
20000aa8:	687b      	ldr	r3, [r7, #4]
20000aaa:	1899      	adds	r1, r3, r2
20000aac:	68ba      	ldr	r2, [r7, #8]
20000aae:	0013      	movs	r3, r2
20000ab0:	005b      	lsls	r3, r3, #1
20000ab2:	189b      	adds	r3, r3, r2
20000ab4:	00db      	lsls	r3, r3, #3
20000ab6:	68fa      	ldr	r2, [r7, #12]
20000ab8:	505a      	str	r2, [r3, r1]
			b[x][y].y = y;
20000aba:	68fa      	ldr	r2, [r7, #12]
20000abc:	0013      	movs	r3, r2
20000abe:	011b      	lsls	r3, r3, #4
20000ac0:	1a9b      	subs	r3, r3, r2
20000ac2:	00db      	lsls	r3, r3, #3
20000ac4:	001a      	movs	r2, r3
20000ac6:	687b      	ldr	r3, [r7, #4]
20000ac8:	1899      	adds	r1, r3, r2
20000aca:	68ba      	ldr	r2, [r7, #8]
20000acc:	0013      	movs	r3, r2
20000ace:	005b      	lsls	r3, r3, #1
20000ad0:	189b      	adds	r3, r3, r2
20000ad2:	00db      	lsls	r3, r3, #3
20000ad4:	18cb      	adds	r3, r1, r3
20000ad6:	3304      	adds	r3, #4
20000ad8:	68ba      	ldr	r2, [r7, #8]
20000ada:	601a      	str	r2, [r3, #0]
		for(int y = 0; y < sizeY; y++) 
20000adc:	68bb      	ldr	r3, [r7, #8]
20000ade:	3301      	adds	r3, #1
20000ae0:	60bb      	str	r3, [r7, #8]
20000ae2:	68bb      	ldr	r3, [r7, #8]
20000ae4:	2b04      	cmp	r3, #4
20000ae6:	ddd9      	ble.n	20000a9c <createBoard+0x14>
	for(int x = 0; x < sizeX; x++)
20000ae8:	68fb      	ldr	r3, [r7, #12]
20000aea:	3301      	adds	r3, #1
20000aec:	60fb      	str	r3, [r7, #12]
20000aee:	68fb      	ldr	r3, [r7, #12]
20000af0:	2b0d      	cmp	r3, #13
20000af2:	ddd0      	ble.n	20000a96 <createBoard+0xe>
		} 
	}
}
20000af4:	46c0      	nop			; (mov r8, r8)
20000af6:	46c0      	nop			; (mov r8, r8)
20000af8:	46bd      	mov	sp, r7
20000afa:	b004      	add	sp, #16
20000afc:	bd80      	pop	{r7, pc}

20000afe <gotoxy>:


void gotoxy(int x, int y)
{
20000afe:	b580      	push	{r7, lr}
20000b00:	b082      	sub	sp, #8
20000b02:	af00      	add	r7, sp, #0
20000b04:	6078      	str	r0, [r7, #4]
20000b06:	6039      	str	r1, [r7, #0]
  currX = x;
20000b08:	4b04      	ldr	r3, [pc, #16]	; (20000b1c <gotoxy+0x1e>)
20000b0a:	687a      	ldr	r2, [r7, #4]
20000b0c:	601a      	str	r2, [r3, #0]
  currY = y;
20000b0e:	4b04      	ldr	r3, [pc, #16]	; (20000b20 <gotoxy+0x22>)
20000b10:	683a      	ldr	r2, [r7, #0]
20000b12:	601a      	str	r2, [r3, #0]
}
20000b14:	46c0      	nop			; (mov r8, r8)
20000b16:	46bd      	mov	sp, r7
20000b18:	b002      	add	sp, #8
20000b1a:	bd80      	pop	{r7, pc}
20000b1c:	2000128c 	andcs	r1, r0, ip, lsl #5
20000b20:	20001290 	mulcs	r0, r0, r2

20000b24 <printToGD>:

void printToGD(char ch)
{
20000b24:	b5f0      	push	{r4, r5, r6, r7, lr}
20000b26:	b0b5      	sub	sp, #212	; 0xd4
20000b28:	af18      	add	r7, sp, #96	; 0x60
20000b2a:	0002      	movs	r2, r0
20000b2c:	1dfb      	adds	r3, r7, #7
20000b2e:	701a      	strb	r2, [r3, #0]
	DISPCHAR print_ch;
	switch(ch)
20000b30:	1dfb      	adds	r3, r7, #7
20000b32:	781b      	ldrb	r3, [r3, #0]
20000b34:	3b24      	subs	r3, #36	; 0x24
20000b36:	2b3a      	cmp	r3, #58	; 0x3a
20000b38:	d854      	bhi.n	20000be4 <printToGD+0xc0>
20000b3a:	009a      	lsls	r2, r3, #2
20000b3c:	4b3d      	ldr	r3, [pc, #244]	; (20000c34 <printToGD+0x110>)
20000b3e:	18d3      	adds	r3, r2, r3
20000b40:	681b      	ldr	r3, [r3, #0]
20000b42:	469f      	mov	pc, r3
	{
		case '0':
		print_ch = zero;
20000b44:	230c      	movs	r3, #12
20000b46:	18fa      	adds	r2, r7, r3
20000b48:	4b3b      	ldr	r3, [pc, #236]	; (20000c38 <printToGD+0x114>)
20000b4a:	0010      	movs	r0, r2
20000b4c:	0019      	movs	r1, r3
20000b4e:	2361      	movs	r3, #97	; 0x61
20000b50:	001a      	movs	r2, r3
20000b52:	f000 fb87 	bl	20001264 <memcpy>
		break;
20000b56:	e04f      	b.n	20000bf8 <printToGD+0xd4>
		case '1':
		print_ch = one;
20000b58:	230c      	movs	r3, #12
20000b5a:	18fa      	adds	r2, r7, r3
20000b5c:	4b37      	ldr	r3, [pc, #220]	; (20000c3c <printToGD+0x118>)
20000b5e:	0010      	movs	r0, r2
20000b60:	0019      	movs	r1, r3
20000b62:	2361      	movs	r3, #97	; 0x61
20000b64:	001a      	movs	r2, r3
20000b66:	f000 fb7d 	bl	20001264 <memcpy>
		break;
20000b6a:	e045      	b.n	20000bf8 <printToGD+0xd4>
		case '2':
		print_ch = two;
20000b6c:	230c      	movs	r3, #12
20000b6e:	18fa      	adds	r2, r7, r3
20000b70:	4b33      	ldr	r3, [pc, #204]	; (20000c40 <printToGD+0x11c>)
20000b72:	0010      	movs	r0, r2
20000b74:	0019      	movs	r1, r3
20000b76:	2361      	movs	r3, #97	; 0x61
20000b78:	001a      	movs	r2, r3
20000b7a:	f000 fb73 	bl	20001264 <memcpy>
		break;
20000b7e:	e03b      	b.n	20000bf8 <printToGD+0xd4>
		case '3':
		print_ch = three;
20000b80:	230c      	movs	r3, #12
20000b82:	18fa      	adds	r2, r7, r3
20000b84:	4b2f      	ldr	r3, [pc, #188]	; (20000c44 <printToGD+0x120>)
20000b86:	0010      	movs	r0, r2
20000b88:	0019      	movs	r1, r3
20000b8a:	2361      	movs	r3, #97	; 0x61
20000b8c:	001a      	movs	r2, r3
20000b8e:	f000 fb69 	bl	20001264 <memcpy>
		break;
20000b92:	e031      	b.n	20000bf8 <printToGD+0xd4>
		case '4':
		print_ch = four;
20000b94:	230c      	movs	r3, #12
20000b96:	18fa      	adds	r2, r7, r3
20000b98:	4b2b      	ldr	r3, [pc, #172]	; (20000c48 <printToGD+0x124>)
20000b9a:	0010      	movs	r0, r2
20000b9c:	0019      	movs	r1, r3
20000b9e:	2361      	movs	r3, #97	; 0x61
20000ba0:	001a      	movs	r2, r3
20000ba2:	f000 fb5f 	bl	20001264 <memcpy>
		break;
20000ba6:	e027      	b.n	20000bf8 <printToGD+0xd4>
		case '$':
		print_ch = doll;
20000ba8:	230c      	movs	r3, #12
20000baa:	18fa      	adds	r2, r7, r3
20000bac:	4b27      	ldr	r3, [pc, #156]	; (20000c4c <printToGD+0x128>)
20000bae:	0010      	movs	r0, r2
20000bb0:	0019      	movs	r1, r3
20000bb2:	2361      	movs	r3, #97	; 0x61
20000bb4:	001a      	movs	r2, r3
20000bb6:	f000 fb55 	bl	20001264 <memcpy>
		break;
20000bba:	e01d      	b.n	20000bf8 <printToGD+0xd4>
		case bombCh:
		print_ch = star;
20000bbc:	230c      	movs	r3, #12
20000bbe:	18fa      	adds	r2, r7, r3
20000bc0:	4b23      	ldr	r3, [pc, #140]	; (20000c50 <printToGD+0x12c>)
20000bc2:	0010      	movs	r0, r2
20000bc4:	0019      	movs	r1, r3
20000bc6:	2361      	movs	r3, #97	; 0x61
20000bc8:	001a      	movs	r2, r3
20000bca:	f000 fb4b 	bl	20001264 <memcpy>
		break;
20000bce:	e013      	b.n	20000bf8 <printToGD+0xd4>
		case flagCh:
		print_ch = arrow;
20000bd0:	230c      	movs	r3, #12
20000bd2:	18fa      	adds	r2, r7, r3
20000bd4:	4b1f      	ldr	r3, [pc, #124]	; (20000c54 <printToGD+0x130>)
20000bd6:	0010      	movs	r0, r2
20000bd8:	0019      	movs	r1, r3
20000bda:	2361      	movs	r3, #97	; 0x61
20000bdc:	001a      	movs	r2, r3
20000bde:	f000 fb41 	bl	20001264 <memcpy>
		break;
20000be2:	e009      	b.n	20000bf8 <printToGD+0xd4>
		default:
		print_ch = space;
20000be4:	230c      	movs	r3, #12
20000be6:	18fa      	adds	r2, r7, r3
20000be8:	4b1b      	ldr	r3, [pc, #108]	; (20000c58 <printToGD+0x134>)
20000bea:	0010      	movs	r0, r2
20000bec:	0019      	movs	r1, r3
20000bee:	2361      	movs	r3, #97	; 0x61
20000bf0:	001a      	movs	r2, r3
20000bf2:	f000 fb37 	bl	20001264 <memcpy>
		break;
20000bf6:	46c0      	nop			; (mov r8, r8)
	}
	printNumAt(currX*CHAR_X, currY*CHAR_Y, print_ch);
20000bf8:	4b18      	ldr	r3, [pc, #96]	; (20000c5c <printToGD+0x138>)
20000bfa:	681b      	ldr	r3, [r3, #0]
20000bfc:	00dd      	lsls	r5, r3, #3
20000bfe:	4b18      	ldr	r3, [pc, #96]	; (20000c60 <printToGD+0x13c>)
20000c00:	681a      	ldr	r2, [r3, #0]
20000c02:	0013      	movs	r3, r2
20000c04:	005b      	lsls	r3, r3, #1
20000c06:	189b      	adds	r3, r3, r2
20000c08:	009b      	lsls	r3, r3, #2
20000c0a:	001e      	movs	r6, r3
20000c0c:	230c      	movs	r3, #12
20000c0e:	18fc      	adds	r4, r7, r3
20000c10:	466b      	mov	r3, sp
20000c12:	0018      	movs	r0, r3
20000c14:	0023      	movs	r3, r4
20000c16:	3308      	adds	r3, #8
20000c18:	2259      	movs	r2, #89	; 0x59
20000c1a:	0019      	movs	r1, r3
20000c1c:	f000 fb22 	bl	20001264 <memcpy>
20000c20:	6822      	ldr	r2, [r4, #0]
20000c22:	6863      	ldr	r3, [r4, #4]
20000c24:	0031      	movs	r1, r6
20000c26:	0028      	movs	r0, r5
20000c28:	f000 f81c 	bl	20000c64 <printNumAt>
}
20000c2c:	46c0      	nop			; (mov r8, r8)
20000c2e:	46bd      	mov	sp, r7
20000c30:	b01d      	add	sp, #116	; 0x74
20000c32:	bdf0      	pop	{r4, r5, r6, r7, pc}
20000c34:	20001cf8 	strdcs	r1, [r0], -r8
20000c38:	20001964 	andcs	r1, r0, r4, ror #18
20000c3c:	200019c8 	andcs	r1, r0, r8, asr #19
20000c40:	20001a2c 	andcs	r1, r0, ip, lsr #20
20000c44:	20001a90 	mulcs	r0, r0, sl
20000c48:	20001af4 	strdcs	r1, [r0], -r4
20000c4c:	20001b58 	andcs	r1, r0, r8, asr fp
20000c50:	20001bbc 			; <UNDEFINED> instruction: 0x20001bbc
20000c54:	20001c20 	andcs	r1, r0, r0, lsr #24
20000c58:	20001c84 	andcs	r1, r0, r4, lsl #25
20000c5c:	2000128c 	andcs	r1, r0, ip, lsl #5
20000c60:	20001290 	mulcs	r0, r0, r2

20000c64 <printNumAt>:

void printNumAt(int x, int y, DISPCHAR ch)
{
20000c64:	b082      	sub	sp, #8
20000c66:	b580      	push	{r7, lr}
20000c68:	b084      	sub	sp, #16
20000c6a:	af00      	add	r7, sp, #0
20000c6c:	6078      	str	r0, [r7, #4]
20000c6e:	6039      	str	r1, [r7, #0]
20000c70:	2118      	movs	r1, #24
20000c72:	1879      	adds	r1, r7, r1
20000c74:	600a      	str	r2, [r1, #0]
20000c76:	604b      	str	r3, [r1, #4]
	for(int i = 0; i < CHAR_Y; i++)
20000c78:	2300      	movs	r3, #0
20000c7a:	60fb      	str	r3, [r7, #12]
20000c7c:	e029      	b.n	20000cd2 <printNumAt+0x6e>
		for(int j = 0; j < CHAR_X; j++)
20000c7e:	2300      	movs	r3, #0
20000c80:	60bb      	str	r3, [r7, #8]
20000c82:	e020      	b.n	20000cc6 <printNumAt+0x62>
		if(ch.pattern[i][j])
20000c84:	2318      	movs	r3, #24
20000c86:	18fb      	adds	r3, r7, r3
20000c88:	68fa      	ldr	r2, [r7, #12]
20000c8a:	00d2      	lsls	r2, r2, #3
20000c8c:	189a      	adds	r2, r3, r2
20000c8e:	68bb      	ldr	r3, [r7, #8]
20000c90:	18d3      	adds	r3, r2, r3
20000c92:	3301      	adds	r3, #1
20000c94:	781b      	ldrb	r3, [r3, #0]
20000c96:	2b00      	cmp	r3, #0
20000c98:	d009      	beq.n	20000cae <printNumAt+0x4a>
			graphic_pixel_set(j+x, i+y);
20000c9a:	68ba      	ldr	r2, [r7, #8]
20000c9c:	687b      	ldr	r3, [r7, #4]
20000c9e:	18d0      	adds	r0, r2, r3
20000ca0:	68fa      	ldr	r2, [r7, #12]
20000ca2:	683b      	ldr	r3, [r7, #0]
20000ca4:	18d3      	adds	r3, r2, r3
20000ca6:	0019      	movs	r1, r3
20000ca8:	f000 f824 	bl	20000cf4 <graphic_pixel_set>
20000cac:	e008      	b.n	20000cc0 <printNumAt+0x5c>
		else
			graphic_pixel_clear(j+x, i+y);
20000cae:	68ba      	ldr	r2, [r7, #8]
20000cb0:	687b      	ldr	r3, [r7, #4]
20000cb2:	18d0      	adds	r0, r2, r3
20000cb4:	68fa      	ldr	r2, [r7, #12]
20000cb6:	683b      	ldr	r3, [r7, #0]
20000cb8:	18d3      	adds	r3, r2, r3
20000cba:	0019      	movs	r1, r3
20000cbc:	f000 f81d 	bl	20000cfa <graphic_pixel_clear>
		for(int j = 0; j < CHAR_X; j++)
20000cc0:	68bb      	ldr	r3, [r7, #8]
20000cc2:	3301      	adds	r3, #1
20000cc4:	60bb      	str	r3, [r7, #8]
20000cc6:	68bb      	ldr	r3, [r7, #8]
20000cc8:	2b07      	cmp	r3, #7
20000cca:	dddb      	ble.n	20000c84 <printNumAt+0x20>
	for(int i = 0; i < CHAR_Y; i++)
20000ccc:	68fb      	ldr	r3, [r7, #12]
20000cce:	3301      	adds	r3, #1
20000cd0:	60fb      	str	r3, [r7, #12]
20000cd2:	68fb      	ldr	r3, [r7, #12]
20000cd4:	2b0b      	cmp	r3, #11
20000cd6:	ddd2      	ble.n	20000c7e <printNumAt+0x1a>
}
20000cd8:	46c0      	nop			; (mov r8, r8)
20000cda:	46c0      	nop			; (mov r8, r8)
20000cdc:	46bd      	mov	sp, r7
20000cde:	b004      	add	sp, #16
20000ce0:	bc80      	pop	{r7}
20000ce2:	bc08      	pop	{r3}
20000ce4:	b002      	add	sp, #8
20000ce6:	4718      	bx	r3

20000ce8 <graphic_initialize>:


__attribute__((naked))
void graphic_initialize(void)
{
20000ce8:	4770dff0 			; <UNDEFINED> instruction: 0x4770dff0
	__asm volatile(" .HWORD 0xDFF0\n");
	__asm volatile(" BX LR\n");
}
20000cec:	46c0      	nop			; (mov r8, r8)

20000cee <graphic_clear_screen>:
__attribute__((naked))
void graphic_clear_screen(void)
{
20000cee:	4770dff1 			; <UNDEFINED> instruction: 0x4770dff1
	__asm volatile(" .HWORD 0xDFF1\n");
	__asm volatile(" BX LR\n");
}
20000cf2:	46c0      	nop			; (mov r8, r8)

20000cf4 <graphic_pixel_set>:
__attribute__((naked))
void graphic_pixel_set(int x, int y)
{
20000cf4:	4770dff2 			; <UNDEFINED> instruction: 0x4770dff2
	__asm volatile(" .HWORD 0xDFF2\n");
	__asm volatile(" BX LR\n");
}
20000cf8:	46c0      	nop			; (mov r8, r8)

20000cfa <graphic_pixel_clear>:
__attribute__((naked))
void graphic_pixel_clear(int x, int y)
{
20000cfa:	4770dff3 			; <UNDEFINED> instruction: 0x4770dff3
	__asm volatile(" .HWORD 0xDFF3\n");
	__asm volatile(" BX LR\n");
}
20000cfe:	46c0      	nop			; (mov r8, r8)

20000d00 <init_app>:

void init_app(void)
{
20000d00:	b580      	push	{r7, lr}
20000d02:	af00      	add	r7, sp, #0
	*GPIO_MODER = 0x55000000;
20000d04:	4b0b      	ldr	r3, [pc, #44]	; (20000d34 <init_app+0x34>)
20000d06:	22aa      	movs	r2, #170	; 0xaa
20000d08:	05d2      	lsls	r2, r2, #23
20000d0a:	601a      	str	r2, [r3, #0]
	*GPIO_OTYPER = 0xFFAA0000;
20000d0c:	4b0a      	ldr	r3, [pc, #40]	; (20000d38 <init_app+0x38>)
20000d0e:	2200      	movs	r2, #0
20000d10:	801a      	strh	r2, [r3, #0]
	*GPIO_PUPDR = 0x0F0000;
20000d12:	4b0a      	ldr	r3, [pc, #40]	; (20000d3c <init_app+0x3c>)
20000d14:	22f0      	movs	r2, #240	; 0xf0
20000d16:	0312      	lsls	r2, r2, #12
20000d18:	601a      	str	r2, [r3, #0]
	*GPIO_E_MODER = 0x55555555;
20000d1a:	4b09      	ldr	r3, [pc, #36]	; (20000d40 <init_app+0x40>)
20000d1c:	4a09      	ldr	r2, [pc, #36]	; (20000d44 <init_app+0x44>)
20000d1e:	601a      	str	r2, [r3, #0]
	graphic_initialize();
20000d20:	f7ff ffe2 	bl	20000ce8 <graphic_initialize>
	sysTick_init();
20000d24:	f000 f914 	bl	20000f50 <sysTick_init>
	start_rand();
20000d28:	f000 f8ca 	bl	20000ec0 <start_rand>
}
20000d2c:	46c0      	nop			; (mov r8, r8)
20000d2e:	46bd      	mov	sp, r7
20000d30:	bd80      	pop	{r7, pc}
20000d32:	46c0      	nop			; (mov r8, r8)
20000d34:	40020c00 	andmi	r0, r2, r0, lsl #24
20000d38:	40020c04 	andmi	r0, r2, r4, lsl #24
20000d3c:	40020c0c 	andmi	r0, r2, ip, lsl #24
20000d40:	40021000 	andmi	r1, r2, r0
20000d44:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000d48 <readKey>:
#define initState 0
unsigned char current_state = initState;


unsigned char readKey(void)
{
20000d48:	b590      	push	{r4, r7, lr}
20000d4a:	b087      	sub	sp, #28
20000d4c:	af00      	add	r7, sp, #0
	unsigned char keyValue[] = {1,2,3,0xA,4,5,6,0xB,7,8,9,0xC,0xE,0,0xF,0xD};
20000d4e:	003b      	movs	r3, r7
20000d50:	4a16      	ldr	r2, [pc, #88]	; (20000dac <readKey+0x64>)
20000d52:	ca13      	ldmia	r2!, {r0, r1, r4}
20000d54:	c313      	stmia	r3!, {r0, r1, r4}
20000d56:	6812      	ldr	r2, [r2, #0]
20000d58:	601a      	str	r2, [r3, #0]
	for(int row = 0; row< 4; row++)
20000d5a:	2300      	movs	r3, #0
20000d5c:	617b      	str	r3, [r7, #20]
20000d5e:	e019      	b.n	20000d94 <readKey+0x4c>
	{
		activateRow(row+1);
20000d60:	697b      	ldr	r3, [r7, #20]
20000d62:	3301      	adds	r3, #1
20000d64:	0018      	movs	r0, r3
20000d66:	f000 f853 	bl	20000e10 <activateRow>
		int col = readColumn();
20000d6a:	f000 f87f 	bl	20000e6c <readColumn>
20000d6e:	0003      	movs	r3, r0
20000d70:	613b      	str	r3, [r7, #16]
		if(col != 0)
20000d72:	693b      	ldr	r3, [r7, #16]
20000d74:	2b00      	cmp	r3, #0
20000d76:	d00a      	beq.n	20000d8e <readKey+0x46>
		{
			activateRow(0);
20000d78:	2000      	movs	r0, #0
20000d7a:	f000 f849 	bl	20000e10 <activateRow>
			return keyValue[row*4 + (col-1)];
20000d7e:	697b      	ldr	r3, [r7, #20]
20000d80:	009a      	lsls	r2, r3, #2
20000d82:	693b      	ldr	r3, [r7, #16]
20000d84:	3b01      	subs	r3, #1
20000d86:	18d3      	adds	r3, r2, r3
20000d88:	003a      	movs	r2, r7
20000d8a:	5cd3      	ldrb	r3, [r2, r3]
20000d8c:	e009      	b.n	20000da2 <readKey+0x5a>
	for(int row = 0; row< 4; row++)
20000d8e:	697b      	ldr	r3, [r7, #20]
20000d90:	3301      	adds	r3, #1
20000d92:	617b      	str	r3, [r7, #20]
20000d94:	697b      	ldr	r3, [r7, #20]
20000d96:	2b03      	cmp	r3, #3
20000d98:	dde2      	ble.n	20000d60 <readKey+0x18>
		}
	}
	activateRow(0);
20000d9a:	2000      	movs	r0, #0
20000d9c:	f000 f838 	bl	20000e10 <activateRow>
	return noKeyReturn;
20000da0:	23ff      	movs	r3, #255	; 0xff
}
20000da2:	0018      	movs	r0, r3
20000da4:	46bd      	mov	sp, r7
20000da6:	b007      	add	sp, #28
20000da8:	bd90      	pop	{r4, r7, pc}
20000daa:	46c0      	nop			; (mov r8, r8)
20000dac:	20001de4 	andcs	r1, r0, r4, ror #27

20000db0 <keyb_enhanced>:

unsigned char keyb_enhanced(void)
{
20000db0:	b590      	push	{r4, r7, lr}
20000db2:	b083      	sub	sp, #12
20000db4:	af00      	add	r7, sp, #0
	if(current_state == waitState)
20000db6:	4b14      	ldr	r3, [pc, #80]	; (20000e08 <keyb_enhanced+0x58>)
20000db8:	781b      	ldrb	r3, [r3, #0]
20000dba:	2b01      	cmp	r3, #1
20000dbc:	d10c      	bne.n	20000dd8 <keyb_enhanced+0x28>
	{
		activateRow(5);
20000dbe:	2005      	movs	r0, #5
20000dc0:	f000 f826 	bl	20000e10 <activateRow>
		if(*GPIO_IDR_HIGH == 0)
20000dc4:	4b11      	ldr	r3, [pc, #68]	; (20000e0c <keyb_enhanced+0x5c>)
20000dc6:	781b      	ldrb	r3, [r3, #0]
20000dc8:	b2db      	uxtb	r3, r3
20000dca:	2b00      	cmp	r3, #0
20000dcc:	d102      	bne.n	20000dd4 <keyb_enhanced+0x24>
		{ current_state = initState; }
20000dce:	4b0e      	ldr	r3, [pc, #56]	; (20000e08 <keyb_enhanced+0x58>)
20000dd0:	2200      	movs	r2, #0
20000dd2:	701a      	strb	r2, [r3, #0]
		return sameKeyReturn;
20000dd4:	23fe      	movs	r3, #254	; 0xfe
20000dd6:	e012      	b.n	20000dfe <keyb_enhanced+0x4e>
	}
	if(current_state == initState)
20000dd8:	4b0b      	ldr	r3, [pc, #44]	; (20000e08 <keyb_enhanced+0x58>)
20000dda:	781b      	ldrb	r3, [r3, #0]
20000ddc:	2b00      	cmp	r3, #0
20000dde:	d10e      	bne.n	20000dfe <keyb_enhanced+0x4e>
	{
		unsigned char c = readKey();
20000de0:	1dfc      	adds	r4, r7, #7
20000de2:	f7ff ffb1 	bl	20000d48 <readKey>
20000de6:	0003      	movs	r3, r0
20000de8:	7023      	strb	r3, [r4, #0]
		if(c != noKeyReturn)
20000dea:	1dfb      	adds	r3, r7, #7
20000dec:	781b      	ldrb	r3, [r3, #0]
20000dee:	2bff      	cmp	r3, #255	; 0xff
20000df0:	d002      	beq.n	20000df8 <keyb_enhanced+0x48>
			current_state = waitState;
20000df2:	4b05      	ldr	r3, [pc, #20]	; (20000e08 <keyb_enhanced+0x58>)
20000df4:	2201      	movs	r2, #1
20000df6:	701a      	strb	r2, [r3, #0]
		return c;
20000df8:	1dfb      	adds	r3, r7, #7
20000dfa:	781b      	ldrb	r3, [r3, #0]
20000dfc:	e7ff      	b.n	20000dfe <keyb_enhanced+0x4e>
	}

}
20000dfe:	0018      	movs	r0, r3
20000e00:	46bd      	mov	sp, r7
20000e02:	b003      	add	sp, #12
20000e04:	bd90      	pop	{r4, r7, pc}
20000e06:	46c0      	nop			; (mov r8, r8)
20000e08:	20001298 	mulcs	r0, r8, r2
20000e0c:	40020c11 	andmi	r0, r2, r1, lsl ip

20000e10 <activateRow>:

void activateRow(int row)
{ /* Aktivera angiven rad hos tangentbordet, eller
20000e10:	b580      	push	{r7, lr}
20000e12:	b082      	sub	sp, #8
20000e14:	af00      	add	r7, sp, #0
20000e16:	6078      	str	r0, [r7, #4]
20000e18:	687b      	ldr	r3, [r7, #4]
20000e1a:	2b05      	cmp	r3, #5
20000e1c:	d81d      	bhi.n	20000e5a <activateRow+0x4a>
20000e1e:	687b      	ldr	r3, [r7, #4]
20000e20:	009a      	lsls	r2, r3, #2
20000e22:	4b10      	ldr	r3, [pc, #64]	; (20000e64 <activateRow+0x54>)
20000e24:	18d3      	adds	r3, r2, r3
20000e26:	681b      	ldr	r3, [r3, #0]
20000e28:	469f      	mov	pc, r3
* deaktivera samtliga */
	switch( row )
	{
		case 1: *GPIO_ODR_HIGH = 0x10; break;
20000e2a:	4b0f      	ldr	r3, [pc, #60]	; (20000e68 <activateRow+0x58>)
20000e2c:	2210      	movs	r2, #16
20000e2e:	701a      	strb	r2, [r3, #0]
20000e30:	e013      	b.n	20000e5a <activateRow+0x4a>
		case 2: *GPIO_ODR_HIGH = 0x20; break;
20000e32:	4b0d      	ldr	r3, [pc, #52]	; (20000e68 <activateRow+0x58>)
20000e34:	2220      	movs	r2, #32
20000e36:	701a      	strb	r2, [r3, #0]
20000e38:	e00f      	b.n	20000e5a <activateRow+0x4a>
		case 3: *GPIO_ODR_HIGH = 0x40; break;
20000e3a:	4b0b      	ldr	r3, [pc, #44]	; (20000e68 <activateRow+0x58>)
20000e3c:	2240      	movs	r2, #64	; 0x40
20000e3e:	701a      	strb	r2, [r3, #0]
20000e40:	e00b      	b.n	20000e5a <activateRow+0x4a>
		case 4: *GPIO_ODR_HIGH = 0x80; break;
20000e42:	4b09      	ldr	r3, [pc, #36]	; (20000e68 <activateRow+0x58>)
20000e44:	2280      	movs	r2, #128	; 0x80
20000e46:	701a      	strb	r2, [r3, #0]
20000e48:	e007      	b.n	20000e5a <activateRow+0x4a>
		case 5: *GPIO_ODR_HIGH = 0xF0; break; 
20000e4a:	4b07      	ldr	r3, [pc, #28]	; (20000e68 <activateRow+0x58>)
20000e4c:	22f0      	movs	r2, #240	; 0xf0
20000e4e:	701a      	strb	r2, [r3, #0]
20000e50:	e003      	b.n	20000e5a <activateRow+0x4a>
		case 0: *GPIO_ODR_HIGH = 0x00; break;
20000e52:	4b05      	ldr	r3, [pc, #20]	; (20000e68 <activateRow+0x58>)
20000e54:	2200      	movs	r2, #0
20000e56:	701a      	strb	r2, [r3, #0]
20000e58:	46c0      	nop			; (mov r8, r8)
	}
}
20000e5a:	46c0      	nop			; (mov r8, r8)
20000e5c:	46bd      	mov	sp, r7
20000e5e:	b002      	add	sp, #8
20000e60:	bd80      	pop	{r7, pc}
20000e62:	46c0      	nop			; (mov r8, r8)
20000e64:	20001df4 	strdcs	r1, [r0], -r4
20000e68:	40020c15 	andmi	r0, r2, r5, lsl ip

20000e6c <readColumn>:
int readColumn(void)
{
20000e6c:	b580      	push	{r7, lr}
20000e6e:	b082      	sub	sp, #8
20000e70:	af00      	add	r7, sp, #0
	/* Om någon tangent (i aktiverad rad)
	* är nedtryckt, returnera dess kolumnnummer,
	* annars, returnera 0 */
	unsigned char c;
	c = *GPIO_IDR_HIGH;
20000e72:	4a12      	ldr	r2, [pc, #72]	; (20000ebc <readColumn+0x50>)
20000e74:	1dfb      	adds	r3, r7, #7
20000e76:	7812      	ldrb	r2, [r2, #0]
20000e78:	701a      	strb	r2, [r3, #0]
	if (c & 0x8) return 4;
20000e7a:	1dfb      	adds	r3, r7, #7
20000e7c:	781b      	ldrb	r3, [r3, #0]
20000e7e:	2208      	movs	r2, #8
20000e80:	4013      	ands	r3, r2
20000e82:	d001      	beq.n	20000e88 <readColumn+0x1c>
20000e84:	2304      	movs	r3, #4
20000e86:	e015      	b.n	20000eb4 <readColumn+0x48>
	if (c & 0x4) return 3;
20000e88:	1dfb      	adds	r3, r7, #7
20000e8a:	781b      	ldrb	r3, [r3, #0]
20000e8c:	2204      	movs	r2, #4
20000e8e:	4013      	ands	r3, r2
20000e90:	d001      	beq.n	20000e96 <readColumn+0x2a>
20000e92:	2303      	movs	r3, #3
20000e94:	e00e      	b.n	20000eb4 <readColumn+0x48>
	if (c & 0x2) return 2;
20000e96:	1dfb      	adds	r3, r7, #7
20000e98:	781b      	ldrb	r3, [r3, #0]
20000e9a:	2202      	movs	r2, #2
20000e9c:	4013      	ands	r3, r2
20000e9e:	d001      	beq.n	20000ea4 <readColumn+0x38>
20000ea0:	2302      	movs	r3, #2
20000ea2:	e007      	b.n	20000eb4 <readColumn+0x48>
	if (c & 0x1) return 1;
20000ea4:	1dfb      	adds	r3, r7, #7
20000ea6:	781b      	ldrb	r3, [r3, #0]
20000ea8:	2201      	movs	r2, #1
20000eaa:	4013      	ands	r3, r2
20000eac:	d001      	beq.n	20000eb2 <readColumn+0x46>
20000eae:	2301      	movs	r3, #1
20000eb0:	e000      	b.n	20000eb4 <readColumn+0x48>
	return 0;
20000eb2:	2300      	movs	r3, #0
}
20000eb4:	0018      	movs	r0, r3
20000eb6:	46bd      	mov	sp, r7
20000eb8:	b002      	add	sp, #8
20000eba:	bd80      	pop	{r7, pc}
20000ebc:	40020c11 	andmi	r0, r2, r1, lsl ip

20000ec0 <start_rand>:


void systick_irq_handler( void );

void start_rand()
{
20000ec0:	b580      	push	{r7, lr}
20000ec2:	af00      	add	r7, sp, #0
	if(counting) return; // kan inte göra båda samtidigt
20000ec4:	4b0b      	ldr	r3, [pc, #44]	; (20000ef4 <start_rand+0x34>)
20000ec6:	681b      	ldr	r3, [r3, #0]
20000ec8:	2b00      	cmp	r3, #0
20000eca:	d10f      	bne.n	20000eec <start_rand+0x2c>
	used_for_rand = 1;
20000ecc:	4b0a      	ldr	r3, [pc, #40]	; (20000ef8 <start_rand+0x38>)
20000ece:	2201      	movs	r2, #1
20000ed0:	601a      	str	r2, [r3, #0]
	*STK_CTRL = 0;
20000ed2:	4b0a      	ldr	r3, [pc, #40]	; (20000efc <start_rand+0x3c>)
20000ed4:	2200      	movs	r2, #0
20000ed6:	601a      	str	r2, [r3, #0]
	*STK_LOAD = LOAD_MAX;
20000ed8:	4b09      	ldr	r3, [pc, #36]	; (20000f00 <start_rand+0x40>)
20000eda:	4a0a      	ldr	r2, [pc, #40]	; (20000f04 <start_rand+0x44>)
20000edc:	601a      	str	r2, [r3, #0]
	*STK_VAL = 0;
20000ede:	4b0a      	ldr	r3, [pc, #40]	; (20000f08 <start_rand+0x48>)
20000ee0:	2200      	movs	r2, #0
20000ee2:	601a      	str	r2, [r3, #0]
	*STK_CTRL = 7;
20000ee4:	4b05      	ldr	r3, [pc, #20]	; (20000efc <start_rand+0x3c>)
20000ee6:	2207      	movs	r2, #7
20000ee8:	601a      	str	r2, [r3, #0]
20000eea:	e000      	b.n	20000eee <start_rand+0x2e>
	if(counting) return; // kan inte göra båda samtidigt
20000eec:	46c0      	nop			; (mov r8, r8)
}
20000eee:	46bd      	mov	sp, r7
20000ef0:	bd80      	pop	{r7, pc}
20000ef2:	46c0      	nop			; (mov r8, r8)
20000ef4:	200012a4 	andcs	r1, r0, r4, lsr #5
20000ef8:	200012a8 	andcs	r1, r0, r8, lsr #5
20000efc:	e000e010 	and	lr, r0, r0, lsl r0
20000f00:	e000e014 	and	lr, r0, r4, lsl r0
20000f04:	00ffffff 	ldrshteq	pc, [pc], #255	; <UNPREDICTABLE>
20000f08:	e000e018 	and	lr, r0, r8, lsl r0

20000f0c <get_rand_val>:
int get_rand_val()
{
20000f0c:	b580      	push	{r7, lr}
20000f0e:	af00      	add	r7, sp, #0
	if(used_for_rand)
20000f10:	4b05      	ldr	r3, [pc, #20]	; (20000f28 <get_rand_val+0x1c>)
20000f12:	681b      	ldr	r3, [r3, #0]
20000f14:	2b00      	cmp	r3, #0
20000f16:	d002      	beq.n	20000f1e <get_rand_val+0x12>
		return *STK_VAL;
20000f18:	4b04      	ldr	r3, [pc, #16]	; (20000f2c <get_rand_val+0x20>)
20000f1a:	681b      	ldr	r3, [r3, #0]
20000f1c:	e000      	b.n	20000f20 <get_rand_val+0x14>
	else return 0;
20000f1e:	2300      	movs	r3, #0
}
20000f20:	0018      	movs	r0, r3
20000f22:	46bd      	mov	sp, r7
20000f24:	bd80      	pop	{r7, pc}
20000f26:	46c0      	nop			; (mov r8, r8)
20000f28:	200012a8 	andcs	r1, r0, r8, lsr #5
20000f2c:	e000e018 	and	lr, r0, r8, lsl r0

20000f30 <end_rand>:
void end_rand()
{
20000f30:	b580      	push	{r7, lr}
20000f32:	af00      	add	r7, sp, #0
	*STK_CTRL = 0;
20000f34:	4b04      	ldr	r3, [pc, #16]	; (20000f48 <end_rand+0x18>)
20000f36:	2200      	movs	r2, #0
20000f38:	601a      	str	r2, [r3, #0]
	used_for_rand = 0;
20000f3a:	4b04      	ldr	r3, [pc, #16]	; (20000f4c <end_rand+0x1c>)
20000f3c:	2200      	movs	r2, #0
20000f3e:	601a      	str	r2, [r3, #0]
}
20000f40:	46c0      	nop			; (mov r8, r8)
20000f42:	46bd      	mov	sp, r7
20000f44:	bd80      	pop	{r7, pc}
20000f46:	46c0      	nop			; (mov r8, r8)
20000f48:	e000e010 	and	lr, r0, r0, lsl r0
20000f4c:	200012a8 	andcs	r1, r0, r8, lsr #5

20000f50 <sysTick_init>:

void sysTick_init()
{
20000f50:	b580      	push	{r7, lr}
20000f52:	af00      	add	r7, sp, #0
	*SCB_VTOR = REALLOC;
20000f54:	4b04      	ldr	r3, [pc, #16]	; (20000f68 <sysTick_init+0x18>)
20000f56:	4a05      	ldr	r2, [pc, #20]	; (20000f6c <sysTick_init+0x1c>)
20000f58:	601a      	str	r2, [r3, #0]
	*((void (**)(void) ) 0x2001C03C) = &systick_irq_handler;
20000f5a:	4b05      	ldr	r3, [pc, #20]	; (20000f70 <sysTick_init+0x20>)
20000f5c:	4a05      	ldr	r2, [pc, #20]	; (20000f74 <sysTick_init+0x24>)
20000f5e:	601a      	str	r2, [r3, #0]
}
20000f60:	46c0      	nop			; (mov r8, r8)
20000f62:	46bd      	mov	sp, r7
20000f64:	bd80      	pop	{r7, pc}
20000f66:	46c0      	nop			; (mov r8, r8)
20000f68:	e000ed08 	and	lr, r0, r8, lsl #26
20000f6c:	2001c000 	andcs	ip, r1, r0
20000f70:	2001c03c 	andcs	ip, r1, ip, lsr r0
20000f74:	20000fa9 	andcs	r0, r0, r9, lsr #31

20000f78 <delay_1mikro>:

void delay_1mikro( void )
{
20000f78:	b580      	push	{r7, lr}
20000f7a:	af00      	add	r7, sp, #0
	*STK_CTRL = 0;
20000f7c:	4b07      	ldr	r3, [pc, #28]	; (20000f9c <delay_1mikro+0x24>)
20000f7e:	2200      	movs	r2, #0
20000f80:	601a      	str	r2, [r3, #0]
	*STK_LOAD = (168 - 1);
20000f82:	4b07      	ldr	r3, [pc, #28]	; (20000fa0 <delay_1mikro+0x28>)
20000f84:	22a7      	movs	r2, #167	; 0xa7
20000f86:	601a      	str	r2, [r3, #0]
	*STK_VAL = 0;
20000f88:	4b06      	ldr	r3, [pc, #24]	; (20000fa4 <delay_1mikro+0x2c>)
20000f8a:	2200      	movs	r2, #0
20000f8c:	601a      	str	r2, [r3, #0]
	*STK_CTRL = 7;
20000f8e:	4b03      	ldr	r3, [pc, #12]	; (20000f9c <delay_1mikro+0x24>)
20000f90:	2207      	movs	r2, #7
20000f92:	601a      	str	r2, [r3, #0]
}
20000f94:	46c0      	nop			; (mov r8, r8)
20000f96:	46bd      	mov	sp, r7
20000f98:	bd80      	pop	{r7, pc}
20000f9a:	46c0      	nop			; (mov r8, r8)
20000f9c:	e000e010 	and	lr, r0, r0, lsl r0
20000fa0:	e000e014 	and	lr, r0, r4, lsl r0
20000fa4:	e000e018 	and	lr, r0, r8, lsl r0

20000fa8 <systick_irq_handler>:

void systick_irq_handler( void )
{
20000fa8:	b580      	push	{r7, lr}
20000faa:	af00      	add	r7, sp, #0
	if(used_for_rand) systick_irq_handler_rand();
20000fac:	4b05      	ldr	r3, [pc, #20]	; (20000fc4 <systick_irq_handler+0x1c>)
20000fae:	681b      	ldr	r3, [r3, #0]
20000fb0:	2b00      	cmp	r3, #0
20000fb2:	d002      	beq.n	20000fba <systick_irq_handler+0x12>
20000fb4:	f000 f82a 	bl	2000100c <systick_irq_handler_rand>
	else systick_irq_handler_counting();
}
20000fb8:	e001      	b.n	20000fbe <systick_irq_handler+0x16>
	else systick_irq_handler_counting();
20000fba:	f000 f805 	bl	20000fc8 <systick_irq_handler_counting>
}
20000fbe:	46c0      	nop			; (mov r8, r8)
20000fc0:	46bd      	mov	sp, r7
20000fc2:	bd80      	pop	{r7, pc}
20000fc4:	200012a8 	andcs	r1, r0, r8, lsr #5

20000fc8 <systick_irq_handler_counting>:

void systick_irq_handler_counting( void )
{
20000fc8:	b580      	push	{r7, lr}
20000fca:	af00      	add	r7, sp, #0
	*STK_CTRL = 0;
20000fcc:	4b0b      	ldr	r3, [pc, #44]	; (20000ffc <systick_irq_handler_counting+0x34>)
20000fce:	2200      	movs	r2, #0
20000fd0:	601a      	str	r2, [r3, #0]
	delay_count -- ;
20000fd2:	4b0b      	ldr	r3, [pc, #44]	; (20001000 <systick_irq_handler_counting+0x38>)
20000fd4:	681b      	ldr	r3, [r3, #0]
20000fd6:	1e5a      	subs	r2, r3, #1
20000fd8:	4b09      	ldr	r3, [pc, #36]	; (20001000 <systick_irq_handler_counting+0x38>)
20000fda:	601a      	str	r2, [r3, #0]
	if( delay_count > 0 ) delay_1mikro();
20000fdc:	4b08      	ldr	r3, [pc, #32]	; (20001000 <systick_irq_handler_counting+0x38>)
20000fde:	681b      	ldr	r3, [r3, #0]
20000fe0:	2b00      	cmp	r3, #0
20000fe2:	dd02      	ble.n	20000fea <systick_irq_handler_counting+0x22>
20000fe4:	f7ff ffc8 	bl	20000f78 <delay_1mikro>
	else 
		{
			systick_flag = 1;
			counting = 0;
		}
}
20000fe8:	e005      	b.n	20000ff6 <systick_irq_handler_counting+0x2e>
			systick_flag = 1;
20000fea:	4b06      	ldr	r3, [pc, #24]	; (20001004 <systick_irq_handler_counting+0x3c>)
20000fec:	2201      	movs	r2, #1
20000fee:	601a      	str	r2, [r3, #0]
			counting = 0;
20000ff0:	4b05      	ldr	r3, [pc, #20]	; (20001008 <systick_irq_handler_counting+0x40>)
20000ff2:	2200      	movs	r2, #0
20000ff4:	601a      	str	r2, [r3, #0]
}
20000ff6:	46c0      	nop			; (mov r8, r8)
20000ff8:	46bd      	mov	sp, r7
20000ffa:	bd80      	pop	{r7, pc}
20000ffc:	e000e010 	and	lr, r0, r0, lsl r0
20001000:	200012a0 	andcs	r1, r0, r0, lsr #5
20001004:	2000129c 	mulcs	r0, ip, r2
20001008:	200012a4 	andcs	r1, r0, r4, lsr #5

2000100c <systick_irq_handler_rand>:
void systick_irq_handler_rand( void )
{
2000100c:	b580      	push	{r7, lr}
2000100e:	af00      	add	r7, sp, #0
	*STK_CTRL = 0;
20001010:	4b07      	ldr	r3, [pc, #28]	; (20001030 <systick_irq_handler_rand+0x24>)
20001012:	2200      	movs	r2, #0
20001014:	601a      	str	r2, [r3, #0]
	*STK_LOAD = LOAD_MAX;
20001016:	4b07      	ldr	r3, [pc, #28]	; (20001034 <systick_irq_handler_rand+0x28>)
20001018:	4a07      	ldr	r2, [pc, #28]	; (20001038 <systick_irq_handler_rand+0x2c>)
2000101a:	601a      	str	r2, [r3, #0]
	*STK_VAL = 0;
2000101c:	4b07      	ldr	r3, [pc, #28]	; (2000103c <systick_irq_handler_rand+0x30>)
2000101e:	2200      	movs	r2, #0
20001020:	601a      	str	r2, [r3, #0]
	*STK_CTRL = 7;
20001022:	4b03      	ldr	r3, [pc, #12]	; (20001030 <systick_irq_handler_rand+0x24>)
20001024:	2207      	movs	r2, #7
20001026:	601a      	str	r2, [r3, #0]
}
20001028:	46c0      	nop			; (mov r8, r8)
2000102a:	46bd      	mov	sp, r7
2000102c:	bd80      	pop	{r7, pc}
2000102e:	46c0      	nop			; (mov r8, r8)
20001030:	e000e010 	and	lr, r0, r0, lsl r0
20001034:	e000e014 	and	lr, r0, r4, lsl r0
20001038:	00ffffff 	ldrshteq	pc, [pc], #255	; <UNPREDICTABLE>
2000103c:	e000e018 	and	lr, r0, r8, lsl r0

20001040 <delay>:
void delay( unsigned int count )
{
20001040:	b580      	push	{r7, lr}
20001042:	b082      	sub	sp, #8
20001044:	af00      	add	r7, sp, #0
20001046:	6078      	str	r0, [r7, #4]
	if(used_for_rand) return; // kan inte göra båda samtidigt
20001048:	4b0c      	ldr	r3, [pc, #48]	; (2000107c <delay+0x3c>)
2000104a:	681b      	ldr	r3, [r3, #0]
2000104c:	2b00      	cmp	r3, #0
2000104e:	d10e      	bne.n	2000106e <delay+0x2e>
	counting = 1;
20001050:	4b0b      	ldr	r3, [pc, #44]	; (20001080 <delay+0x40>)
20001052:	2201      	movs	r2, #1
20001054:	601a      	str	r2, [r3, #0]
	if( count == 0 ) return;
20001056:	687b      	ldr	r3, [r7, #4]
20001058:	2b00      	cmp	r3, #0
2000105a:	d00a      	beq.n	20001072 <delay+0x32>
	delay_count = count;
2000105c:	687a      	ldr	r2, [r7, #4]
2000105e:	4b09      	ldr	r3, [pc, #36]	; (20001084 <delay+0x44>)
20001060:	601a      	str	r2, [r3, #0]
	systick_flag = 0;
20001062:	4b09      	ldr	r3, [pc, #36]	; (20001088 <delay+0x48>)
20001064:	2200      	movs	r2, #0
20001066:	601a      	str	r2, [r3, #0]
	delay_1mikro();
20001068:	f7ff ff86 	bl	20000f78 <delay_1mikro>
2000106c:	e002      	b.n	20001074 <delay+0x34>
	if(used_for_rand) return; // kan inte göra båda samtidigt
2000106e:	46c0      	nop			; (mov r8, r8)
20001070:	e000      	b.n	20001074 <delay+0x34>
	if( count == 0 ) return;
20001072:	46c0      	nop			; (mov r8, r8)
}
20001074:	46bd      	mov	sp, r7
20001076:	b002      	add	sp, #8
20001078:	bd80      	pop	{r7, pc}
2000107a:	46c0      	nop			; (mov r8, r8)
2000107c:	200012a8 	andcs	r1, r0, r8, lsr #5
20001080:	200012a4 	andcs	r1, r0, r4, lsr #5
20001084:	200012a0 	andcs	r1, r0, r0, lsr #5
20001088:	2000129c 	mulcs	r0, ip, r2

2000108c <__divsi3>:
2000108c:	4603      	mov	r3, r0
2000108e:	430b      	orrs	r3, r1
20001090:	d47f      	bmi.n	20001192 <__divsi3+0x106>
20001092:	2200      	movs	r2, #0
20001094:	0843      	lsrs	r3, r0, #1
20001096:	428b      	cmp	r3, r1
20001098:	d374      	bcc.n	20001184 <__divsi3+0xf8>
2000109a:	0903      	lsrs	r3, r0, #4
2000109c:	428b      	cmp	r3, r1
2000109e:	d35f      	bcc.n	20001160 <__divsi3+0xd4>
200010a0:	0a03      	lsrs	r3, r0, #8
200010a2:	428b      	cmp	r3, r1
200010a4:	d344      	bcc.n	20001130 <__divsi3+0xa4>
200010a6:	0b03      	lsrs	r3, r0, #12
200010a8:	428b      	cmp	r3, r1
200010aa:	d328      	bcc.n	200010fe <__divsi3+0x72>
200010ac:	0c03      	lsrs	r3, r0, #16
200010ae:	428b      	cmp	r3, r1
200010b0:	d30d      	bcc.n	200010ce <__divsi3+0x42>
200010b2:	22ff      	movs	r2, #255	; 0xff
200010b4:	0209      	lsls	r1, r1, #8
200010b6:	ba12      	rev	r2, r2
200010b8:	0c03      	lsrs	r3, r0, #16
200010ba:	428b      	cmp	r3, r1
200010bc:	d302      	bcc.n	200010c4 <__divsi3+0x38>
200010be:	1212      	asrs	r2, r2, #8
200010c0:	0209      	lsls	r1, r1, #8
200010c2:	d065      	beq.n	20001190 <__divsi3+0x104>
200010c4:	0b03      	lsrs	r3, r0, #12
200010c6:	428b      	cmp	r3, r1
200010c8:	d319      	bcc.n	200010fe <__divsi3+0x72>
200010ca:	e000      	b.n	200010ce <__divsi3+0x42>
200010cc:	0a09      	lsrs	r1, r1, #8
200010ce:	0bc3      	lsrs	r3, r0, #15
200010d0:	428b      	cmp	r3, r1
200010d2:	d301      	bcc.n	200010d8 <__divsi3+0x4c>
200010d4:	03cb      	lsls	r3, r1, #15
200010d6:	1ac0      	subs	r0, r0, r3
200010d8:	4152      	adcs	r2, r2
200010da:	0b83      	lsrs	r3, r0, #14
200010dc:	428b      	cmp	r3, r1
200010de:	d301      	bcc.n	200010e4 <__divsi3+0x58>
200010e0:	038b      	lsls	r3, r1, #14
200010e2:	1ac0      	subs	r0, r0, r3
200010e4:	4152      	adcs	r2, r2
200010e6:	0b43      	lsrs	r3, r0, #13
200010e8:	428b      	cmp	r3, r1
200010ea:	d301      	bcc.n	200010f0 <__divsi3+0x64>
200010ec:	034b      	lsls	r3, r1, #13
200010ee:	1ac0      	subs	r0, r0, r3
200010f0:	4152      	adcs	r2, r2
200010f2:	0b03      	lsrs	r3, r0, #12
200010f4:	428b      	cmp	r3, r1
200010f6:	d301      	bcc.n	200010fc <__divsi3+0x70>
200010f8:	030b      	lsls	r3, r1, #12
200010fa:	1ac0      	subs	r0, r0, r3
200010fc:	4152      	adcs	r2, r2
200010fe:	0ac3      	lsrs	r3, r0, #11
20001100:	428b      	cmp	r3, r1
20001102:	d301      	bcc.n	20001108 <__divsi3+0x7c>
20001104:	02cb      	lsls	r3, r1, #11
20001106:	1ac0      	subs	r0, r0, r3
20001108:	4152      	adcs	r2, r2
2000110a:	0a83      	lsrs	r3, r0, #10
2000110c:	428b      	cmp	r3, r1
2000110e:	d301      	bcc.n	20001114 <__divsi3+0x88>
20001110:	028b      	lsls	r3, r1, #10
20001112:	1ac0      	subs	r0, r0, r3
20001114:	4152      	adcs	r2, r2
20001116:	0a43      	lsrs	r3, r0, #9
20001118:	428b      	cmp	r3, r1
2000111a:	d301      	bcc.n	20001120 <__divsi3+0x94>
2000111c:	024b      	lsls	r3, r1, #9
2000111e:	1ac0      	subs	r0, r0, r3
20001120:	4152      	adcs	r2, r2
20001122:	0a03      	lsrs	r3, r0, #8
20001124:	428b      	cmp	r3, r1
20001126:	d301      	bcc.n	2000112c <__divsi3+0xa0>
20001128:	020b      	lsls	r3, r1, #8
2000112a:	1ac0      	subs	r0, r0, r3
2000112c:	4152      	adcs	r2, r2
2000112e:	d2cd      	bcs.n	200010cc <__divsi3+0x40>
20001130:	09c3      	lsrs	r3, r0, #7
20001132:	428b      	cmp	r3, r1
20001134:	d301      	bcc.n	2000113a <__divsi3+0xae>
20001136:	01cb      	lsls	r3, r1, #7
20001138:	1ac0      	subs	r0, r0, r3
2000113a:	4152      	adcs	r2, r2
2000113c:	0983      	lsrs	r3, r0, #6
2000113e:	428b      	cmp	r3, r1
20001140:	d301      	bcc.n	20001146 <__divsi3+0xba>
20001142:	018b      	lsls	r3, r1, #6
20001144:	1ac0      	subs	r0, r0, r3
20001146:	4152      	adcs	r2, r2
20001148:	0943      	lsrs	r3, r0, #5
2000114a:	428b      	cmp	r3, r1
2000114c:	d301      	bcc.n	20001152 <__divsi3+0xc6>
2000114e:	014b      	lsls	r3, r1, #5
20001150:	1ac0      	subs	r0, r0, r3
20001152:	4152      	adcs	r2, r2
20001154:	0903      	lsrs	r3, r0, #4
20001156:	428b      	cmp	r3, r1
20001158:	d301      	bcc.n	2000115e <__divsi3+0xd2>
2000115a:	010b      	lsls	r3, r1, #4
2000115c:	1ac0      	subs	r0, r0, r3
2000115e:	4152      	adcs	r2, r2
20001160:	08c3      	lsrs	r3, r0, #3
20001162:	428b      	cmp	r3, r1
20001164:	d301      	bcc.n	2000116a <__divsi3+0xde>
20001166:	00cb      	lsls	r3, r1, #3
20001168:	1ac0      	subs	r0, r0, r3
2000116a:	4152      	adcs	r2, r2
2000116c:	0883      	lsrs	r3, r0, #2
2000116e:	428b      	cmp	r3, r1
20001170:	d301      	bcc.n	20001176 <__divsi3+0xea>
20001172:	008b      	lsls	r3, r1, #2
20001174:	1ac0      	subs	r0, r0, r3
20001176:	4152      	adcs	r2, r2
20001178:	0843      	lsrs	r3, r0, #1
2000117a:	428b      	cmp	r3, r1
2000117c:	d301      	bcc.n	20001182 <__divsi3+0xf6>
2000117e:	004b      	lsls	r3, r1, #1
20001180:	1ac0      	subs	r0, r0, r3
20001182:	4152      	adcs	r2, r2
20001184:	1a41      	subs	r1, r0, r1
20001186:	d200      	bcs.n	2000118a <__divsi3+0xfe>
20001188:	4601      	mov	r1, r0
2000118a:	4152      	adcs	r2, r2
2000118c:	4610      	mov	r0, r2
2000118e:	4770      	bx	lr
20001190:	e05d      	b.n	2000124e <__divsi3+0x1c2>
20001192:	0fca      	lsrs	r2, r1, #31
20001194:	d000      	beq.n	20001198 <__divsi3+0x10c>
20001196:	4249      	negs	r1, r1
20001198:	1003      	asrs	r3, r0, #32
2000119a:	d300      	bcc.n	2000119e <__divsi3+0x112>
2000119c:	4240      	negs	r0, r0
2000119e:	4053      	eors	r3, r2
200011a0:	2200      	movs	r2, #0
200011a2:	469c      	mov	ip, r3
200011a4:	0903      	lsrs	r3, r0, #4
200011a6:	428b      	cmp	r3, r1
200011a8:	d32d      	bcc.n	20001206 <__divsi3+0x17a>
200011aa:	0a03      	lsrs	r3, r0, #8
200011ac:	428b      	cmp	r3, r1
200011ae:	d312      	bcc.n	200011d6 <__divsi3+0x14a>
200011b0:	22fc      	movs	r2, #252	; 0xfc
200011b2:	0189      	lsls	r1, r1, #6
200011b4:	ba12      	rev	r2, r2
200011b6:	0a03      	lsrs	r3, r0, #8
200011b8:	428b      	cmp	r3, r1
200011ba:	d30c      	bcc.n	200011d6 <__divsi3+0x14a>
200011bc:	0189      	lsls	r1, r1, #6
200011be:	1192      	asrs	r2, r2, #6
200011c0:	428b      	cmp	r3, r1
200011c2:	d308      	bcc.n	200011d6 <__divsi3+0x14a>
200011c4:	0189      	lsls	r1, r1, #6
200011c6:	1192      	asrs	r2, r2, #6
200011c8:	428b      	cmp	r3, r1
200011ca:	d304      	bcc.n	200011d6 <__divsi3+0x14a>
200011cc:	0189      	lsls	r1, r1, #6
200011ce:	d03a      	beq.n	20001246 <__divsi3+0x1ba>
200011d0:	1192      	asrs	r2, r2, #6
200011d2:	e000      	b.n	200011d6 <__divsi3+0x14a>
200011d4:	0989      	lsrs	r1, r1, #6
200011d6:	09c3      	lsrs	r3, r0, #7
200011d8:	428b      	cmp	r3, r1
200011da:	d301      	bcc.n	200011e0 <__divsi3+0x154>
200011dc:	01cb      	lsls	r3, r1, #7
200011de:	1ac0      	subs	r0, r0, r3
200011e0:	4152      	adcs	r2, r2
200011e2:	0983      	lsrs	r3, r0, #6
200011e4:	428b      	cmp	r3, r1
200011e6:	d301      	bcc.n	200011ec <__divsi3+0x160>
200011e8:	018b      	lsls	r3, r1, #6
200011ea:	1ac0      	subs	r0, r0, r3
200011ec:	4152      	adcs	r2, r2
200011ee:	0943      	lsrs	r3, r0, #5
200011f0:	428b      	cmp	r3, r1
200011f2:	d301      	bcc.n	200011f8 <__divsi3+0x16c>
200011f4:	014b      	lsls	r3, r1, #5
200011f6:	1ac0      	subs	r0, r0, r3
200011f8:	4152      	adcs	r2, r2
200011fa:	0903      	lsrs	r3, r0, #4
200011fc:	428b      	cmp	r3, r1
200011fe:	d301      	bcc.n	20001204 <__divsi3+0x178>
20001200:	010b      	lsls	r3, r1, #4
20001202:	1ac0      	subs	r0, r0, r3
20001204:	4152      	adcs	r2, r2
20001206:	08c3      	lsrs	r3, r0, #3
20001208:	428b      	cmp	r3, r1
2000120a:	d301      	bcc.n	20001210 <__divsi3+0x184>
2000120c:	00cb      	lsls	r3, r1, #3
2000120e:	1ac0      	subs	r0, r0, r3
20001210:	4152      	adcs	r2, r2
20001212:	0883      	lsrs	r3, r0, #2
20001214:	428b      	cmp	r3, r1
20001216:	d301      	bcc.n	2000121c <__divsi3+0x190>
20001218:	008b      	lsls	r3, r1, #2
2000121a:	1ac0      	subs	r0, r0, r3
2000121c:	4152      	adcs	r2, r2
2000121e:	d2d9      	bcs.n	200011d4 <__divsi3+0x148>
20001220:	0843      	lsrs	r3, r0, #1
20001222:	428b      	cmp	r3, r1
20001224:	d301      	bcc.n	2000122a <__divsi3+0x19e>
20001226:	004b      	lsls	r3, r1, #1
20001228:	1ac0      	subs	r0, r0, r3
2000122a:	4152      	adcs	r2, r2
2000122c:	1a41      	subs	r1, r0, r1
2000122e:	d200      	bcs.n	20001232 <__divsi3+0x1a6>
20001230:	4601      	mov	r1, r0
20001232:	4663      	mov	r3, ip
20001234:	4152      	adcs	r2, r2
20001236:	105b      	asrs	r3, r3, #1
20001238:	4610      	mov	r0, r2
2000123a:	d301      	bcc.n	20001240 <__divsi3+0x1b4>
2000123c:	4240      	negs	r0, r0
2000123e:	2b00      	cmp	r3, #0
20001240:	d500      	bpl.n	20001244 <__divsi3+0x1b8>
20001242:	4249      	negs	r1, r1
20001244:	4770      	bx	lr
20001246:	4663      	mov	r3, ip
20001248:	105b      	asrs	r3, r3, #1
2000124a:	d300      	bcc.n	2000124e <__divsi3+0x1c2>
2000124c:	4240      	negs	r0, r0
2000124e:	b501      	push	{r0, lr}
20001250:	2000      	movs	r0, #0
20001252:	f000 f805 	bl	20001260 <__aeabi_idiv0>
20001256:	bd02      	pop	{r1, pc}

20001258 <__aeabi_idivmod>:
20001258:	2900      	cmp	r1, #0
2000125a:	d0f8      	beq.n	2000124e <__divsi3+0x1c2>
2000125c:	e716      	b.n	2000108c <__divsi3>
2000125e:	4770      	bx	lr

20001260 <__aeabi_idiv0>:
20001260:	4770      	bx	lr
20001262:	46c0      	nop			; (mov r8, r8)

20001264 <memcpy>:
20001264:	2300      	movs	r3, #0
20001266:	b510      	push	{r4, lr}
20001268:	429a      	cmp	r2, r3
2000126a:	d100      	bne.n	2000126e <memcpy+0xa>
2000126c:	bd10      	pop	{r4, pc}
2000126e:	5ccc      	ldrb	r4, [r1, r3]
20001270:	54c4      	strb	r4, [r0, r3]
20001272:	3301      	adds	r3, #1
20001274:	e7f8      	b.n	20001268 <memcpy+0x4>
	...

20001278 <tolower>:
20001278:	2203      	movs	r2, #3
2000127a:	4b03      	ldr	r3, [pc, #12]	; (20001288 <tolower+0x10>)
2000127c:	5c1b      	ldrb	r3, [r3, r0]
2000127e:	4013      	ands	r3, r2
20001280:	2b01      	cmp	r3, #1
20001282:	d100      	bne.n	20001286 <tolower+0xe>
20001284:	3020      	adds	r0, #32
20001286:	4770      	bx	lr
20001288:	20001e0d 	andcs	r1, r0, sp, lsl #28

2000128c <currX>:
2000128c:	00000000 	andeq	r0, r0, r0

20001290 <currY>:
20001290:	00000000 	andeq	r0, r0, r0

20001294 <running>:
20001294:	00000000 	andeq	r0, r0, r0

20001298 <current_state>:
20001298:	00000000 	andeq	r0, r0, r0

2000129c <systick_flag>:
2000129c:	00000000 	andeq	r0, r0, r0

200012a0 <delay_count>:
200012a0:	00000000 	andeq	r0, r0, r0

200012a4 <counting>:
200012a4:	00000000 	andeq	r0, r0, r0

200012a8 <used_for_rand>:
200012a8:	00000000 	andeq	r0, r0, r0

200012ac <r.4189>:
	...

200012b4 <isFlagPtr>:
200012b4:	00000000 	andeq	r0, r0, r0

200012b8 <board>:
	...

20001948 <position>:
	...

20001960 <isBombPtr>:
20001960:	00000000 	andeq	r0, r0, r0

20001964 <zero>:
20001964:	00000030 	andeq	r0, r0, r0, lsr r0
20001968:	00000000 	andeq	r0, r0, r0
2000196c:	01000000 	mrseq	r0, (UNDEF: 0)
20001970:	00010101 	andeq	r0, r1, r1, lsl #2
20001974:	01010000 	mrseq	r0, (UNDEF: 1)
20001978:	01010000 	mrseq	r0, (UNDEF: 1)
2000197c:	00010000 	andeq	r0, r1, r0
20001980:	01000000 	mrseq	r0, (UNDEF: 0)
20001984:	00010000 	andeq	r0, r1, r0
20001988:	01010000 	mrseq	r0, (UNDEF: 1)
2000198c:	00010000 	andeq	r0, r1, r0
20001990:	01000100 	mrseq	r0, (UNDEF: 16)
20001994:	00010000 	andeq	r0, r1, r0
20001998:	01000001 	tsteq	r0, r1
2000199c:	01010000 	mrseq	r0, (UNDEF: 1)
200019a0:	01000000 	mrseq	r0, (UNDEF: 0)
200019a4:	00010000 	andeq	r0, r1, r0
200019a8:	01000000 	mrseq	r0, (UNDEF: 0)
200019ac:	01010000 	mrseq	r0, (UNDEF: 1)
200019b0:	01010000 	mrseq	r0, (UNDEF: 1)
200019b4:	01000000 	mrseq	r0, (UNDEF: 0)
200019b8:	00010101 	andeq	r0, r1, r1, lsl #2
	...

200019c8 <one>:
200019c8:	00000031 	andeq	r0, r0, r1, lsr r0
	...
200019d4:	00000101 	andeq	r0, r0, r1, lsl #2
200019d8:	01000000 	mrseq	r0, (UNDEF: 0)
200019dc:	00000100 	andeq	r0, r0, r0, lsl #2
200019e0:	00010000 	andeq	r0, r1, r0
200019e4:	00000100 	andeq	r0, r0, r0, lsl #2
200019e8:	00000000 	andeq	r0, r0, r0
200019ec:	00000100 	andeq	r0, r0, r0, lsl #2
200019f0:	00000000 	andeq	r0, r0, r0
200019f4:	00000100 	andeq	r0, r0, r0, lsl #2
200019f8:	00000000 	andeq	r0, r0, r0
200019fc:	00000100 	andeq	r0, r0, r0, lsl #2
20001a00:	00000000 	andeq	r0, r0, r0
20001a04:	00000100 	andeq	r0, r0, r0, lsl #2
20001a08:	00000000 	andeq	r0, r0, r0
20001a0c:	00000100 	andeq	r0, r0, r0, lsl #2
20001a10:	00000000 	andeq	r0, r0, r0
20001a14:	00000100 	andeq	r0, r0, r0, lsl #2
20001a18:	01010000 	mrseq	r0, (UNDEF: 1)
20001a1c:	01010101 	tsteq	r1, r1, lsl #2
	...

20001a2c <two>:
20001a2c:	00000032 	andeq	r0, r0, r2, lsr r0
	...
20001a38:	00010101 	andeq	r0, r1, r1, lsl #2
20001a3c:	01000000 	mrseq	r0, (UNDEF: 0)
20001a40:	01010000 	mrseq	r0, (UNDEF: 1)
20001a44:	00010000 	andeq	r0, r1, r0
20001a48:	01000000 	mrseq	r0, (UNDEF: 0)
20001a4c:	00000000 	andeq	r0, r0, r0
20001a50:	01000000 	mrseq	r0, (UNDEF: 0)
20001a54:	00000000 	andeq	r0, r0, r0
20001a58:	00010000 	andeq	r0, r1, r0
20001a5c:	00000000 	andeq	r0, r0, r0
20001a60:	00000100 	andeq	r0, r0, r0, lsl #2
20001a64:	00000000 	andeq	r0, r0, r0
20001a68:	00000001 	andeq	r0, r0, r1
20001a6c:	01000000 	mrseq	r0, (UNDEF: 0)
20001a70:	00000000 	andeq	r0, r0, r0
20001a74:	01010000 	mrseq	r0, (UNDEF: 1)
20001a78:	00000000 	andeq	r0, r0, r0
20001a7c:	01010000 	mrseq	r0, (UNDEF: 1)
20001a80:	01010101 	tsteq	r1, r1, lsl #2
	...

20001a90 <three>:
20001a90:	00000033 	andeq	r0, r0, r3, lsr r0
20001a94:	00000000 	andeq	r0, r0, r0
20001a98:	01010000 	mrseq	r0, (UNDEF: 1)
20001a9c:	00010101 	andeq	r0, r1, r1, lsl #2
20001aa0:	00000000 	andeq	r0, r0, r0
20001aa4:	01010000 	mrseq	r0, (UNDEF: 1)
20001aa8:	00000000 	andeq	r0, r0, r0
20001aac:	01000000 	mrseq	r0, (UNDEF: 0)
20001ab0:	00000000 	andeq	r0, r0, r0
20001ab4:	01010000 	mrseq	r0, (UNDEF: 1)
20001ab8:	01000000 	mrseq	r0, (UNDEF: 0)
20001abc:	00010101 	andeq	r0, r1, r1, lsl #2
20001ac0:	00000000 	andeq	r0, r0, r0
20001ac4:	01010000 	mrseq	r0, (UNDEF: 1)
20001ac8:	00000000 	andeq	r0, r0, r0
20001acc:	01000000 	mrseq	r0, (UNDEF: 0)
20001ad0:	00000000 	andeq	r0, r0, r0
20001ad4:	01000000 	mrseq	r0, (UNDEF: 0)
20001ad8:	00000000 	andeq	r0, r0, r0
20001adc:	01000000 	mrseq	r0, (UNDEF: 0)
20001ae0:	01010000 	mrseq	r0, (UNDEF: 1)
20001ae4:	00010101 	andeq	r0, r1, r1, lsl #2
	...

20001af4 <four>:
20001af4:	00000034 	andeq	r0, r0, r4, lsr r0
	...
20001b00:	01010000 	mrseq	r0, (UNDEF: 1)
20001b04:	00000000 	andeq	r0, r0, r0
20001b08:	01000100 	mrseq	r0, (UNDEF: 16)
20001b0c:	00000000 	andeq	r0, r0, r0
20001b10:	01000001 	tsteq	r0, r1
20001b14:	01000000 	mrseq	r0, (UNDEF: 0)
20001b18:	01000000 	mrseq	r0, (UNDEF: 0)
20001b1c:	00010000 	andeq	r0, r1, r0
20001b20:	01000000 	mrseq	r0, (UNDEF: 0)
20001b24:	01010000 	mrseq	r0, (UNDEF: 1)
20001b28:	01010101 	tsteq	r1, r1, lsl #2
20001b2c:	00000001 	andeq	r0, r0, r1
20001b30:	01000000 	mrseq	r0, (UNDEF: 0)
20001b34:	00000000 	andeq	r0, r0, r0
20001b38:	01000000 	mrseq	r0, (UNDEF: 0)
20001b3c:	00000000 	andeq	r0, r0, r0
20001b40:	01000000 	mrseq	r0, (UNDEF: 0)
20001b44:	00000000 	andeq	r0, r0, r0
20001b48:	01000000 	mrseq	r0, (UNDEF: 0)
	...

20001b58 <doll>:
20001b58:	00000024 	andeq	r0, r0, r4, lsr #32
20001b5c:	00000100 	andeq	r0, r0, r0, lsl #2
20001b60:	00000000 	andeq	r0, r0, r0
20001b64:	00000100 	andeq	r0, r0, r0, lsl #2
20001b68:	01000000 	mrseq	r0, (UNDEF: 0)
20001b6c:	01010101 	tsteq	r1, r1, lsl #2
20001b70:	01010000 	mrseq	r0, (UNDEF: 1)
20001b74:	00000100 	andeq	r0, r0, r0, lsl #2
20001b78:	01010000 	mrseq	r0, (UNDEF: 1)
20001b7c:	00000100 	andeq	r0, r0, r0, lsl #2
20001b80:	01000000 	mrseq	r0, (UNDEF: 0)
20001b84:	00000101 	andeq	r0, r0, r1, lsl #2
20001b88:	00000000 	andeq	r0, r0, r0
20001b8c:	00010101 	andeq	r0, r1, r1, lsl #2
20001b90:	00000000 	andeq	r0, r0, r0
20001b94:	01010001 	tsteq	r1, r1
20001b98:	00000000 	andeq	r0, r0, r0
20001b9c:	01010001 	tsteq	r1, r1
20001ba0:	00010000 	andeq	r0, r1, r0
20001ba4:	00010101 	andeq	r0, r1, r1, lsl #2
20001ba8:	01000000 	mrseq	r0, (UNDEF: 0)
20001bac:	00000101 	andeq	r0, r0, r1, lsl #2
20001bb0:	00000000 	andeq	r0, r0, r0
20001bb4:	00000001 	andeq	r0, r0, r1
20001bb8:	00000000 	andeq	r0, r0, r0

20001bbc <star>:
20001bbc:	0000002a 	andeq	r0, r0, sl, lsr #32
20001bc0:	00000001 	andeq	r0, r0, r1
20001bc4:	00010000 	andeq	r0, r1, r0
20001bc8:	00010001 	andeq	r0, r1, r1
20001bcc:	01000000 	mrseq	r0, (UNDEF: 0)
20001bd0:	00000101 	andeq	r0, r0, r1, lsl #2
20001bd4:	01000000 	mrseq	r0, (UNDEF: 0)
20001bd8:	00000101 	andeq	r0, r0, r1, lsl #2
20001bdc:	00010000 	andeq	r0, r1, r0
20001be0:	00010001 	andeq	r0, r1, r1
20001be4:	00000000 	andeq	r0, r0, r0
20001be8:	00000001 	andeq	r0, r0, r1
	...

20001c20 <arrow>:
20001c20:	0000005e 	andeq	r0, r0, lr, asr r0
	...
20001c2c:	00000100 	andeq	r0, r0, r0, lsl #2
20001c30:	00000000 	andeq	r0, r0, r0
20001c34:	00010001 	andeq	r0, r1, r1
20001c38:	01000000 	mrseq	r0, (UNDEF: 0)
20001c3c:	01000000 	mrseq	r0, (UNDEF: 0)
20001c40:	00010000 	andeq	r0, r1, r0
20001c44:	00000000 	andeq	r0, r0, r0
20001c48:	00000001 	andeq	r0, r0, r1
	...

20001c84 <space>:
20001c84:	00000020 	andeq	r0, r0, r0, lsr #32
	...
20001ce8:	00000020 	andeq	r0, r0, r0, lsr #32
20001cec:	33323130 	teqcc	r2, #48, 2
20001cf0:	37363534 			; <UNDEFINED> instruction: 0x37363534
20001cf4:	00003938 	andeq	r3, r0, r8, lsr r9
20001cf8:	20000ba8 	andcs	r0, r0, r8, lsr #23
20001cfc:	20000be4 	andcs	r0, r0, r4, ror #23
20001d00:	20000be4 	andcs	r0, r0, r4, ror #23
20001d04:	20000be4 	andcs	r0, r0, r4, ror #23
20001d08:	20000be4 	andcs	r0, r0, r4, ror #23
20001d0c:	20000be4 	andcs	r0, r0, r4, ror #23
20001d10:	20000bbc 			; <UNDEFINED> instruction: 0x20000bbc
20001d14:	20000be4 	andcs	r0, r0, r4, ror #23
20001d18:	20000be4 	andcs	r0, r0, r4, ror #23
20001d1c:	20000be4 	andcs	r0, r0, r4, ror #23
20001d20:	20000be4 	andcs	r0, r0, r4, ror #23
20001d24:	20000be4 	andcs	r0, r0, r4, ror #23
20001d28:	20000b44 	andcs	r0, r0, r4, asr #22
20001d2c:	20000b58 	andcs	r0, r0, r8, asr fp
20001d30:	20000b6c 	andcs	r0, r0, ip, ror #22
20001d34:	20000b80 	andcs	r0, r0, r0, lsl #23
20001d38:	20000b94 	mulcs	r0, r4, fp
20001d3c:	20000be4 	andcs	r0, r0, r4, ror #23
20001d40:	20000be4 	andcs	r0, r0, r4, ror #23
20001d44:	20000be4 	andcs	r0, r0, r4, ror #23
20001d48:	20000be4 	andcs	r0, r0, r4, ror #23
20001d4c:	20000be4 	andcs	r0, r0, r4, ror #23
20001d50:	20000be4 	andcs	r0, r0, r4, ror #23
20001d54:	20000be4 	andcs	r0, r0, r4, ror #23
20001d58:	20000be4 	andcs	r0, r0, r4, ror #23
20001d5c:	20000be4 	andcs	r0, r0, r4, ror #23
20001d60:	20000be4 	andcs	r0, r0, r4, ror #23
20001d64:	20000be4 	andcs	r0, r0, r4, ror #23
20001d68:	20000be4 	andcs	r0, r0, r4, ror #23
20001d6c:	20000be4 	andcs	r0, r0, r4, ror #23
20001d70:	20000be4 	andcs	r0, r0, r4, ror #23
20001d74:	20000be4 	andcs	r0, r0, r4, ror #23
20001d78:	20000be4 	andcs	r0, r0, r4, ror #23
20001d7c:	20000be4 	andcs	r0, r0, r4, ror #23
20001d80:	20000be4 	andcs	r0, r0, r4, ror #23
20001d84:	20000be4 	andcs	r0, r0, r4, ror #23
20001d88:	20000be4 	andcs	r0, r0, r4, ror #23
20001d8c:	20000be4 	andcs	r0, r0, r4, ror #23
20001d90:	20000be4 	andcs	r0, r0, r4, ror #23
20001d94:	20000be4 	andcs	r0, r0, r4, ror #23
20001d98:	20000be4 	andcs	r0, r0, r4, ror #23
20001d9c:	20000be4 	andcs	r0, r0, r4, ror #23
20001da0:	20000be4 	andcs	r0, r0, r4, ror #23
20001da4:	20000be4 	andcs	r0, r0, r4, ror #23
20001da8:	20000be4 	andcs	r0, r0, r4, ror #23
20001dac:	20000be4 	andcs	r0, r0, r4, ror #23
20001db0:	20000be4 	andcs	r0, r0, r4, ror #23
20001db4:	20000be4 	andcs	r0, r0, r4, ror #23
20001db8:	20000be4 	andcs	r0, r0, r4, ror #23
20001dbc:	20000be4 	andcs	r0, r0, r4, ror #23
20001dc0:	20000be4 	andcs	r0, r0, r4, ror #23
20001dc4:	20000be4 	andcs	r0, r0, r4, ror #23
20001dc8:	20000be4 	andcs	r0, r0, r4, ror #23
20001dcc:	20000be4 	andcs	r0, r0, r4, ror #23
20001dd0:	20000be4 	andcs	r0, r0, r4, ror #23
20001dd4:	20000be4 	andcs	r0, r0, r4, ror #23
20001dd8:	20000be4 	andcs	r0, r0, r4, ror #23
20001ddc:	20000be4 	andcs	r0, r0, r4, ror #23
20001de0:	20000bd0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
20001de4:	0a030201 	beq	200c25f0 <_ctype_+0xc07e4>
20001de8:	0b060504 	bleq	20183200 <_ctype_+0x1813f4>
20001dec:	0c090807 	stceq	8, cr0, [r9], {7}
20001df0:	0d0f000e 	stceq	0, cr0, [pc, #-56]	; 20001dc0 <space+0x13c>
20001df4:	20000e52 	andcs	r0, r0, r2, asr lr
20001df8:	20000e2a 	andcs	r0, r0, sl, lsr #28
20001dfc:	20000e32 	andcs	r0, r0, r2, lsr lr
20001e00:	20000e3a 	andcs	r0, r0, sl, lsr lr
20001e04:	20000e42 	andcs	r0, r0, r2, asr #28
20001e08:	20000e4a 	andcs	r0, r0, sl, asr #28

20001e0c <_ctype_>:
20001e0c:	20202000 	eorcs	r2, r0, r0
20001e10:	20202020 	eorcs	r2, r0, r0, lsr #32
20001e14:	28282020 	stmdacs	r8!, {r5, sp}
20001e18:	20282828 	eorcs	r2, r8, r8, lsr #16
20001e1c:	20202020 	eorcs	r2, r0, r0, lsr #32
20001e20:	20202020 	eorcs	r2, r0, r0, lsr #32
20001e24:	20202020 	eorcs	r2, r0, r0, lsr #32
20001e28:	20202020 	eorcs	r2, r0, r0, lsr #32
20001e2c:	10108820 	andsne	r8, r0, r0, lsr #16
20001e30:	10101010 	andsne	r1, r0, r0, lsl r0
20001e34:	10101010 	andsne	r1, r0, r0, lsl r0
20001e38:	10101010 	andsne	r1, r0, r0, lsl r0
20001e3c:	04040410 	streq	r0, [r4], #-1040	; 0xfffffbf0
20001e40:	04040404 	streq	r0, [r4], #-1028	; 0xfffffbfc
20001e44:	10040404 	andne	r0, r4, r4, lsl #8
20001e48:	10101010 	andsne	r1, r0, r0, lsl r0
20001e4c:	41411010 	cmpmi	r1, r0, lsl r0
20001e50:	41414141 	cmpmi	r1, r1, asr #2
20001e54:	01010101 	tsteq	r1, r1, lsl #2
20001e58:	01010101 	tsteq	r1, r1, lsl #2
20001e5c:	01010101 	tsteq	r1, r1, lsl #2
20001e60:	01010101 	tsteq	r1, r1, lsl #2
20001e64:	01010101 	tsteq	r1, r1, lsl #2
20001e68:	10101010 	andsne	r1, r0, r0, lsl r0
20001e6c:	42421010 	submi	r1, r2, #16
20001e70:	42424242 	submi	r4, r2, #536870916	; 0x20000004
20001e74:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
20001e78:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
20001e7c:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
20001e80:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
20001e84:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
20001e88:	10101010 	andsne	r1, r0, r0, lsl r0
20001e8c:	00000020 	andeq	r0, r0, r0, lsr #32
	...

Disassembly of section .debug_info:

00000000 <.debug_info>:
   0:	00000cc5 	andeq	r0, r0, r5, asr #25
   4:	00000004 	andeq	r0, r0, r4
   8:	01040000 	mrseq	r0, (UNDEF: 4)
   c:	00000207 	andeq	r0, r0, r7, lsl #4
  10:	00006f0c 	andeq	r6, r0, ip, lsl #30
  14:	0002f100 	andeq	pc, r2, r0, lsl #2
	...
  24:	03420200 	movteq	r0, #8704	; 0x2200
  28:	02610000 	rsbeq	r0, r1, #0
  2c:	004d1006 	subeq	r1, sp, r6
  30:	76030000 	strvc	r0, [r3], -r0
  34:	02006c61 	andeq	r6, r0, #24832	; 0x6100
  38:	004d0707 	subeq	r0, sp, r7, lsl #14
  3c:	04000000 	streq	r0, [r0], #-0
  40:	0000001e 	andeq	r0, r0, lr, lsl r0
  44:	54070802 	strpl	r0, [r7], #-2050	; 0xfffff7fe
  48:	01000000 	mrseq	r0, (UNDEF: 0)
  4c:	08010500 	stmdaeq	r1, {r8, sl}
  50:	00000202 	andeq	r0, r0, r2, lsl #4
  54:	00004d06 	andeq	r4, r0, r6, lsl #26
  58:	00006a00 	andeq	r6, r0, r0, lsl #20
  5c:	006a0700 	rsbeq	r0, sl, r0, lsl #14
  60:	070b0000 	streq	r0, [fp, -r0]
  64:	0000006a 	andeq	r0, r0, sl, rrx
  68:	04050007 	streq	r0, [r5], #-7
  6c:	0002c907 	andeq	ip, r2, r7, lsl #18
  70:	017c0800 	cmneq	ip, r0, lsl #16
  74:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
  78:	00002503 	andeq	r2, r0, r3, lsl #10
  7c:	04360900 	ldrteq	r0, [r6], #-2304	; 0xfffff700
  80:	0b020000 	bleq	80088 <startup-0x1ff7ff78>
  84:	0000710a 	andeq	r7, r0, sl, lsl #2
  88:	64030500 	strvs	r0, [r3], #-1280	; 0xfffffb00
  8c:	0a200019 	beq	8000f8 <startup-0x1f7fff08>
  90:	00656e6f 	rsbeq	r6, r5, pc, ror #28
  94:	710a1702 	tstvc	sl, r2, lsl #14
  98:	05000000 	streq	r0, [r0, #-0]
  9c:	0019c803 	andseq	ip, r9, r3, lsl #16
  a0:	77740a20 	ldrbvc	r0, [r4, -r0, lsr #20]!
  a4:	2302006f 	movwcs	r0, #8303	; 0x206f
  a8:	0000710a 	andeq	r7, r0, sl, lsl #2
  ac:	2c030500 	cfstr32cs	mvfx0, [r3], {-0}
  b0:	0920001a 	stmdbeq	r0!, {r1, r3, r4}
  b4:	0000018e 	andeq	r0, r0, lr, lsl #3
  b8:	710a2f02 	tstvc	sl, r2, lsl #30
  bc:	05000000 	streq	r0, [r0, #-0]
  c0:	001a9003 	andseq	r9, sl, r3
  c4:	03cf0920 	biceq	r0, pc, #32, 18	; 0x80000
  c8:	3b020000 	blcc	800d0 <startup-0x1ff7ff30>
  cc:	0000710a 	andeq	r7, r0, sl, lsl #2
  d0:	f4030500 	vst3.8	{d0,d2,d4}, [r3], r0
  d4:	0920001a 	stmdbeq	r0!, {r1, r3, r4}
  d8:	00000000 	andeq	r0, r0, r0
  dc:	710a4702 	tstvc	sl, r2, lsl #14
  e0:	05000000 	streq	r0, [r0, #-0]
  e4:	001b5803 	andseq	r5, fp, r3, lsl #16
  e8:	03ed0920 	mvneq	r0, #32, 18	; 0x80000
  ec:	53020000 	movwpl	r0, #8192	; 0x2000
  f0:	0000710a 	andeq	r7, r0, sl, lsl #2
  f4:	bc030500 	cfstr32lt	mvfx0, [r3], {-0}
  f8:	0920001b 	stmdbeq	r0!, {r0, r1, r3, r4}
  fc:	0000029e 	muleq	r0, lr, r2
 100:	710a5f02 	tstvc	sl, r2, lsl #30
 104:	05000000 	streq	r0, [r0, #-0]
 108:	001c2003 	andseq	r2, ip, r3
 10c:	02980920 	addseq	r0, r8, #32, 18	; 0x80000
 110:	6b020000 	blvs	80118 <startup-0x1ff7fee8>
 114:	0000710a 	andeq	r7, r0, sl, lsl #2
 118:	84030500 	strhi	r0, [r3], #-1280	; 0xfffffb00
 11c:	0920001c 	stmdbeq	r0!, {r2, r3, r4}
 120:	00000336 	andeq	r0, r0, r6, lsr r3
 124:	31052401 	tstcc	r5, r1, lsl #8
 128:	05000001 	streq	r0, [r0, #-1]
 12c:	00128c03 	andseq	r8, r2, r3, lsl #24
 130:	05040b20 	streq	r0, [r4, #-2848]	; 0xfffff4e0
 134:	00746e69 	rsbseq	r6, r4, r9, ror #28
 138:	0001310c 	andeq	r3, r1, ip, lsl #2
 13c:	033c0900 	teqeq	ip, #0, 18
 140:	25010000 	strcs	r0, [r1, #-0]
 144:	00013105 	andeq	r3, r1, r5, lsl #2
 148:	90030500 	andls	r0, r3, r0, lsl #10
 14c:	02200012 	eoreq	r0, r0, #18
 150:	000000d8 	ldrdeq	r0, [r0], -r8
 154:	082b0118 	stmdaeq	fp!, {r3, r4, r8}
 158:	000001a7 	andeq	r0, r0, r7, lsr #3
 15c:	01007803 	tsteq	r0, r3, lsl #16
 160:	0131062d 	teqeq	r1, sp, lsr #12
 164:	03000000 	movweq	r0, #0
 168:	2d010079 	stccs	0, cr0, [r1, #-484]	; 0xfffffe1c
 16c:	00013108 	andeq	r3, r1, r8, lsl #2
 170:	ed040400 	cfstrs	mvf0, [r4, #-0]
 174:	01000000 	mrseq	r0, (UNDEF: 0)
 178:	01310b2d 	teqeq	r1, sp, lsr #22
 17c:	04080000 	streq	r0, [r8], #-0
 180:	00000387 	andeq	r0, r0, r7, lsl #7
 184:	31062e01 	tstcc	r6, r1, lsl #28
 188:	0c000001 	stceq	0, cr0, [r0], {1}
 18c:	00036004 	andeq	r6, r3, r4
 190:	0f2e0100 	svceq	0x002e0100
 194:	00000131 	andeq	r0, r0, r1, lsr r1
 198:	00a50410 	adceq	r0, r5, r0, lsl r4
 19c:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
 1a0:	00013115 	andeq	r3, r1, r5, lsl r1
 1a4:	09001400 	stmdbeq	r0, {sl, ip}
 1a8:	000001e3 	andeq	r0, r0, r3, ror #3
 1ac:	4f022f01 	svcmi	0x00022f01
 1b0:	05000001 	streq	r0, [r0, #-1]
 1b4:	00194803 	andseq	r4, r9, r3, lsl #16
 1b8:	03690220 	cmneq	r9, #32, 4
 1bc:	010c0000 	mrseq	r0, (UNDEF: 12)
 1c0:	01ea0830 	mvneq	r0, r0, lsr r8
 1c4:	78030000 	stmdavc	r3, {}	; <UNPREDICTABLE>
 1c8:	06320100 	ldrteq	r0, [r2], -r0, lsl #2
 1cc:	00000131 	andeq	r0, r0, r1, lsr r1
 1d0:	00790300 	rsbseq	r0, r9, r0, lsl #6
 1d4:	31083201 	tstcc	r8, r1, lsl #4
 1d8:	04000001 	streq	r0, [r0], #-1
 1dc:	00037004 	andeq	r7, r3, r4
 1e0:	06330100 	ldrteq	r0, [r3], -r0, lsl #2
 1e4:	00000131 	andeq	r0, r0, r1, lsr r1
 1e8:	4f060008 	svcmi	0x00060008
 1ec:	00000001 	andeq	r0, r0, r1
 1f0:	07000002 	streq	r0, [r0, -r2]
 1f4:	0000006a 	andeq	r0, r0, sl, rrx
 1f8:	006a070d 	rsbeq	r0, sl, sp, lsl #14
 1fc:	00040000 	andeq	r0, r4, r0
 200:	00038f09 	andeq	r8, r3, r9, lsl #30
 204:	12420100 	subne	r0, r2, #0, 2
 208:	000001ea 	andeq	r0, r0, sl, ror #3
 20c:	12b80305 	adcsne	r0, r8, #335544320	; 0x14000000
 210:	2e092000 	cdpcs	0, 0, cr2, cr9, cr0, {0}
 214:	01000001 	tsteq	r0, r1
 218:	01310543 	teqeq	r1, r3, asr #10
 21c:	03050000 	movweq	r0, #20480	; 0x5000
 220:	20001294 	mulcs	r0, r4, r2
 224:	0001310d 	andeq	r3, r1, sp, lsl #2
 228:	00023300 	andeq	r3, r2, r0, lsl #6
 22c:	014f0e00 	cmpeq	pc, r0, lsl #28
 230:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
 234:	00000124 	andeq	r0, r0, r4, lsr #2
 238:	45075c01 	strmi	r5, [r7, #-3073]	; 0xfffff3ff
 23c:	05000002 	streq	r0, [r0, #-2]
 240:	00196003 	andseq	r6, r9, r3
 244:	24040f20 	strcs	r0, [r4], #-3872	; 0xfffff0e0
 248:	09000002 	stmdbeq	r0, {r1}
 24c:	000002a4 	andeq	r0, r0, r4, lsr #5
 250:	45075d01 	strmi	r5, [r7, #-3329]	; 0xfffff2ff
 254:	05000002 	streq	r0, [r0, #-2]
 258:	0012b403 	andseq	fp, r2, r3, lsl #8
 25c:	00301020 	eorseq	r1, r0, r0, lsr #32
 260:	c2010000 	andgt	r0, r1, #0
 264:	02700f01 	rsbseq	r0, r0, #1, 30
 268:	03050000 	movweq	r0, #20480	; 0x5000
 26c:	20001298 	mulcs	r0, r8, r2
 270:	f9080105 			; <UNDEFINED> instruction: 0xf9080105
 274:	11000001 	tstne	r0, r1
 278:	00000005 	andeq	r0, r0, r5
 27c:	15021301 	strne	r1, [r2, #-769]	; 0xfffffcff
 280:	00000138 	andeq	r0, r0, r8, lsr r1
 284:	129c0305 	addsne	r0, ip, #335544320	; 0x14000000
 288:	4b112000 	blmi	448290 <startup-0x1fbb7d70>
 28c:	01000003 	tsteq	r0, r3
 290:	38150214 	ldmdacc	r5, {r2, r4, r9}
 294:	05000001 	streq	r0, [r0, #-1]
 298:	0012a003 	andseq	sl, r2, r3
 29c:	04251120 	strteq	r1, [r5], #-288	; 0xfffffee0
 2a0:	16010000 	strne	r0, [r1], -r0
 2a4:	01381502 	teqeq	r8, r2, lsl #10
 2a8:	03050000 	movweq	r0, #20480	; 0x5000
 2ac:	200012a4 	andcs	r1, r0, r4, lsr #5
 2b0:	00028311 	andeq	r8, r2, r1, lsl r3
 2b4:	02170100 	andseq	r0, r7, #0, 2
 2b8:	00013815 	andeq	r3, r1, r5, lsl r8
 2bc:	a8030500 	stmdage	r3, {r8, sl}
 2c0:	12200012 	eorne	r0, r0, #18
 2c4:	000000ca 	andeq	r0, r0, sl, asr #1
 2c8:	06025701 	streq	r5, [r2], -r1, lsl #14
 2cc:	20001040 	andcs	r1, r0, r0, asr #32
 2d0:	0000004c 	andeq	r0, r0, ip, asr #32
 2d4:	02eb9c01 	rsceq	r9, fp, #256	; 0x100
 2d8:	51130000 	tstpl	r3, r0
 2dc:	01000003 	tsteq	r0, r3
 2e0:	6a1a0257 	bvs	680c44 <startup-0x1f97f3bc>
 2e4:	02000000 	andeq	r0, r0, #0
 2e8:	14007491 	strne	r7, [r0], #-1169	; 0xfffffb6f
 2ec:	000003d4 	ldrdeq	r0, [r0], -r4
 2f0:	06025001 	streq	r5, [r2], -r1
 2f4:	2000100c 	andcs	r1, r0, ip
 2f8:	00000034 	andeq	r0, r0, r4, lsr r0
 2fc:	11159c01 	tstne	r5, r1, lsl #24
 300:	01000004 	tsteq	r0, r4
 304:	c8060245 	stmdagt	r6, {r0, r2, r6, r9}
 308:	4420000f 	strtmi	r0, [r0], #-15
 30c:	01000000 	mrseq	r0, (UNDEF: 0)
 310:	0163129c 			; <UNDEFINED> instruction: 0x0163129c
 314:	3f010000 	svccc	0x00010000
 318:	0fa80602 	svceq	0x00a80602
 31c:	00202000 	eoreq	r2, r0, r0
 320:	9c010000 	stcls	0, cr0, [r1], {-0}
 324:	0000035f 	andeq	r0, r0, pc, asr r3
 328:	000fb416 	andeq	fp, pc, r6, lsl r4	; <UNPREDICTABLE>
 32c:	00000420 	andeq	r0, r0, r0, lsr #8
 330:	00034500 	andeq	r4, r3, r0, lsl #10
 334:	03d41700 	bicseq	r1, r4, #0, 14
 338:	41010000 	mrsmi	r0, (UNDEF: 1)
 33c:	01311402 	teqeq	r1, r2, lsl #8
 340:	00180000 	andseq	r0, r8, r0
 344:	0fba1900 	svceq	0x00ba1900
 348:	00042000 	andeq	r2, r4, r0
 34c:	11170000 	tstne	r7, r0
 350:	01000004 	tsteq	r0, r4
 354:	31070242 	tstcc	r7, r2, asr #4
 358:	18000001 	stmdane	r0, {r0}
 35c:	14000000 	strne	r0, [r0], #-0
 360:	000002bc 			; <UNDEFINED> instruction: 0x000002bc
 364:	06023701 	streq	r3, [r2], -r1, lsl #14
 368:	20000f78 	andcs	r0, r0, r8, ror pc
 36c:	00000030 	andeq	r0, r0, r0, lsr r0
 370:	d61a9c01 	ldrle	r9, [sl], -r1, lsl #24
 374:	01000002 	tsteq	r0, r2
 378:	50060231 	andpl	r0, r6, r1, lsr r2
 37c:	2820000f 	stmdacs	r0!, {r0, r1, r2, r3}
 380:	01000000 	mrseq	r0, (UNDEF: 0)
 384:	004a1a9c 	umaaleq	r1, sl, ip, sl
 388:	2b010000 	blcs	40390 <startup-0x1ffbfc70>
 38c:	0f300602 	svceq	0x00300602
 390:	00202000 	eoreq	r2, r0, r0
 394:	9c010000 	stcls	0, cr0, [r1], {-0}
 398:	0001ec1b 	andeq	lr, r1, fp, lsl ip
 39c:	02250100 	eoreq	r0, r5, #0, 2
 3a0:	00013105 	andeq	r3, r1, r5, lsl #2
 3a4:	000f0c00 	andeq	r0, pc, r0, lsl #24
 3a8:	00002420 	andeq	r2, r0, r0, lsr #8
 3ac:	1a9c0100 	bne	fe7007b4 <_ctype_+0xde6fe9a8>
 3b0:	00000194 	muleq	r0, r4, r1
 3b4:	06021c01 	streq	r1, [r2], -r1, lsl #24
 3b8:	20000ec0 	andcs	r0, r0, r0, asr #29
 3bc:	0000004c 	andeq	r0, r0, ip, asr #32
 3c0:	e21c9c01 	ands	r9, ip, #256	; 0x100
 3c4:	01000000 	mrseq	r0, (UNDEF: 0)
 3c8:	310501f6 	strdcc	r0, [r5, -r6]
 3cc:	6c000001 	stcvs	0, cr0, [r0], {1}
 3d0:	5420000e 	strtpl	r0, [r0], #-14
 3d4:	01000000 	mrseq	r0, (UNDEF: 0)
 3d8:	0003ec9c 	muleq	r3, ip, ip
 3dc:	00631d00 	rsbeq	r1, r3, r0, lsl #26
 3e0:	1001fb01 	andne	pc, r1, r1, lsl #22
 3e4:	00000270 	andeq	r0, r0, r0, ror r2
 3e8:	00779102 	rsbseq	r9, r7, r2, lsl #2
 3ec:	00005a1e 	andeq	r5, r0, lr, lsl sl
 3f0:	01e90100 	mvneq	r0, r0, lsl #2
 3f4:	000e1006 	andeq	r1, lr, r6
 3f8:	00005c20 	andeq	r5, r0, r0, lsr #24
 3fc:	149c0100 	ldrne	r0, [ip], #256	; 0x100
 400:	1f000004 	svcne	0x00000004
 404:	00776f72 	rsbseq	r6, r7, r2, ror pc
 408:	1601e901 	strne	lr, [r1], -r1, lsl #18
 40c:	00000131 	andeq	r0, r0, r1, lsr r1
 410:	00749102 	rsbseq	r9, r4, r2, lsl #2
 414:	0003b320 	andeq	fp, r3, r0, lsr #6
 418:	01d60100 	bicseq	r0, r6, r0, lsl #2
 41c:	0002700f 	andeq	r7, r2, pc
 420:	000db000 	andeq	fp, sp, r0
 424:	00006020 	andeq	r6, r0, r0, lsr #32
 428:	489c0100 	ldmmi	ip, {r8}
 42c:	19000004 	stmdbne	r0, {r2}
 430:	20000de0 	andcs	r0, r0, r0, ror #27
 434:	0000001e 	andeq	r0, r0, lr, lsl r0
 438:	0100631d 	tsteq	r0, sp, lsl r3
 43c:	701101e1 	andsvc	r0, r1, r1, ror #3
 440:	02000002 	andeq	r0, r0, #2
 444:	00006f91 	muleq	r0, r1, pc	; <UNPREDICTABLE>
 448:	0003c120 	andeq	ip, r3, r0, lsr #2
 44c:	01c50100 	biceq	r0, r5, r0, lsl #2
 450:	0002700f 	andeq	r7, r2, pc
 454:	000d4800 	andeq	r4, sp, r0, lsl #16
 458:	00006820 	andeq	r6, r0, r0, lsr #16
 45c:	a89c0100 	ldmge	ip, {r8}
 460:	11000004 	tstne	r0, r4
 464:	00000185 	andeq	r0, r0, r5, lsl #3
 468:	1001c701 	andne	ip, r1, r1, lsl #14
 46c:	000004a8 	andeq	r0, r0, r8, lsr #9
 470:	19589102 	ldmdbne	r8, {r1, r8, ip, pc}^
 474:	20000d5a 	andcs	r0, r0, sl, asr sp
 478:	00000040 	andeq	r0, r0, r0, asr #32
 47c:	776f721d 			; <UNDEFINED> instruction: 0x776f721d
 480:	01c80100 	biceq	r0, r8, r0, lsl #2
 484:	0001310a 	andeq	r3, r1, sl, lsl #2
 488:	6c910200 	lfmvs	f0, 4, [r1], {0}
 48c:	000d6019 	andeq	r6, sp, r9, lsl r0
 490:	00002e20 	andeq	r2, r0, r0, lsr #28
 494:	6f631d00 	svcvs	0x00631d00
 498:	cb01006c 	blgt	40650 <startup-0x1ffbf9b0>
 49c:	01310701 	teqeq	r1, r1, lsl #14
 4a0:	91020000 	mrsls	r0, (UNDEF: 2)
 4a4:	00000068 	andeq	r0, r0, r8, rrx
 4a8:	00027006 	andeq	r7, r2, r6
 4ac:	0004b800 	andeq	fp, r4, r0, lsl #16
 4b0:	006a0700 	rsbeq	r0, sl, r0, lsl #14
 4b4:	000f0000 	andeq	r0, pc, r0
 4b8:	00031d12 	andeq	r1, r3, r2, lsl sp
 4bc:	01b50100 			; <UNDEFINED> instruction: 0x01b50100
 4c0:	000d0006 	andeq	r0, sp, r6
 4c4:	00004820 	andeq	r4, r0, r0, lsr #16
 4c8:	f29c0100 	vaddw.s16	q0, q6, d0
 4cc:	21000004 	tstcs	r0, r4
 4d0:	000002d6 	ldrdeq	r0, [r0], -r6
 4d4:	0201bc01 	andeq	fp, r1, #256	; 0x100
 4d8:	00000131 	andeq	r0, r0, r1, lsr r1
 4dc:	000004e2 	andeq	r0, r0, r2, ror #9
 4e0:	94170018 	ldrls	r0, [r7], #-24	; 0xffffffe8
 4e4:	01000001 	tsteq	r0, r1
 4e8:	310201bd 			; <UNDEFINED> instruction: 0x310201bd
 4ec:	18000001 	stmdane	r0, {r0}
 4f0:	bd1e0000 	ldclt	0, cr0, [lr, #-0]
 4f4:	01000001 	tsteq	r0, r1
 4f8:	fa0601af 	blx	180bbc <startup-0x1fe7f444>
 4fc:	0620000c 	strteq	r0, [r0], -ip
 500:	01000000 	mrseq	r0, (UNDEF: 0)
 504:	0005249c 	muleq	r5, ip, r4
 508:	00781f00 	rsbseq	r1, r8, r0, lsl #30
 50c:	1e01af01 	cdpne	15, 0, cr10, cr1, cr1, {0}
 510:	00000131 	andeq	r0, r0, r1, lsr r1
 514:	791f5001 	ldmdbvc	pc, {r0, ip, lr}	; <UNPREDICTABLE>
 518:	01af0100 			; <UNDEFINED> instruction: 0x01af0100
 51c:	00013125 	andeq	r3, r1, r5, lsr #2
 520:	00510100 	subseq	r0, r1, r0, lsl #2
 524:	0001d11e 	andeq	sp, r1, lr, lsl r1
 528:	01a90100 			; <UNDEFINED> instruction: 0x01a90100
 52c:	000cf406 	andeq	pc, ip, r6, lsl #8
 530:	00000620 	andeq	r0, r0, r0, lsr #12
 534:	569c0100 	ldrpl	r0, [ip], r0, lsl #2
 538:	1f000005 	svcne	0x00000005
 53c:	a9010078 	stmdbge	r1, {r3, r4, r5, r6}
 540:	01311c01 	teqeq	r1, r1, lsl #24
 544:	50010000 	andpl	r0, r1, r0
 548:	0100791f 	tsteq	r0, pc, lsl r9
 54c:	312301a9 	smulwbcc	r3, r9, r1
 550:	01000001 	tsteq	r0, r1
 554:	fb140051 	blx	5006a2 <startup-0x1faff95e>
 558:	01000000 	mrseq	r0, (UNDEF: 0)
 55c:	ee0601a3 	adfdp	f0, f6, f3
 560:	0620000c 	strteq	r0, [r0], -ip
 564:	01000000 	mrseq	r0, (UNDEF: 0)
 568:	013f149c 	teqeq	pc, ip	; <illegal shifter operand>	; <UNPREDICTABLE>
 56c:	9d010000 	stcls	0, cr0, [r1, #-0]
 570:	0ce80601 	stcleq	6, cr0, [r8], #4
 574:	00062000 	andeq	r2, r6, r0
 578:	9c010000 	stcls	0, cr0, [r1], {-0}
 57c:	00032b12 	andeq	r2, r3, r2, lsl fp
 580:	01910100 	orrseq	r0, r1, r0, lsl #2
 584:	000c6406 	andeq	r6, ip, r6, lsl #8
 588:	00008420 	andeq	r8, r0, r0, lsr #8
 58c:	259c0100 	ldrcs	r0, [ip, #256]	; 0x100
 590:	1f000006 	svcne	0x00000006
 594:	91010078 	tstls	r1, r8, ror r0
 598:	01311501 	teqeq	r1, r1, lsl #10
 59c:	91020000 	mrsls	r0, (UNDEF: 2)
 5a0:	00791f64 	rsbseq	r1, r9, r4, ror #30
 5a4:	1c019101 	stfned	f1, [r1], {1}
 5a8:	00000131 	andeq	r0, r0, r1, lsr r1
 5ac:	1f609102 	svcne	0x00609102
 5b0:	01006863 	tsteq	r0, r3, ror #16
 5b4:	71280191 			; <UNDEFINED> instruction: 0x71280191
 5b8:	02000000 	andeq	r0, r0, #0
 5bc:	78197891 	ldmdavc	r9, {r0, r4, r7, fp, ip, sp, lr}
 5c0:	6020000c 	eorvs	r0, r0, ip
 5c4:	1d000000 	stcne	0, cr0, [r0, #-0]
 5c8:	93010069 	movwls	r0, #4201	; 0x1069
 5cc:	01310a01 	teqeq	r1, r1, lsl #20
 5d0:	91020000 	mrsls	r0, (UNDEF: 2)
 5d4:	0c7e196c 			; <UNDEFINED> instruction: 0x0c7e196c
 5d8:	004e2000 	subeq	r2, lr, r0
 5dc:	6a1d0000 	bvs	7405e4 <startup-0x1f8bfa1c>
 5e0:	01940100 	orrseq	r0, r4, r0, lsl #2
 5e4:	0001310b 	andeq	r3, r1, fp, lsl #2
 5e8:	68910200 	ldmvs	r1, {r9}
 5ec:	000c9a16 	andeq	r9, ip, r6, lsl sl
 5f0:	00001220 	andeq	r1, r0, r0, lsr #4
 5f4:	00060900 	andeq	r0, r6, r0, lsl #18
 5f8:	01d11700 	bicseq	r1, r1, r0, lsl #14
 5fc:	96010000 	strls	r0, [r1], -r0
 600:	01310401 	teqeq	r1, r1, lsl #8
 604:	00180000 	andseq	r0, r8, r0
 608:	0cae1900 			; <UNDEFINED> instruction: 0x0cae1900
 60c:	00122000 	andseq	r2, r2, r0
 610:	bd170000 	ldclt	0, cr0, [r7, #-0]
 614:	01000001 	tsteq	r0, r1
 618:	31040198 			; <UNDEFINED> instruction: 0x31040198
 61c:	18000001 	stmdane	r0, {r0}
 620:	00000000 	andeq	r0, r0, r0
 624:	037d1200 	cmneq	sp, #0, 4
 628:	6d010000 	stcvs	0, cr0, [r1, #-0]
 62c:	0b240601 	bleq	901e38 <startup-0x1f6fe1c8>
 630:	01402000 	mrseq	r2, (UNDEF: 64)
 634:	9c010000 	stcls	0, cr0, [r1], {-0}
 638:	0000066d 	andeq	r0, r0, sp, ror #12
 63c:	0068631f 	rsbeq	r6, r8, pc, lsl r3
 640:	15016d01 	strne	r6, [r1, #-3329]	; 0xfffff2ff
 644:	0000004d 	andeq	r0, r0, sp, asr #32
 648:	7eff9103 	nrmvce	f1, f3
 64c:	00039511 	andeq	r9, r3, r1, lsl r5
 650:	016f0100 	cmneq	pc, r0, lsl #2
 654:	0000710b 	andeq	r7, r0, fp, lsl #2
 658:	84910300 	ldrhi	r0, [r1], #768	; 0x300
 65c:	032b177f 			; <UNDEFINED> instruction: 0x032b177f
 660:	8e010000 	cdphi	0, 0, cr0, cr1, cr0, {0}
 664:	01310201 	teqeq	r1, r1, lsl #4
 668:	00180000 	andseq	r0, r8, r0
 66c:	00531e00 	subseq	r1, r3, r0, lsl #28
 670:	67010000 	strvs	r0, [r1, -r0]
 674:	0afe0601 	beq	fff81e80 <_ctype_+0xdff80074>
 678:	00262000 	eoreq	r2, r6, r0
 67c:	9c010000 	stcls	0, cr0, [r1], {-0}
 680:	000006a1 	andeq	r0, r0, r1, lsr #13
 684:	0100781f 	tsteq	r0, pc, lsl r8
 688:	31110167 	tstcc	r1, r7, ror #2
 68c:	02000001 	andeq	r0, r0, #1
 690:	791f7491 	ldmdbvc	pc, {r0, r4, r7, sl, ip, sp, lr}	; <UNPREDICTABLE>
 694:	01670100 	cmneq	r7, r0, lsl #2
 698:	00013118 	andeq	r3, r1, r8, lsl r1
 69c:	70910200 	addsvc	r0, r1, r0, lsl #4
 6a0:	003e1e00 	eorseq	r1, lr, r0, lsl #28
 6a4:	5a010000 	bpl	406ac <startup-0x1ffbf954>
 6a8:	0a880601 	beq	fe201eb4 <_ctype_+0xde2000a8>
 6ac:	00762000 	rsbseq	r2, r6, r0
 6b0:	9c010000 	stcls	0, cr0, [r1], {-0}
 6b4:	000006f7 	strdeq	r0, [r0], -r7
 6b8:	0100621f 	tsteq	r0, pc, lsl r2
 6bc:	0723015a 			; <UNDEFINED> instruction: 0x0723015a
 6c0:	02000007 	andeq	r0, r0, #7
 6c4:	90196c91 	mulsls	r9, r1, ip
 6c8:	6420000a 	strtvs	r0, [r0], #-10
 6cc:	1d000000 	stcne	0, cr0, [r0, #-0]
 6d0:	5c010078 	stcpl	0, cr0, [r1], {120}	; 0x78
 6d4:	01310a01 	teqeq	r1, r1, lsl #20
 6d8:	91020000 	mrsls	r0, (UNDEF: 2)
 6dc:	0a961974 	beq	fe586cb4 <_ctype_+0xde584ea8>
 6e0:	00522000 	subseq	r2, r2, r0
 6e4:	791d0000 	ldmdbvc	sp, {}	; <UNPREDICTABLE>
 6e8:	015e0100 	cmpeq	lr, r0, lsl #2
 6ec:	0001310b 	andeq	r3, r1, fp, lsl #2
 6f0:	70910200 	addsvc	r0, r1, r0, lsl #4
 6f4:	06000000 	streq	r0, [r0], -r0
 6f8:	0000014f 	andeq	r0, r0, pc, asr #2
 6fc:	00000707 	andeq	r0, r0, r7, lsl #14
 700:	00006a07 	andeq	r6, r0, r7, lsl #20
 704:	0f000400 	svceq	0x00000400
 708:	0006f704 	andeq	pc, r6, r4, lsl #14
 70c:	039e2000 	orrseq	r2, lr, #0
 710:	40010000 	andmi	r0, r1, r0
 714:	075a0701 	ldrbeq	r0, [sl, -r1, lsl #14]
 718:	0a080000 	beq	200720 <startup-0x1fdff8e0>
 71c:	00802000 	addeq	r2, r0, r0
 720:	9c010000 	stcls	0, cr0, [r1], {-0}
 724:	0000075a 	andeq	r0, r0, sl, asr r7
 728:	0068631f 	rsbeq	r6, r8, pc, lsl r3
 72c:	1b014001 	blne	50738 <startup-0x1ffaf8c8>
 730:	0000004d 	andeq	r0, r0, sp, asr #32
 734:	22779102 	rsbscs	r9, r7, #-2147483648	; 0x80000000
 738:	0000042e 	andeq	r0, r0, lr, lsr #8
 73c:	01310003 	teqeq	r1, r3
 740:	07480000 	strbeq	r0, [r8, -r0]
 744:	00180000 	andseq	r0, r8, r0
 748:	0100721d 	tsteq	r0, sp, lsl r2
 74c:	600d0143 	andvs	r0, sp, r3, asr #2
 750:	05000007 	streq	r0, [r0, #-7]
 754:	0012ac03 	andseq	sl, r2, r3, lsl #24
 758:	040f0020 	streq	r0, [pc], #-32	; 760 <startup-0x1ffff8a0>
 75c:	00000131 	andeq	r0, r0, r1, lsr r1
 760:	00013106 	andeq	r3, r1, r6, lsl #2
 764:	00077000 	andeq	r7, r7, r0
 768:	006a0700 	rsbeq	r0, sl, r0, lsl #14
 76c:	00010000 	andeq	r0, r1, r0
 770:	0000d012 	andeq	sp, r0, r2, lsl r0
 774:	012c0100 			; <UNDEFINED> instruction: 0x012c0100
 778:	00098c06 	andeq	r8, r9, r6, lsl #24
 77c:	00007c20 	andeq	r7, r0, r0, lsr #24
 780:	0a9c0100 	beq	fe700b88 <_ctype_+0xde6fed7c>
 784:	1f000008 	svcne	0x00000008
 788:	2c010070 	stccs	0, cr0, [r1], {112}	; 0x70
 78c:	014f1f01 	cmpeq	pc, r1, lsl #30
 790:	91020000 	mrsls	r0, (UNDEF: 2)
 794:	09bc1670 	ldmibeq	ip!, {r4, r5, r6, r9, sl, ip}
 798:	001a2000 	andseq	r2, sl, r0
 79c:	07c10000 	strbeq	r0, [r1, r0]
 7a0:	631d0000 	tstvs	sp, #0
 7a4:	01007368 	tsteq	r0, r8, ror #6
 7a8:	0a080131 	beq	200c74 <startup-0x1fdff38c>
 7ac:	02000008 	andeq	r0, r0, #8
 7b0:	7d235491 	cfstrsvc	mvf5, [r3, #-580]!	; 0xfffffdbc
 7b4:	01000003 	tsteq	r0, r3
 7b8:	013106c9 	teqeq	r1, r9, asr #13
 7bc:	00180000 	andseq	r0, r8, r0
 7c0:	07d52400 	ldrbeq	r2, [r5, r0, lsl #8]
 7c4:	7d230000 	stcvc	0, cr0, [r3, #-0]
 7c8:	01000003 	tsteq	r0, r3
 7cc:	013106c9 	teqeq	r1, r9, asr #13
 7d0:	00180000 	andseq	r0, r8, r0
 7d4:	09e21600 	stmibeq	r2!, {r9, sl, ip}^
 7d8:	00062000 	andeq	r2, r6, r0
 7dc:	07f10000 	ldrbeq	r0, [r1, r0]!
 7e0:	7d230000 	stcvc	0, cr0, [r3, #-0]
 7e4:	01000003 	tsteq	r0, r3
 7e8:	013106c9 	teqeq	r1, r9, asr #13
 7ec:	00180000 	andseq	r0, r8, r0
 7f0:	09ea1900 	stmibeq	sl!, {r8, fp, ip}^
 7f4:	00082000 	andeq	r2, r8, r0
 7f8:	7d230000 	stcvc	0, cr0, [r3, #-0]
 7fc:	01000003 	tsteq	r0, r3
 800:	013106c9 	teqeq	r1, r9, asr #13
 804:	00180000 	andseq	r0, r8, r0
 808:	4d060000 	stcmi	0, cr0, [r6, #-0]
 80c:	1a000000 	bne	814 <startup-0x1ffff7ec>
 810:	07000008 	streq	r0, [r0, -r8]
 814:	0000006a 	andeq	r0, r0, sl, rrx
 818:	571c0009 	ldrpl	r0, [ip, -r9]
 81c:	01000003 	tsteq	r0, r3
 820:	31050123 	tstcc	r5, r3, lsr #2
 824:	58000001 	stmdapl	r0, {r0}
 828:	34200009 	strtcc	r0, [r0], #-9
 82c:	01000000 	mrseq	r0, (UNDEF: 0)
 830:	0008529c 	muleq	r8, ip, r2
 834:	00781f00 	rsbseq	r1, r8, r0, lsl #30
 838:	12012301 	andne	r2, r1, #67108864	; 0x4000000
 83c:	00000131 	andeq	r0, r0, r1, lsr r1
 840:	1f749102 	svcne	0x00749102
 844:	23010079 	movwcs	r0, #4217	; 0x1079
 848:	01311901 	teqeq	r1, r1, lsl #18
 84c:	91020000 	mrsls	r0, (UNDEF: 2)
 850:	65200070 	strvs	r0, [r0, #-112]!	; 0xffffff90
 854:	01000003 	tsteq	r0, r3
 858:	b90f010f 	stmdblt	pc, {r0, r1, r2, r3, r8}	; <UNPREDICTABLE>
 85c:	9c000001 	stcls	0, cr0, [r0], {1}
 860:	bc200008 	stclt	0, cr0, [r0], #-32	; 0xffffffe0
 864:	01000000 	mrseq	r0, (UNDEF: 0)
 868:	0008ca9c 	muleq	r8, ip, sl
 86c:	00701f00 	rsbseq	r1, r0, r0, lsl #30
 870:	28010f01 	stmdacs	r1, {r0, r8, r9, sl, fp}
 874:	000001b9 			; <UNDEFINED> instruction: 0x000001b9
 878:	13509102 	cmpne	r0, #-2147483648	; 0x80000000
 87c:	00000291 	muleq	r0, r1, r2
 880:	30010f01 	andcc	r0, r1, r1, lsl #30
 884:	0000004d 	andeq	r0, r0, sp, asr #32
 888:	11009102 	tstne	r0, r2, lsl #2
 88c:	000003c9 	andeq	r0, r0, r9, asr #7
 890:	07011301 	streq	r1, [r1, -r1, lsl #6]
 894:	0000075a 	andeq	r0, r0, sl, asr r7
 898:	116c9102 	cmnne	ip, r2, lsl #2
 89c:	00000118 	andeq	r0, r0, r8, lsl r1
 8a0:	06011701 	streq	r1, [r1], -r1, lsl #14
 8a4:	00000131 	andeq	r0, r0, r1, lsr r1
 8a8:	11689102 	cmnne	r8, r2, lsl #2
 8ac:	0000011e 	andeq	r0, r0, lr, lsl r1
 8b0:	06011801 	streq	r1, [r1], -r1, lsl #16
 8b4:	00000131 	andeq	r0, r0, r1, lsr r1
 8b8:	23649102 	cmncs	r4, #-2147483648	; 0x80000000
 8bc:	0000037d 	andeq	r0, r0, sp, ror r3
 8c0:	3106c901 	tstcc	r6, r1, lsl #18
 8c4:	18000001 	stmdane	r0, {r0}
 8c8:	aa1c0000 	bge	7008d0 <startup-0x1f8ff730>
 8cc:	01000001 	tsteq	r0, r1
 8d0:	31050109 	tstcc	r5, r9, lsl #2
 8d4:	76000001 	strvc	r0, [r0], -r1
 8d8:	26200008 	strtcs	r0, [r0], -r8
 8dc:	01000000 	mrseq	r0, (UNDEF: 0)
 8e0:	0008f69c 	muleq	r8, ip, r6
 8e4:	6f701f00 	svcvs	0x00701f00
 8e8:	09010073 	stmdbeq	r1, {r0, r1, r4, r5, r6}
 8ec:	014f1d01 	cmpeq	pc, r1, lsl #26
 8f0:	91020000 	mrsls	r0, (UNDEF: 2)
 8f4:	521c0070 	andspl	r0, ip, #112	; 0x70
 8f8:	01000001 	tsteq	r0, r1
 8fc:	31050105 	tstcc	r5, r5, lsl #2
 900:	50000001 	andpl	r0, r0, r1
 904:	26200008 	strtcs	r0, [r0], -r8
 908:	01000000 	mrseq	r0, (UNDEF: 0)
 90c:	0009229c 	muleq	r9, ip, r2
 910:	6f701f00 	svcvs	0x00701f00
 914:	05010073 	streq	r0, [r1, #-115]	; 0xffffff8d
 918:	014f1d01 	cmpeq	pc, r1, lsl #26
 91c:	91020000 	mrsls	r0, (UNDEF: 2)
 920:	ac250070 	stcge	0, cr0, [r5], #-448	; 0xfffffe40
 924:	01000000 	mrseq	r0, (UNDEF: 0)
 928:	013105fb 	teqeq	r1, fp	; <illegal shifter operand>
 92c:	079c0000 	ldreq	r0, [ip, r0]
 930:	00b42000 	adcseq	r2, r4, r0
 934:	9c010000 	stcls	0, cr0, [r1], {-0}
 938:	000009a3 	andeq	r0, r0, r3, lsr #19
 93c:	01007826 	tsteq	r0, r6, lsr #16
 940:	013119fb 	teqeq	r1, fp	; <illegal shifter operand>
 944:	91020000 	mrsls	r0, (UNDEF: 2)
 948:	0079265c 	rsbseq	r2, r9, ip, asr r6
 94c:	3120fb01 	msrcc	LR_irq, r1
 950:	02000001 	andeq	r0, r0, #1
 954:	77275891 			; <UNDEFINED> instruction: 0x77275891
 958:	01000001 	tsteq	r0, r1
 95c:	024529fb 	subeq	r2, r5, #4112384	; 0x3ec000
 960:	91020000 	mrsls	r0, (UNDEF: 2)
 964:	03ad2854 			; <UNDEFINED> instruction: 0x03ad2854
 968:	fd010000 	stc2	0, cr0, [r1, #-0]
 96c:	00013106 	andeq	r3, r1, r6, lsl #2
 970:	6c910200 	lfmvs	f0, 4, [r1], {0}
 974:	0007ac19 	andeq	sl, r7, r9, lsl ip
 978:	00009620 	andeq	r9, r0, r0, lsr #12
 97c:	00692900 	rsbeq	r2, r9, r0, lsl #18
 980:	310afe01 	tstcc	sl, r1, lsl #28	; <UNPREDICTABLE>
 984:	02000001 	andeq	r0, r0, #1
 988:	b4196891 	ldrlt	r6, [r9], #-2193	; 0xfffff76f
 98c:	82200007 	eorhi	r0, r0, #7
 990:	29000000 	stmdbcs	r0, {}	; <UNPREDICTABLE>
 994:	ff01006a 			; <UNDEFINED> instruction: 0xff01006a
 998:	0001310b 	andeq	r3, r1, fp, lsl #2
 99c:	64910200 	ldrvs	r0, [r1], #512	; 0x200
 9a0:	2a000000 	bcs	9a8 <startup-0x1ffff658>
 9a4:	00000110 	andeq	r0, r0, r0, lsl r1
 9a8:	4006da01 	andmi	sp, r6, r1, lsl #20
 9ac:	5c200005 	stcpl	0, cr0, [r0], #-20	; 0xffffffec
 9b0:	01000002 	tsteq	r0, r2
 9b4:	000a719c 	muleq	sl, ip, r1
 9b8:	00782600 	rsbseq	r2, r8, r0, lsl #12
 9bc:	3112da01 	tstcc	r2, r1, lsl #20
 9c0:	02000001 	andeq	r0, r0, #1
 9c4:	79265491 	stmdbvc	r6!, {r0, r4, r7, sl, ip, lr}
 9c8:	19da0100 	ldmibne	sl, {r8}^
 9cc:	00000131 	andeq	r0, r0, r1, lsr r1
 9d0:	28509102 	ldmdacs	r0, {r1, r8, ip, pc}^
 9d4:	0000043b 	andeq	r0, r0, fp, lsr r4
 9d8:	3106e901 	tstcc	r6, r1, lsl #18
 9dc:	02000001 	andeq	r0, r0, #1
 9e0:	ac2b5c91 	stcge	12, cr5, [fp], #-580	; 0xfffffdbc
 9e4:	01000000 	mrseq	r0, (UNDEF: 0)
 9e8:	013120bb 	ldrheq	r2, [r1, -fp]!
 9ec:	09f40000 	ldmibeq	r4!, {}^	; <UNPREDICTABLE>
 9f0:	00180000 	andseq	r0, r8, r0
 9f4:	00057016 	andeq	r7, r5, r6, lsl r0
 9f8:	0000d220 	andeq	sp, r0, r0, lsr #4
 9fc:	000a4200 	andeq	r4, sl, r0, lsl #4
 a00:	00ac2b00 	adceq	r2, ip, r0, lsl #22
 a04:	bb010000 	bllt	40a0c <startup-0x1ffbf5f4>
 a08:	00013120 	andeq	r3, r1, r0, lsr #2
 a0c:	000a1300 	andeq	r1, sl, r0, lsl #6
 a10:	19001800 	stmdbne	r0, {fp, ip}
 a14:	200005b8 			; <UNDEFINED> instruction: 0x200005b8
 a18:	00000088 	andeq	r0, r0, r8, lsl #1
 a1c:	01006929 	tsteq	r0, r9, lsr #18
 a20:	01310be1 	teqeq	r1, r1, ror #23
 a24:	91020000 	mrsls	r0, (UNDEF: 2)
 a28:	05c0196c 	strbeq	r1, [r0, #2412]	; 0x96c
 a2c:	00742000 	rsbseq	r2, r4, r0
 a30:	6a290000 	bvs	a40a38 <startup-0x1f5bf5c8>
 a34:	0ce20100 	stfeqe	f0, [r2]
 a38:	00000131 	andeq	r0, r0, r1, lsr r1
 a3c:	00689102 	rsbeq	r9, r8, r2, lsl #2
 a40:	de190000 	cdple	0, 1, cr0, cr9, cr0, {0}
 a44:	aa200006 	bge	800a64 <startup-0x1f7ff59c>
 a48:	29000000 	stmdbcs	r0, {}	; <UNPREDICTABLE>
 a4c:	f2010069 	vhadd.s8	q0, <illegal reg q0.5>, <illegal reg q12.5>
 a50:	0001310b 	andeq	r3, r1, fp, lsl #2
 a54:	64910200 	ldrvs	r0, [r1], #512	; 0x200
 a58:	0006e619 	andeq	lr, r6, r9, lsl r6
 a5c:	00009420 	andeq	r9, r0, r0, lsr #8
 a60:	006a2900 	rsbeq	r2, sl, r0, lsl #18
 a64:	310cf301 	tstcc	ip, r1, lsl #6	; <UNPREDICTABLE>
 a68:	02000001 	andeq	r0, r0, #1
 a6c:	00006091 	muleq	r0, r1, r0
 a70:	00662c00 	rsbeq	r2, r6, r0, lsl #24
 a74:	d4010000 	strle	r0, [r1], #-0
 a78:	00052806 	andeq	r2, r5, r6, lsl #16
 a7c:	00001820 	andeq	r1, r0, r0, lsr #16
 a80:	2a9c0100 	bcs	fe700e88 <_ctype_+0xde6ff07c>
 a84:	00000026 	andeq	r0, r0, r6, lsr #32
 a88:	0c06cc01 	stceq	12, cr12, [r6], {1}
 a8c:	1c200004 	stcne	0, cr0, [r0], #-16
 a90:	01000001 	tsteq	r0, r1
 a94:	000aa79c 	muleq	sl, ip, r7
 a98:	00702600 	rsbseq	r2, r0, r0, lsl #12
 a9c:	b91ecc01 	ldmdblt	lr, {r0, sl, fp, lr, pc}
 aa0:	02000001 	andeq	r0, r0, #1
 aa4:	2d006491 	cfstrscs	mvf6, [r0, #-580]	; 0xfffffdbc
 aa8:	00000159 	andeq	r0, r0, r9, asr r1
 aac:	9e06c201 	cdpls	2, 0, cr12, cr6, cr1, {0}
 ab0:	6e200003 	cdpvs	0, 2, cr0, cr0, cr3, {0}
 ab4:	01000000 	mrseq	r0, (UNDEF: 0)
 ab8:	000b049c 	muleq	fp, ip, r4
 abc:	03a41900 			; <UNDEFINED> instruction: 0x03a41900
 ac0:	005a2000 	subseq	r2, sl, r0
 ac4:	69290000 	stmdbvs	r9!, {}	; <UNPREDICTABLE>
 ac8:	0ac40100 	beq	ff100ed0 <_ctype_+0xdf0ff0c4>
 acc:	00000131 	andeq	r0, r0, r1, lsr r1
 ad0:	19749102 	ldmdbne	r4!, {r1, r8, ip, pc}^
 ad4:	200003aa 	andcs	r0, r0, sl, lsr #7
 ad8:	00000048 	andeq	r0, r0, r8, asr #32
 adc:	01006a29 	tsteq	r0, r9, lsr #20
 ae0:	01310bc5 	teqeq	r1, r5, asr #23
 ae4:	91020000 	mrsls	r0, (UNDEF: 2)
 ae8:	03d41970 	bicseq	r1, r4, #112, 18	; 0x1c0000
 aec:	00122000 	andseq	r2, r2, r0
 af0:	7d230000 	stcvc	0, cr0, [r3, #-0]
 af4:	01000003 	tsteq	r0, r3
 af8:	013106c9 	teqeq	r1, r9, asr #13
 afc:	00180000 	andseq	r0, r8, r0
 b00:	00000000 	andeq	r0, r0, r0
 b04:	0002ae2a 	andeq	sl, r2, sl, lsr #28
 b08:	06bd0100 	ldrteq	r0, [sp], r0, lsl #2
 b0c:	2000036c 	andcs	r0, r0, ip, ror #6
 b10:	00000032 	andeq	r0, r0, r2, lsr r0
 b14:	0b289c01 	bleq	a27b20 <startup-0x1f5d84e0>
 b18:	70260000 	eorvc	r0, r6, r0
 b1c:	22bd0100 	adcscs	r0, sp, #0, 2
 b20:	000001b9 			; <UNDEFINED> instruction: 0x000001b9
 b24:	006c9102 	rsbeq	r9, ip, r2, lsl #2
 b28:	00019f2a 	andeq	r9, r1, sl, lsr #30
 b2c:	06ab0100 	strteq	r0, [fp], r0, lsl #2
 b30:	20000268 	andcs	r0, r0, r8, ror #4
 b34:	00000104 	andeq	r0, r0, r4, lsl #2
 b38:	0bdd9c01 	bleq	ff767b44 <_ctype_+0xdf765d38>
 b3c:	70260000 	eorvc	r0, r6, r0
 b40:	1fab0100 	svcne	0x00ab0100
 b44:	000001b9 			; <UNDEFINED> instruction: 0x000001b9
 b48:	284c9102 	stmdacs	ip, {r1, r8, ip, pc}^
 b4c:	000001b1 			; <UNDEFINED> instruction: 0x000001b1
 b50:	3106ae01 	tstcc	r6, r1, lsl #28
 b54:	02000001 	andeq	r0, r0, #1
 b58:	7c166c91 	ldcvc	12, cr6, [r6], {145}	; 0x91
 b5c:	84200002 	strthi	r0, [r0], #-2
 b60:	96000000 	strls	r0, [r0], -r0
 b64:	2900000b 	stmdbcs	r0, {r0, r1, r3}
 b68:	01007872 	tsteq	r0, r2, ror r8
 b6c:	013107b1 	teqeq	r1, r1	; <illegal shifter operand>
 b70:	91020000 	mrsls	r0, (UNDEF: 2)
 b74:	01ec2b60 	mvneq	r2, r0, ror #22
 b78:	b1010000 	mrslt	r0, (UNDEF: 1)
 b7c:	0001310c 	andeq	r3, r1, ip, lsl #2
 b80:	000b8700 	andeq	r8, fp, r0, lsl #14
 b84:	29001800 	stmdbcs	r0, {fp, ip}
 b88:	01007972 	tsteq	r0, r2, ror r9
 b8c:	013107b2 	teqeq	r1, r2	; <illegal shifter operand>
 b90:	91020000 	mrsls	r0, (UNDEF: 2)
 b94:	0619005c 			; <UNDEFINED> instruction: 0x0619005c
 b98:	54200003 	strtpl	r0, [r0], #-3
 b9c:	29000000 	stmdbcs	r0, {}	; <UNPREDICTABLE>
 ba0:	b9010069 	stmdblt	r1, {r0, r3, r5, r6}
 ba4:	0001310a 	andeq	r3, r1, sl, lsl #2
 ba8:	68910200 	ldmvs	r1, {r9}
 bac:	00030c19 	andeq	r0, r3, r9, lsl ip
 bb0:	00004220 	andeq	r4, r0, r0, lsr #4
 bb4:	006a2900 	rsbeq	r2, sl, r0, lsl #18
 bb8:	310bba01 	tstcc	fp, r1, lsl #20
 bbc:	02000001 	andeq	r0, r0, #1
 bc0:	12196491 	andsne	r6, r9, #-1862270976	; 0x91000000
 bc4:	30200003 	eorcc	r0, r0, r3
 bc8:	23000000 	movwcs	r0, #0
 bcc:	000000ac 	andeq	r0, r0, ip, lsr #1
 bd0:	3120bb01 			; <UNDEFINED> instruction: 0x3120bb01
 bd4:	18000001 	stmdane	r0, {r0}
 bd8:	00000000 	andeq	r0, r0, r0
 bdc:	01362e00 	teqeq	r6, r0, lsl #28
 be0:	9e010000 	cdpls	0, 0, cr0, cr1, cr0, {0}
 be4:	0001c806 	andeq	ip, r1, r6, lsl #16
 be8:	0000a020 	andeq	sl, r0, r0, lsr #32
 bec:	409c0100 	addsmi	r0, ip, r0, lsl #2
 bf0:	2800000c 	stmdacs	r0, {r2, r3}
 bf4:	000003fa 	strdeq	r0, [r0], -sl
 bf8:	3106a001 	tstcc	r6, r1
 bfc:	02000001 	andeq	r0, r0, #1
 c00:	bc286891 	stclt	8, cr6, [r8], #-580	; 0xfffffdbc
 c04:	01000000 	mrseq	r0, (UNDEF: 0)
 c08:	013106a1 	teqeq	r1, r1, lsr #13
 c0c:	91020000 	mrsls	r0, (UNDEF: 2)
 c10:	01d61974 	bicseq	r1, r6, r4, ror r9
 c14:	00722000 	rsbseq	r2, r2, r0
 c18:	78290000 	stmdavc	r9!, {}	; <UNPREDICTABLE>
 c1c:	0aa20100 	beq	fe881024 <_ctype_+0xde87f218>
 c20:	00000131 	andeq	r0, r0, r1, lsr r1
 c24:	19709102 	ldmdbne	r0!, {r1, r8, ip, pc}^
 c28:	200001dc 	ldrdcs	r0, [r0], -ip
 c2c:	00000060 	andeq	r0, r0, r0, rrx
 c30:	01007929 	tsteq	r0, r9, lsr #18
 c34:	01310ba3 	teqeq	r1, r3, lsr #23
 c38:	91020000 	mrsls	r0, (UNDEF: 2)
 c3c:	0000006c 	andeq	r0, r0, ip, rrx
 c40:	00032625 	andeq	r2, r3, r5, lsr #12
 c44:	05600100 	strbeq	r0, [r0, #-256]!	; 0xffffff00
 c48:	00000131 	andeq	r0, r0, r1, lsr r1
 c4c:	20000010 	andcs	r0, r0, r0, lsl r0
 c50:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
 c54:	0cb69c01 	ldceq	12, cr9, [r6], #4
 c58:	fb2b0000 	blx	ac0c62 <startup-0x1f53f39e>
 c5c:	01000000 	mrseq	r0, (UNDEF: 0)
 c60:	01310263 	teqeq	r1, r3, ror #4
 c64:	0c6c0000 	stcleq	0, cr0, [ip], #-0
 c68:	00180000 	andseq	r0, r8, r0
 c6c:	00001228 	andeq	r1, r0, r8, lsr #4
 c70:	06670100 	strbteq	r0, [r7], -r0, lsl #2
 c74:	00000131 	andeq	r0, r0, r1, lsr r1
 c78:	296c9102 	stmdbcs	ip!, {r1, r8, ip, pc}^
 c7c:	68010070 	stmdavs	r1, {r4, r5, r6}
 c80:	0001b910 	andeq	fp, r1, r0, lsl r9
 c84:	58910200 	ldmpl	r1, {r9}
 c88:	0002e328 	andeq	lr, r2, r8, lsr #6
 c8c:	076b0100 	strbeq	r0, [fp, -r0, lsl #2]!
 c90:	0000004d 	andeq	r0, r0, sp, asr #32
 c94:	286b9102 	stmdacs	fp!, {r1, r8, ip, pc}^
 c98:	000002e9 	andeq	r0, r0, r9, ror #5
 c9c:	4d076c01 	stcmi	12, cr6, [r7, #-4]
 ca0:	02000000 	andeq	r0, r0, #0
 ca4:	08286a91 	stmdaeq	r8!, {r0, r4, r7, r9, fp, sp, lr}
 ca8:	01000004 	tsteq	r0, r4
 cac:	0131066d 	teqeq	r1, sp, ror #12
 cb0:	91020000 	mrsls	r0, (UNDEF: 2)
 cb4:	f22f0064 	vhadd.s32	q0, <illegal reg q7.5>, q10
 cb8:	01000003 	tsteq	r0, r3
 cbc:	00000609 	andeq	r0, r0, r9, lsl #12
 cc0:	000c2000 	andeq	r2, ip, r0
 cc4:	9c010000 	stcls	0, cr0, [r1], {-0}
	...

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
   c:	10011117 	andne	r1, r1, r7, lsl r1
  10:	02000017 	andeq	r0, r0, #23
  14:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
  18:	0b3a0b0b 	bleq	e82c4c <startup-0x1f17d3b4>
  1c:	0b390b3b 	bleq	e42d10 <startup-0x1f1bd2f0>
  20:	00001301 	andeq	r1, r0, r1, lsl #6
  24:	03000d03 	movweq	r0, #3331	; 0xd03
  28:	3b0b3a08 	blcc	2ce850 <startup-0x1fd317b0>
  2c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
  30:	000b3813 	andeq	r3, fp, r3, lsl r8
  34:	000d0400 	andeq	r0, sp, r0, lsl #8
  38:	0b3a0e03 	bleq	e8384c <startup-0x1f17c7b4>
  3c:	0b390b3b 	bleq	e42d30 <startup-0x1f1bd2d0>
  40:	0b381349 	bleq	e04d6c <startup-0x1f1fb294>
  44:	24050000 	strcs	r0, [r5], #-0
  48:	3e0b0b00 	vmlacc.f64	d0, d11, d0
  4c:	000e030b 	andeq	r0, lr, fp, lsl #6
  50:	01010600 	tsteq	r1, r0, lsl #12
  54:	13011349 	movwne	r1, #4937	; 0x1349
  58:	21070000 	mrscs	r0, (UNDEF: 7)
  5c:	2f134900 	svccs	0x00134900
  60:	0800000b 	stmdaeq	r0, {r0, r1, r3}
  64:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
  68:	0b3b0b3a 	bleq	ec2d58 <startup-0x1f13d2a8>
  6c:	13490b39 	movtne	r0, #39737	; 0x9b39
  70:	34090000 	strcc	r0, [r9], #-0
  74:	3a0e0300 	bcc	380c7c <startup-0x1fc7f384>
  78:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  7c:	3f13490b 	svccc	0x0013490b
  80:	00180219 	andseq	r0, r8, r9, lsl r2
  84:	00340a00 	eorseq	r0, r4, r0, lsl #20
  88:	0b3a0803 	bleq	e8209c <startup-0x1f17df64>
  8c:	0b390b3b 	bleq	e42d80 <startup-0x1f1bd280>
  90:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
  94:	00001802 	andeq	r1, r0, r2, lsl #16
  98:	0b00240b 	bleq	90cc <startup-0x1fff6f34>
  9c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
  a0:	0c000008 	stceq	0, cr0, [r0], {8}
  a4:	13490035 	movtne	r0, #36917	; 0x9035
  a8:	150d0000 	strne	r0, [sp, #-0]
  ac:	49192701 	ldmdbmi	r9, {r0, r8, r9, sl, sp}
  b0:	00130113 	andseq	r0, r3, r3, lsl r1
  b4:	00050e00 	andeq	r0, r5, r0, lsl #28
  b8:	00001349 	andeq	r1, r0, r9, asr #6
  bc:	0b000f0f 	bleq	3d00 <startup-0x1fffc300>
  c0:	0013490b 	andseq	r4, r3, fp, lsl #18
  c4:	00341000 	eorseq	r1, r4, r0
  c8:	0b3a0e03 	bleq	e838dc <startup-0x1f17c724>
  cc:	0b39053b 	bleq	e415c0 <startup-0x1f1bea40>
  d0:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
  d4:	00001802 	andeq	r1, r0, r2, lsl #16
  d8:	03003411 	movweq	r3, #1041	; 0x411
  dc:	3b0b3a0e 	blcc	2ce91c <startup-0x1fd316e4>
  e0:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
  e4:	00180213 	andseq	r0, r8, r3, lsl r2
  e8:	012e1200 			; <UNDEFINED> instruction: 0x012e1200
  ec:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
  f0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
  f4:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
  f8:	06120111 			; <UNDEFINED> instruction: 0x06120111
  fc:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 100:	00130119 	andseq	r0, r3, r9, lsl r1
 104:	00051300 	andeq	r1, r5, r0, lsl #6
 108:	0b3a0e03 	bleq	e8391c <startup-0x1f17c6e4>
 10c:	0b39053b 	bleq	e41600 <startup-0x1f1bea00>
 110:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 114:	2e140000 	cdpcs	0, 1, cr0, cr4, cr0, {0}
 118:	03193f00 	tsteq	r9, #0, 30
 11c:	3b0b3a0e 	blcc	2ce95c <startup-0x1fd316a4>
 120:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
 124:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 128:	97184006 	ldrls	r4, [r8, -r6]
 12c:	00001942 	andeq	r1, r0, r2, asr #18
 130:	3f002e15 	svccc	0x00002e15
 134:	3a0e0319 	bcc	380da0 <startup-0x1fc7f260>
 138:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 13c:	1119270b 	tstne	r9, fp, lsl #14
 140:	40061201 	andmi	r1, r6, r1, lsl #4
 144:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 148:	0b160000 	bleq	580150 <startup-0x1fa7feb0>
 14c:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
 150:	00130106 	andseq	r0, r3, r6, lsl #2
 154:	012e1700 			; <UNDEFINED> instruction: 0x012e1700
 158:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 15c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 160:	13490b39 	movtne	r0, #39737	; 0x9b39
 164:	0000193c 	andeq	r1, r0, ip, lsr r9
 168:	00001818 	andeq	r1, r0, r8, lsl r8
 16c:	010b1900 	tsteq	fp, r0, lsl #18
 170:	06120111 			; <UNDEFINED> instruction: 0x06120111
 174:	2e1a0000 	cdpcs	0, 1, cr0, cr10, cr0, {0}
 178:	03193f00 	tsteq	r9, #0, 30
 17c:	3b0b3a0e 	blcc	2ce9bc <startup-0x1fd31644>
 180:	110b3905 	tstne	fp, r5, lsl #18
 184:	40061201 	andmi	r1, r6, r1, lsl #4
 188:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 18c:	2e1b0000 	cdpcs	0, 1, cr0, cr11, cr0, {0}
 190:	03193f00 	tsteq	r9, #0, 30
 194:	3b0b3a0e 	blcc	2ce9d4 <startup-0x1fd3162c>
 198:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
 19c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 1a0:	97184006 	ldrls	r4, [r8, -r6]
 1a4:	00001942 	andeq	r1, r0, r2, asr #18
 1a8:	3f012e1c 	svccc	0x00012e1c
 1ac:	3a0e0319 	bcc	380e18 <startup-0x1fc7f1e8>
 1b0:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 1b4:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 1b8:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 1bc:	97184006 	ldrls	r4, [r8, -r6]
 1c0:	13011942 	movwne	r1, #6466	; 0x1942
 1c4:	341d0000 	ldrcc	r0, [sp], #-0
 1c8:	3a080300 	bcc	200dd0 <startup-0x1fdff230>
 1cc:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 1d0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 1d4:	1e000018 	mcrne	0, 0, r0, cr0, cr8, {0}
 1d8:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 1dc:	0b3a0e03 	bleq	e839f0 <startup-0x1f17c610>
 1e0:	0b39053b 	bleq	e416d4 <startup-0x1f1be92c>
 1e4:	01111927 	tsteq	r1, r7, lsr #18
 1e8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 1ec:	01194297 			; <UNDEFINED> instruction: 0x01194297
 1f0:	1f000013 	svcne	0x00000013
 1f4:	08030005 	stmdaeq	r3, {r0, r2}
 1f8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 1fc:	13490b39 	movtne	r0, #39737	; 0x9b39
 200:	00001802 	andeq	r1, r0, r2, lsl #16
 204:	3f012e20 	svccc	0x00012e20
 208:	3a0e0319 	bcc	380e74 <startup-0x1fc7f18c>
 20c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 210:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 214:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 218:	96184006 	ldrls	r4, [r8], -r6
 21c:	13011942 	movwne	r1, #6466	; 0x1942
 220:	2e210000 	cdpcs	0, 2, cr0, cr1, cr0, {0}
 224:	03193f01 	tsteq	r9, #1, 30
 228:	3b0b3a0e 	blcc	2cea68 <startup-0x1fd31598>
 22c:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
 230:	01193c13 	tsteq	r9, r3, lsl ip
 234:	22000013 	andcs	r0, r0, #19
 238:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 23c:	0b3a0e03 	bleq	e83a50 <startup-0x1f17c5b0>
 240:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 244:	1301193c 	movwne	r1, #6460	; 0x193c
 248:	2e230000 	cdpcs	0, 2, cr0, cr3, cr0, {0}
 24c:	03193f01 	tsteq	r9, #1, 30
 250:	3b0b3a0e 	blcc	2cea90 <startup-0x1fd31570>
 254:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 258:	00193c13 	andseq	r3, r9, r3, lsl ip
 25c:	010b2400 	tsteq	fp, r0, lsl #8
 260:	00001301 	andeq	r1, r0, r1, lsl #6
 264:	3f012e25 	svccc	0x00012e25
 268:	3a0e0319 	bcc	380ed4 <startup-0x1fc7f12c>
 26c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 270:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 274:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 278:	96184006 	ldrls	r4, [r8], -r6
 27c:	13011942 	movwne	r1, #6466	; 0x1942
 280:	05260000 	streq	r0, [r6, #-0]!
 284:	3a080300 	bcc	200e8c <startup-0x1fdff174>
 288:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 28c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 290:	27000018 	smladcs	r0, r8, r0, r0
 294:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 298:	0b3b0b3a 	bleq	ec2f88 <startup-0x1f13d078>
 29c:	13490b39 	movtne	r0, #39737	; 0x9b39
 2a0:	00001802 	andeq	r1, r0, r2, lsl #16
 2a4:	03003428 	movweq	r3, #1064	; 0x428
 2a8:	3b0b3a0e 	blcc	2ceae8 <startup-0x1fd31518>
 2ac:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 2b0:	00180213 	andseq	r0, r8, r3, lsl r2
 2b4:	00342900 	eorseq	r2, r4, r0, lsl #18
 2b8:	0b3a0803 	bleq	e822cc <startup-0x1f17dd34>
 2bc:	0b390b3b 	bleq	e42fb0 <startup-0x1f1bd050>
 2c0:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 2c4:	2e2a0000 	cdpcs	0, 2, cr0, cr10, cr0, {0}
 2c8:	03193f01 	tsteq	r9, #1, 30
 2cc:	3b0b3a0e 	blcc	2ceb0c <startup-0x1fd314f4>
 2d0:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 2d4:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 2d8:	96184006 	ldrls	r4, [r8], -r6
 2dc:	13011942 	movwne	r1, #6466	; 0x1942
 2e0:	2e2b0000 	cdpcs	0, 2, cr0, cr11, cr0, {0}
 2e4:	03193f01 	tsteq	r9, #1, 30
 2e8:	3b0b3a0e 	blcc	2ceb28 <startup-0x1fd314d8>
 2ec:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 2f0:	01193c13 	tsteq	r9, r3, lsl ip
 2f4:	2c000013 	stccs	0, cr0, [r0], {19}
 2f8:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 2fc:	0b3a0e03 	bleq	e83b10 <startup-0x1f17c4f0>
 300:	0b390b3b 	bleq	e42ff4 <startup-0x1f1bd00c>
 304:	06120111 			; <UNDEFINED> instruction: 0x06120111
 308:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 30c:	2d000019 	stccs	0, cr0, [r0, #-100]	; 0xffffff9c
 310:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 314:	0b3a0e03 	bleq	e83b28 <startup-0x1f17c4d8>
 318:	0b390b3b 	bleq	e4300c <startup-0x1f1bcff4>
 31c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 320:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 324:	00130119 	andseq	r0, r3, r9, lsl r1
 328:	012e2e00 			; <UNDEFINED> instruction: 0x012e2e00
 32c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 330:	0b3b0b3a 	bleq	ec3020 <startup-0x1f13cfe0>
 334:	01110b39 	tsteq	r1, r9, lsr fp
 338:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 33c:	01194297 			; <UNDEFINED> instruction: 0x01194297
 340:	2f000013 	svccs	0x00000013
 344:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 348:	0b3a0e03 	bleq	e83b5c <startup-0x1f17c4a4>
 34c:	0b390b3b 	bleq	e43040 <startup-0x1f1bcfc0>
 350:	01111927 	tsteq	r1, r7, lsr #18
 354:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 358:	00194297 	mulseq	r9, r7, r2
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	0000107c 	andeq	r1, r0, ip, ror r0
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000010 	andcs	r0, r0, r0, lsl r0
   4:	2000108c 	andcs	r1, r0, ip, lsl #1
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	000007ad 	andeq	r0, r0, sp, lsr #15
   4:	00700003 	rsbseq	r0, r0, r3
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	43010000 	movwmi	r0, #4096	; 0x1000
  1c:	68432f3a 	stmdavs	r3, {r1, r3, r4, r5, r8, r9, sl, fp, sp}^
  20:	656d6c61 	strbvs	r6, [sp, #-3169]!	; 0xfffff39f
  24:	592f7372 	stmdbpl	pc!, {r1, r4, r5, r6, r8, r9, ip, sp, lr}	; <UNPREDICTABLE>
  28:	31726165 	cmncc	r2, r5, ror #2
  2c:	34504c2f 	ldrbcc	r4, [r0], #-3119	; 0xfffff3d1
  30:	504f4d2f 	subpl	r4, pc, pc, lsr #26
  34:	504f4d2f 	subpl	r4, pc, pc, lsr #26
  38:	6e694d2f 	cdpvs	13, 6, cr4, cr9, cr15, {1}
  3c:	65775365 	ldrbvs	r5, [r7, #-869]!	; 0xfffffc9b
  40:	72657065 	rsbvc	r7, r5, #101	; 0x65
  44:	00004447 	andeq	r4, r0, r7, asr #8
  48:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
  4c:	2e707574 	mrccs	5, 3, r7, cr0, cr4, {3}
  50:	00010063 	andeq	r0, r1, r3, rrx
  54:	632f2e00 			; <UNDEFINED> instruction: 0x632f2e00
  58:	73726168 	cmnvc	r2, #104, 2
  5c:	726f665f 	rsbvc	r6, pc, #99614720	; 0x5f00000
  60:	7369645f 	cmnvc	r9, #1593835520	; 0x5f000000
  64:	00682e70 	rsbeq	r2, r8, r0, ror lr
  68:	3c000000 	stccc	0, cr0, [r0], {-0}
  6c:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
  70:	6e692d74 	mcrvs	13, 3, r2, cr9, cr4, {3}
  74:	0000003e 	andeq	r0, r0, lr, lsr r0
  78:	01050000 	mrseq	r0, (UNDEF: 5)
  7c:	00020500 	andeq	r0, r2, r0, lsl #10
  80:	03200000 	nopeq	{0}	; <UNPREDICTABLE>
  84:	21130109 	tstcs	r3, r9, lsl #2
  88:	02212f21 	eoreq	r2, r1, #33, 30	; 0x84
  8c:	01010003 	tsteq	r1, r3
  90:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
  94:	00001002 	andeq	r1, r0, r2
  98:	00e00320 	rsceq	r0, r0, r0, lsr #6
  9c:	3d020501 	cfstr32cc	mvfx0, [r2, #-4]
  a0:	2f0c052f 	svccs	0x000c052f
  a4:	3d02053d 	cfstr32cc	mvfx0, [r2, #-244]	; 0xffffff0c
  a8:	304b0605 	subcc	r0, fp, r5, lsl #12
  ac:	02053f4b 	andeq	r3, r5, #300	; 0x12c
  b0:	0a05912f 	beq	164574 <startup-0x1fe9ba8c>
  b4:	3d0705c9 	cfstr32cc	mvfx0, [r7, #-804]	; 0xfffffcdc
  b8:	05220305 	streq	r0, [r2, #-773]!	; 0xfffffcfb
  bc:	05052f0b 	streq	r2, [r5, #-3851]	; 0xfffff0f5
  c0:	68060567 	stmdavs	r6, {r0, r1, r2, r5, r6, r8, sl}
  c4:	053e0b05 	ldreq	r0, [lr, #-2821]!	; 0xfffff4fb
  c8:	0605590e 	streq	r5, [r5], -lr, lsl #18
  cc:	590e0530 	stmdbpl	lr, {r4, r5, r8, sl}
  d0:	052f0605 	streq	r0, [pc, #-1541]!	; fffffad3 <_ctype_+0xdfffdcc7>
  d4:	0405590d 	streq	r5, [r5], #-2317	; 0xfffff6f3
  d8:	af080559 	svcge	0x00080559
  dc:	053e0605 	ldreq	r0, [lr, #-1541]!	; 0xfffff9fb
  e0:	06057512 			; <UNDEFINED> instruction: 0x06057512
  e4:	22911f32 	addscs	r1, r1, #50, 30	; 0xc8
  e8:	052f2275 	streq	r2, [pc, #-629]!	; fffffe7b <_ctype_+0xdfffe06f>
  ec:	16052208 	strne	r2, [r5], -r8, lsl #4
  f0:	01040200 	mrseq	r0, R12_usr
  f4:	00260558 	eoreq	r0, r6, r8, asr r5
  f8:	4a020402 	bmi	81108 <startup-0x1ff7eef8>
  fc:	02003605 	andeq	r3, r0, #5242880	; 0x500000
 100:	054a0304 	strbeq	r0, [sl, #-772]	; 0xfffffcfc
 104:	06054b0a 	streq	r4, [r5], -sl, lsl #22
 108:	230305bb 	movwcs	r0, #13755	; 0x35bb
 10c:	052b0605 	streq	r0, [fp, #-1541]!	; 0xfffff9fb
 110:	1d052405 	cfstrsne	mvf2, [r5, #-20]	; 0xffffffec
 114:	01040200 	mrseq	r0, R12_usr
 118:	00300558 	eorseq	r0, r0, r8, asr r5
 11c:	58020402 	stmdapl	r2, {r1, sl}
 120:	02004205 	andeq	r4, r0, #1342177280	; 0x50000000
 124:	054a0304 	strbeq	r0, [sl, #-772]	; 0xfffffcfc
 128:	04020054 	streq	r0, [r2], #-84	; 0xffffffac
 12c:	0c054a04 			; <UNDEFINED> instruction: 0x0c054a04
 130:	0308054b 	movweq	r0, #34123	; 0x854b
 134:	07053c58 	smlsdeq	r5, r8, ip, r3
 138:	0309052e 	movweq	r0, #38190	; 0x952e
 13c:	01053c2b 	tsteq	r5, fp, lsr #24
 140:	0605f421 	streq	pc, [r5], -r1, lsr #8
 144:	0a052f3d 	beq	14be40 <startup-0x1feb41c0>
 148:	2e02052f 	cfsh32cs	mvfx0, mvfx2, #31
 14c:	05210b05 	streq	r0, [r1, #-2821]!	; 0xfffff4fb
 150:	12052e03 	andne	r2, r5, #3, 28	; 0x30
 154:	f2060522 	vrshl.s8	d0, d18, d6
 158:	02002805 	andeq	r2, r0, #327680	; 0x50000
 15c:	052e0104 	streq	r0, [lr, #-260]!	; 0xfffffefc
 160:	0402001a 	streq	r0, [r2], #-26	; 0xffffffe6
 164:	1205f201 	andne	pc, r5, #268435456	; 0x10000000
 168:	001e052f 	andseq	r0, lr, pc, lsr #10
 16c:	39020402 	stmdbcc	r2, {r1, sl}
 170:	02000305 	andeq	r0, r0, #335544320	; 0x14000000
 174:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 178:	0402001d 	streq	r0, [r2], #-29	; 0xffffffe3
 17c:	02053b02 	andeq	r3, r5, #2048	; 0x800
 180:	01040200 	mrseq	r0, R12_usr
 184:	4204053c 	andmi	r0, r4, #60, 10	; 0xf000000
 188:	054b0b05 	strbeq	r0, [fp, #-2821]	; 0xfffff4fb
 18c:	05923d01 	ldreq	r3, [r2, #3329]	; 0xd01
 190:	07057606 	streq	r7, [r5, -r6, lsl #12]
 194:	220c052f 	andcs	r0, ip, #197132288	; 0xbc00000
 198:	053c0705 	ldreq	r0, [ip, #-1797]!	; 0xfffff8fb
 19c:	0705670c 	streq	r6, [r5, -ip, lsl #14]
 1a0:	6713053c 			; <UNDEFINED> instruction: 0x6713053c
 1a4:	05f20505 	ldrbeq	r0, [r2, #1285]!	; 0x505
 1a8:	04020029 	streq	r0, [r2], #-41	; 0xffffffd7
 1ac:	1e052e01 	cdpne	14, 0, cr2, cr5, cr1, {0}
 1b0:	01040200 	mrseq	r0, R12_usr
 1b4:	0036052e 	eorseq	r0, r6, lr, lsr #10
 1b8:	3c020402 	cfstrscc	mvf0, [r2], {2}
 1bc:	02002c05 	andeq	r2, r0, #1280	; 0x500
 1c0:	052e0204 	streq	r0, [lr, #-516]!	; 0xfffffdfc
 1c4:	0f053e17 	svceq	0x00053e17
 1c8:	07051308 	streq	r1, [r5, -r8, lsl #6]
 1cc:	053c7903 	ldreq	r7, [ip, #-2307]!	; 0xfffff6fd
 1d0:	3c0a030a 	stccc	3, cr0, [sl], {10}
 1d4:	052e0205 	streq	r0, [lr, #-517]!	; 0xfffffdfb
 1d8:	0305210b 	movweq	r2, #20747	; 0x510b
 1dc:	0020052e 	eoreq	r0, r0, lr, lsr #10
 1e0:	21030402 	tstcs	r3, r2, lsl #8
 1e4:	02001e05 	andeq	r1, r0, #5, 28	; 0x50
 1e8:	00820304 	addeq	r0, r2, r4, lsl #6
 1ec:	f1030402 			; <UNDEFINED> instruction: 0xf1030402
 1f0:	02000305 	andeq	r0, r0, #335544320	; 0x14000000
 1f4:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 1f8:	0402001b 	streq	r0, [r2], #-27	; 0xffffffe5
 1fc:	02053b02 	andeq	r3, r5, #2048	; 0x800
 200:	01040200 	mrseq	r0, R12_usr
 204:	3f01053c 	svccc	0x0001053c
 208:	75020592 	strvc	r0, [r2, #-1426]	; 0xfffffa6e
 20c:	83010567 	movwhi	r0, #5479	; 0x1567
 210:	3d0a054c 	cfstr32cc	mvfx0, [sl, #-304]	; 0xfffffed0
 214:	052e0205 	streq	r0, [lr, #-517]!	; 0xfffffdfb
 218:	0305210b 	movweq	r2, #20747	; 0x510b
 21c:	2112052e 	tstcs	r2, lr, lsr #10
 220:	30f20605 	rscscc	r0, r2, r5, lsl #12
 224:	001e0567 	andseq	r0, lr, r7, ror #10
 228:	38020402 	stmdacc	r2, {r1, sl}
 22c:	02000305 	andeq	r0, r0, #335544320	; 0x14000000
 230:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 234:	0402001b 	streq	r0, [r2], #-27	; 0xffffffe5
 238:	02053b02 	andeq	r3, r5, #2048	; 0x800
 23c:	01040200 	mrseq	r0, R12_usr
 240:	4301053c 	movwmi	r0, #5436	; 0x153c
 244:	750c0576 	strvc	r0, [ip, #-1398]	; 0xfffffa8a
 248:	052e1105 	streq	r1, [lr, #-261]!	; 0xfffffefb
 24c:	04052e14 	streq	r2, [r5], #-3604	; 0xfffff1ec
 250:	302405d6 	ldrdcc	r0, [r4], -r6	; <UNPREDICTABLE>
 254:	052e2905 	streq	r2, [lr, #-2309]!	; 0xfffff6fb
 258:	35052e2c 	strcc	r2, [r5, #-3628]	; 0xfffff1d4
 25c:	200905d6 	ldrdcs	r0, [r9], -r6
 260:	052e0e05 	streq	r0, [lr, #-3589]!	; 0xfffff1fb
 264:	1a052e3a 	bne	14bb54 <startup-0x1feb44ac>
 268:	1f05d790 	svcne	0x0005d790
 26c:	2e22052e 	cfsh64cs	mvdx0, mvdx2, #30
 270:	05d64005 	ldrbeq	r4, [r6, #5]
 274:	0402002e 	streq	r0, [r2], #-46	; 0xffffffd2
 278:	40052e01 	andmi	r2, r5, r1, lsl #28
 27c:	01040200 	mrseq	r0, R12_usr
 280:	0043052e 	subeq	r0, r3, lr, lsr #10
 284:	2e020402 	cdpcs	4, 0, cr0, cr2, cr2, {0}
 288:	02004005 	andeq	r4, r0, #5
 28c:	052e0204 	streq	r0, [lr, #-516]!	; 0xfffffdfc
 290:	04020011 	streq	r0, [r2], #-17	; 0xffffffef
 294:	02002004 	andeq	r2, r0, #4
 298:	052f0404 	streq	r0, [pc, #-1028]!	; fffffe9c <_ctype_+0xdfffe090>
 29c:	04020016 	streq	r0, [r2], #-22	; 0xffffffea
 2a0:	02052e04 	andeq	r2, r5, #4, 28	; 0x40
 2a4:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
 2a8:	0803052e 	stmdaeq	r3, {r1, r2, r3, r5, r8, sl}
 2ac:	2401059b 	strcs	r0, [r1], #-1435	; 0xfffffa65
 2b0:	2f020584 	svccs	0x00020584
 2b4:	052f0a05 	streq	r0, [pc, #-2565]!	; fffff8b7 <_ctype_+0xdfffdaab>
 2b8:	055b3d01 	ldrbeq	r3, [fp, #-3329]	; 0xfffff2ff
 2bc:	04055910 	streq	r5, [r5], #-2320	; 0xfffff6f0
 2c0:	3f1005f2 	svccc	0x001005f2
 2c4:	05f20405 	ldrbeq	r0, [r2, #1029]!	; 0x405
 2c8:	0402001c 	streq	r0, [r2], #-28	; 0xffffffe4
 2cc:	3f052e01 	svccc	0x00052e01
 2d0:	01040200 	mrseq	r0, R12_usr
 2d4:	00180582 	andseq	r0, r8, r2, lsl #11
 2d8:	82010402 	andhi	r0, r1, #33554432	; 0x2000000
 2dc:	05300b05 	ldreq	r0, [r0, #-2821]!	; 0xfffff4fb
 2e0:	0c053c03 	stceq	12, cr3, [r5], {3}
 2e4:	3c040521 	cfstr32cc	mvfx0, [r4], {33}	; 0x21
 2e8:	05210f05 	streq	r0, [r1, #-3845]!	; 0xfffff0fb
 2ec:	17053c14 	smladne	r5, r4, ip, r3
 2f0:	d607053c 			; <UNDEFINED> instruction: 0xd607053c
 2f4:	02002705 	andeq	r2, r0, #1310720	; 0x140000
 2f8:	052e0104 	streq	r0, [lr, #-260]!	; 0xfffffefc
 2fc:	04020024 	streq	r0, [r2], #-36	; 0xffffffdc
 300:	3a059e01 	bcc	167b0c <startup-0x1fe984f4>
 304:	02040200 	andeq	r0, r4, #0, 4
 308:	003d0520 	eorseq	r0, sp, r0, lsr #10
 30c:	3c030402 	cfstrscc	mvf0, [r3], {2}
 310:	053e0605 	ldreq	r0, [lr, #-1541]!	; 0xfffff9fb
 314:	0402001d 	streq	r0, [r2], #-29	; 0xffffffe3
 318:	04058d02 	streq	r8, [r5], #-3330	; 0xfffff2fe
 31c:	01040200 	mrseq	r0, R12_usr
 320:	001b053c 	andseq	r0, fp, ip, lsr r5
 324:	3b020402 	blcc	81334 <startup-0x1ff7eccc>
 328:	02000305 	andeq	r0, r0, #335544320	; 0x14000000
 32c:	423c0104 	eorsmi	r0, ip, #4, 2
 330:	05220f05 	streq	r0, [r2, #-3845]!	; 0xfffff0fb
 334:	04059110 	streq	r9, [r5], #-272	; 0xfffffef0
 338:	300305f2 	strdcc	r0, [r3], -r2
 33c:	2215052f 	andscs	r0, r5, #197132288	; 0xbc00000
 340:	13080205 	movwne	r0, #33285	; 0x8205
 344:	ad080405 	cfstrsge	mvf0, [r8, #-20]	; 0xffffffec
 348:	053d0b05 	ldreq	r0, [sp, #-2821]!	; 0xfffff4fb
 34c:	0c053c03 	stceq	12, cr3, [r5], {3}
 350:	3c040521 	cfstr32cc	mvfx0, [r4], {33}	; 0x21
 354:	05210805 	streq	r0, [r1, #-2053]!	; 0xfffff7fb
 358:	25059e07 	strcs	r9, [r5, #-3591]	; 0xfffff1f9
 35c:	01040200 	mrseq	r0, R12_usr
 360:	002a0520 	eoreq	r0, sl, r0, lsr #10
 364:	3c010402 	cfstrscc	mvf0, [r1], {2}
 368:	02002d05 	andeq	r2, r0, #320	; 0x140
 36c:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 370:	0402001b 	streq	r0, [r2], #-27	; 0xffffffe5
 374:	4405d601 	strmi	sp, [r5], #-1537	; 0xfffff9ff
 378:	02040200 	andeq	r0, r4, #0, 4
 37c:	0049052e 	subeq	r0, r9, lr, lsr #10
 380:	3c020402 	cfstrscc	mvf0, [r2], {2}
 384:	02004c05 	andeq	r4, r0, #1280	; 0x500
 388:	053c0204 	ldreq	r0, [ip, #-516]!	; 0xfffffdfc
 38c:	0402003a 	streq	r0, [r2], #-58	; 0xffffffc6
 390:	0605d602 	streq	sp, [r5], -r2, lsl #12
 394:	001d0531 	andseq	r0, sp, r1, lsr r5
 398:	8c020402 	cfstrshi	mvf0, [r2], {2}
 39c:	02000405 	andeq	r0, r0, #83886080	; 0x5000000
 3a0:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 3a4:	0402001c 	streq	r0, [r2], #-28	; 0xffffffe4
 3a8:	03053b02 	movweq	r3, #23298	; 0x5b02
 3ac:	01040200 	mrseq	r0, R12_usr
 3b0:	4a6b033c 	bmi	1ac10a8 <startup-0x1e53ef58>
 3b4:	1d030105 	stfnes	f0, [r3, #-20]	; 0xffffffec
 3b8:	06059220 	streq	r9, [r5], -r0, lsr #4
 3bc:	2f0a0567 	svccs	0x000a0567
 3c0:	053c0205 	ldreq	r0, [ip, #-517]!	; 0xfffffdfb
 3c4:	0305210b 	movweq	r2, #20747	; 0x510b
 3c8:	2107053c 	tstcs	r7, ip, lsr r5
 3cc:	059e0605 	ldreq	r0, [lr, #1541]	; 0x605
 3d0:	19052114 	stmdbne	r5, {r2, r4, r8, sp}
 3d4:	3c08053c 	cfstr32cc	mvfx0, [r8], {60}	; 0x3c
 3d8:	9e080705 	cdpls	7, 0, cr0, cr8, cr5, {0}
 3dc:	02002305 	andeq	r2, r0, #335544320	; 0x14000000
 3e0:	052e0104 	streq	r0, [lr, #-260]!	; 0xfffffefc
 3e4:	04020026 	streq	r0, [r2], #-38	; 0xffffffda
 3e8:	0b053c02 	bleq	14f3f8 <startup-0x1feb0c08>
 3ec:	001c053d 	andseq	r0, ip, sp, lsr r5
 3f0:	39020402 	stmdbcc	r2, {r1, sl}
 3f4:	02000305 	andeq	r0, r0, #335544320	; 0x14000000
 3f8:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 3fc:	0402001b 	streq	r0, [r2], #-27	; 0xffffffe5
 400:	02053b02 	andeq	r3, r5, #2048	; 0x800
 404:	01040200 	mrseq	r0, R12_usr
 408:	4109053c 	tstmi	r9, ip, lsr r5
 40c:	68210105 	stmdavs	r1!, {r0, r2, r8}
 410:	059f0c05 	ldreq	r0, [pc, #3077]	; 101d <startup-0x1fffefe3>
 414:	05683d01 	strbeq	r3, [r8, #-3329]!	; 0xfffff2ff
 418:	01059f0c 	tsteq	r5, ip, lsl #30
 41c:	11056a3d 	tstne	r5, sp, lsr sl
 420:	2e160584 	cdpcs	5, 1, cr0, cr6, cr4, {4}
 424:	052e0205 	streq	r0, [lr, #-517]!	; 0xfffffdfb
 428:	0592080a 	ldreq	r0, [r2, #2058]	; 0x80a
 42c:	1405850f 	strne	r8, [r5], #-1295	; 0xfffffaf1
 430:	2e06052e 	cfsh32cs	mvfx0, mvfx6, #30
 434:	052f0f05 	streq	r0, [pc, #-3845]!	; fffff537 <_ctype_+0xdfffd72b>
 438:	14052e1c 	strne	r2, [r5], #-3612	; 0xfffff1e4
 43c:	2006052e 	andcs	r0, r6, lr, lsr #10
 440:	052f0505 	streq	r0, [pc, #-1285]!	; ffffff43 <_ctype_+0xdfffe137>
 444:	07057404 	streq	r7, [r5, -r4, lsl #8]
 448:	02053d22 	andeq	r3, r5, #2176	; 0x880
 44c:	0905833e 	stmdbeq	r5, {r1, r2, r3, r4, r5, r8, r9, pc}
 450:	4b01053d 	blmi	4194c <startup-0x1ffbe6b4>
 454:	59040569 	stmdbpl	r4, {r0, r3, r5, r6, r8, sl}
 458:	02000b05 	andeq	r0, r0, #5120	; 0x1400
 45c:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 460:	09053d0a 	stmdbeq	r5, {r1, r3, r8, sl, fp, ip, sp}
 464:	0010052f 	andseq	r0, r0, pc, lsr #10
 468:	3c010402 	cfstrscc	mvf0, [r1], {2}
 46c:	303d0a05 	eorscc	r0, sp, r5, lsl #20
 470:	4c210105 	stfmis	f0, [r1], #-20	; 0xffffffec
 474:	059f0205 	ldreq	r0, [pc, #517]	; 681 <startup-0x1ffff97f>
 478:	04059106 	streq	r9, [r5], #-262	; 0xfffffefa
 47c:	3008053c 	andcc	r0, r8, ip, lsr r5
 480:	05671205 	strbeq	r1, [r7, #-517]!	; 0xfffffdfb
 484:	03052e10 	movweq	r2, #24080	; 0x5e10
 488:	0301052e 	movweq	r0, #5422	; 0x152e
 48c:	0b053c0d 	bleq	14f4c8 <startup-0x1feb0b38>
 490:	05207903 	streq	r7, [r0, #-2307]!	; 0xfffff6fd
 494:	03053c09 	movweq	r3, #23561	; 0x5c09
 498:	41010530 	tstmi	r1, r0, lsr r5
 49c:	051e0305 	ldreq	r0, [lr, #-773]	; 0xfffffcfb
 4a0:	05ae4c01 	streq	r4, [lr, #3073]!	; 0xc01
 4a4:	05056707 	streq	r6, [r5, #-1799]	; 0xfffff8f9
 4a8:	30020566 	andcc	r0, r2, r6, ror #10
 4ac:	3dcb0905 	vstrcc.16	s1, [fp, #10]	; <UNPREDICTABLE>
 4b0:	054b0405 	strbeq	r0, [fp, #-1029]	; 0xfffffbfb
 4b4:	053d2209 	ldreq	r2, [sp, #-521]!	; 0xfffffdf7
 4b8:	09053d04 	stmdbeq	r5, {r2, r8, sl, fp, ip, sp}
 4bc:	04054b22 	streq	r4, [r5], #-2850	; 0xfffff4de
 4c0:	2209053d 	andcs	r0, r9, #255852544	; 0xf400000
 4c4:	3d04053d 	cfstr32cc	mvfx0, [r4, #-244]	; 0xffffff0c
 4c8:	05220905 	streq	r0, [r2, #-2309]!	; 0xfffff6fb
 4cc:	05692101 	strbeq	r2, [r9, #-257]!	; 0xfffffeff
 4d0:	02054b0a 	andeq	r4, r5, #10240	; 0x2800
 4d4:	220b052e 	andcs	r0, fp, #192937984	; 0xb800000
 4d8:	052e0305 	streq	r0, [lr, #-773]!	; 0xfffffcfb
 4dc:	04020005 	streq	r0, [r2], #-5
 4e0:	0e052203 	cdpeq	2, 0, cr2, cr5, cr3, {0}
 4e4:	03040200 	movweq	r0, #16896	; 0x4200
 4e8:	00050582 	andeq	r0, r5, r2, lsl #11
 4ec:	75030402 	strvc	r0, [r3, #-1026]	; 0xfffffbfe
 4f0:	02000e05 	andeq	r0, r0, #5, 28	; 0x50
 4f4:	05820304 	streq	r0, [r2, #772]	; 0x304
 4f8:	0402001e 	streq	r0, [r2], #-30	; 0xffffffe2
 4fc:	03058d03 	movweq	r8, #23811	; 0x5d03
 500:	01040200 	mrseq	r0, R12_usr
 504:	001d053c 	andseq	r0, sp, ip, lsr r5
 508:	3a020402 	bcc	81518 <startup-0x1ff7eae8>
 50c:	02000205 	andeq	r0, r0, #1342177280	; 0x50000000
 510:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 514:	055c4401 	ldrbeq	r4, [ip, #-1025]	; 0xfffffbff
 518:	053d5909 	ldreq	r5, [sp, #-2313]!	; 0xfffff6f7
 51c:	05853d01 	streq	r3, [r5, #3329]	; 0xd01
 520:	0c056802 	stceq	8, cr6, [r5], {2}
 524:	910305a1 	smlatbls	r3, r1, r5, r0
 528:	05220c05 	streq	r0, [r2, #-3077]!	; 0xfffff3fb
 52c:	0c059103 	stfeqd	f1, [r5], {3}
 530:	91030522 	tstls	r3, r2, lsr #10
 534:	05220c05 	streq	r0, [r2, #-3077]!	; 0xfffff3fb
 538:	0c059103 	stfeqd	f1, [r5], {3}
 53c:	91030522 	tstls	r3, r2, lsr #10
 540:	05220c05 	streq	r0, [r2, #-3077]!	; 0xfffff3fb
 544:	0c059103 	stfeqd	f1, [r5], {3}
 548:	91030522 	tstls	r3, r2, lsr #10
 54c:	05220c05 	streq	r0, [r2, #-3077]!	; 0xfffff3fb
 550:	0c059103 	stfeqd	f1, [r5], {3}
 554:	91030522 	tstls	r3, r2, lsr #10
 558:	05220205 	streq	r0, [r2, #-517]!	; 0xfffffdfb
 55c:	08910801 	ldmeq	r1, {r0, fp}
 560:	9f0a05af 	svcls	0x000a05af
 564:	052e0205 	streq	r0, [lr, #-517]!	; 0xfffffdfb
 568:	0305210b 	movweq	r2, #20747	; 0x510b
 56c:	2113052e 	tstcs	r3, lr, lsr #10
 570:	05900505 	ldreq	r0, [r0, #1285]	; 0x505
 574:	05a02f04 	streq	r2, [r0, #3844]!	; 0xf04
 578:	0402001f 	streq	r0, [r2], #-31	; 0xffffffe1
 57c:	03058c02 	movweq	r8, #23554	; 0x5c02
 580:	01040200 	mrseq	r0, R12_usr
 584:	001e053c 	andseq	r0, lr, ip, lsr r5
 588:	3b020402 	blcc	81598 <startup-0x1ff7ea68>
 58c:	02000205 	andeq	r0, r0, #1342177280	; 0x50000000
 590:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 594:	05874201 	streq	r4, [r7, #513]	; 0x201
 598:	05132102 	ldreq	r2, [r3, #-258]	; 0xfffffefe
 59c:	05232101 	streq	r2, [r3, #-257]!	; 0xfffffeff
 5a0:	05132102 	ldreq	r2, [r3, #-258]	; 0xfffffefe
 5a4:	05232101 	streq	r2, [r3, #-257]!	; 0xfffffeff
 5a8:	05132102 	ldreq	r2, [r3, #-258]	; 0xfffffefe
 5ac:	05232101 	streq	r2, [r3, #-257]!	; 0xfffffeff
 5b0:	05132102 	ldreq	r2, [r3, #-258]	; 0xfffffefe
 5b4:	05232101 	streq	r2, [r3, #-257]!	; 0xfffffeff
 5b8:	0e052f02 	cdpeq	15, 0, cr2, cr5, cr2, {0}
 5bc:	3d020520 	cfstr32cc	mvfx0, [r2, #-128]	; 0xffffff80
 5c0:	05200f05 	streq	r0, [r0, #-3845]!	; 0xfffff0fb
 5c4:	0e052f02 	cdpeq	15, 0, cr2, cr5, cr2, {0}
 5c8:	3d020520 	cfstr32cc	mvfx0, [r2, #-128]	; 0xffffff80
 5cc:	05201005 	streq	r1, [r0, #-5]!
 5d0:	2f2f2f02 	svccs	0x002f2f02
 5d4:	de2f0105 	suflee	f0, f7, f5
 5d8:	053d1005 	ldreq	r1, [sp, #-5]!
 5dc:	0205670a 	andeq	r6, r5, #2621440	; 0x280000
 5e0:	2203052e 	andcs	r0, r3, #192937984	; 0xb800000
 5e4:	05590d05 	ldrbeq	r0, [r9, #-3333]	; 0xfffff2fb
 5e8:	04054b05 	streq	r4, [r5], #-2821	; 0xfffff4fb
 5ec:	3d17053e 	cfldr32cc	mvfx0, [r7, #-248]	; 0xffffff08
 5f0:	052e2005 	streq	r2, [lr, #-5]!
 5f4:	13052e1a 	movwne	r2, #24090	; 0x5e1a
 5f8:	001e0520 	andseq	r0, lr, r0, lsr #10
 5fc:	03020402 	movweq	r0, #9218	; 0x2402
 600:	02053c79 	andeq	r3, r5, #30976	; 0x7900
 604:	01040200 	mrseq	r0, R12_usr
 608:	3c0a033c 	stccc	3, cr0, [sl], {60}	; 0x3c
 60c:	053d0905 	ldreq	r0, [sp, #-2309]!	; 0xfffff6fb
 610:	04020001 	streq	r0, [r2], #-1
 614:	05772101 	ldrbeq	r2, [r7, #-257]!	; 0xfffffeff
 618:	04053d13 	streq	r3, [r5], #-3347	; 0xfffff2ed
 61c:	3003052e 	andcc	r0, r3, lr, lsr #10
 620:	053d0605 	ldreq	r0, [sp, #-1541]!	; 0xfffff9fb
 624:	13053c05 	movwne	r3, #23557	; 0x5c05
 628:	3d0a052f 	cfstr32cc	mvfx0, [sl, #-188]	; 0xffffff44
 62c:	05301305 	ldreq	r1, [r0, #-773]!	; 0xfffffcfb
 630:	15052e04 	strne	r2, [r5, #-3588]	; 0xfffff1fc
 634:	59050530 	stmdbpl	r5, {r4, r5, r8, sl}
 638:	054b1205 	strbeq	r1, [fp, #-517]	; 0xfffffdfb
 63c:	01053d0a 	tsteq	r5, sl, lsl #26
 640:	0b05933f 	bleq	165344 <startup-0x1fe9acbc>
 644:	201a05cc 	andscs	r0, sl, ip, asr #11
 648:	052e0305 	streq	r0, [lr, #-773]!	; 0xfffffcfb
 64c:	1a05210b 	bne	148a80 <startup-0x1feb7580>
 650:	2e030520 	cfsh32cs	mvfx0, mvfx3, #16
 654:	05210b05 	streq	r0, [r1, #-2821]!	; 0xfffff4fb
 658:	0305201a 	movweq	r2, #20506	; 0x501a
 65c:	210b052e 	tstcs	fp, lr, lsr #10
 660:	05201a05 	streq	r1, [r0, #-2565]!	; 0xfffff5fb
 664:	0b052e03 	bleq	14be78 <startup-0x1feb4188>
 668:	201a0521 	andscs	r0, sl, r1, lsr #10
 66c:	052e0305 	streq	r0, [lr, #-773]!	; 0xfffffcfb
 670:	1a05210b 	bne	148aa4 <startup-0x1feb755c>
 674:	2e030520 	cfsh32cs	mvfx0, mvfx3, #16
 678:	92220105 	eorls	r0, r2, #1073741825	; 0x40000001
 67c:	05410605 	strbeq	r0, [r1, #-1541]	; 0xfffff9fb
 680:	08052004 	stmdaeq	r5, {r2, sp}
 684:	4a05053d 	bmi	141b80 <startup-0x1febe480>
 688:	02001605 	andeq	r1, r0, #5242880	; 0x500000
 68c:	05200104 	streq	r0, [r0, #-260]!	; 0xfffffefc
 690:	05052f08 	streq	r2, [r5, #-3848]	; 0xfffff0f8
 694:	0016054a 	andseq	r0, r6, sl, asr #10
 698:	20010402 	andcs	r0, r1, r2, lsl #8
 69c:	052f0805 	streq	r0, [pc, #-2053]!	; fffffe9f <_ctype_+0xdfffe093>
 6a0:	16054a05 	strne	r4, [r5], -r5, lsl #20
 6a4:	01040200 	mrseq	r0, R12_usr
 6a8:	2f080520 	svccs	0x00080520
 6ac:	054a0505 	strbeq	r0, [sl, #-1285]	; 0xfffffafb
 6b0:	04020016 	streq	r0, [r2], #-22	; 0xffffffea
 6b4:	09052001 	stmdbeq	r5, {r0, sp}
 6b8:	2101052f 	tstcs	r1, pc, lsr #10
 6bc:	05661b03 	strbeq	r1, [r6, #-2819]!	; 0xfffff4fd
 6c0:	04052f05 	streq	r2, [r5], #-3845	; 0xfffff0fb
 6c4:	2f10052e 	svccs	0x0010052e
 6c8:	053d0205 	ldreq	r0, [sp, #-517]!	; 0xfffffdfb
 6cc:	0205200c 	andeq	r2, r5, #12
 6d0:	200c052f 	andcs	r0, ip, pc, lsr #10
 6d4:	052f0205 	streq	r0, [pc, #-517]!	; 4d7 <startup-0x1ffffb29>
 6d8:	0205200b 	andeq	r2, r5, #11
 6dc:	200c052f 	andcs	r0, ip, pc, lsr #10
 6e0:	05370f05 	ldreq	r0, [r7, #-3845]!	; 0xfffff0fb
 6e4:	05e62601 	strbeq	r2, [r6, #1537]!	; 0x601
 6e8:	04052f05 	streq	r2, [r5], #-3845	; 0xfffff0fb
 6ec:	2f0a052e 	svccs	0x000a052e
 6f0:	053d0e05 	ldreq	r0, [sp, #-3589]!	; 0xfffff1fb
 6f4:	05842101 	streq	r2, [r4, #257]	; 0x101
 6f8:	0c052f02 	stceq	15, cr2, [r5], {2}
 6fc:	2f100520 	svccs	0x00100520
 700:	853d0105 	ldrhi	r0, [sp, #-261]!	; 0xfffffefb
 704:	052f0205 	streq	r0, [pc, #-517]!	; 507 <startup-0x1ffffaf9>
 708:	0205200c 	andeq	r2, r5, #12
 70c:	2023052f 	eorcs	r0, r3, pc, lsr #10
 710:	bd2f0105 	stflts	f0, [pc, #-20]!	; 704 <startup-0x1ffff8fc>
 714:	052f0205 	streq	r0, [pc, #-517]!	; 517 <startup-0x1ffffae9>
 718:	0205200c 	andeq	r2, r5, #12
 71c:	200c052f 	andcs	r0, ip, pc, lsr #10
 720:	052f0205 	streq	r0, [pc, #-517]!	; 523 <startup-0x1ffffadd>
 724:	0205200b 	andeq	r2, r5, #11
 728:	200c052f 	andcs	r0, ip, pc, lsr #10
 72c:	a12f0105 			; <UNDEFINED> instruction: 0xa12f0105
 730:	052f0505 	streq	r0, [pc, #-1285]!	; 233 <startup-0x1ffffdcd>
 734:	14052e04 	strne	r2, [r5], #-3588	; 0xfffff1fc
 738:	01040200 	mrseq	r0, R12_usr
 73c:	0001052e 	andeq	r0, r1, lr, lsr #10
 740:	30010402 	andcc	r0, r1, r2, lsl #8
 744:	051f0705 	ldreq	r0, [pc, #-1797]	; 47 <startup-0x1fffffb9>
 748:	055b2f01 	ldrbeq	r2, [fp, #-3841]	; 0xfffff0ff
 74c:	0c052f02 	stceq	15, cr2, [r5], {2}
 750:	2f0e0520 	svccs	0x000e0520
 754:	05591205 	ldrbeq	r1, [r9, #-517]	; 0xfffffdfb
 758:	18052e04 	stmdane	r5, {r2, r9, sl, fp, sp}
 75c:	01040200 	mrseq	r0, R12_usr
 760:	0001052e 	andeq	r0, r1, lr, lsr #10
 764:	34010402 	strcc	r0, [r1], #-1026	; 0xfffffbfe
 768:	051d1105 	ldreq	r1, [sp, #-261]	; 0xfffffefb
 76c:	01053d0d 	tsteq	r5, sp, lsl #26
 770:	0205ae3e 	andeq	sl, r5, #992	; 0x3e0
 774:	200c052f 	andcs	r0, ip, pc, lsr #10
 778:	052f0205 	streq	r0, [pc, #-517]!	; 57b <startup-0x1ffffa85>
 77c:	0205200c 	andeq	r2, r5, #12
 780:	200b052f 	andcs	r0, fp, pc, lsr #10
 784:	052f0205 	streq	r0, [pc, #-517]!	; 587 <startup-0x1ffffa79>
 788:	0105200c 	tsteq	r5, ip
 78c:	0505bc2f 	streq	fp, [r5, #-3119]	; 0xfffff3d1
 790:	2e04054b 	cfsh32cs	mvfx0, mvfx4, #43
 794:	052f0b05 	streq	r0, [pc, #-2821]!	; fffffc97 <_ctype_+0xdfffde8b>
 798:	0e053d04 	cdpeq	13, 0, cr3, cr5, cr4, {0}
 79c:	3d0f053d 	cfstr32cc	mvfx0, [pc, #-244]	; 6b0 <startup-0x1ffff950>
 7a0:	053d0205 	ldreq	r0, [sp, #-517]!	; 0xfffffdfb
 7a4:	13053714 	movwne	r3, #22292	; 0x5714
 7a8:	24010530 	strcs	r0, [r1], #-1328	; 0xfffffad0
 7ac:	01000c02 	tsteq	r0, r2, lsl #24
 7b0:	Address 0x000007b0 is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	6c6c6f64 	stclvs	15, cr6, [ip], #-400	; 0xfffffe70
   4:	73797300 	cmnvc	r9, #0, 6
   8:	6b636974 	blvs	18da5e0 <startup-0x1e725a20>
   c:	616c665f 	cmnvs	ip, pc, asr r6
  10:	61670067 	cmnvs	r7, r7, rrx
  14:	7453656d 	ldrbvc	r6, [r3], #-1389	; 0xfffffa93
  18:	65747261 	ldrbvs	r7, [r4, #-609]!	; 0xfffffd9f
  1c:	61700064 	cmnvs	r0, r4, rrx
  20:	72657474 	rsbvc	r7, r5, #116, 8	; 0x74000000
  24:	6c70006e 	ldclvs	0, cr0, [r0], #-440	; 0xfffffe48
  28:	46656361 	strbtmi	r6, [r5], -r1, ror #6
  2c:	0067616c 	rsbeq	r6, r7, ip, ror #2
  30:	72727563 	rsbsvc	r7, r2, #415236096	; 0x18c00000
  34:	5f746e65 	svcpl	0x00746e65
  38:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
  3c:	72630065 	rsbvc	r0, r3, #101	; 0x65
  40:	65746165 	ldrbvs	r6, [r4, #-357]!	; 0xfffffe9b
  44:	72616f42 	rsbvc	r6, r1, #264	; 0x108
  48:	6e650064 	cdpvs	0, 6, cr0, cr5, cr4, {3}
  4c:	61725f64 	cmnvs	r2, r4, ror #30
  50:	6700646e 	strvs	r6, [r0, -lr, ror #8]
  54:	786f746f 	stmdavc	pc!, {r0, r1, r2, r3, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
  58:	63610079 	cmnvs	r1, #121	; 0x79
  5c:	61766974 	cmnvs	r6, r4, ror r9
  60:	6f526574 	svcvs	0x00526574
  64:	61670077 	smcvs	28679	; 0x7007
  68:	764f656d 	strbvc	r6, [pc], -sp, ror #10
  6c:	43007265 	movwmi	r7, #613	; 0x265
  70:	68432f3a 	stmdavs	r3, {r1, r3, r4, r5, r8, r9, sl, fp, sp}^
  74:	656d6c61 	strbvs	r6, [sp, #-3169]!	; 0xfffff39f
  78:	592f7372 	stmdbpl	pc!, {r1, r4, r5, r6, r8, r9, ip, sp, lr}	; <UNPREDICTABLE>
  7c:	31726165 	cmncc	r2, r5, ror #2
  80:	34504c2f 	ldrbcc	r4, [r0], #-3119	; 0xfffff3d1
  84:	504f4d2f 	subpl	r4, pc, pc, lsr #26
  88:	504f4d2f 	subpl	r4, pc, pc, lsr #26
  8c:	6e694d2f 	cdpvs	13, 6, cr4, cr9, cr15, {1}
  90:	65775365 	ldrbvs	r5, [r7, #-869]!	; 0xfffffc9b
  94:	72657065 	rsbvc	r7, r5, #101	; 0x65
  98:	732f4447 			; <UNDEFINED> instruction: 0x732f4447
  9c:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
  a0:	632e7075 			; <UNDEFINED> instruction: 0x632e7075
  a4:	65706f00 	ldrbvs	r6, [r0, #-3840]!	; 0xfffff100
  a8:	0064656e 	rsbeq	r6, r4, lr, ror #10
  ac:	6e756f63 	cdpvs	15, 7, cr6, cr5, cr3, {3}
  b0:	6d6f4274 	sfmvs	f4, 2, [pc, #-464]!	; fffffee8 <_ctype_+0xdfffe0dc>
  b4:	46724f62 	ldrbtmi	r4, [r2], -r2, ror #30
  b8:	0067616c 	rsbeq	r6, r7, ip, ror #2
  bc:	6e65706f 	cdpvs	0, 6, cr7, cr5, cr15, {3}
  c0:	71536465 	cmpvc	r3, r5, ror #8
  c4:	65726175 	ldrbvs	r6, [r2, #-373]!	; 0xfffffe8b
  c8:	65640073 	strbvs	r0, [r4, #-115]!	; 0xffffff8d
  cc:	0079616c 	rsbseq	r6, r9, ip, ror #2
  d0:	77617264 	strbvc	r7, [r1, -r4, ror #4]!
  d4:	00736f50 	rsbseq	r6, r3, r0, asr pc
  d8:	69736f50 	ldmdbvs	r3!, {r4, r6, r8, r9, sl, fp, sp, lr}^
  dc:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
  e0:	65720073 	ldrbvs	r0, [r2, #-115]!	; 0xffffff8d
  e4:	6f436461 	svcvs	0x00436461
  e8:	6e6d756c 	cdpvs	5, 6, cr7, cr13, cr12, {3}
  ec:	6d756e00 	ldclvs	14, cr6, [r5, #-0]
  f0:	4f726562 	svcmi	0x00726562
  f4:	6d6f4266 	sfmvs	f4, 2, [pc, #-408]!	; ffffff64 <_ctype_+0xdfffe158>
  f8:	67007362 	strvs	r7, [r0, -r2, ror #6]
  fc:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 100:	635f6369 	cmpvs	pc, #-1543503871	; 0xa4000001
 104:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
 108:	7263735f 	rsbvc	r7, r3, #2080374785	; 0x7c000001
 10c:	006e6565 	rsbeq	r6, lr, r5, ror #10
 110:	6e65706f 	cdpvs	0, 6, cr7, cr5, cr15, {3}
 114:	00736f50 	rsbseq	r6, r3, r0, asr pc
 118:	7478656e 	ldrbtvc	r6, [r8], #-1390	; 0xfffffa92
 11c:	656e0058 	strbvs	r0, [lr, #-88]!	; 0xffffffa8
 120:	00597478 	subseq	r7, r9, r8, ror r4
 124:	6f427369 	svcvs	0x00427369
 128:	7450626d 	ldrbvc	r6, [r0], #-621	; 0xfffffd93
 12c:	75720072 	ldrbvc	r0, [r2, #-114]!	; 0xffffff8e
 130:	6e696e6e 	cdpvs	14, 6, cr6, cr9, cr14, {3}
 134:	68630067 	stmdavs	r3!, {r0, r1, r2, r5, r6}^
 138:	576b6365 	strbpl	r6, [fp, -r5, ror #6]!
 13c:	67006e69 	strvs	r6, [r0, -r9, ror #28]
 140:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 144:	695f6369 	ldmdbvs	pc, {r0, r3, r5, r6, r8, r9, sp, lr}^	; <UNPREDICTABLE>
 148:	6974696e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, fp, sp, lr}^
 14c:	7a696c61 	bvc	1a5b2d8 <startup-0x1e5a4d28>
 150:	73690065 	cmnvc	r9, #101	; 0x65
 154:	626d6f42 	rsbvs	r6, sp, #264	; 0x108
 158:	6f687300 	svcvs	0x00687300
 15c:	6d6f4277 	sfmvs	f4, 2, [pc, #-476]!	; ffffff88 <_ctype_+0xdfffe17c>
 160:	73007362 	movwvc	r7, #866	; 0x362
 164:	69747379 	ldmdbvs	r4!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}^
 168:	695f6b63 	ldmdbvs	pc, {r0, r1, r5, r6, r8, r9, fp, sp, lr}^	; <UNPREDICTABLE>
 16c:	685f7172 	ldmdavs	pc, {r1, r4, r5, r6, r8, ip, sp, lr}^	; <UNPREDICTABLE>
 170:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
 174:	66007265 	strvs	r7, [r0], -r5, ror #4
 178:	00636e75 	rsbeq	r6, r3, r5, ror lr
 17c:	50534944 	subspl	r4, r3, r4, asr #18
 180:	52414843 	subpl	r4, r1, #4390912	; 0x430000
 184:	79656b00 	stmdbvc	r5!, {r8, r9, fp, sp, lr}^
 188:	756c6156 	strbvc	r6, [ip, #-342]!	; 0xfffffeaa
 18c:	68740065 	ldmdavs	r4!, {r0, r2, r5, r6}^
 190:	00656572 	rsbeq	r6, r5, r2, ror r5
 194:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 198:	61725f74 	cmnvs	r2, r4, ror pc
 19c:	7000646e 	andvc	r6, r0, lr, ror #8
 1a0:	6563616c 	strbvs	r6, [r3, #-364]!	; 0xfffffe94
 1a4:	626d6f42 	rsbvs	r6, sp, #264	; 0x108
 1a8:	73690073 	cmnvc	r9, #115	; 0x73
 1ac:	67616c46 	strbvs	r6, [r1, -r6, asr #24]!
 1b0:	616c7000 	cmnvs	ip, r0
 1b4:	42646563 	rsbmi	r6, r4, #415236096	; 0x18c00000
 1b8:	73626d6f 	cmnvc	r2, #7104	; 0x1bc0
 1bc:	61726700 	cmnvs	r2, r0, lsl #14
 1c0:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 1c4:	7869705f 	stmdavc	r9!, {r0, r1, r2, r3, r4, r6, ip, sp, lr}^
 1c8:	635f6c65 	cmpvs	pc, #25856	; 0x6500
 1cc:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
 1d0:	61726700 	cmnvs	r2, r0, lsl #14
 1d4:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 1d8:	7869705f 	stmdavc	r9!, {r0, r1, r2, r3, r4, r6, ip, sp, lr}^
 1dc:	735f6c65 	cmpvc	pc, #25856	; 0x6500
 1e0:	70007465 	andvc	r7, r0, r5, ror #8
 1e4:	7469736f 	strbtvc	r7, [r9], #-879	; 0xfffffc91
 1e8:	006e6f69 	rsbeq	r6, lr, r9, ror #30
 1ec:	5f746567 	svcpl	0x00746567
 1f0:	646e6172 	strbtvs	r6, [lr], #-370	; 0xfffffe8e
 1f4:	6c61765f 	stclvs	6, cr7, [r1], #-380	; 0xfffffe84
 1f8:	736e7500 	cmnvc	lr, #0, 10
 1fc:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
 200:	68632064 	stmdavs	r3!, {r2, r5, r6, sp}^
 204:	47007261 	strmi	r7, [r0, -r1, ror #4]
 208:	4320554e 			; <UNDEFINED> instruction: 0x4320554e
 20c:	39203939 	stmdbcc	r0!, {r0, r3, r4, r5, r8, fp, ip, sp}
 210:	312e322e 			; <UNDEFINED> instruction: 0x312e322e
 214:	31303220 	teqcc	r0, r0, lsr #4
 218:	32303139 	eorscc	r3, r0, #1073741838	; 0x4000000e
 21c:	72282035 	eorvc	r2, r8, #53	; 0x35
 220:	61656c65 	cmnvs	r5, r5, ror #24
 224:	20296573 	eorcs	r6, r9, r3, ror r5
 228:	4d52415b 	ldfmie	f4, [r2, #-364]	; 0xfffffe94
 22c:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
 230:	622d392d 	eorvs	r3, sp, #737280	; 0xb4000
 234:	636e6172 	cmnvs	lr, #-2147483620	; 0x8000001c
 238:	65722068 	ldrbvs	r2, [r2, #-104]!	; 0xffffff98
 23c:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
 240:	32206e6f 	eorcc	r6, r0, #1776	; 0x6f0
 244:	39353737 	ldmdbcc	r5!, {r0, r1, r2, r4, r5, r8, r9, sl, ip, sp}
 248:	2d205d39 	stccs	13, cr5, [r0, #-228]!	; 0xffffff1c
 24c:	7568746d 	strbvc	r7, [r8, #-1133]!	; 0xfffffb93
 250:	2d20626d 	sfmcs	f6, 4, [r0, #-436]!	; 0xfffffe4c
 254:	6f6c666d 	svcvs	0x006c666d
 258:	612d7461 			; <UNDEFINED> instruction: 0x612d7461
 25c:	733d6962 	teqvc	sp, #1605632	; 0x188000
 260:	2074666f 	rsbscs	r6, r4, pc, ror #12
 264:	72616d2d 	rsbvc	r6, r1, #2880	; 0xb40
 268:	613d6863 	teqvs	sp, r3, ror #16
 26c:	36766d72 			; <UNDEFINED> instruction: 0x36766d72
 270:	2d206d2d 	stccs	13, cr6, [r0, #-180]!	; 0xffffff4c
 274:	4f2d2067 	svcmi	0x002d2067
 278:	732d2030 			; <UNDEFINED> instruction: 0x732d2030
 27c:	633d6474 	teqvs	sp, #116, 8	; 0x74000000
 280:	75003939 	strvc	r3, [r0, #-2361]	; 0xfffff6c7
 284:	5f646573 	svcpl	0x00646573
 288:	5f726f66 	svcpl	0x00726f66
 28c:	646e6172 	strbtvs	r6, [lr], #-370	; 0xfffffe8e
 290:	766f6d00 	strbtvc	r6, [pc], -r0, lsl #26
 294:	00684365 	rsbeq	r4, r8, r5, ror #6
 298:	63617073 	cmnvs	r1, #115	; 0x73
 29c:	72610065 	rsbvc	r0, r1, #101	; 0x65
 2a0:	00776f72 	rsbseq	r6, r7, r2, ror pc
 2a4:	6c467369 	mcrrvs	3, 6, r7, r6, cr9
 2a8:	74506761 	ldrbvc	r6, [r0], #-1889	; 0xfffff89f
 2ac:	616d0072 	smcvs	53250	; 0xd002
 2b0:	6946656b 	stmdbvs	r6, {r0, r1, r3, r5, r6, r8, sl, sp, lr}^
 2b4:	4f747372 	svcmi	0x00747372
 2b8:	006e6570 	rsbeq	r6, lr, r0, ror r5
 2bc:	616c6564 	cmnvs	ip, r4, ror #10
 2c0:	6d315f79 	ldcvs	15, cr5, [r1, #-484]!	; 0xfffffe1c
 2c4:	6f726b69 	svcvs	0x00726b69
 2c8:	736e7500 	cmnvc	lr, #0, 10
 2cc:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
 2d0:	6e692064 	cdpvs	0, 6, cr2, cr9, cr4, {3}
 2d4:	79730074 	ldmdbvc	r3!, {r2, r4, r5, r6}^
 2d8:	63695473 	cmnvs	r9, #1929379840	; 0x73000000
 2dc:	6e695f6b 	cdpvs	15, 6, cr5, cr9, cr11, {3}
 2e0:	68007469 	stmdavs	r0, {r0, r3, r5, r6, sl, ip, sp, lr}
 2e4:	68437469 	stmdavs	r3, {r0, r3, r5, r6, sl, ip, sp, lr}^
 2e8:	73616c00 	cmnvc	r1, #0, 24
 2ec:	79654b74 	stmdbvc	r5!, {r2, r4, r5, r6, r8, r9, fp, lr}^
 2f0:	5c3a4300 	ldcpl	3, cr4, [sl], #-0
 2f4:	6c616843 	stclvs	8, cr6, [r1], #-268	; 0xfffffef4
 2f8:	7372656d 	cmnvc	r2, #457179136	; 0x1b400000
 2fc:	6165595c 	cmnvs	r5, ip, asr r9
 300:	4c5c3172 	ldfmie	f3, [ip], {114}	; 0x72
 304:	4d5c3450 	cfldrdmi	mvd3, [ip, #-320]	; 0xfffffec0
 308:	4d5c504f 	ldclmi	0, cr5, [ip, #-316]	; 0xfffffec4
 30c:	4d5c504f 	ldclmi	0, cr5, [ip, #-316]	; 0xfffffec4
 310:	53656e69 	cmnpl	r5, #1680	; 0x690
 314:	70656577 	rsbvc	r6, r5, r7, ror r5
 318:	44477265 	strbmi	r7, [r7], #-613	; 0xfffffd9b
 31c:	696e6900 	stmdbvs	lr!, {r8, fp, sp, lr}^
 320:	70615f74 	rsbvc	r5, r1, r4, ror pc
 324:	616d0070 	smcvs	53248	; 0xd000
 328:	70006e69 	andvc	r6, r0, r9, ror #28
 32c:	746e6972 	strbtvc	r6, [lr], #-2418	; 0xfffff68e
 330:	416d754e 	cmnmi	sp, lr, asr #10
 334:	75630074 	strbvc	r0, [r3, #-116]!	; 0xffffff8c
 338:	00587272 	subseq	r7, r8, r2, ror r2
 33c:	72727563 	rsbsvc	r7, r2, #415236096	; 0x18c00000
 340:	69640059 	stmdbvs	r4!, {r0, r3, r4, r6}^
 344:	68437073 	stmdavs	r3, {r0, r1, r4, r5, r6, ip, sp, lr}^
 348:	64007261 	strvs	r7, [r0], #-609	; 0xfffffd9f
 34c:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 350:	756f635f 	strbvc	r6, [pc, #-863]!	; fffffff9 <_ctype_+0xdfffe1ed>
 354:	7600746e 	strvc	r7, [r0], -lr, ror #8
 358:	64696c61 	strbtvs	r6, [r9], #-3169	; 0xfffff39f
 35c:	00736f50 	rsbseq	r6, r3, r0, asr pc
 360:	626d6f62 	rsbvs	r6, sp, #392	; 0x188
 364:	766f6d00 	strbtvc	r6, [pc], -r0, lsl #26
 368:	616c5065 	cmnvs	ip, r5, rrx
 36c:	00726579 	rsbseq	r6, r2, r9, ror r5
 370:	63616c70 	cmnvs	r1, #112, 24	; 0x7000
 374:	6c466465 	cfstrdvs	mvd6, [r6], {101}	; 0x65
 378:	73676761 	cmnvc	r7, #25427968	; 0x1840000
 37c:	69727000 	ldmdbvs	r2!, {ip, sp, lr}^
 380:	6f54746e 	svcvs	0x0054746e
 384:	66004447 	strvs	r4, [r0], -r7, asr #8
 388:	6767616c 	strbvs	r6, [r7, -ip, ror #2]!
 38c:	62006465 	andvs	r6, r0, #1694498816	; 0x65000000
 390:	6472616f 	ldrbtvs	r6, [r2], #-367	; 0xfffffe91
 394:	69727000 	ldmdbvs	r2!, {ip, sp, lr}^
 398:	635f746e 	cmpvs	pc, #1845493760	; 0x6e000000
 39c:	65670068 	strbvs	r0, [r7, #-104]!	; 0xffffff98
 3a0:	77654e74 			; <UNDEFINED> instruction: 0x77654e74
 3a4:	72465958 	subvc	r5, r6, #88, 18	; 0x160000
 3a8:	68436d6f 	stmdavs	r3, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
 3ac:	756f6600 	strbvc	r6, [pc, #-1536]!	; fffffdb4 <_ctype_+0xdfffdfa8>
 3b0:	6b00646e 	blvs	19570 <startup-0x1ffe6a90>
 3b4:	5f627965 	svcpl	0x00627965
 3b8:	61686e65 	cmnvs	r8, r5, ror #28
 3bc:	6465636e 	strbtvs	r6, [r5], #-878	; 0xfffffc92
 3c0:	61657200 	cmnvs	r5, r0, lsl #4
 3c4:	79654b64 	stmdbvc	r5!, {r2, r5, r6, r8, r9, fp, lr}^
 3c8:	77656e00 	strbvc	r6, [r5, -r0, lsl #28]!
 3cc:	66005958 			; <UNDEFINED> instruction: 0x66005958
 3d0:	0072756f 	rsbseq	r7, r2, pc, ror #10
 3d4:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0xfffff68d
 3d8:	5f6b6369 	svcpl	0x006b6369
 3dc:	5f717269 	svcpl	0x00717269
 3e0:	646e6168 	strbtvs	r6, [lr], #-360	; 0xfffffe98
 3e4:	5f72656c 	svcpl	0x0072656c
 3e8:	646e6172 	strbtvs	r6, [lr], #-370	; 0xfffffe8e
 3ec:	61747300 	cmnvs	r4, r0, lsl #6
 3f0:	74730072 	ldrbtvc	r0, [r3], #-114	; 0xffffff8e
 3f4:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
 3f8:	71730070 	cmnvc	r3, r0, ror r0
 3fc:	65726175 	ldrbvs	r6, [r2, #-373]!	; 0xfffffe8b
 400:	4f6f5473 	svcmi	0x006f5473
 404:	006e6570 	rsbeq	r6, lr, r0, ror r5
 408:	6d61536e 	stclvs	3, cr5, [r1, #-440]!	; 0xfffffe48
 40c:	79654b65 	stmdbvc	r5!, {r0, r2, r5, r6, r8, r9, fp, lr}^
 410:	73797300 	cmnvc	r9, #0, 6
 414:	6b636974 	blvs	18da9ec <startup-0x1e725614>
 418:	7172695f 	cmnvc	r2, pc, asr r9
 41c:	6e61685f 	mcrvs	8, 3, r6, cr1, cr15, {2}
 420:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
 424:	756f635f 	strbvc	r6, [pc, #-863]!	; cd <startup-0x1fffff33>
 428:	6e69746e 	cdpvs	4, 6, cr7, cr9, cr14, {3}
 42c:	6f740067 	svcvs	0x00740067
 430:	65776f6c 	ldrbvs	r6, [r7, #-3948]!	; 0xfffff094
 434:	657a0072 	ldrbvs	r0, [sl, #-114]!	; 0xffffff8e
 438:	6e006f72 	mcrvs	15, 0, r6, cr0, cr2, {3}
 43c:	626d6f42 	rsbvs	r6, sp, #264	; 0x108
 440:	Address 0x00000440 is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	206d7241 	rsbcs	r7, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d39 	eorscc	r2, r2, r9, lsr sp
  30:	712d3931 			; <UNDEFINED> instruction: 0x712d3931
  34:	616d2d34 	cmnvs	sp, r4, lsr sp
  38:	29726f6a 	ldmdbcs	r2!, {r1, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
  3c:	322e3920 	eorcc	r3, lr, #32, 18	; 0x80000
  40:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  44:	31393130 	teqcc	r9, r0, lsr r1
  48:	20353230 	eorscs	r3, r5, r0, lsr r2
  4c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  50:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  54:	415b2029 	cmpmi	fp, r9, lsr #32
  58:	612f4d52 			; <UNDEFINED> instruction: 0x612f4d52
  5c:	392d6d72 	pushcc	{r1, r4, r5, r6, r8, sl, fp, sp, lr}
  60:	6172622d 	cmnvs	r2, sp, lsr #4
  64:	2068636e 	rsbcs	r6, r8, lr, ror #6
  68:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
  6c:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
  70:	37373220 	ldrcc	r3, [r7, -r0, lsr #4]!
  74:	5d393935 			; <UNDEFINED> instruction: 0x5d393935
	...

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002b41 	andeq	r2, r0, r1, asr #22
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000021 	andeq	r0, r0, r1, lsr #32
  10:	2d533605 	ldclcs	6, cr3, [r3, #-20]	; 0xffffffec
  14:	0c06004d 	stceq	0, cr0, [r6], {77}	; 0x4d
  18:	01094d07 	tsteq	r9, r7, lsl #26
  1c:	01140412 	tsteq	r4, r2, lsl r4
  20:	03170115 	tsteq	r7, #1073741829	; 0x40000005
  24:	01190118 	tsteq	r9, r8, lsl r1
  28:	061e011a 			; <UNDEFINED> instruction: 0x061e011a

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000000c 	andeq	r0, r0, ip
  14:	00000000 	andeq	r0, r0, r0
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
  20:	00000020 	andeq	r0, r0, r0, lsr #32
  24:	00000000 	andeq	r0, r0, r0
  28:	20000010 	andcs	r0, r0, r0, lsl r0
  2c:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
  30:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
  34:	87038504 	strhi	r8, [r3, -r4, lsl #10]
  38:	41018e02 	tstmi	r1, r2, lsl #28
  3c:	0c41400e 	mcrreq	0, 0, r4, r1, cr14
  40:	00003807 	andeq	r3, r0, r7, lsl #16
  44:	0000001c 	andeq	r0, r0, ip, lsl r0
  48:	00000000 	andeq	r0, r0, r0
  4c:	200001c8 	andcs	r0, r0, r8, asr #3
  50:	000000a0 	andeq	r0, r0, r0, lsr #1
  54:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  58:	41018e02 	tstmi	r1, r2, lsl #28
  5c:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
  60:	00000007 	andeq	r0, r0, r7
  64:	0000001c 	andeq	r0, r0, ip, lsl r0
  68:	00000000 	andeq	r0, r0, r0
  6c:	20000268 	andcs	r0, r0, r8, ror #4
  70:	00000104 	andeq	r0, r0, r4, lsl #2
  74:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
  78:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
  7c:	380e4101 	stmdacc	lr, {r0, r8, lr}
  80:	00070d41 	andeq	r0, r7, r1, asr #26
  84:	0000001c 	andeq	r0, r0, ip, lsl r0
  88:	00000000 	andeq	r0, r0, r0
  8c:	2000036c 	andcs	r0, r0, ip, ror #6
  90:	00000032 	andeq	r0, r0, r2, lsr r0
  94:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  98:	41018e02 	tstmi	r1, r2, lsl #28
  9c:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
  a0:	00000007 	andeq	r0, r0, r7
  a4:	0000001c 	andeq	r0, r0, ip, lsl r0
  a8:	00000000 	andeq	r0, r0, r0
  ac:	2000039e 	mulcs	r0, lr, r3
  b0:	0000006e 	andeq	r0, r0, lr, rrx
  b4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  b8:	41018e02 	tstmi	r1, r2, lsl #28
  bc:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  c0:	00000007 	andeq	r0, r0, r7
  c4:	00000020 	andeq	r0, r0, r0, lsr #32
  c8:	00000000 	andeq	r0, r0, r0
  cc:	2000040c 	andcs	r0, r0, ip, lsl #8
  d0:	0000011c 	andeq	r0, r0, ip, lsl r1
  d4:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
  d8:	87038504 	strhi	r8, [r3, -r4, lsl #10]
  dc:	41018e02 	tstmi	r1, r2, lsl #28
  e0:	0c41280e 	mcrreq	8, 0, r2, r1, cr14
  e4:	00002007 	andeq	r2, r0, r7
  e8:	00000018 	andeq	r0, r0, r8, lsl r0
  ec:	00000000 	andeq	r0, r0, r0
  f0:	20000528 	andcs	r0, r0, r8, lsr #10
  f4:	00000018 	andeq	r0, r0, r8, lsl r0
  f8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  fc:	41018e02 	tstmi	r1, r2, lsl #28
 100:	0000070d 	andeq	r0, r0, sp, lsl #14
 104:	00000020 	andeq	r0, r0, r0, lsr #32
 108:	00000000 	andeq	r0, r0, r0
 10c:	20000540 	andcs	r0, r0, r0, asr #10
 110:	0000025c 	andeq	r0, r0, ip, asr r2
 114:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
 118:	87038504 	strhi	r8, [r3, -r4, lsl #10]
 11c:	41018e02 	tstmi	r1, r2, lsl #28
 120:	0c41380e 	mcrreq	8, 0, r3, r1, cr14
 124:	00003007 	andeq	r3, r0, r7
 128:	00000020 	andeq	r0, r0, r0, lsr #32
 12c:	00000000 	andeq	r0, r0, r0
 130:	2000079c 	mulcs	r0, ip, r7
 134:	000000b4 	strheq	r0, [r0], -r4
 138:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
 13c:	87038504 	strhi	r8, [r3, -r4, lsl #10]
 140:	41018e02 	tstmi	r1, r2, lsl #28
 144:	0c41380e 	mcrreq	8, 0, r3, r1, cr14
 148:	00003007 	andeq	r3, r0, r7
 14c:	00000020 	andeq	r0, r0, r0, lsr #32
 150:	00000000 	andeq	r0, r0, r0
 154:	20000850 	andcs	r0, r0, r0, asr r8
 158:	00000026 	andeq	r0, r0, r6, lsr #32
 15c:	41100e41 	tstmi	r0, r1, asr #28
 160:	0884200e 	stmeq	r4, {r1, r2, r3, sp}
 164:	06870785 	streq	r0, [r7], r5, lsl #15
 168:	0d41058e 	cfstr64eq	mvdx0, [r1, #-568]	; 0xfffffdc8
 16c:	00000007 	andeq	r0, r0, r7
 170:	00000020 	andeq	r0, r0, r0, lsr #32
 174:	00000000 	andeq	r0, r0, r0
 178:	20000876 	andcs	r0, r0, r6, ror r8
 17c:	00000026 	andeq	r0, r0, r6, lsr #32
 180:	41100e41 	tstmi	r0, r1, asr #28
 184:	0884200e 	stmeq	r4, {r1, r2, r3, sp}
 188:	06870785 	streq	r0, [r7], r5, lsl #15
 18c:	0d41058e 	cfstr64eq	mvdx0, [r1, #-568]	; 0xfffffdc8
 190:	00000007 	andeq	r0, r0, r7
 194:	00000020 	andeq	r0, r0, r0, lsr #32
 198:	00000000 	andeq	r0, r0, r0
 19c:	2000089c 	mulcs	r0, ip, r8
 1a0:	000000bc 	strheq	r0, [r0], -ip
 1a4:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
 1a8:	87038504 	strhi	r8, [r3, -r4, lsl #10]
 1ac:	41018e02 	tstmi	r1, r2, lsl #28
 1b0:	0c41380e 	mcrreq	8, 0, r3, r1, cr14
 1b4:	00003007 	andeq	r3, r0, r7
 1b8:	0000001c 	andeq	r0, r0, ip, lsl r0
 1bc:	00000000 	andeq	r0, r0, r0
 1c0:	20000958 	andcs	r0, r0, r8, asr r9
 1c4:	00000034 	andeq	r0, r0, r4, lsr r0
 1c8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 1cc:	41018e02 	tstmi	r1, r2, lsl #28
 1d0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 1d4:	00000007 	andeq	r0, r0, r7
 1d8:	00000020 	andeq	r0, r0, r0, lsr #32
 1dc:	00000000 	andeq	r0, r0, r0
 1e0:	2000098c 	andcs	r0, r0, ip, lsl #19
 1e4:	0000007c 	andeq	r0, r0, ip, ror r0
 1e8:	41100e41 	tstmi	r0, r1, asr #28
 1ec:	0884200e 	stmeq	r4, {r1, r2, r3, sp}
 1f0:	06870785 	streq	r0, [r7], r5, lsl #15
 1f4:	0e41058e 	cdpeq	5, 4, cr0, cr1, cr14, {4}
 1f8:	070d4130 	smladxeq	sp, r0, r1, r4
 1fc:	0000001c 	andeq	r0, r0, ip, lsl r0
 200:	00000000 	andeq	r0, r0, r0
 204:	20000a08 	andcs	r0, r0, r8, lsl #20
 208:	00000080 	andeq	r0, r0, r0, lsl #1
 20c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 210:	41018e02 	tstmi	r1, r2, lsl #28
 214:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 218:	00000007 	andeq	r0, r0, r7
 21c:	0000001c 	andeq	r0, r0, ip, lsl r0
 220:	00000000 	andeq	r0, r0, r0
 224:	20000a88 	andcs	r0, r0, r8, lsl #21
 228:	00000076 	andeq	r0, r0, r6, ror r0
 22c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 230:	41018e02 	tstmi	r1, r2, lsl #28
 234:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 238:	00000007 	andeq	r0, r0, r7
 23c:	0000001c 	andeq	r0, r0, ip, lsl r0
 240:	00000000 	andeq	r0, r0, r0
 244:	20000afe 	strdcs	r0, [r0], -lr
 248:	00000026 	andeq	r0, r0, r6, lsr #32
 24c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 250:	41018e02 	tstmi	r1, r2, lsl #28
 254:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 258:	00000007 	andeq	r0, r0, r7
 25c:	00000024 	andeq	r0, r0, r4, lsr #32
 260:	00000000 	andeq	r0, r0, r0
 264:	20000b24 	andcs	r0, r0, r4, lsr #22
 268:	00000140 	andeq	r0, r0, r0, asr #2
 26c:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
 270:	86048505 	strhi	r8, [r4], -r5, lsl #10
 274:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 278:	e80e4101 	stmda	lr, {r0, r8, lr}
 27c:	070c4101 	streq	r4, [ip, -r1, lsl #2]
 280:	00000188 	andeq	r0, r0, r8, lsl #3
 284:	0000001c 	andeq	r0, r0, ip, lsl r0
 288:	00000000 	andeq	r0, r0, r0
 28c:	20000c64 	andcs	r0, r0, r4, ror #24
 290:	00000084 	andeq	r0, r0, r4, lsl #1
 294:	41080e41 	tstmi	r8, r1, asr #28
 298:	0487100e 	streq	r1, [r7], #14
 29c:	0e41038e 	cdpeq	3, 4, cr0, cr1, cr14, {4}
 2a0:	070d4120 	streq	r4, [sp, -r0, lsr #2]
 2a4:	0000000c 	andeq	r0, r0, ip
 2a8:	00000000 	andeq	r0, r0, r0
 2ac:	20000ce8 	andcs	r0, r0, r8, ror #25
 2b0:	00000006 	andeq	r0, r0, r6
 2b4:	0000000c 	andeq	r0, r0, ip
 2b8:	00000000 	andeq	r0, r0, r0
 2bc:	20000cee 	andcs	r0, r0, lr, ror #25
 2c0:	00000006 	andeq	r0, r0, r6
 2c4:	0000000c 	andeq	r0, r0, ip
 2c8:	00000000 	andeq	r0, r0, r0
 2cc:	20000cf4 	strdcs	r0, [r0], -r4
 2d0:	00000006 	andeq	r0, r0, r6
 2d4:	0000000c 	andeq	r0, r0, ip
 2d8:	00000000 	andeq	r0, r0, r0
 2dc:	20000cfa 	strdcs	r0, [r0], -sl
 2e0:	00000006 	andeq	r0, r0, r6
 2e4:	00000018 	andeq	r0, r0, r8, lsl r0
 2e8:	00000000 	andeq	r0, r0, r0
 2ec:	20000d00 	andcs	r0, r0, r0, lsl #26
 2f0:	00000048 	andeq	r0, r0, r8, asr #32
 2f4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 2f8:	41018e02 	tstmi	r1, r2, lsl #28
 2fc:	0000070d 	andeq	r0, r0, sp, lsl #14
 300:	0000001c 	andeq	r0, r0, ip, lsl r0
 304:	00000000 	andeq	r0, r0, r0
 308:	20000d48 	andcs	r0, r0, r8, asr #26
 30c:	00000068 	andeq	r0, r0, r8, rrx
 310:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
 314:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 318:	280e4101 	stmdacs	lr, {r0, r8, lr}
 31c:	00070d41 	andeq	r0, r7, r1, asr #26
 320:	0000001c 	andeq	r0, r0, ip, lsl r0
 324:	00000000 	andeq	r0, r0, r0
 328:	20000db0 			; <UNDEFINED> instruction: 0x20000db0
 32c:	00000060 	andeq	r0, r0, r0, rrx
 330:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
 334:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 338:	180e4101 	stmdane	lr, {r0, r8, lr}
 33c:	00070d41 	andeq	r0, r7, r1, asr #26
 340:	0000001c 	andeq	r0, r0, ip, lsl r0
 344:	00000000 	andeq	r0, r0, r0
 348:	20000e10 	andcs	r0, r0, r0, lsl lr
 34c:	0000005c 	andeq	r0, r0, ip, asr r0
 350:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 354:	41018e02 	tstmi	r1, r2, lsl #28
 358:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 35c:	00000007 	andeq	r0, r0, r7
 360:	0000001c 	andeq	r0, r0, ip, lsl r0
 364:	00000000 	andeq	r0, r0, r0
 368:	20000e6c 	andcs	r0, r0, ip, ror #28
 36c:	00000054 	andeq	r0, r0, r4, asr r0
 370:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 374:	41018e02 	tstmi	r1, r2, lsl #28
 378:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 37c:	00000007 	andeq	r0, r0, r7
 380:	00000018 	andeq	r0, r0, r8, lsl r0
 384:	00000000 	andeq	r0, r0, r0
 388:	20000ec0 	andcs	r0, r0, r0, asr #29
 38c:	0000004c 	andeq	r0, r0, ip, asr #32
 390:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 394:	41018e02 	tstmi	r1, r2, lsl #28
 398:	0000070d 	andeq	r0, r0, sp, lsl #14
 39c:	00000018 	andeq	r0, r0, r8, lsl r0
 3a0:	00000000 	andeq	r0, r0, r0
 3a4:	20000f0c 	andcs	r0, r0, ip, lsl #30
 3a8:	00000024 	andeq	r0, r0, r4, lsr #32
 3ac:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 3b0:	41018e02 	tstmi	r1, r2, lsl #28
 3b4:	0000070d 	andeq	r0, r0, sp, lsl #14
 3b8:	00000018 	andeq	r0, r0, r8, lsl r0
 3bc:	00000000 	andeq	r0, r0, r0
 3c0:	20000f30 	andcs	r0, r0, r0, lsr pc
 3c4:	00000020 	andeq	r0, r0, r0, lsr #32
 3c8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 3cc:	41018e02 	tstmi	r1, r2, lsl #28
 3d0:	0000070d 	andeq	r0, r0, sp, lsl #14
 3d4:	00000018 	andeq	r0, r0, r8, lsl r0
 3d8:	00000000 	andeq	r0, r0, r0
 3dc:	20000f50 	andcs	r0, r0, r0, asr pc
 3e0:	00000028 	andeq	r0, r0, r8, lsr #32
 3e4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 3e8:	41018e02 	tstmi	r1, r2, lsl #28
 3ec:	0000070d 	andeq	r0, r0, sp, lsl #14
 3f0:	00000018 	andeq	r0, r0, r8, lsl r0
 3f4:	00000000 	andeq	r0, r0, r0
 3f8:	20000f78 	andcs	r0, r0, r8, ror pc
 3fc:	00000030 	andeq	r0, r0, r0, lsr r0
 400:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 404:	41018e02 	tstmi	r1, r2, lsl #28
 408:	0000070d 	andeq	r0, r0, sp, lsl #14
 40c:	00000018 	andeq	r0, r0, r8, lsl r0
 410:	00000000 	andeq	r0, r0, r0
 414:	20000fa8 	andcs	r0, r0, r8, lsr #31
 418:	00000020 	andeq	r0, r0, r0, lsr #32
 41c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 420:	41018e02 	tstmi	r1, r2, lsl #28
 424:	0000070d 	andeq	r0, r0, sp, lsl #14
 428:	00000018 	andeq	r0, r0, r8, lsl r0
 42c:	00000000 	andeq	r0, r0, r0
 430:	20000fc8 	andcs	r0, r0, r8, asr #31
 434:	00000044 	andeq	r0, r0, r4, asr #32
 438:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 43c:	41018e02 	tstmi	r1, r2, lsl #28
 440:	0000070d 	andeq	r0, r0, sp, lsl #14
 444:	00000018 	andeq	r0, r0, r8, lsl r0
 448:	00000000 	andeq	r0, r0, r0
 44c:	2000100c 	andcs	r1, r0, ip
 450:	00000034 	andeq	r0, r0, r4, lsr r0
 454:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 458:	41018e02 	tstmi	r1, r2, lsl #28
 45c:	0000070d 	andeq	r0, r0, sp, lsl #14
 460:	0000001c 	andeq	r0, r0, ip, lsl r0
 464:	00000000 	andeq	r0, r0, r0
 468:	20001040 	andcs	r1, r0, r0, asr #32
 46c:	0000004c 	andeq	r0, r0, ip, asr #32
 470:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 474:	41018e02 	tstmi	r1, r2, lsl #28
 478:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 47c:	00000007 	andeq	r0, r0, r7
 480:	0000000c 	andeq	r0, r0, ip
 484:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 488:	7c010001 	stcvc	0, cr0, [r1], {1}
 48c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 490:	0000000c 	andeq	r0, r0, ip
 494:	00000480 	andeq	r0, r0, r0, lsl #9
 498:	2000108d 	andcs	r1, r0, sp, lsl #1
 49c:	000001cc 	andeq	r0, r0, ip, asr #3
 4a0:	0000000c 	andeq	r0, r0, ip
 4a4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 4a8:	7c020001 	stcvc	0, cr0, [r2], {1}
 4ac:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 4b0:	00000014 	andeq	r0, r0, r4, lsl r0
 4b4:	000004a0 	andeq	r0, r0, r0, lsr #9
 4b8:	20001264 	andcs	r1, r0, r4, ror #4
 4bc:	00000012 	andeq	r0, r0, r2, lsl r0
 4c0:	84080e42 	strhi	r0, [r8], #-3650	; 0xfffff1be
 4c4:	00018e02 	andeq	r8, r1, r2, lsl #28
 4c8:	0000000c 	andeq	r0, r0, ip
 4cc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 4d0:	7c020001 	stcvc	0, cr0, [r2], {1}
 4d4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 4d8:	0000000c 	andeq	r0, r0, ip
 4dc:	000004c8 	andeq	r0, r0, r8, asr #9
 4e0:	20001278 	andcs	r1, r0, r8, ror r2
 4e4:	00000014 	andeq	r0, r0, r4, lsl r0
