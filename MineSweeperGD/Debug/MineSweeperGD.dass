
Debug/MineSweeperGD:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:


__attribute__((naked)) __attribute__((section (".start_section")) )
void startup ( void )
{
__asm__ volatile(" LDR R0,=0x2001C000\n");    
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <startup+0xc>)
__asm__ volatile(" MOV SP,R0\n");
20000002:	4685      	mov	sp, r0
//__asm__ volatile(" BL _crt_init\n");            
__asm__ volatile(" BL main\n");                    
20000004:	f001 fb68 	bl	200016d8 <main>
//__asm__ volatile(" BL _crt_deinit\n");            
__asm__ volatile(" B .\n");               
20000008:	e7fe      	b.n	20000008 <startup+0x8>
2000000a:	c0000000 	andgt	r0, r0, r0
2000000e:	46c02001 	strbmi	r2, [r0], r1
20000012:	46c0      	nop			; (mov r8, r8)

20000014 <start_rand>:


void systick_irq_handler( void );

void start_rand()
{
20000014:	b580      	push	{r7, lr}
20000016:	af00      	add	r7, sp, #0
	if(counting) return; // kan inte göra båda samtidigt
20000018:	4b0b      	ldr	r3, [pc, #44]	; (20000048 <start_rand+0x34>)
2000001a:	681b      	ldr	r3, [r3, #0]
2000001c:	2b00      	cmp	r3, #0
2000001e:	d10f      	bne.n	20000040 <start_rand+0x2c>
	used_for_rand = 1;
20000020:	4b0a      	ldr	r3, [pc, #40]	; (2000004c <start_rand+0x38>)
20000022:	2201      	movs	r2, #1
20000024:	601a      	str	r2, [r3, #0]
	*STK_CTRL = 0;
20000026:	4b0a      	ldr	r3, [pc, #40]	; (20000050 <start_rand+0x3c>)
20000028:	2200      	movs	r2, #0
2000002a:	601a      	str	r2, [r3, #0]
	*STK_LOAD = LOAD_MAX;
2000002c:	4b09      	ldr	r3, [pc, #36]	; (20000054 <start_rand+0x40>)
2000002e:	22ff      	movs	r2, #255	; 0xff
20000030:	601a      	str	r2, [r3, #0]
	*STK_VAL = 0;
20000032:	4b09      	ldr	r3, [pc, #36]	; (20000058 <start_rand+0x44>)
20000034:	2200      	movs	r2, #0
20000036:	601a      	str	r2, [r3, #0]
	*STK_CTRL = 7;
20000038:	4b05      	ldr	r3, [pc, #20]	; (20000050 <start_rand+0x3c>)
2000003a:	2207      	movs	r2, #7
2000003c:	601a      	str	r2, [r3, #0]
2000003e:	e000      	b.n	20000042 <start_rand+0x2e>
	if(counting) return; // kan inte göra båda samtidigt
20000040:	46c0      	nop			; (mov r8, r8)
}
20000042:	46bd      	mov	sp, r7
20000044:	bd80      	pop	{r7, pc}
20000046:	46c0      	nop			; (mov r8, r8)
20000048:	20001c80 	andcs	r1, r0, r0, lsl #25
2000004c:	20001c84 	andcs	r1, r0, r4, lsl #25
20000050:	e000e010 	and	lr, r0, r0, lsl r0
20000054:	e000e014 	and	lr, r0, r4, lsl r0
20000058:	e000e018 	and	lr, r0, r8, lsl r0

2000005c <get_rand_val>:
int get_rand_val()
{
2000005c:	b580      	push	{r7, lr}
2000005e:	af00      	add	r7, sp, #0
	if(used_for_rand)
20000060:	4b05      	ldr	r3, [pc, #20]	; (20000078 <get_rand_val+0x1c>)
20000062:	681b      	ldr	r3, [r3, #0]
20000064:	2b00      	cmp	r3, #0
20000066:	d002      	beq.n	2000006e <get_rand_val+0x12>
		return *STK_VAL;
20000068:	4b04      	ldr	r3, [pc, #16]	; (2000007c <get_rand_val+0x20>)
2000006a:	681b      	ldr	r3, [r3, #0]
2000006c:	e000      	b.n	20000070 <get_rand_val+0x14>
	else return 0;
2000006e:	2300      	movs	r3, #0
}
20000070:	0018      	movs	r0, r3
20000072:	46bd      	mov	sp, r7
20000074:	bd80      	pop	{r7, pc}
20000076:	46c0      	nop			; (mov r8, r8)
20000078:	20001c84 	andcs	r1, r0, r4, lsl #25
2000007c:	e000e018 	and	lr, r0, r8, lsl r0

20000080 <end_rand>:
void end_rand()
{
20000080:	b580      	push	{r7, lr}
20000082:	af00      	add	r7, sp, #0
	*STK_CTRL = 0;
20000084:	4b04      	ldr	r3, [pc, #16]	; (20000098 <end_rand+0x18>)
20000086:	2200      	movs	r2, #0
20000088:	601a      	str	r2, [r3, #0]
	used_for_rand = 0;
2000008a:	4b04      	ldr	r3, [pc, #16]	; (2000009c <end_rand+0x1c>)
2000008c:	2200      	movs	r2, #0
2000008e:	601a      	str	r2, [r3, #0]
}
20000090:	46c0      	nop			; (mov r8, r8)
20000092:	46bd      	mov	sp, r7
20000094:	bd80      	pop	{r7, pc}
20000096:	46c0      	nop			; (mov r8, r8)
20000098:	e000e010 	and	lr, r0, r0, lsl r0
2000009c:	20001c84 	andcs	r1, r0, r4, lsl #25

200000a0 <sysTick_init>:

void sysTick_init()
{
200000a0:	b580      	push	{r7, lr}
200000a2:	af00      	add	r7, sp, #0
	//*SCB_VTOR = REALLOC;
	*((void (**)(void) ) 0x2001C03C) = &systick_irq_handler;
200000a4:	4b02      	ldr	r3, [pc, #8]	; (200000b0 <sysTick_init+0x10>)
200000a6:	4a03      	ldr	r2, [pc, #12]	; (200000b4 <sysTick_init+0x14>)
200000a8:	601a      	str	r2, [r3, #0]
}
200000aa:	46c0      	nop			; (mov r8, r8)
200000ac:	46bd      	mov	sp, r7
200000ae:	bd80      	pop	{r7, pc}
200000b0:	2001c03c 	andcs	ip, r1, ip, lsr r0
200000b4:	200000e9 	andcs	r0, r0, r9, ror #1

200000b8 <delay_1mikro>:

void delay_1mikro( void )
{
200000b8:	b580      	push	{r7, lr}
200000ba:	af00      	add	r7, sp, #0
	*STK_CTRL = 0;
200000bc:	4b07      	ldr	r3, [pc, #28]	; (200000dc <delay_1mikro+0x24>)
200000be:	2200      	movs	r2, #0
200000c0:	601a      	str	r2, [r3, #0]
	*STK_LOAD = (168 - 1);
200000c2:	4b07      	ldr	r3, [pc, #28]	; (200000e0 <delay_1mikro+0x28>)
200000c4:	22a7      	movs	r2, #167	; 0xa7
200000c6:	601a      	str	r2, [r3, #0]
	*STK_VAL = 0;
200000c8:	4b06      	ldr	r3, [pc, #24]	; (200000e4 <delay_1mikro+0x2c>)
200000ca:	2200      	movs	r2, #0
200000cc:	601a      	str	r2, [r3, #0]
	*STK_CTRL = 7;
200000ce:	4b03      	ldr	r3, [pc, #12]	; (200000dc <delay_1mikro+0x24>)
200000d0:	2207      	movs	r2, #7
200000d2:	601a      	str	r2, [r3, #0]
}
200000d4:	46c0      	nop			; (mov r8, r8)
200000d6:	46bd      	mov	sp, r7
200000d8:	bd80      	pop	{r7, pc}
200000da:	46c0      	nop			; (mov r8, r8)
200000dc:	e000e010 	and	lr, r0, r0, lsl r0
200000e0:	e000e014 	and	lr, r0, r4, lsl r0
200000e4:	e000e018 	and	lr, r0, r8, lsl r0

200000e8 <systick_irq_handler>:

void systick_irq_handler( void )
{
200000e8:	b580      	push	{r7, lr}
200000ea:	af00      	add	r7, sp, #0
	if(used_for_rand) systick_irq_handler_rand();
200000ec:	4b05      	ldr	r3, [pc, #20]	; (20000104 <systick_irq_handler+0x1c>)
200000ee:	681b      	ldr	r3, [r3, #0]
200000f0:	2b00      	cmp	r3, #0
200000f2:	d002      	beq.n	200000fa <systick_irq_handler+0x12>
200000f4:	f000 f82a 	bl	2000014c <systick_irq_handler_rand>
	else systick_irq_handler_counting();
}
200000f8:	e001      	b.n	200000fe <systick_irq_handler+0x16>
	else systick_irq_handler_counting();
200000fa:	f000 f805 	bl	20000108 <systick_irq_handler_counting>
}
200000fe:	46c0      	nop			; (mov r8, r8)
20000100:	46bd      	mov	sp, r7
20000102:	bd80      	pop	{r7, pc}
20000104:	20001c84 	andcs	r1, r0, r4, lsl #25

20000108 <systick_irq_handler_counting>:

void systick_irq_handler_counting( void )
{
20000108:	b580      	push	{r7, lr}
2000010a:	af00      	add	r7, sp, #0
	*STK_CTRL = 0;
2000010c:	4b0b      	ldr	r3, [pc, #44]	; (2000013c <systick_irq_handler_counting+0x34>)
2000010e:	2200      	movs	r2, #0
20000110:	601a      	str	r2, [r3, #0]
	delay_count -- ;
20000112:	4b0b      	ldr	r3, [pc, #44]	; (20000140 <systick_irq_handler_counting+0x38>)
20000114:	681b      	ldr	r3, [r3, #0]
20000116:	1e5a      	subs	r2, r3, #1
20000118:	4b09      	ldr	r3, [pc, #36]	; (20000140 <systick_irq_handler_counting+0x38>)
2000011a:	601a      	str	r2, [r3, #0]
	if( delay_count > 0 ) delay_1mikro();
2000011c:	4b08      	ldr	r3, [pc, #32]	; (20000140 <systick_irq_handler_counting+0x38>)
2000011e:	681b      	ldr	r3, [r3, #0]
20000120:	2b00      	cmp	r3, #0
20000122:	dd02      	ble.n	2000012a <systick_irq_handler_counting+0x22>
20000124:	f7ff ffc8 	bl	200000b8 <delay_1mikro>
	else 
		{
			systick_flag = 1;
			counting = 0;
		}
}
20000128:	e005      	b.n	20000136 <systick_irq_handler_counting+0x2e>
			systick_flag = 1;
2000012a:	4b06      	ldr	r3, [pc, #24]	; (20000144 <systick_irq_handler_counting+0x3c>)
2000012c:	2201      	movs	r2, #1
2000012e:	601a      	str	r2, [r3, #0]
			counting = 0;
20000130:	4b05      	ldr	r3, [pc, #20]	; (20000148 <systick_irq_handler_counting+0x40>)
20000132:	2200      	movs	r2, #0
20000134:	601a      	str	r2, [r3, #0]
}
20000136:	46c0      	nop			; (mov r8, r8)
20000138:	46bd      	mov	sp, r7
2000013a:	bd80      	pop	{r7, pc}
2000013c:	e000e010 	and	lr, r0, r0, lsl r0
20000140:	20001c7c 	andcs	r1, r0, ip, ror ip
20000144:	20001c78 	andcs	r1, r0, r8, ror ip
20000148:	20001c80 	andcs	r1, r0, r0, lsl #25

2000014c <systick_irq_handler_rand>:
void systick_irq_handler_rand( void )
{
2000014c:	b580      	push	{r7, lr}
2000014e:	af00      	add	r7, sp, #0
	*STK_CTRL = 0;
20000150:	4b07      	ldr	r3, [pc, #28]	; (20000170 <systick_irq_handler_rand+0x24>)
20000152:	2200      	movs	r2, #0
20000154:	601a      	str	r2, [r3, #0]
	*STK_LOAD = LOAD_MAX;
20000156:	4b07      	ldr	r3, [pc, #28]	; (20000174 <systick_irq_handler_rand+0x28>)
20000158:	22ff      	movs	r2, #255	; 0xff
2000015a:	601a      	str	r2, [r3, #0]
	*STK_VAL = 0;
2000015c:	4b06      	ldr	r3, [pc, #24]	; (20000178 <systick_irq_handler_rand+0x2c>)
2000015e:	2200      	movs	r2, #0
20000160:	601a      	str	r2, [r3, #0]
	*STK_CTRL = 7;
20000162:	4b03      	ldr	r3, [pc, #12]	; (20000170 <systick_irq_handler_rand+0x24>)
20000164:	2207      	movs	r2, #7
20000166:	601a      	str	r2, [r3, #0]
}
20000168:	46c0      	nop			; (mov r8, r8)
2000016a:	46bd      	mov	sp, r7
2000016c:	bd80      	pop	{r7, pc}
2000016e:	46c0      	nop			; (mov r8, r8)
20000170:	e000e010 	and	lr, r0, r0, lsl r0
20000174:	e000e014 	and	lr, r0, r4, lsl r0
20000178:	e000e018 	and	lr, r0, r8, lsl r0

2000017c <delay>:
void delay( unsigned int count )
{
2000017c:	b580      	push	{r7, lr}
2000017e:	b082      	sub	sp, #8
20000180:	af00      	add	r7, sp, #0
20000182:	6078      	str	r0, [r7, #4]
	if(used_for_rand) return; // kan inte göra båda samtidigt
20000184:	4b0c      	ldr	r3, [pc, #48]	; (200001b8 <delay+0x3c>)
20000186:	681b      	ldr	r3, [r3, #0]
20000188:	2b00      	cmp	r3, #0
2000018a:	d10e      	bne.n	200001aa <delay+0x2e>
	counting = 1;
2000018c:	4b0b      	ldr	r3, [pc, #44]	; (200001bc <delay+0x40>)
2000018e:	2201      	movs	r2, #1
20000190:	601a      	str	r2, [r3, #0]
	if( count == 0 ) return;
20000192:	687b      	ldr	r3, [r7, #4]
20000194:	2b00      	cmp	r3, #0
20000196:	d00a      	beq.n	200001ae <delay+0x32>
	delay_count = count;
20000198:	687a      	ldr	r2, [r7, #4]
2000019a:	4b09      	ldr	r3, [pc, #36]	; (200001c0 <delay+0x44>)
2000019c:	601a      	str	r2, [r3, #0]
	systick_flag = 0;
2000019e:	4b09      	ldr	r3, [pc, #36]	; (200001c4 <delay+0x48>)
200001a0:	2200      	movs	r2, #0
200001a2:	601a      	str	r2, [r3, #0]
	delay_1mikro();
200001a4:	f7ff ff88 	bl	200000b8 <delay_1mikro>
200001a8:	e002      	b.n	200001b0 <delay+0x34>
	if(used_for_rand) return; // kan inte göra båda samtidigt
200001aa:	46c0      	nop			; (mov r8, r8)
200001ac:	e000      	b.n	200001b0 <delay+0x34>
	if( count == 0 ) return;
200001ae:	46c0      	nop			; (mov r8, r8)
}
200001b0:	46bd      	mov	sp, r7
200001b2:	b002      	add	sp, #8
200001b4:	bd80      	pop	{r7, pc}
200001b6:	46c0      	nop			; (mov r8, r8)
200001b8:	20001c84 	andcs	r1, r0, r4, lsl #25
200001bc:	20001c80 	andcs	r1, r0, r0, lsl #25
200001c0:	20001c7c 	andcs	r1, r0, ip, ror ip
200001c4:	20001c78 	andcs	r1, r0, r8, ror ip

200001c8 <init_disp>:
#include "chars_for_disp.h"
#endif

#include "systick.h"
void init_disp(int use_ascii)
{
200001c8:	b580      	push	{r7, lr}
200001ca:	b082      	sub	sp, #8
200001cc:	af00      	add	r7, sp, #0
200001ce:	6078      	str	r0, [r7, #4]
	if(use_ascii)
200001d0:	687b      	ldr	r3, [r7, #4]
200001d2:	2b00      	cmp	r3, #0
200001d4:	d002      	beq.n	200001dc <init_disp+0x14>
		ascii_init();
200001d6:	f000 f96b 	bl	200004b0 <ascii_init>
	else
		*portModer = 0x55555555;
}
200001da:	e002      	b.n	200001e2 <init_disp+0x1a>
		*portModer = 0x55555555;
200001dc:	4b03      	ldr	r3, [pc, #12]	; (200001ec <init_disp+0x24>)
200001de:	4a04      	ldr	r2, [pc, #16]	; (200001f0 <init_disp+0x28>)
200001e0:	601a      	str	r2, [r3, #0]
}
200001e2:	46c0      	nop			; (mov r8, r8)
200001e4:	46bd      	mov	sp, r7
200001e6:	b002      	add	sp, #8
200001e8:	bd80      	pop	{r7, pc}
200001ea:	46c0      	nop			; (mov r8, r8)
200001ec:	40021000 	andmi	r1, r2, r0
200001f0:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

200001f4 <printToGD>:

void printToGD(int x, int y,char ch)
{
200001f4:	b5f0      	push	{r4, r5, r6, r7, lr}
200001f6:	b0b7      	sub	sp, #220	; 0xdc
200001f8:	af18      	add	r7, sp, #96	; 0x60
200001fa:	60f8      	str	r0, [r7, #12]
200001fc:	60b9      	str	r1, [r7, #8]
200001fe:	1dfb      	adds	r3, r7, #7
20000200:	701a      	strb	r2, [r3, #0]
	DISPCHAR print_ch;
	switch(ch)
20000202:	1dfb      	adds	r3, r7, #7
20000204:	781b      	ldrb	r3, [r3, #0]
20000206:	3b24      	subs	r3, #36	; 0x24
20000208:	2b3a      	cmp	r3, #58	; 0x3a
2000020a:	d854      	bhi.n	200002b6 <printToGD+0xc2>
2000020c:	009a      	lsls	r2, r3, #2
2000020e:	4b3d      	ldr	r3, [pc, #244]	; (20000304 <printToGD+0x110>)
20000210:	18d3      	adds	r3, r2, r3
20000212:	681b      	ldr	r3, [r3, #0]
20000214:	469f      	mov	pc, r3
	{
		case '0':
		print_ch = zero;
20000216:	2314      	movs	r3, #20
20000218:	18fa      	adds	r2, r7, r3
2000021a:	4b3b      	ldr	r3, [pc, #236]	; (20000308 <printToGD+0x114>)
2000021c:	0010      	movs	r0, r2
2000021e:	0019      	movs	r1, r3
20000220:	2361      	movs	r3, #97	; 0x61
20000222:	001a      	movs	r2, r3
20000224:	f001 fd14 	bl	20001c50 <memcpy>
		break;
20000228:	e04f      	b.n	200002ca <printToGD+0xd6>
		case '1':
		print_ch = one;
2000022a:	2314      	movs	r3, #20
2000022c:	18fa      	adds	r2, r7, r3
2000022e:	4b37      	ldr	r3, [pc, #220]	; (2000030c <printToGD+0x118>)
20000230:	0010      	movs	r0, r2
20000232:	0019      	movs	r1, r3
20000234:	2361      	movs	r3, #97	; 0x61
20000236:	001a      	movs	r2, r3
20000238:	f001 fd0a 	bl	20001c50 <memcpy>
		break;
2000023c:	e045      	b.n	200002ca <printToGD+0xd6>
		case '2':
		print_ch = two;
2000023e:	2314      	movs	r3, #20
20000240:	18fa      	adds	r2, r7, r3
20000242:	4b33      	ldr	r3, [pc, #204]	; (20000310 <printToGD+0x11c>)
20000244:	0010      	movs	r0, r2
20000246:	0019      	movs	r1, r3
20000248:	2361      	movs	r3, #97	; 0x61
2000024a:	001a      	movs	r2, r3
2000024c:	f001 fd00 	bl	20001c50 <memcpy>
		break;
20000250:	e03b      	b.n	200002ca <printToGD+0xd6>
		case '3':
		print_ch = three;
20000252:	2314      	movs	r3, #20
20000254:	18fa      	adds	r2, r7, r3
20000256:	4b2f      	ldr	r3, [pc, #188]	; (20000314 <printToGD+0x120>)
20000258:	0010      	movs	r0, r2
2000025a:	0019      	movs	r1, r3
2000025c:	2361      	movs	r3, #97	; 0x61
2000025e:	001a      	movs	r2, r3
20000260:	f001 fcf6 	bl	20001c50 <memcpy>
		break;
20000264:	e031      	b.n	200002ca <printToGD+0xd6>
		case '4':
		print_ch = four;
20000266:	2314      	movs	r3, #20
20000268:	18fa      	adds	r2, r7, r3
2000026a:	4b2b      	ldr	r3, [pc, #172]	; (20000318 <printToGD+0x124>)
2000026c:	0010      	movs	r0, r2
2000026e:	0019      	movs	r1, r3
20000270:	2361      	movs	r3, #97	; 0x61
20000272:	001a      	movs	r2, r3
20000274:	f001 fcec 	bl	20001c50 <memcpy>
		break;
20000278:	e027      	b.n	200002ca <printToGD+0xd6>
		case '$':
		print_ch = doll;
2000027a:	2314      	movs	r3, #20
2000027c:	18fa      	adds	r2, r7, r3
2000027e:	4b27      	ldr	r3, [pc, #156]	; (2000031c <printToGD+0x128>)
20000280:	0010      	movs	r0, r2
20000282:	0019      	movs	r1, r3
20000284:	2361      	movs	r3, #97	; 0x61
20000286:	001a      	movs	r2, r3
20000288:	f001 fce2 	bl	20001c50 <memcpy>
		break;
2000028c:	e01d      	b.n	200002ca <printToGD+0xd6>
		case bombCh:
		print_ch = star;
2000028e:	2314      	movs	r3, #20
20000290:	18fa      	adds	r2, r7, r3
20000292:	4b23      	ldr	r3, [pc, #140]	; (20000320 <printToGD+0x12c>)
20000294:	0010      	movs	r0, r2
20000296:	0019      	movs	r1, r3
20000298:	2361      	movs	r3, #97	; 0x61
2000029a:	001a      	movs	r2, r3
2000029c:	f001 fcd8 	bl	20001c50 <memcpy>
		break;
200002a0:	e013      	b.n	200002ca <printToGD+0xd6>
		case flagCh:
		print_ch = flag;
200002a2:	2314      	movs	r3, #20
200002a4:	18fa      	adds	r2, r7, r3
200002a6:	4b1f      	ldr	r3, [pc, #124]	; (20000324 <printToGD+0x130>)
200002a8:	0010      	movs	r0, r2
200002aa:	0019      	movs	r1, r3
200002ac:	2361      	movs	r3, #97	; 0x61
200002ae:	001a      	movs	r2, r3
200002b0:	f001 fcce 	bl	20001c50 <memcpy>
		break;
200002b4:	e009      	b.n	200002ca <printToGD+0xd6>
		default:
		print_ch = space;
200002b6:	2314      	movs	r3, #20
200002b8:	18fa      	adds	r2, r7, r3
200002ba:	4b1b      	ldr	r3, [pc, #108]	; (20000328 <printToGD+0x134>)
200002bc:	0010      	movs	r0, r2
200002be:	0019      	movs	r1, r3
200002c0:	2361      	movs	r3, #97	; 0x61
200002c2:	001a      	movs	r2, r3
200002c4:	f001 fcc4 	bl	20001c50 <memcpy>
		break;
200002c8:	46c0      	nop			; (mov r8, r8)
	}
	printNumAt(x*CHAR_X, y*CHAR_Y, print_ch);
200002ca:	68fb      	ldr	r3, [r7, #12]
200002cc:	00dd      	lsls	r5, r3, #3
200002ce:	68ba      	ldr	r2, [r7, #8]
200002d0:	0013      	movs	r3, r2
200002d2:	005b      	lsls	r3, r3, #1
200002d4:	189b      	adds	r3, r3, r2
200002d6:	009b      	lsls	r3, r3, #2
200002d8:	001e      	movs	r6, r3
200002da:	2314      	movs	r3, #20
200002dc:	18fc      	adds	r4, r7, r3
200002de:	466b      	mov	r3, sp
200002e0:	0018      	movs	r0, r3
200002e2:	0023      	movs	r3, r4
200002e4:	3308      	adds	r3, #8
200002e6:	2259      	movs	r2, #89	; 0x59
200002e8:	0019      	movs	r1, r3
200002ea:	f001 fcb1 	bl	20001c50 <memcpy>
200002ee:	6822      	ldr	r2, [r4, #0]
200002f0:	6863      	ldr	r3, [r4, #4]
200002f2:	0031      	movs	r1, r6
200002f4:	0028      	movs	r0, r5
200002f6:	f000 f819 	bl	2000032c <printNumAt>
}
200002fa:	46c0      	nop			; (mov r8, r8)
200002fc:	46bd      	mov	sp, r7
200002fe:	b01f      	add	sp, #124	; 0x7c
20000300:	bdf0      	pop	{r4, r5, r6, r7, pc}
20000302:	46c0      	nop			; (mov r8, r8)
20000304:	20002750 	andcs	r2, r0, r0, asr r7
20000308:	20002368 	andcs	r2, r0, r8, ror #6
2000030c:	200023cc 	andcs	r2, r0, ip, asr #7
20000310:	20002430 	andcs	r2, r0, r0, lsr r4
20000314:	20002494 	mulcs	r0, r4, r4
20000318:	200024f8 	strdcs	r2, [r0], -r8
2000031c:	2000255c 	andcs	r2, r0, ip, asr r5
20000320:	200025c0 	andcs	r2, r0, r0, asr #11
20000324:	20002688 	andcs	r2, r0, r8, lsl #13
20000328:	200026ec 	andcs	r2, r0, ip, ror #13

2000032c <printNumAt>:

void printNumAt(int x, int y, DISPCHAR ch)
{
2000032c:	b082      	sub	sp, #8
2000032e:	b580      	push	{r7, lr}
20000330:	b084      	sub	sp, #16
20000332:	af00      	add	r7, sp, #0
20000334:	6078      	str	r0, [r7, #4]
20000336:	6039      	str	r1, [r7, #0]
20000338:	2118      	movs	r1, #24
2000033a:	1879      	adds	r1, r7, r1
2000033c:	600a      	str	r2, [r1, #0]
2000033e:	604b      	str	r3, [r1, #4]
	for(int i = 0; i < CHAR_Y; i++)
20000340:	2300      	movs	r3, #0
20000342:	60fb      	str	r3, [r7, #12]
20000344:	e029      	b.n	2000039a <printNumAt+0x6e>
		for(int j = 0; j < CHAR_X; j++)
20000346:	2300      	movs	r3, #0
20000348:	60bb      	str	r3, [r7, #8]
2000034a:	e020      	b.n	2000038e <printNumAt+0x62>
		if(ch.pattern[i][j])
2000034c:	2318      	movs	r3, #24
2000034e:	18fb      	adds	r3, r7, r3
20000350:	68fa      	ldr	r2, [r7, #12]
20000352:	00d2      	lsls	r2, r2, #3
20000354:	189a      	adds	r2, r3, r2
20000356:	68bb      	ldr	r3, [r7, #8]
20000358:	18d3      	adds	r3, r2, r3
2000035a:	3301      	adds	r3, #1
2000035c:	781b      	ldrb	r3, [r3, #0]
2000035e:	2b00      	cmp	r3, #0
20000360:	d009      	beq.n	20000376 <printNumAt+0x4a>
			graphic_pixel_set(j+x, i+y);
20000362:	68ba      	ldr	r2, [r7, #8]
20000364:	687b      	ldr	r3, [r7, #4]
20000366:	18d0      	adds	r0, r2, r3
20000368:	68fa      	ldr	r2, [r7, #12]
2000036a:	683b      	ldr	r3, [r7, #0]
2000036c:	18d3      	adds	r3, r2, r3
2000036e:	0019      	movs	r1, r3
20000370:	f000 f824 	bl	200003bc <graphic_pixel_set>
20000374:	e008      	b.n	20000388 <printNumAt+0x5c>
		else
			graphic_pixel_clear(j+x, i+y);
20000376:	68ba      	ldr	r2, [r7, #8]
20000378:	687b      	ldr	r3, [r7, #4]
2000037a:	18d0      	adds	r0, r2, r3
2000037c:	68fa      	ldr	r2, [r7, #12]
2000037e:	683b      	ldr	r3, [r7, #0]
20000380:	18d3      	adds	r3, r2, r3
20000382:	0019      	movs	r1, r3
20000384:	f000 f81d 	bl	200003c2 <graphic_pixel_clear>
		for(int j = 0; j < CHAR_X; j++)
20000388:	68bb      	ldr	r3, [r7, #8]
2000038a:	3301      	adds	r3, #1
2000038c:	60bb      	str	r3, [r7, #8]
2000038e:	68bb      	ldr	r3, [r7, #8]
20000390:	2b07      	cmp	r3, #7
20000392:	dddb      	ble.n	2000034c <printNumAt+0x20>
	for(int i = 0; i < CHAR_Y; i++)
20000394:	68fb      	ldr	r3, [r7, #12]
20000396:	3301      	adds	r3, #1
20000398:	60fb      	str	r3, [r7, #12]
2000039a:	68fb      	ldr	r3, [r7, #12]
2000039c:	2b0b      	cmp	r3, #11
2000039e:	ddd2      	ble.n	20000346 <printNumAt+0x1a>
}
200003a0:	46c0      	nop			; (mov r8, r8)
200003a2:	46c0      	nop			; (mov r8, r8)
200003a4:	46bd      	mov	sp, r7
200003a6:	b004      	add	sp, #16
200003a8:	bc80      	pop	{r7}
200003aa:	bc08      	pop	{r3}
200003ac:	b002      	add	sp, #8
200003ae:	4718      	bx	r3

200003b0 <graphic_initialize>:


__attribute__((naked))
void graphic_initialize(void)
{
200003b0:	4770dff0 			; <UNDEFINED> instruction: 0x4770dff0
	__asm volatile(" .HWORD 0xDFF0\n");
	__asm volatile(" BX LR\n");
}
200003b4:	46c0      	nop			; (mov r8, r8)

200003b6 <graphic_clear_screen>:
__attribute__((naked))
void graphic_clear_screen(void)
{
200003b6:	4770dff1 			; <UNDEFINED> instruction: 0x4770dff1
	__asm volatile(" .HWORD 0xDFF1\n");
	__asm volatile(" BX LR\n");
}
200003ba:	46c0      	nop			; (mov r8, r8)

200003bc <graphic_pixel_set>:
__attribute__((naked))
void graphic_pixel_set(int x, int y)
{
200003bc:	4770dff2 			; <UNDEFINED> instruction: 0x4770dff2
	__asm volatile(" .HWORD 0xDFF2\n");
	__asm volatile(" BX LR\n");
}
200003c0:	46c0      	nop			; (mov r8, r8)

200003c2 <graphic_pixel_clear>:
__attribute__((naked))
void graphic_pixel_clear(int x, int y)
{
200003c2:	4770dff3 			; <UNDEFINED> instruction: 0x4770dff3
	__asm volatile(" .HWORD 0xDFF3\n");
	__asm volatile(" BX LR\n");
}
200003c6:	46c0      	nop			; (mov r8, r8)

200003c8 <print_start_text_ascii>:


//ascii
void print_start_text_ascii()
{
200003c8:	b5b0      	push	{r4, r5, r7, lr}
200003ca:	b088      	sub	sp, #32
200003cc:	af00      	add	r7, sp, #0
	ascii_gotoxy(1,1);
200003ce:	2101      	movs	r1, #1
200003d0:	2001      	movs	r0, #1
200003d2:	f000 f883 	bl	200004dc <ascii_gotoxy>
	char upper[] = "Flags left: ";
200003d6:	2110      	movs	r1, #16
200003d8:	187b      	adds	r3, r7, r1
200003da:	4a0d      	ldr	r2, [pc, #52]	; (20000410 <print_start_text_ascii+0x48>)
200003dc:	ca31      	ldmia	r2!, {r0, r4, r5}
200003de:	c331      	stmia	r3!, {r0, r4, r5}
200003e0:	7812      	ldrb	r2, [r2, #0]
200003e2:	701a      	strb	r2, [r3, #0]
	char lower[] = "Timer: 		";
200003e4:	1d3b      	adds	r3, r7, #4
200003e6:	4a0b      	ldr	r2, [pc, #44]	; (20000414 <print_start_text_ascii+0x4c>)
200003e8:	ca11      	ldmia	r2!, {r0, r4}
200003ea:	c311      	stmia	r3!, {r0, r4}
200003ec:	8812      	ldrh	r2, [r2, #0]
200003ee:	801a      	strh	r2, [r3, #0]
	ascii_write_string(upper);
200003f0:	187b      	adds	r3, r7, r1
200003f2:	0018      	movs	r0, r3
200003f4:	f000 f890 	bl	20000518 <ascii_write_string>
	ascii_gotoxy(1,2);
200003f8:	2102      	movs	r1, #2
200003fa:	2001      	movs	r0, #1
200003fc:	f000 f86e 	bl	200004dc <ascii_gotoxy>
	ascii_write_string(lower);
20000400:	1d3b      	adds	r3, r7, #4
20000402:	0018      	movs	r0, r3
20000404:	f000 f888 	bl	20000518 <ascii_write_string>
}
20000408:	46c0      	nop			; (mov r8, r8)
2000040a:	46bd      	mov	sp, r7
2000040c:	b008      	add	sp, #32
2000040e:	bdb0      	pop	{r4, r5, r7, pc}
20000410:	2000283c 	andcs	r2, r0, ip, lsr r8
20000414:	2000284c 	andcs	r2, r0, ip, asr #16

20000418 <print_flags>:

void print_flags(int f)
{
20000418:	b580      	push	{r7, lr}
2000041a:	b084      	sub	sp, #16
2000041c:	af00      	add	r7, sp, #0
2000041e:	6078      	str	r0, [r7, #4]
	if(f > 0)
20000420:	687b      	ldr	r3, [r7, #4]
20000422:	2b00      	cmp	r3, #0
20000424:	dd17      	ble.n	20000456 <print_flags+0x3e>
	{
		ascii_gotoxy(FLAGSOFFSET, 1);
20000426:	2101      	movs	r1, #1
20000428:	200c      	movs	r0, #12
2000042a:	f000 f857 	bl	200004dc <ascii_gotoxy>
		char clear[] = "  ";
2000042e:	200c      	movs	r0, #12
20000430:	183b      	adds	r3, r7, r0
20000432:	4a12      	ldr	r2, [pc, #72]	; (2000047c <print_flags+0x64>)
20000434:	8811      	ldrh	r1, [r2, #0]
20000436:	8019      	strh	r1, [r3, #0]
20000438:	7892      	ldrb	r2, [r2, #2]
2000043a:	709a      	strb	r2, [r3, #2]
		ascii_write_string(clear);
2000043c:	183b      	adds	r3, r7, r0
2000043e:	0018      	movs	r0, r3
20000440:	f000 f86a 	bl	20000518 <ascii_write_string>
	
		ascii_gotoxy(FLAGSOFFSET, 1);
20000444:	2101      	movs	r1, #1
20000446:	200c      	movs	r0, #12
20000448:	f000 f848 	bl	200004dc <ascii_gotoxy>
		ascii_write_number(f);	
2000044c:	687b      	ldr	r3, [r7, #4]
2000044e:	0018      	movs	r0, r3
20000450:	f000 f877 	bl	20000542 <ascii_write_number>
		ascii_write_char(45); // - = 45
		f *= (-1);
		ascii_write_number(f);
	}
	
}
20000454:	e00d      	b.n	20000472 <print_flags+0x5a>
		ascii_gotoxy(FLAGSOFFSET, 1);
20000456:	2101      	movs	r1, #1
20000458:	200c      	movs	r0, #12
2000045a:	f000 f83f 	bl	200004dc <ascii_gotoxy>
		ascii_write_char(45); // - = 45
2000045e:	202d      	movs	r0, #45	; 0x2d
20000460:	f000 f89e 	bl	200005a0 <ascii_write_char>
		f *= (-1);
20000464:	687b      	ldr	r3, [r7, #4]
20000466:	425b      	negs	r3, r3
20000468:	607b      	str	r3, [r7, #4]
		ascii_write_number(f);
2000046a:	687b      	ldr	r3, [r7, #4]
2000046c:	0018      	movs	r0, r3
2000046e:	f000 f868 	bl	20000542 <ascii_write_number>
}
20000472:	46c0      	nop			; (mov r8, r8)
20000474:	46bd      	mov	sp, r7
20000476:	b004      	add	sp, #16
20000478:	bd80      	pop	{r7, pc}
2000047a:	46c0      	nop			; (mov r8, r8)
2000047c:	20002858 	andcs	r2, r0, r8, asr r8

20000480 <print_timer>:

void print_timer(int secs, int tenths)
{
20000480:	b580      	push	{r7, lr}
20000482:	b082      	sub	sp, #8
20000484:	af00      	add	r7, sp, #0
20000486:	6078      	str	r0, [r7, #4]
20000488:	6039      	str	r1, [r7, #0]
	ascii_gotoxy(TIMEROFFSET, 2);
2000048a:	2102      	movs	r1, #2
2000048c:	2008      	movs	r0, #8
2000048e:	f000 f825 	bl	200004dc <ascii_gotoxy>
	ascii_write_number(secs);
20000492:	687b      	ldr	r3, [r7, #4]
20000494:	0018      	movs	r0, r3
20000496:	f000 f854 	bl	20000542 <ascii_write_number>
	ascii_write_char(46); // . = 46
2000049a:	202e      	movs	r0, #46	; 0x2e
2000049c:	f000 f880 	bl	200005a0 <ascii_write_char>
	ascii_write_number(tenths);
200004a0:	683b      	ldr	r3, [r7, #0]
200004a2:	0018      	movs	r0, r3
200004a4:	f000 f84d 	bl	20000542 <ascii_write_number>
}
200004a8:	46c0      	nop			; (mov r8, r8)
200004aa:	46bd      	mov	sp, r7
200004ac:	b002      	add	sp, #8
200004ae:	bd80      	pop	{r7, pc}

200004b0 <ascii_init>:


void ascii_init()
{
200004b0:	b580      	push	{r7, lr}
200004b2:	af00      	add	r7, sp, #0
	*portModer = 0x55555555;
200004b4:	4b07      	ldr	r3, [pc, #28]	; (200004d4 <ascii_init+0x24>)
200004b6:	4a08      	ldr	r2, [pc, #32]	; (200004d8 <ascii_init+0x28>)
200004b8:	601a      	str	r2, [r3, #0]
	ascii_command(1); //clear display
200004ba:	2001      	movs	r0, #1
200004bc:	f000 f88e 	bl	200005dc <ascii_command>
	ascii_command(0xF); //display på, markör: på, blinkande markör: på
200004c0:	200f      	movs	r0, #15
200004c2:	f000 f88b 	bl	200005dc <ascii_command>
	ascii_gotoxy(1,1);
200004c6:	2101      	movs	r1, #1
200004c8:	2001      	movs	r0, #1
200004ca:	f000 f807 	bl	200004dc <ascii_gotoxy>
}
200004ce:	46c0      	nop			; (mov r8, r8)
200004d0:	46bd      	mov	sp, r7
200004d2:	bd80      	pop	{r7, pc}
200004d4:	40021000 	andmi	r1, r2, r0
200004d8:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

200004dc <ascii_gotoxy>:
void ascii_gotoxy(int x, int y)
{
200004dc:	b580      	push	{r7, lr}
200004de:	b084      	sub	sp, #16
200004e0:	af00      	add	r7, sp, #0
200004e2:	6078      	str	r0, [r7, #4]
200004e4:	6039      	str	r1, [r7, #0]
	int address = x-1;
200004e6:	687b      	ldr	r3, [r7, #4]
200004e8:	3b01      	subs	r3, #1
200004ea:	60fb      	str	r3, [r7, #12]
	address = y == 2 ? address + 0x40 : address;
200004ec:	683b      	ldr	r3, [r7, #0]
200004ee:	2b02      	cmp	r3, #2
200004f0:	d102      	bne.n	200004f8 <ascii_gotoxy+0x1c>
200004f2:	68fb      	ldr	r3, [r7, #12]
200004f4:	3340      	adds	r3, #64	; 0x40
200004f6:	e000      	b.n	200004fa <ascii_gotoxy+0x1e>
200004f8:	68fb      	ldr	r3, [r7, #12]
200004fa:	60fb      	str	r3, [r7, #12]
	ascii_write_command(STATUS_FLAG | address);
200004fc:	68fb      	ldr	r3, [r7, #12]
200004fe:	b25b      	sxtb	r3, r3
20000500:	2280      	movs	r2, #128	; 0x80
20000502:	4252      	negs	r2, r2
20000504:	4313      	orrs	r3, r2
20000506:	b25b      	sxtb	r3, r3
20000508:	b2db      	uxtb	r3, r3
2000050a:	0018      	movs	r0, r3
2000050c:	f000 f8f3 	bl	200006f6 <ascii_write_command>
}
20000510:	46c0      	nop			; (mov r8, r8)
20000512:	46bd      	mov	sp, r7
20000514:	b004      	add	sp, #16
20000516:	bd80      	pop	{r7, pc}

20000518 <ascii_write_string>:
void ascii_write_string(char * p)
{
20000518:	b580      	push	{r7, lr}
2000051a:	b082      	sub	sp, #8
2000051c:	af00      	add	r7, sp, #0
2000051e:	6078      	str	r0, [r7, #4]
	while(* p!= 0)
20000520:	e006      	b.n	20000530 <ascii_write_string+0x18>
		ascii_write_char(*p++);
20000522:	687b      	ldr	r3, [r7, #4]
20000524:	1c5a      	adds	r2, r3, #1
20000526:	607a      	str	r2, [r7, #4]
20000528:	781b      	ldrb	r3, [r3, #0]
2000052a:	0018      	movs	r0, r3
2000052c:	f000 f838 	bl	200005a0 <ascii_write_char>
	while(* p!= 0)
20000530:	687b      	ldr	r3, [r7, #4]
20000532:	781b      	ldrb	r3, [r3, #0]
20000534:	2b00      	cmp	r3, #0
20000536:	d1f4      	bne.n	20000522 <ascii_write_string+0xa>
}
20000538:	46c0      	nop			; (mov r8, r8)
2000053a:	46c0      	nop			; (mov r8, r8)
2000053c:	46bd      	mov	sp, r7
2000053e:	b002      	add	sp, #8
20000540:	bd80      	pop	{r7, pc}

20000542 <ascii_write_number>:
void ascii_write_number(int num)
{
20000542:	b580      	push	{r7, lr}
20000544:	b084      	sub	sp, #16
20000546:	af00      	add	r7, sp, #0
20000548:	6078      	str	r0, [r7, #4]
	if(num < 10)
2000054a:	687b      	ldr	r3, [r7, #4]
2000054c:	2b09      	cmp	r3, #9
2000054e:	dc07      	bgt.n	20000560 <ascii_write_number+0x1e>
		ascii_write_char(48 + num);
20000550:	687b      	ldr	r3, [r7, #4]
20000552:	b2db      	uxtb	r3, r3
20000554:	3330      	adds	r3, #48	; 0x30
20000556:	b2db      	uxtb	r3, r3
20000558:	0018      	movs	r0, r3
2000055a:	f000 f821 	bl	200005a0 <ascii_write_char>
		int tens = num / 10;
		int ones = num % 10;
		ascii_write_char(48 + tens);
		ascii_write_char(48 + ones);
	}
}
2000055e:	e01b      	b.n	20000598 <ascii_write_number+0x56>
		int tens = num / 10;
20000560:	687b      	ldr	r3, [r7, #4]
20000562:	210a      	movs	r1, #10
20000564:	0018      	movs	r0, r3
20000566:	f001 fa87 	bl	20001a78 <__divsi3>
2000056a:	0003      	movs	r3, r0
2000056c:	60fb      	str	r3, [r7, #12]
		int ones = num % 10;
2000056e:	687b      	ldr	r3, [r7, #4]
20000570:	210a      	movs	r1, #10
20000572:	0018      	movs	r0, r3
20000574:	f001 fb66 	bl	20001c44 <__aeabi_idivmod>
20000578:	000b      	movs	r3, r1
2000057a:	60bb      	str	r3, [r7, #8]
		ascii_write_char(48 + tens);
2000057c:	68fb      	ldr	r3, [r7, #12]
2000057e:	b2db      	uxtb	r3, r3
20000580:	3330      	adds	r3, #48	; 0x30
20000582:	b2db      	uxtb	r3, r3
20000584:	0018      	movs	r0, r3
20000586:	f000 f80b 	bl	200005a0 <ascii_write_char>
		ascii_write_char(48 + ones);
2000058a:	68bb      	ldr	r3, [r7, #8]
2000058c:	b2db      	uxtb	r3, r3
2000058e:	3330      	adds	r3, #48	; 0x30
20000590:	b2db      	uxtb	r3, r3
20000592:	0018      	movs	r0, r3
20000594:	f000 f804 	bl	200005a0 <ascii_write_char>
}
20000598:	46c0      	nop			; (mov r8, r8)
2000059a:	46bd      	mov	sp, r7
2000059c:	b004      	add	sp, #16
2000059e:	bd80      	pop	{r7, pc}

200005a0 <ascii_write_char>:
void ascii_write_char(char ch)
{
200005a0:	b580      	push	{r7, lr}
200005a2:	b082      	sub	sp, #8
200005a4:	af00      	add	r7, sp, #0
200005a6:	0002      	movs	r2, r0
200005a8:	1dfb      	adds	r3, r7, #7
200005aa:	701a      	strb	r2, [r3, #0]
	while((ascii_read_status() & STATUS_FLAG) == STATUS_FLAG);
200005ac:	46c0      	nop			; (mov r8, r8)
200005ae:	f000 f853 	bl	20000658 <ascii_read_status>
200005b2:	0003      	movs	r3, r0
200005b4:	001a      	movs	r2, r3
200005b6:	2380      	movs	r3, #128	; 0x80
200005b8:	4013      	ands	r3, r2
200005ba:	2b80      	cmp	r3, #128	; 0x80
200005bc:	d0f7      	beq.n	200005ae <ascii_write_char+0xe>
	delay_micro(8);
200005be:	2008      	movs	r0, #8
200005c0:	f000 f928 	bl	20000814 <delay_micro>
	ascii_write_data(ch);
200005c4:	1dfb      	adds	r3, r7, #7
200005c6:	781b      	ldrb	r3, [r3, #0]
200005c8:	0018      	movs	r0, r3
200005ca:	f000 f87f 	bl	200006cc <ascii_write_data>
	delay_micro(45);
200005ce:	202d      	movs	r0, #45	; 0x2d
200005d0:	f000 f920 	bl	20000814 <delay_micro>
}
200005d4:	46c0      	nop			; (mov r8, r8)
200005d6:	46bd      	mov	sp, r7
200005d8:	b002      	add	sp, #8
200005da:	bd80      	pop	{r7, pc}

200005dc <ascii_command>:
void ascii_command(char cmd)
{
200005dc:	b580      	push	{r7, lr}
200005de:	b082      	sub	sp, #8
200005e0:	af00      	add	r7, sp, #0
200005e2:	0002      	movs	r2, r0
200005e4:	1dfb      	adds	r3, r7, #7
200005e6:	701a      	strb	r2, [r3, #0]
	while((ascii_read_status() & STATUS_FLAG) == STATUS_FLAG);
200005e8:	46c0      	nop			; (mov r8, r8)
200005ea:	f000 f835 	bl	20000658 <ascii_read_status>
200005ee:	0003      	movs	r3, r0
200005f0:	001a      	movs	r2, r3
200005f2:	2380      	movs	r3, #128	; 0x80
200005f4:	4013      	ands	r3, r2
200005f6:	2b80      	cmp	r3, #128	; 0x80
200005f8:	d0f7      	beq.n	200005ea <ascii_command+0xe>
	delay_micro(8);
200005fa:	2008      	movs	r0, #8
200005fc:	f000 f90a 	bl	20000814 <delay_micro>
	ascii_write_command(cmd);
20000600:	1dfb      	adds	r3, r7, #7
20000602:	781b      	ldrb	r3, [r3, #0]
20000604:	0018      	movs	r0, r3
20000606:	f000 f876 	bl	200006f6 <ascii_write_command>
	delay_milli(2);
2000060a:	2002      	movs	r0, #2
2000060c:	f000 f925 	bl	2000085a <delay_milli>
}
20000610:	46c0      	nop			; (mov r8, r8)
20000612:	46bd      	mov	sp, r7
20000614:	b002      	add	sp, #8
20000616:	bd80      	pop	{r7, pc}

20000618 <ascii_read_data>:

unsigned char ascii_read_data()
{
20000618:	b590      	push	{r4, r7, lr}
2000061a:	b083      	sub	sp, #12
2000061c:	af00      	add	r7, sp, #0
	*portModer = 0x00005555;
2000061e:	4b0b      	ldr	r3, [pc, #44]	; (2000064c <ascii_read_data+0x34>)
20000620:	4a0b      	ldr	r2, [pc, #44]	; (20000650 <ascii_read_data+0x38>)
20000622:	601a      	str	r2, [r3, #0]
	ascii_ctrl_bit_set(B_RW);
20000624:	2002      	movs	r0, #2
20000626:	f000 f893 	bl	20000750 <ascii_ctrl_bit_set>
	ascii_ctrl_bit_set(B_RS);
2000062a:	2001      	movs	r0, #1
2000062c:	f000 f890 	bl	20000750 <ascii_ctrl_bit_set>
	unsigned char rv = ascii_read_controller();
20000630:	1dfc      	adds	r4, r7, #7
20000632:	f000 f831 	bl	20000698 <ascii_read_controller>
20000636:	0003      	movs	r3, r0
20000638:	7023      	strb	r3, [r4, #0]
	*portModer = 0x55555555;
2000063a:	4b04      	ldr	r3, [pc, #16]	; (2000064c <ascii_read_data+0x34>)
2000063c:	4a05      	ldr	r2, [pc, #20]	; (20000654 <ascii_read_data+0x3c>)
2000063e:	601a      	str	r2, [r3, #0]
	return rv;
20000640:	1dfb      	adds	r3, r7, #7
20000642:	781b      	ldrb	r3, [r3, #0]
}
20000644:	0018      	movs	r0, r3
20000646:	46bd      	mov	sp, r7
20000648:	b003      	add	sp, #12
2000064a:	bd90      	pop	{r4, r7, pc}
2000064c:	40021000 	andmi	r1, r2, r0
20000650:	00005555 	andeq	r5, r0, r5, asr r5
20000654:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000658 <ascii_read_status>:

unsigned char ascii_read_status()
{
20000658:	b590      	push	{r4, r7, lr}
2000065a:	b083      	sub	sp, #12
2000065c:	af00      	add	r7, sp, #0
	*portModer = 0x00005555;
2000065e:	4b0b      	ldr	r3, [pc, #44]	; (2000068c <ascii_read_status+0x34>)
20000660:	4a0b      	ldr	r2, [pc, #44]	; (20000690 <ascii_read_status+0x38>)
20000662:	601a      	str	r2, [r3, #0]
	ascii_ctrl_bit_set(B_RW);
20000664:	2002      	movs	r0, #2
20000666:	f000 f873 	bl	20000750 <ascii_ctrl_bit_set>
	ascii_ctrl_bit_clear(B_RS);
2000066a:	2001      	movs	r0, #1
2000066c:	f000 f88c 	bl	20000788 <ascii_ctrl_bit_clear>
	unsigned char rv = ascii_read_controller();
20000670:	1dfc      	adds	r4, r7, #7
20000672:	f000 f811 	bl	20000698 <ascii_read_controller>
20000676:	0003      	movs	r3, r0
20000678:	7023      	strb	r3, [r4, #0]
	*portModer = 0x55555555;
2000067a:	4b04      	ldr	r3, [pc, #16]	; (2000068c <ascii_read_status+0x34>)
2000067c:	4a05      	ldr	r2, [pc, #20]	; (20000694 <ascii_read_status+0x3c>)
2000067e:	601a      	str	r2, [r3, #0]
	return rv;
20000680:	1dfb      	adds	r3, r7, #7
20000682:	781b      	ldrb	r3, [r3, #0]
}
20000684:	0018      	movs	r0, r3
20000686:	46bd      	mov	sp, r7
20000688:	b003      	add	sp, #12
2000068a:	bd90      	pop	{r4, r7, pc}
2000068c:	40021000 	andmi	r1, r2, r0
20000690:	00005555 	andeq	r5, r0, r5, asr r5
20000694:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000698 <ascii_read_controller>:
unsigned char ascii_read_controller()
{
20000698:	b580      	push	{r7, lr}
2000069a:	b082      	sub	sp, #8
2000069c:	af00      	add	r7, sp, #0
	ascii_ctrl_bit_set(B_E);
2000069e:	2040      	movs	r0, #64	; 0x40
200006a0:	f000 f856 	bl	20000750 <ascii_ctrl_bit_set>
	delay_250ns();
200006a4:	f000 f894 	bl	200007d0 <delay_250ns>
	delay_250ns();
200006a8:	f000 f892 	bl	200007d0 <delay_250ns>
	unsigned char rv = *portIdrHigh;
200006ac:	4a06      	ldr	r2, [pc, #24]	; (200006c8 <ascii_read_controller+0x30>)
200006ae:	1dfb      	adds	r3, r7, #7
200006b0:	7812      	ldrb	r2, [r2, #0]
200006b2:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_clear(B_E);
200006b4:	2040      	movs	r0, #64	; 0x40
200006b6:	f000 f867 	bl	20000788 <ascii_ctrl_bit_clear>
	return rv;
200006ba:	1dfb      	adds	r3, r7, #7
200006bc:	781b      	ldrb	r3, [r3, #0]
}
200006be:	0018      	movs	r0, r3
200006c0:	46bd      	mov	sp, r7
200006c2:	b002      	add	sp, #8
200006c4:	bd80      	pop	{r7, pc}
200006c6:	46c0      	nop			; (mov r8, r8)
200006c8:	40021011 	andmi	r1, r2, r1, lsl r0

200006cc <ascii_write_data>:
void ascii_write_data(char data)
{
200006cc:	b580      	push	{r7, lr}
200006ce:	b082      	sub	sp, #8
200006d0:	af00      	add	r7, sp, #0
200006d2:	0002      	movs	r2, r0
200006d4:	1dfb      	adds	r3, r7, #7
200006d6:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_set(B_RS);
200006d8:	2001      	movs	r0, #1
200006da:	f000 f839 	bl	20000750 <ascii_ctrl_bit_set>
	ascii_ctrl_bit_clear(B_RW);
200006de:	2002      	movs	r0, #2
200006e0:	f000 f852 	bl	20000788 <ascii_ctrl_bit_clear>
	ascii_write_controller(data);
200006e4:	1dfb      	adds	r3, r7, #7
200006e6:	781b      	ldrb	r3, [r3, #0]
200006e8:	0018      	movs	r0, r3
200006ea:	f000 f819 	bl	20000720 <ascii_write_controller>
}
200006ee:	46c0      	nop			; (mov r8, r8)
200006f0:	46bd      	mov	sp, r7
200006f2:	b002      	add	sp, #8
200006f4:	bd80      	pop	{r7, pc}

200006f6 <ascii_write_command>:
void ascii_write_command(char cmd)
{
200006f6:	b580      	push	{r7, lr}
200006f8:	b082      	sub	sp, #8
200006fa:	af00      	add	r7, sp, #0
200006fc:	0002      	movs	r2, r0
200006fe:	1dfb      	adds	r3, r7, #7
20000700:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_clear(B_RW);
20000702:	2002      	movs	r0, #2
20000704:	f000 f840 	bl	20000788 <ascii_ctrl_bit_clear>
	ascii_ctrl_bit_clear(B_RS);
20000708:	2001      	movs	r0, #1
2000070a:	f000 f83d 	bl	20000788 <ascii_ctrl_bit_clear>
	ascii_write_controller(cmd);
2000070e:	1dfb      	adds	r3, r7, #7
20000710:	781b      	ldrb	r3, [r3, #0]
20000712:	0018      	movs	r0, r3
20000714:	f000 f804 	bl	20000720 <ascii_write_controller>
}
20000718:	46c0      	nop			; (mov r8, r8)
2000071a:	46bd      	mov	sp, r7
2000071c:	b002      	add	sp, #8
2000071e:	bd80      	pop	{r7, pc}

20000720 <ascii_write_controller>:
void ascii_write_controller(char cmd)
{
20000720:	b580      	push	{r7, lr}
20000722:	b082      	sub	sp, #8
20000724:	af00      	add	r7, sp, #0
20000726:	0002      	movs	r2, r0
20000728:	1dfb      	adds	r3, r7, #7
2000072a:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_set(B_E);
2000072c:	2040      	movs	r0, #64	; 0x40
2000072e:	f000 f80f 	bl	20000750 <ascii_ctrl_bit_set>
	*portOdrHigh = cmd;
20000732:	4a06      	ldr	r2, [pc, #24]	; (2000074c <ascii_write_controller+0x2c>)
20000734:	1dfb      	adds	r3, r7, #7
20000736:	781b      	ldrb	r3, [r3, #0]
20000738:	7013      	strb	r3, [r2, #0]
	delay_250ns();
2000073a:	f000 f849 	bl	200007d0 <delay_250ns>
	ascii_ctrl_bit_clear(B_E);
2000073e:	2040      	movs	r0, #64	; 0x40
20000740:	f000 f822 	bl	20000788 <ascii_ctrl_bit_clear>
}
20000744:	46c0      	nop			; (mov r8, r8)
20000746:	46bd      	mov	sp, r7
20000748:	b002      	add	sp, #8
2000074a:	bd80      	pop	{r7, pc}
2000074c:	40021015 	andmi	r1, r2, r5, lsl r0

20000750 <ascii_ctrl_bit_set>:
void ascii_ctrl_bit_set( char x )
{ /* x: bitmask bits are 1 to set */
20000750:	b580      	push	{r7, lr}
20000752:	b084      	sub	sp, #16
20000754:	af00      	add	r7, sp, #0
20000756:	0002      	movs	r2, r0
20000758:	1dfb      	adds	r3, r7, #7
2000075a:	701a      	strb	r2, [r3, #0]
	char c;
	c = *portOdrLow;
2000075c:	4a09      	ldr	r2, [pc, #36]	; (20000784 <ascii_ctrl_bit_set+0x34>)
2000075e:	210f      	movs	r1, #15
20000760:	187b      	adds	r3, r7, r1
20000762:	7812      	ldrb	r2, [r2, #0]
20000764:	701a      	strb	r2, [r3, #0]
	*portOdrLow = B_SELECT | x | c;
20000766:	1dfa      	adds	r2, r7, #7
20000768:	187b      	adds	r3, r7, r1
2000076a:	7812      	ldrb	r2, [r2, #0]
2000076c:	781b      	ldrb	r3, [r3, #0]
2000076e:	4313      	orrs	r3, r2
20000770:	b2db      	uxtb	r3, r3
20000772:	4a04      	ldr	r2, [pc, #16]	; (20000784 <ascii_ctrl_bit_set+0x34>)
20000774:	2104      	movs	r1, #4
20000776:	430b      	orrs	r3, r1
20000778:	b2db      	uxtb	r3, r3
2000077a:	7013      	strb	r3, [r2, #0]
}
2000077c:	46c0      	nop			; (mov r8, r8)
2000077e:	46bd      	mov	sp, r7
20000780:	b004      	add	sp, #16
20000782:	bd80      	pop	{r7, pc}
20000784:	40021014 	andmi	r1, r2, r4, lsl r0

20000788 <ascii_ctrl_bit_clear>:
void ascii_ctrl_bit_clear( char x )
{ /* x: bitmask bits are 1 to clear */
20000788:	b580      	push	{r7, lr}
2000078a:	b084      	sub	sp, #16
2000078c:	af00      	add	r7, sp, #0
2000078e:	0002      	movs	r2, r0
20000790:	1dfb      	adds	r3, r7, #7
20000792:	701a      	strb	r2, [r3, #0]
	char c;
	c = *portOdrLow;
20000794:	4a0d      	ldr	r2, [pc, #52]	; (200007cc <ascii_ctrl_bit_clear+0x44>)
20000796:	210f      	movs	r1, #15
20000798:	187b      	adds	r3, r7, r1
2000079a:	7812      	ldrb	r2, [r2, #0]
2000079c:	701a      	strb	r2, [r3, #0]
	c = c & ~x;
2000079e:	1dfb      	adds	r3, r7, #7
200007a0:	781b      	ldrb	r3, [r3, #0]
200007a2:	b25b      	sxtb	r3, r3
200007a4:	43db      	mvns	r3, r3
200007a6:	b25b      	sxtb	r3, r3
200007a8:	187a      	adds	r2, r7, r1
200007aa:	7812      	ldrb	r2, [r2, #0]
200007ac:	b252      	sxtb	r2, r2
200007ae:	4013      	ands	r3, r2
200007b0:	b25a      	sxtb	r2, r3
200007b2:	187b      	adds	r3, r7, r1
200007b4:	701a      	strb	r2, [r3, #0]
	*portOdrLow = B_SELECT | c;
200007b6:	4a05      	ldr	r2, [pc, #20]	; (200007cc <ascii_ctrl_bit_clear+0x44>)
200007b8:	187b      	adds	r3, r7, r1
200007ba:	781b      	ldrb	r3, [r3, #0]
200007bc:	2104      	movs	r1, #4
200007be:	430b      	orrs	r3, r1
200007c0:	b2db      	uxtb	r3, r3
200007c2:	7013      	strb	r3, [r2, #0]
}
200007c4:	46c0      	nop			; (mov r8, r8)
200007c6:	46bd      	mov	sp, r7
200007c8:	b004      	add	sp, #16
200007ca:	bd80      	pop	{r7, pc}
200007cc:	40021014 	andmi	r1, r2, r4, lsl r0

200007d0 <delay_250ns>:


void delay_250ns()
{
200007d0:	b580      	push	{r7, lr}
200007d2:	af00      	add	r7, sp, #0
	
	//ett tick från klockan var 6:e nanosekund 
	//för att få 250 ns behöver vi vänta 6*42 ns
	*STK_CTRL = 0;
200007d4:	4b0c      	ldr	r3, [pc, #48]	; (20000808 <delay_250ns+0x38>)
200007d6:	2200      	movs	r2, #0
200007d8:	601a      	str	r2, [r3, #0]
	*STK_LOAD = 41; // 250/6 =ca 42, -1 för att klockan är ett tick försenat att märka att val = 0 
200007da:	4b0c      	ldr	r3, [pc, #48]	; (2000080c <delay_250ns+0x3c>)
200007dc:	2229      	movs	r2, #41	; 0x29
200007de:	601a      	str	r2, [r3, #0]
	*STK_VAL = 0;
200007e0:	4b0b      	ldr	r3, [pc, #44]	; (20000810 <delay_250ns+0x40>)
200007e2:	2200      	movs	r2, #0
200007e4:	601a      	str	r2, [r3, #0]
	*STK_CTRL = 5;	// 101 systemklocka, inget avbrott, starta räknare
200007e6:	4b08      	ldr	r3, [pc, #32]	; (20000808 <delay_250ns+0x38>)
200007e8:	2205      	movs	r2, #5
200007ea:	601a      	str	r2, [r3, #0]
	while((*STK_CTRL & 0x10000) == 0); // vänta på bit 16 = 1
200007ec:	46c0      	nop			; (mov r8, r8)
200007ee:	4b06      	ldr	r3, [pc, #24]	; (20000808 <delay_250ns+0x38>)
200007f0:	681a      	ldr	r2, [r3, #0]
200007f2:	2380      	movs	r3, #128	; 0x80
200007f4:	025b      	lsls	r3, r3, #9
200007f6:	4013      	ands	r3, r2
200007f8:	d0f9      	beq.n	200007ee <delay_250ns+0x1e>
	*STK_CTRL = 0; // stoppa räknaren
200007fa:	4b03      	ldr	r3, [pc, #12]	; (20000808 <delay_250ns+0x38>)
200007fc:	2200      	movs	r2, #0
200007fe:	601a      	str	r2, [r3, #0]
}
20000800:	46c0      	nop			; (mov r8, r8)
20000802:	46bd      	mov	sp, r7
20000804:	bd80      	pop	{r7, pc}
20000806:	46c0      	nop			; (mov r8, r8)
20000808:	e000e010 	and	lr, r0, r0, lsl r0
2000080c:	e000e014 	and	lr, r0, r4, lsl r0
20000810:	e000e018 	and	lr, r0, r8, lsl r0

20000814 <delay_micro>:

#define SIMULATED
void delay_micro(unsigned int us)
{
20000814:	b580      	push	{r7, lr}
20000816:	b082      	sub	sp, #8
20000818:	af00      	add	r7, sp, #0
2000081a:	6078      	str	r0, [r7, #4]
#ifdef SIMULATED
	us /= 1000;
2000081c:	687b      	ldr	r3, [r7, #4]
2000081e:	22fa      	movs	r2, #250	; 0xfa
20000820:	0091      	lsls	r1, r2, #2
20000822:	0018      	movs	r0, r3
20000824:	f001 f89e 	bl	20001964 <__udivsi3>
20000828:	0003      	movs	r3, r0
2000082a:	607b      	str	r3, [r7, #4]
	us++;
2000082c:	687b      	ldr	r3, [r7, #4]
2000082e:	3301      	adds	r3, #1
20000830:	607b      	str	r3, [r7, #4]
#endif
	while(us > 0)
20000832:	e00a      	b.n	2000084a <delay_micro+0x36>
	{
		delay_250ns();
20000834:	f7ff ffcc 	bl	200007d0 <delay_250ns>
		delay_250ns();
20000838:	f7ff ffca 	bl	200007d0 <delay_250ns>
		delay_250ns();
2000083c:	f7ff ffc8 	bl	200007d0 <delay_250ns>
		delay_250ns();
20000840:	f7ff ffc6 	bl	200007d0 <delay_250ns>
		us--;
20000844:	687b      	ldr	r3, [r7, #4]
20000846:	3b01      	subs	r3, #1
20000848:	607b      	str	r3, [r7, #4]
	while(us > 0)
2000084a:	687b      	ldr	r3, [r7, #4]
2000084c:	2b00      	cmp	r3, #0
2000084e:	d1f1      	bne.n	20000834 <delay_micro+0x20>
	}
}
20000850:	46c0      	nop			; (mov r8, r8)
20000852:	46c0      	nop			; (mov r8, r8)
20000854:	46bd      	mov	sp, r7
20000856:	b002      	add	sp, #8
20000858:	bd80      	pop	{r7, pc}

2000085a <delay_milli>:

void delay_milli(unsigned int ms)
{
2000085a:	b580      	push	{r7, lr}
2000085c:	b082      	sub	sp, #8
2000085e:	af00      	add	r7, sp, #0
20000860:	6078      	str	r0, [r7, #4]
	delay_micro(ms*1000);
20000862:	687a      	ldr	r2, [r7, #4]
20000864:	0013      	movs	r3, r2
20000866:	015b      	lsls	r3, r3, #5
20000868:	1a9b      	subs	r3, r3, r2
2000086a:	009b      	lsls	r3, r3, #2
2000086c:	189b      	adds	r3, r3, r2
2000086e:	00db      	lsls	r3, r3, #3
20000870:	0018      	movs	r0, r3
20000872:	f7ff ffcf 	bl	20000814 <delay_micro>
}
20000876:	46c0      	nop			; (mov r8, r8)
20000878:	46bd      	mov	sp, r7
2000087a:	b002      	add	sp, #8
2000087c:	bd80      	pop	{r7, pc}
2000087e:	46c0      	nop			; (mov r8, r8)

20000880 <checkWin>:
#endif



void checkWin()
{
20000880:	b580      	push	{r7, lr}
20000882:	b084      	sub	sp, #16
20000884:	af00      	add	r7, sp, #0
	int squaresToOpen = 60; //sizeX*sizeY - Bombs;
20000886:	233c      	movs	r3, #60	; 0x3c
20000888:	603b      	str	r3, [r7, #0]
	int openedSquares = 0;
2000088a:	2300      	movs	r3, #0
2000088c:	60fb      	str	r3, [r7, #12]
	for(int x = 0; x < sizeX; x++)
2000088e:	2300      	movs	r3, #0
20000890:	60bb      	str	r3, [r7, #8]
20000892:	e032      	b.n	200008fa <checkWin+0x7a>
		for(int y = 0; y < sizeY; y++)
20000894:	2300      	movs	r3, #0
20000896:	607b      	str	r3, [r7, #4]
20000898:	e029      	b.n	200008ee <checkWin+0x6e>
		{
			if(board[x][y].opened && board[x][y].bomb == 0)
2000089a:	481e      	ldr	r0, [pc, #120]	; (20000914 <checkWin+0x94>)
2000089c:	687b      	ldr	r3, [r7, #4]
2000089e:	68b9      	ldr	r1, [r7, #8]
200008a0:	001a      	movs	r2, r3
200008a2:	0052      	lsls	r2, r2, #1
200008a4:	18d2      	adds	r2, r2, r3
200008a6:	00d3      	lsls	r3, r2, #3
200008a8:	001a      	movs	r2, r3
200008aa:	000b      	movs	r3, r1
200008ac:	011b      	lsls	r3, r3, #4
200008ae:	1a5b      	subs	r3, r3, r1
200008b0:	00db      	lsls	r3, r3, #3
200008b2:	18d3      	adds	r3, r2, r3
200008b4:	18c3      	adds	r3, r0, r3
200008b6:	3314      	adds	r3, #20
200008b8:	681b      	ldr	r3, [r3, #0]
200008ba:	2b00      	cmp	r3, #0
200008bc:	d014      	beq.n	200008e8 <checkWin+0x68>
200008be:	4815      	ldr	r0, [pc, #84]	; (20000914 <checkWin+0x94>)
200008c0:	687b      	ldr	r3, [r7, #4]
200008c2:	68b9      	ldr	r1, [r7, #8]
200008c4:	001a      	movs	r2, r3
200008c6:	0052      	lsls	r2, r2, #1
200008c8:	18d2      	adds	r2, r2, r3
200008ca:	00d3      	lsls	r3, r2, #3
200008cc:	001a      	movs	r2, r3
200008ce:	000b      	movs	r3, r1
200008d0:	011b      	lsls	r3, r3, #4
200008d2:	1a5b      	subs	r3, r3, r1
200008d4:	00db      	lsls	r3, r3, #3
200008d6:	18d3      	adds	r3, r2, r3
200008d8:	18c3      	adds	r3, r0, r3
200008da:	3310      	adds	r3, #16
200008dc:	681b      	ldr	r3, [r3, #0]
200008de:	2b00      	cmp	r3, #0
200008e0:	d102      	bne.n	200008e8 <checkWin+0x68>
				openedSquares++;
200008e2:	68fb      	ldr	r3, [r7, #12]
200008e4:	3301      	adds	r3, #1
200008e6:	60fb      	str	r3, [r7, #12]
		for(int y = 0; y < sizeY; y++)
200008e8:	687b      	ldr	r3, [r7, #4]
200008ea:	3301      	adds	r3, #1
200008ec:	607b      	str	r3, [r7, #4]
200008ee:	687b      	ldr	r3, [r7, #4]
200008f0:	2b04      	cmp	r3, #4
200008f2:	ddd2      	ble.n	2000089a <checkWin+0x1a>
	for(int x = 0; x < sizeX; x++)
200008f4:	68bb      	ldr	r3, [r7, #8]
200008f6:	3301      	adds	r3, #1
200008f8:	60bb      	str	r3, [r7, #8]
200008fa:	68bb      	ldr	r3, [r7, #8]
200008fc:	2b0d      	cmp	r3, #13
200008fe:	ddc9      	ble.n	20000894 <checkWin+0x14>
		}
	if(openedSquares == sizeX*sizeY - Bombs)
20000900:	68fb      	ldr	r3, [r7, #12]
20000902:	2b3c      	cmp	r3, #60	; 0x3c
20000904:	d102      	bne.n	2000090c <checkWin+0x8c>
		gameover = 1;
20000906:	4b04      	ldr	r3, [pc, #16]	; (20000918 <checkWin+0x98>)
20000908:	2201      	movs	r2, #1
2000090a:	601a      	str	r2, [r3, #0]
}
2000090c:	46c0      	nop			; (mov r8, r8)
2000090e:	46bd      	mov	sp, r7
20000910:	b004      	add	sp, #16
20000912:	bd80      	pop	{r7, pc}
20000914:	20001ca4 	andcs	r1, r0, r4, lsr #25
20000918:	2000234c 	andcs	r2, r0, ip, asr #6

2000091c <placeBombs>:
void placeBombs(struct Player p)
{
2000091c:	b590      	push	{r4, r7, lr}
2000091e:	b08b      	sub	sp, #44	; 0x2c
20000920:	af00      	add	r7, sp, #0
20000922:	1d3b      	adds	r3, r7, #4
20000924:	6018      	str	r0, [r3, #0]
20000926:	6059      	str	r1, [r3, #4]
20000928:	609a      	str	r2, [r3, #8]
	 // du kan göra en räknarkrets som du kan läsa av värdet på!!!
	int placedBombs = 0;
2000092a:	2300      	movs	r3, #0
2000092c:	627b      	str	r3, [r7, #36]	; 0x24
	start_rand();
2000092e:	f7ff fb71 	bl	20000014 <start_rand>
	while(placedBombs < Bombs)
20000932:	e045      	b.n	200009c0 <placeBombs+0xa4>
	{
		int tst = get_rand_val();
20000934:	f7ff fb92 	bl	2000005c <get_rand_val>
20000938:	0003      	movs	r3, r0
2000093a:	61bb      	str	r3, [r7, #24]
		int rx = get_rand_val() % sizeX;
2000093c:	f7ff fb8e 	bl	2000005c <get_rand_val>
20000940:	0003      	movs	r3, r0
20000942:	210e      	movs	r1, #14
20000944:	0018      	movs	r0, r3
20000946:	f001 f97d 	bl	20001c44 <__aeabi_idivmod>
2000094a:	000b      	movs	r3, r1
2000094c:	617b      	str	r3, [r7, #20]
		int ry = get_rand_val() % sizeY;
2000094e:	f7ff fb85 	bl	2000005c <get_rand_val>
20000952:	0003      	movs	r3, r0
20000954:	2105      	movs	r1, #5
20000956:	0018      	movs	r0, r3
20000958:	f001 f974 	bl	20001c44 <__aeabi_idivmod>
2000095c:	000b      	movs	r3, r1
2000095e:	613b      	str	r3, [r7, #16]
		if(board[rx][ry].bomb == 0 && (rx != p.x && ry != p.y))
20000960:	4831      	ldr	r0, [pc, #196]	; (20000a28 <placeBombs+0x10c>)
20000962:	693b      	ldr	r3, [r7, #16]
20000964:	6979      	ldr	r1, [r7, #20]
20000966:	001a      	movs	r2, r3
20000968:	0052      	lsls	r2, r2, #1
2000096a:	18d2      	adds	r2, r2, r3
2000096c:	00d3      	lsls	r3, r2, #3
2000096e:	001a      	movs	r2, r3
20000970:	000b      	movs	r3, r1
20000972:	011b      	lsls	r3, r3, #4
20000974:	1a5b      	subs	r3, r3, r1
20000976:	00db      	lsls	r3, r3, #3
20000978:	18d3      	adds	r3, r2, r3
2000097a:	18c3      	adds	r3, r0, r3
2000097c:	3310      	adds	r3, #16
2000097e:	681b      	ldr	r3, [r3, #0]
20000980:	2b00      	cmp	r3, #0
20000982:	d11d      	bne.n	200009c0 <placeBombs+0xa4>
20000984:	1d3b      	adds	r3, r7, #4
20000986:	681b      	ldr	r3, [r3, #0]
20000988:	697a      	ldr	r2, [r7, #20]
2000098a:	429a      	cmp	r2, r3
2000098c:	d018      	beq.n	200009c0 <placeBombs+0xa4>
2000098e:	1d3b      	adds	r3, r7, #4
20000990:	685b      	ldr	r3, [r3, #4]
20000992:	693a      	ldr	r2, [r7, #16]
20000994:	429a      	cmp	r2, r3
20000996:	d013      	beq.n	200009c0 <placeBombs+0xa4>
		{
			board[rx][ry].bomb = 1;
20000998:	4823      	ldr	r0, [pc, #140]	; (20000a28 <placeBombs+0x10c>)
2000099a:	693b      	ldr	r3, [r7, #16]
2000099c:	6979      	ldr	r1, [r7, #20]
2000099e:	001a      	movs	r2, r3
200009a0:	0052      	lsls	r2, r2, #1
200009a2:	18d2      	adds	r2, r2, r3
200009a4:	00d3      	lsls	r3, r2, #3
200009a6:	001a      	movs	r2, r3
200009a8:	000b      	movs	r3, r1
200009aa:	011b      	lsls	r3, r3, #4
200009ac:	1a5b      	subs	r3, r3, r1
200009ae:	00db      	lsls	r3, r3, #3
200009b0:	18d3      	adds	r3, r2, r3
200009b2:	18c3      	adds	r3, r0, r3
200009b4:	3310      	adds	r3, #16
200009b6:	2201      	movs	r2, #1
200009b8:	601a      	str	r2, [r3, #0]
			placedBombs++;
200009ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200009bc:	3301      	adds	r3, #1
200009be:	627b      	str	r3, [r7, #36]	; 0x24
	while(placedBombs < Bombs)
200009c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200009c2:	2b09      	cmp	r3, #9
200009c4:	ddb6      	ble.n	20000934 <placeBombs+0x18>
		}
	}
	end_rand();
200009c6:	f7ff fb5b 	bl	20000080 <end_rand>
	for(int i = 0; i<sizeX; i++)
200009ca:	2300      	movs	r3, #0
200009cc:	623b      	str	r3, [r7, #32]
200009ce:	e023      	b.n	20000a18 <placeBombs+0xfc>
		for(int j = 0; j < sizeY; j++)
200009d0:	2300      	movs	r3, #0
200009d2:	61fb      	str	r3, [r7, #28]
200009d4:	e01a      	b.n	20000a0c <placeBombs+0xf0>
			board[i][j].numberOfBombs = countBombOrFlag(i, j, isBombPtr);
200009d6:	4b15      	ldr	r3, [pc, #84]	; (20000a2c <placeBombs+0x110>)
200009d8:	681a      	ldr	r2, [r3, #0]
200009da:	69f9      	ldr	r1, [r7, #28]
200009dc:	6a3b      	ldr	r3, [r7, #32]
200009de:	0018      	movs	r0, r3
200009e0:	f000 fa58 	bl	20000e94 <countBombOrFlag>
200009e4:	0004      	movs	r4, r0
200009e6:	4810      	ldr	r0, [pc, #64]	; (20000a28 <placeBombs+0x10c>)
200009e8:	69fb      	ldr	r3, [r7, #28]
200009ea:	6a39      	ldr	r1, [r7, #32]
200009ec:	001a      	movs	r2, r3
200009ee:	0052      	lsls	r2, r2, #1
200009f0:	18d2      	adds	r2, r2, r3
200009f2:	00d3      	lsls	r3, r2, #3
200009f4:	001a      	movs	r2, r3
200009f6:	000b      	movs	r3, r1
200009f8:	011b      	lsls	r3, r3, #4
200009fa:	1a5b      	subs	r3, r3, r1
200009fc:	00db      	lsls	r3, r3, #3
200009fe:	18d3      	adds	r3, r2, r3
20000a00:	18c3      	adds	r3, r0, r3
20000a02:	3308      	adds	r3, #8
20000a04:	601c      	str	r4, [r3, #0]
		for(int j = 0; j < sizeY; j++)
20000a06:	69fb      	ldr	r3, [r7, #28]
20000a08:	3301      	adds	r3, #1
20000a0a:	61fb      	str	r3, [r7, #28]
20000a0c:	69fb      	ldr	r3, [r7, #28]
20000a0e:	2b04      	cmp	r3, #4
20000a10:	dde1      	ble.n	200009d6 <placeBombs+0xba>
	for(int i = 0; i<sizeX; i++)
20000a12:	6a3b      	ldr	r3, [r7, #32]
20000a14:	3301      	adds	r3, #1
20000a16:	623b      	str	r3, [r7, #32]
20000a18:	6a3b      	ldr	r3, [r7, #32]
20000a1a:	2b0d      	cmp	r3, #13
20000a1c:	ddd8      	ble.n	200009d0 <placeBombs+0xb4>
}
20000a1e:	46c0      	nop			; (mov r8, r8)
20000a20:	46c0      	nop			; (mov r8, r8)
20000a22:	46bd      	mov	sp, r7
20000a24:	b00b      	add	sp, #44	; 0x2c
20000a26:	bd90      	pop	{r4, r7, pc}
20000a28:	20001ca4 	andcs	r1, r0, r4, lsr #25
20000a2c:	20002354 	andcs	r2, r0, r4, asr r3

20000a30 <makeFirstOpen>:
void makeFirstOpen(struct Player p)
{
20000a30:	b580      	push	{r7, lr}
20000a32:	b084      	sub	sp, #16
20000a34:	af00      	add	r7, sp, #0
20000a36:	1d3b      	adds	r3, r7, #4
20000a38:	6018      	str	r0, [r3, #0]
20000a3a:	6059      	str	r1, [r3, #4]
20000a3c:	609a      	str	r2, [r3, #8]
	placeBombs(p);
20000a3e:	1d3b      	adds	r3, r7, #4
20000a40:	6818      	ldr	r0, [r3, #0]
20000a42:	6859      	ldr	r1, [r3, #4]
20000a44:	689a      	ldr	r2, [r3, #8]
20000a46:	f7ff ff69 	bl	2000091c <placeBombs>
	openPos(p.x, p.y);
20000a4a:	1d3b      	adds	r3, r7, #4
20000a4c:	681a      	ldr	r2, [r3, #0]
20000a4e:	1d3b      	adds	r3, r7, #4
20000a50:	685b      	ldr	r3, [r3, #4]
20000a52:	0019      	movs	r1, r3
20000a54:	0010      	movs	r0, r2
20000a56:	f000 f8ef 	bl	20000c38 <openPos>
}
20000a5a:	46c0      	nop			; (mov r8, r8)
20000a5c:	46bd      	mov	sp, r7
20000a5e:	b004      	add	sp, #16
20000a60:	bd80      	pop	{r7, pc}

20000a62 <showBombs>:
void showBombs()
{
20000a62:	b580      	push	{r7, lr}
20000a64:	b082      	sub	sp, #8
20000a66:	af00      	add	r7, sp, #0
	for(int i = 0; i<sizeX; i++)
20000a68:	2300      	movs	r3, #0
20000a6a:	607b      	str	r3, [r7, #4]
20000a6c:	e02b      	b.n	20000ac6 <showBombs+0x64>
		for(int j = 0; j < sizeY; j++)
20000a6e:	2300      	movs	r3, #0
20000a70:	603b      	str	r3, [r7, #0]
20000a72:	e022      	b.n	20000aba <showBombs+0x58>
			if(board[i][j].bomb)
20000a74:	4818      	ldr	r0, [pc, #96]	; (20000ad8 <showBombs+0x76>)
20000a76:	683b      	ldr	r3, [r7, #0]
20000a78:	6879      	ldr	r1, [r7, #4]
20000a7a:	001a      	movs	r2, r3
20000a7c:	0052      	lsls	r2, r2, #1
20000a7e:	18d2      	adds	r2, r2, r3
20000a80:	00d3      	lsls	r3, r2, #3
20000a82:	001a      	movs	r2, r3
20000a84:	000b      	movs	r3, r1
20000a86:	011b      	lsls	r3, r3, #4
20000a88:	1a5b      	subs	r3, r3, r1
20000a8a:	00db      	lsls	r3, r3, #3
20000a8c:	18d3      	adds	r3, r2, r3
20000a8e:	18c3      	adds	r3, r0, r3
20000a90:	3310      	adds	r3, #16
20000a92:	681b      	ldr	r3, [r3, #0]
20000a94:	2b00      	cmp	r3, #0
20000a96:	d00d      	beq.n	20000ab4 <showBombs+0x52>
				{
					gotoxy(startX + i, startY + j);
20000a98:	683a      	ldr	r2, [r7, #0]
20000a9a:	687b      	ldr	r3, [r7, #4]
20000a9c:	0011      	movs	r1, r2
20000a9e:	0018      	movs	r0, r3
20000aa0:	f000 fc09 	bl	200012b6 <gotoxy>
					printToGD(currX, currY, bombCh);
20000aa4:	4b0d      	ldr	r3, [pc, #52]	; (20000adc <showBombs+0x7a>)
20000aa6:	6818      	ldr	r0, [r3, #0]
20000aa8:	4b0d      	ldr	r3, [pc, #52]	; (20000ae0 <showBombs+0x7e>)
20000aaa:	681b      	ldr	r3, [r3, #0]
20000aac:	222a      	movs	r2, #42	; 0x2a
20000aae:	0019      	movs	r1, r3
20000ab0:	f7ff fba0 	bl	200001f4 <printToGD>
		for(int j = 0; j < sizeY; j++)
20000ab4:	683b      	ldr	r3, [r7, #0]
20000ab6:	3301      	adds	r3, #1
20000ab8:	603b      	str	r3, [r7, #0]
20000aba:	683b      	ldr	r3, [r7, #0]
20000abc:	2b04      	cmp	r3, #4
20000abe:	ddd9      	ble.n	20000a74 <showBombs+0x12>
	for(int i = 0; i<sizeX; i++)
20000ac0:	687b      	ldr	r3, [r7, #4]
20000ac2:	3301      	adds	r3, #1
20000ac4:	607b      	str	r3, [r7, #4]
20000ac6:	687b      	ldr	r3, [r7, #4]
20000ac8:	2b0d      	cmp	r3, #13
20000aca:	ddd0      	ble.n	20000a6e <showBombs+0xc>
				}
}
20000acc:	46c0      	nop			; (mov r8, r8)
20000ace:	46c0      	nop			; (mov r8, r8)
20000ad0:	46bd      	mov	sp, r7
20000ad2:	b002      	add	sp, #8
20000ad4:	bd80      	pop	{r7, pc}
20000ad6:	46c0      	nop			; (mov r8, r8)
20000ad8:	20001ca4 	andcs	r1, r0, r4, lsr #25
20000adc:	20002350 	andcs	r2, r0, r0, asr r3
20000ae0:	20001c98 	mulcs	r0, r8, ip

20000ae4 <placeFlag>:
void placeFlag(struct Player p)
{
20000ae4:	b5b0      	push	{r4, r5, r7, lr}
20000ae6:	b086      	sub	sp, #24
20000ae8:	af02      	add	r7, sp, #8
20000aea:	1d3b      	adds	r3, r7, #4
20000aec:	6018      	str	r0, [r3, #0]
20000aee:	6059      	str	r1, [r3, #4]
20000af0:	609a      	str	r2, [r3, #8]
	if(board[p.x][p.y].opened)
20000af2:	1d3b      	adds	r3, r7, #4
20000af4:	6819      	ldr	r1, [r3, #0]
20000af6:	1d3b      	adds	r3, r7, #4
20000af8:	685b      	ldr	r3, [r3, #4]
20000afa:	4846      	ldr	r0, [pc, #280]	; (20000c14 <placeFlag+0x130>)
20000afc:	001a      	movs	r2, r3
20000afe:	0052      	lsls	r2, r2, #1
20000b00:	18d2      	adds	r2, r2, r3
20000b02:	00d3      	lsls	r3, r2, #3
20000b04:	001a      	movs	r2, r3
20000b06:	000b      	movs	r3, r1
20000b08:	011b      	lsls	r3, r3, #4
20000b0a:	1a5b      	subs	r3, r3, r1
20000b0c:	00db      	lsls	r3, r3, #3
20000b0e:	18d3      	adds	r3, r2, r3
20000b10:	18c3      	adds	r3, r0, r3
20000b12:	3314      	adds	r3, #20
20000b14:	681b      	ldr	r3, [r3, #0]
20000b16:	2b00      	cmp	r3, #0
20000b18:	d000      	beq.n	20000b1c <placeFlag+0x38>
20000b1a:	e076      	b.n	20000c0a <placeFlag+0x126>
		return;
	board[p.x][p.y].flagged = (board[p.x][p.y].flagged + 1) % 2;
20000b1c:	1d3b      	adds	r3, r7, #4
20000b1e:	6819      	ldr	r1, [r3, #0]
20000b20:	1d3b      	adds	r3, r7, #4
20000b22:	685b      	ldr	r3, [r3, #4]
20000b24:	483b      	ldr	r0, [pc, #236]	; (20000c14 <placeFlag+0x130>)
20000b26:	001a      	movs	r2, r3
20000b28:	0052      	lsls	r2, r2, #1
20000b2a:	18d2      	adds	r2, r2, r3
20000b2c:	00d3      	lsls	r3, r2, #3
20000b2e:	001a      	movs	r2, r3
20000b30:	000b      	movs	r3, r1
20000b32:	011b      	lsls	r3, r3, #4
20000b34:	1a5b      	subs	r3, r3, r1
20000b36:	00db      	lsls	r3, r3, #3
20000b38:	18d3      	adds	r3, r2, r3
20000b3a:	18c3      	adds	r3, r0, r3
20000b3c:	330c      	adds	r3, #12
20000b3e:	681b      	ldr	r3, [r3, #0]
20000b40:	1c5a      	adds	r2, r3, #1
20000b42:	1d3b      	adds	r3, r7, #4
20000b44:	6819      	ldr	r1, [r3, #0]
20000b46:	1d3b      	adds	r3, r7, #4
20000b48:	6858      	ldr	r0, [r3, #4]
20000b4a:	4b33      	ldr	r3, [pc, #204]	; (20000c18 <placeFlag+0x134>)
20000b4c:	4013      	ands	r3, r2
20000b4e:	d504      	bpl.n	20000b5a <placeFlag+0x76>
20000b50:	3b01      	subs	r3, #1
20000b52:	2202      	movs	r2, #2
20000b54:	4252      	negs	r2, r2
20000b56:	4313      	orrs	r3, r2
20000b58:	3301      	adds	r3, #1
20000b5a:	001d      	movs	r5, r3
20000b5c:	4c2d      	ldr	r4, [pc, #180]	; (20000c14 <placeFlag+0x130>)
20000b5e:	0002      	movs	r2, r0
20000b60:	0052      	lsls	r2, r2, #1
20000b62:	1812      	adds	r2, r2, r0
20000b64:	00d3      	lsls	r3, r2, #3
20000b66:	001a      	movs	r2, r3
20000b68:	000b      	movs	r3, r1
20000b6a:	011b      	lsls	r3, r3, #4
20000b6c:	1a5b      	subs	r3, r3, r1
20000b6e:	00db      	lsls	r3, r3, #3
20000b70:	18d3      	adds	r3, r2, r3
20000b72:	18e3      	adds	r3, r4, r3
20000b74:	330c      	adds	r3, #12
20000b76:	601d      	str	r5, [r3, #0]
	p.placedFlaggs = board[p.x][p.y].flagged ? p.placedFlaggs + 1 : p.placedFlaggs -1;
20000b78:	1d3b      	adds	r3, r7, #4
20000b7a:	6819      	ldr	r1, [r3, #0]
20000b7c:	1d3b      	adds	r3, r7, #4
20000b7e:	685b      	ldr	r3, [r3, #4]
20000b80:	4824      	ldr	r0, [pc, #144]	; (20000c14 <placeFlag+0x130>)
20000b82:	001a      	movs	r2, r3
20000b84:	0052      	lsls	r2, r2, #1
20000b86:	18d2      	adds	r2, r2, r3
20000b88:	00d3      	lsls	r3, r2, #3
20000b8a:	001a      	movs	r2, r3
20000b8c:	000b      	movs	r3, r1
20000b8e:	011b      	lsls	r3, r3, #4
20000b90:	1a5b      	subs	r3, r3, r1
20000b92:	00db      	lsls	r3, r3, #3
20000b94:	18d3      	adds	r3, r2, r3
20000b96:	18c3      	adds	r3, r0, r3
20000b98:	330c      	adds	r3, #12
20000b9a:	681b      	ldr	r3, [r3, #0]
20000b9c:	2b00      	cmp	r3, #0
20000b9e:	d003      	beq.n	20000ba8 <placeFlag+0xc4>
20000ba0:	1d3b      	adds	r3, r7, #4
20000ba2:	689b      	ldr	r3, [r3, #8]
20000ba4:	1c5a      	adds	r2, r3, #1
20000ba6:	e002      	b.n	20000bae <placeFlag+0xca>
20000ba8:	1d3b      	adds	r3, r7, #4
20000baa:	689b      	ldr	r3, [r3, #8]
20000bac:	1e5a      	subs	r2, r3, #1
20000bae:	1d3b      	adds	r3, r7, #4
20000bb0:	609a      	str	r2, [r3, #8]
	placed_flaggs = p.placedFlaggs == 1 ? placed_flaggs + 1 : placed_flaggs - 1;
20000bb2:	1d3b      	adds	r3, r7, #4
20000bb4:	689b      	ldr	r3, [r3, #8]
20000bb6:	2b01      	cmp	r3, #1
20000bb8:	d103      	bne.n	20000bc2 <placeFlag+0xde>
20000bba:	4b18      	ldr	r3, [pc, #96]	; (20000c1c <placeFlag+0x138>)
20000bbc:	681b      	ldr	r3, [r3, #0]
20000bbe:	1c5a      	adds	r2, r3, #1
20000bc0:	e002      	b.n	20000bc8 <placeFlag+0xe4>
20000bc2:	4b16      	ldr	r3, [pc, #88]	; (20000c1c <placeFlag+0x138>)
20000bc4:	681b      	ldr	r3, [r3, #0]
20000bc6:	1e5a      	subs	r2, r3, #1
20000bc8:	4b14      	ldr	r3, [pc, #80]	; (20000c1c <placeFlag+0x138>)
20000bca:	601a      	str	r2, [r3, #0]
	drawPos(board[p.x][p.y]);
20000bcc:	1d3b      	adds	r3, r7, #4
20000bce:	6819      	ldr	r1, [r3, #0]
20000bd0:	1d3b      	adds	r3, r7, #4
20000bd2:	685b      	ldr	r3, [r3, #4]
20000bd4:	4c0f      	ldr	r4, [pc, #60]	; (20000c14 <placeFlag+0x130>)
20000bd6:	001a      	movs	r2, r3
20000bd8:	0052      	lsls	r2, r2, #1
20000bda:	18d2      	adds	r2, r2, r3
20000bdc:	00d3      	lsls	r3, r2, #3
20000bde:	001a      	movs	r2, r3
20000be0:	000b      	movs	r3, r1
20000be2:	011b      	lsls	r3, r3, #4
20000be4:	1a5b      	subs	r3, r3, r1
20000be6:	00db      	lsls	r3, r3, #3
20000be8:	18d3      	adds	r3, r2, r3
20000bea:	2110      	movs	r1, #16
20000bec:	18e2      	adds	r2, r4, r3
20000bee:	1851      	adds	r1, r2, r1
20000bf0:	466a      	mov	r2, sp
20000bf2:	c921      	ldmia	r1!, {r0, r5}
20000bf4:	c221      	stmia	r2!, {r0, r5}
20000bf6:	5918      	ldr	r0, [r3, r4]
20000bf8:	18e2      	adds	r2, r4, r3
20000bfa:	6851      	ldr	r1, [r2, #4]
20000bfc:	18e2      	adds	r2, r4, r3
20000bfe:	6892      	ldr	r2, [r2, #8]
20000c00:	18e3      	adds	r3, r4, r3
20000c02:	68db      	ldr	r3, [r3, #12]
20000c04:	f000 fa48 	bl	20001098 <drawPos>
20000c08:	e000      	b.n	20000c0c <placeFlag+0x128>
		return;
20000c0a:	46c0      	nop			; (mov r8, r8)
}
20000c0c:	46bd      	mov	sp, r7
20000c0e:	b004      	add	sp, #16
20000c10:	bdb0      	pop	{r4, r5, r7, pc}
20000c12:	46c0      	nop			; (mov r8, r8)
20000c14:	20001ca4 	andcs	r1, r0, r4, lsr #25
20000c18:	80000001 	andhi	r0, r0, r1
20000c1c:	20002358 	andcs	r2, r0, r8, asr r3

20000c20 <gameOver>:
void gameOver()
{
20000c20:	b580      	push	{r7, lr}
20000c22:	af00      	add	r7, sp, #0
	showBombs();
20000c24:	f7ff ff1d 	bl	20000a62 <showBombs>
	gameover = 1;
20000c28:	4b02      	ldr	r3, [pc, #8]	; (20000c34 <gameOver+0x14>)
20000c2a:	2201      	movs	r2, #1
20000c2c:	601a      	str	r2, [r3, #0]
}
20000c2e:	46c0      	nop			; (mov r8, r8)
20000c30:	46bd      	mov	sp, r7
20000c32:	bd80      	pop	{r7, pc}
20000c34:	2000234c 	andcs	r2, r0, ip, asr #6

20000c38 <openPos>:

void openPos(int x, int y)
{
20000c38:	b5b0      	push	{r4, r5, r7, lr}
20000c3a:	b08a      	sub	sp, #40	; 0x28
20000c3c:	af02      	add	r7, sp, #8
20000c3e:	6078      	str	r0, [r7, #4]
20000c40:	6039      	str	r1, [r7, #0]
	if(board[x][y].flagged)
20000c42:	4891      	ldr	r0, [pc, #580]	; (20000e88 <openPos+0x250>)
20000c44:	683b      	ldr	r3, [r7, #0]
20000c46:	6879      	ldr	r1, [r7, #4]
20000c48:	001a      	movs	r2, r3
20000c4a:	0052      	lsls	r2, r2, #1
20000c4c:	18d2      	adds	r2, r2, r3
20000c4e:	00d3      	lsls	r3, r2, #3
20000c50:	001a      	movs	r2, r3
20000c52:	000b      	movs	r3, r1
20000c54:	011b      	lsls	r3, r3, #4
20000c56:	1a5b      	subs	r3, r3, r1
20000c58:	00db      	lsls	r3, r3, #3
20000c5a:	18d3      	adds	r3, r2, r3
20000c5c:	18c3      	adds	r3, r0, r3
20000c5e:	330c      	adds	r3, #12
20000c60:	681b      	ldr	r3, [r3, #0]
20000c62:	2b00      	cmp	r3, #0
20000c64:	d000      	beq.n	20000c68 <openPos+0x30>
20000c66:	e10b      	b.n	20000e80 <openPos+0x248>
		return;
	
	if(board[x][y].opened && (countBombOrFlag(x,y, isBombPtr) == countBombOrFlag(x,y,isFlagPtr))) //open all connected positions
20000c68:	4887      	ldr	r0, [pc, #540]	; (20000e88 <openPos+0x250>)
20000c6a:	683b      	ldr	r3, [r7, #0]
20000c6c:	6879      	ldr	r1, [r7, #4]
20000c6e:	001a      	movs	r2, r3
20000c70:	0052      	lsls	r2, r2, #1
20000c72:	18d2      	adds	r2, r2, r3
20000c74:	00d3      	lsls	r3, r2, #3
20000c76:	001a      	movs	r2, r3
20000c78:	000b      	movs	r3, r1
20000c7a:	011b      	lsls	r3, r3, #4
20000c7c:	1a5b      	subs	r3, r3, r1
20000c7e:	00db      	lsls	r3, r3, #3
20000c80:	18d3      	adds	r3, r2, r3
20000c82:	18c3      	adds	r3, r0, r3
20000c84:	3314      	adds	r3, #20
20000c86:	681b      	ldr	r3, [r3, #0]
20000c88:	2b00      	cmp	r3, #0
20000c8a:	d056      	beq.n	20000d3a <openPos+0x102>
20000c8c:	4b7f      	ldr	r3, [pc, #508]	; (20000e8c <openPos+0x254>)
20000c8e:	681a      	ldr	r2, [r3, #0]
20000c90:	6839      	ldr	r1, [r7, #0]
20000c92:	687b      	ldr	r3, [r7, #4]
20000c94:	0018      	movs	r0, r3
20000c96:	f000 f8fd 	bl	20000e94 <countBombOrFlag>
20000c9a:	0004      	movs	r4, r0
20000c9c:	4b7c      	ldr	r3, [pc, #496]	; (20000e90 <openPos+0x258>)
20000c9e:	681a      	ldr	r2, [r3, #0]
20000ca0:	6839      	ldr	r1, [r7, #0]
20000ca2:	687b      	ldr	r3, [r7, #4]
20000ca4:	0018      	movs	r0, r3
20000ca6:	f000 f8f5 	bl	20000e94 <countBombOrFlag>
20000caa:	0003      	movs	r3, r0
20000cac:	429c      	cmp	r4, r3
20000cae:	d144      	bne.n	20000d3a <openPos+0x102>
	{
		for(int i = -1; i<= 1; i++)
20000cb0:	2301      	movs	r3, #1
20000cb2:	425b      	negs	r3, r3
20000cb4:	61fb      	str	r3, [r7, #28]
20000cb6:	e03c      	b.n	20000d32 <openPos+0xfa>
			for(int j = -1; j <= 1; j++)
20000cb8:	2301      	movs	r3, #1
20000cba:	425b      	negs	r3, r3
20000cbc:	61bb      	str	r3, [r7, #24]
20000cbe:	e032      	b.n	20000d26 <openPos+0xee>
				if(board[x+i][y+j].opened == 0 && validPos(x+i, y+j) && !(i == 0 && j == 0))
20000cc0:	687a      	ldr	r2, [r7, #4]
20000cc2:	69fb      	ldr	r3, [r7, #28]
20000cc4:	18d1      	adds	r1, r2, r3
20000cc6:	683a      	ldr	r2, [r7, #0]
20000cc8:	69bb      	ldr	r3, [r7, #24]
20000cca:	18d3      	adds	r3, r2, r3
20000ccc:	486e      	ldr	r0, [pc, #440]	; (20000e88 <openPos+0x250>)
20000cce:	001a      	movs	r2, r3
20000cd0:	0052      	lsls	r2, r2, #1
20000cd2:	18d2      	adds	r2, r2, r3
20000cd4:	00d3      	lsls	r3, r2, #3
20000cd6:	001a      	movs	r2, r3
20000cd8:	000b      	movs	r3, r1
20000cda:	011b      	lsls	r3, r3, #4
20000cdc:	1a5b      	subs	r3, r3, r1
20000cde:	00db      	lsls	r3, r3, #3
20000ce0:	18d3      	adds	r3, r2, r3
20000ce2:	18c3      	adds	r3, r0, r3
20000ce4:	3314      	adds	r3, #20
20000ce6:	681b      	ldr	r3, [r3, #0]
20000ce8:	2b00      	cmp	r3, #0
20000cea:	d119      	bne.n	20000d20 <openPos+0xe8>
20000cec:	687a      	ldr	r2, [r7, #4]
20000cee:	69fb      	ldr	r3, [r7, #28]
20000cf0:	18d0      	adds	r0, r2, r3
20000cf2:	683a      	ldr	r2, [r7, #0]
20000cf4:	69bb      	ldr	r3, [r7, #24]
20000cf6:	18d3      	adds	r3, r2, r3
20000cf8:	0019      	movs	r1, r3
20000cfa:	f000 f9b3 	bl	20001064 <validPos>
20000cfe:	1e03      	subs	r3, r0, #0
20000d00:	d00e      	beq.n	20000d20 <openPos+0xe8>
20000d02:	69fb      	ldr	r3, [r7, #28]
20000d04:	2b00      	cmp	r3, #0
20000d06:	d102      	bne.n	20000d0e <openPos+0xd6>
20000d08:	69bb      	ldr	r3, [r7, #24]
20000d0a:	2b00      	cmp	r3, #0
20000d0c:	d008      	beq.n	20000d20 <openPos+0xe8>
				{
					openPos(x+i, y+j);
20000d0e:	687a      	ldr	r2, [r7, #4]
20000d10:	69fb      	ldr	r3, [r7, #28]
20000d12:	18d0      	adds	r0, r2, r3
20000d14:	683a      	ldr	r2, [r7, #0]
20000d16:	69bb      	ldr	r3, [r7, #24]
20000d18:	18d3      	adds	r3, r2, r3
20000d1a:	0019      	movs	r1, r3
20000d1c:	f7ff ff8c 	bl	20000c38 <openPos>
			for(int j = -1; j <= 1; j++)
20000d20:	69bb      	ldr	r3, [r7, #24]
20000d22:	3301      	adds	r3, #1
20000d24:	61bb      	str	r3, [r7, #24]
20000d26:	69bb      	ldr	r3, [r7, #24]
20000d28:	2b01      	cmp	r3, #1
20000d2a:	ddc9      	ble.n	20000cc0 <openPos+0x88>
		for(int i = -1; i<= 1; i++)
20000d2c:	69fb      	ldr	r3, [r7, #28]
20000d2e:	3301      	adds	r3, #1
20000d30:	61fb      	str	r3, [r7, #28]
20000d32:	69fb      	ldr	r3, [r7, #28]
20000d34:	2b01      	cmp	r3, #1
20000d36:	ddbf      	ble.n	20000cb8 <openPos+0x80>
				}
		return;
20000d38:	e0a3      	b.n	20000e82 <openPos+0x24a>
	}
	int nBombs = countBombOrFlag(x, y,isBombPtr);
20000d3a:	4b54      	ldr	r3, [pc, #336]	; (20000e8c <openPos+0x254>)
20000d3c:	681a      	ldr	r2, [r3, #0]
20000d3e:	6839      	ldr	r1, [r7, #0]
20000d40:	687b      	ldr	r3, [r7, #4]
20000d42:	0018      	movs	r0, r3
20000d44:	f000 f8a6 	bl	20000e94 <countBombOrFlag>
20000d48:	0003      	movs	r3, r0
20000d4a:	60fb      	str	r3, [r7, #12]
	if(board[x][y].bomb)
20000d4c:	484e      	ldr	r0, [pc, #312]	; (20000e88 <openPos+0x250>)
20000d4e:	683b      	ldr	r3, [r7, #0]
20000d50:	6879      	ldr	r1, [r7, #4]
20000d52:	001a      	movs	r2, r3
20000d54:	0052      	lsls	r2, r2, #1
20000d56:	18d2      	adds	r2, r2, r3
20000d58:	00d3      	lsls	r3, r2, #3
20000d5a:	001a      	movs	r2, r3
20000d5c:	000b      	movs	r3, r1
20000d5e:	011b      	lsls	r3, r3, #4
20000d60:	1a5b      	subs	r3, r3, r1
20000d62:	00db      	lsls	r3, r3, #3
20000d64:	18d3      	adds	r3, r2, r3
20000d66:	18c3      	adds	r3, r0, r3
20000d68:	3310      	adds	r3, #16
20000d6a:	681b      	ldr	r3, [r3, #0]
20000d6c:	2b00      	cmp	r3, #0
20000d6e:	d002      	beq.n	20000d76 <openPos+0x13e>
	{
		gameOver();
20000d70:	f7ff ff56 	bl	20000c20 <gameOver>
		return;
20000d74:	e085      	b.n	20000e82 <openPos+0x24a>
	}
	board[x][y].opened = 1;
20000d76:	4844      	ldr	r0, [pc, #272]	; (20000e88 <openPos+0x250>)
20000d78:	683b      	ldr	r3, [r7, #0]
20000d7a:	6879      	ldr	r1, [r7, #4]
20000d7c:	001a      	movs	r2, r3
20000d7e:	0052      	lsls	r2, r2, #1
20000d80:	18d2      	adds	r2, r2, r3
20000d82:	00d3      	lsls	r3, r2, #3
20000d84:	001a      	movs	r2, r3
20000d86:	000b      	movs	r3, r1
20000d88:	011b      	lsls	r3, r3, #4
20000d8a:	1a5b      	subs	r3, r3, r1
20000d8c:	00db      	lsls	r3, r3, #3
20000d8e:	18d3      	adds	r3, r2, r3
20000d90:	18c3      	adds	r3, r0, r3
20000d92:	3314      	adds	r3, #20
20000d94:	2201      	movs	r2, #1
20000d96:	601a      	str	r2, [r3, #0]
	drawPos(board[x][y]);
20000d98:	4c3b      	ldr	r4, [pc, #236]	; (20000e88 <openPos+0x250>)
20000d9a:	683b      	ldr	r3, [r7, #0]
20000d9c:	6879      	ldr	r1, [r7, #4]
20000d9e:	001a      	movs	r2, r3
20000da0:	0052      	lsls	r2, r2, #1
20000da2:	18d2      	adds	r2, r2, r3
20000da4:	00d3      	lsls	r3, r2, #3
20000da6:	001a      	movs	r2, r3
20000da8:	000b      	movs	r3, r1
20000daa:	011b      	lsls	r3, r3, #4
20000dac:	1a5b      	subs	r3, r3, r1
20000dae:	00db      	lsls	r3, r3, #3
20000db0:	18d3      	adds	r3, r2, r3
20000db2:	2110      	movs	r1, #16
20000db4:	18e2      	adds	r2, r4, r3
20000db6:	1851      	adds	r1, r2, r1
20000db8:	466a      	mov	r2, sp
20000dba:	c921      	ldmia	r1!, {r0, r5}
20000dbc:	c221      	stmia	r2!, {r0, r5}
20000dbe:	5918      	ldr	r0, [r3, r4]
20000dc0:	18e2      	adds	r2, r4, r3
20000dc2:	6851      	ldr	r1, [r2, #4]
20000dc4:	18e2      	adds	r2, r4, r3
20000dc6:	6892      	ldr	r2, [r2, #8]
20000dc8:	18e3      	adds	r3, r4, r3
20000dca:	68db      	ldr	r3, [r3, #12]
20000dcc:	f000 f964 	bl	20001098 <drawPos>
	if(nBombs == 0)
20000dd0:	68fb      	ldr	r3, [r7, #12]
20000dd2:	2b00      	cmp	r3, #0
20000dd4:	d155      	bne.n	20000e82 <openPos+0x24a>
		for(int i = -1; i <= 1; i++)
20000dd6:	2301      	movs	r3, #1
20000dd8:	425b      	negs	r3, r3
20000dda:	617b      	str	r3, [r7, #20]
20000ddc:	e04c      	b.n	20000e78 <openPos+0x240>
			for(int j = -1; j <= 1; j++)
20000dde:	2301      	movs	r3, #1
20000de0:	425b      	negs	r3, r3
20000de2:	613b      	str	r3, [r7, #16]
20000de4:	e042      	b.n	20000e6c <openPos+0x234>
				if(validPos(x+i, y+j) && board[x+i][y+j].opened == 0 && board[x+i][y+j].bomb == 0)
20000de6:	687a      	ldr	r2, [r7, #4]
20000de8:	697b      	ldr	r3, [r7, #20]
20000dea:	18d0      	adds	r0, r2, r3
20000dec:	683a      	ldr	r2, [r7, #0]
20000dee:	693b      	ldr	r3, [r7, #16]
20000df0:	18d3      	adds	r3, r2, r3
20000df2:	0019      	movs	r1, r3
20000df4:	f000 f936 	bl	20001064 <validPos>
20000df8:	1e03      	subs	r3, r0, #0
20000dfa:	d034      	beq.n	20000e66 <openPos+0x22e>
20000dfc:	687a      	ldr	r2, [r7, #4]
20000dfe:	697b      	ldr	r3, [r7, #20]
20000e00:	18d1      	adds	r1, r2, r3
20000e02:	683a      	ldr	r2, [r7, #0]
20000e04:	693b      	ldr	r3, [r7, #16]
20000e06:	18d3      	adds	r3, r2, r3
20000e08:	481f      	ldr	r0, [pc, #124]	; (20000e88 <openPos+0x250>)
20000e0a:	001a      	movs	r2, r3
20000e0c:	0052      	lsls	r2, r2, #1
20000e0e:	18d2      	adds	r2, r2, r3
20000e10:	00d3      	lsls	r3, r2, #3
20000e12:	001a      	movs	r2, r3
20000e14:	000b      	movs	r3, r1
20000e16:	011b      	lsls	r3, r3, #4
20000e18:	1a5b      	subs	r3, r3, r1
20000e1a:	00db      	lsls	r3, r3, #3
20000e1c:	18d3      	adds	r3, r2, r3
20000e1e:	18c3      	adds	r3, r0, r3
20000e20:	3314      	adds	r3, #20
20000e22:	681b      	ldr	r3, [r3, #0]
20000e24:	2b00      	cmp	r3, #0
20000e26:	d11e      	bne.n	20000e66 <openPos+0x22e>
20000e28:	687a      	ldr	r2, [r7, #4]
20000e2a:	697b      	ldr	r3, [r7, #20]
20000e2c:	18d1      	adds	r1, r2, r3
20000e2e:	683a      	ldr	r2, [r7, #0]
20000e30:	693b      	ldr	r3, [r7, #16]
20000e32:	18d3      	adds	r3, r2, r3
20000e34:	4814      	ldr	r0, [pc, #80]	; (20000e88 <openPos+0x250>)
20000e36:	001a      	movs	r2, r3
20000e38:	0052      	lsls	r2, r2, #1
20000e3a:	18d2      	adds	r2, r2, r3
20000e3c:	00d3      	lsls	r3, r2, #3
20000e3e:	001a      	movs	r2, r3
20000e40:	000b      	movs	r3, r1
20000e42:	011b      	lsls	r3, r3, #4
20000e44:	1a5b      	subs	r3, r3, r1
20000e46:	00db      	lsls	r3, r3, #3
20000e48:	18d3      	adds	r3, r2, r3
20000e4a:	18c3      	adds	r3, r0, r3
20000e4c:	3310      	adds	r3, #16
20000e4e:	681b      	ldr	r3, [r3, #0]
20000e50:	2b00      	cmp	r3, #0
20000e52:	d108      	bne.n	20000e66 <openPos+0x22e>
				{
					//Sleep(10);
					openPos(x+i, y+j);
20000e54:	687a      	ldr	r2, [r7, #4]
20000e56:	697b      	ldr	r3, [r7, #20]
20000e58:	18d0      	adds	r0, r2, r3
20000e5a:	683a      	ldr	r2, [r7, #0]
20000e5c:	693b      	ldr	r3, [r7, #16]
20000e5e:	18d3      	adds	r3, r2, r3
20000e60:	0019      	movs	r1, r3
20000e62:	f7ff fee9 	bl	20000c38 <openPos>
			for(int j = -1; j <= 1; j++)
20000e66:	693b      	ldr	r3, [r7, #16]
20000e68:	3301      	adds	r3, #1
20000e6a:	613b      	str	r3, [r7, #16]
20000e6c:	693b      	ldr	r3, [r7, #16]
20000e6e:	2b01      	cmp	r3, #1
20000e70:	ddb9      	ble.n	20000de6 <openPos+0x1ae>
		for(int i = -1; i <= 1; i++)
20000e72:	697b      	ldr	r3, [r7, #20]
20000e74:	3301      	adds	r3, #1
20000e76:	617b      	str	r3, [r7, #20]
20000e78:	697b      	ldr	r3, [r7, #20]
20000e7a:	2b01      	cmp	r3, #1
20000e7c:	ddaf      	ble.n	20000dde <openPos+0x1a6>
20000e7e:	e000      	b.n	20000e82 <openPos+0x24a>
		return;
20000e80:	46c0      	nop			; (mov r8, r8)
				}

}
20000e82:	46bd      	mov	sp, r7
20000e84:	b008      	add	sp, #32
20000e86:	bdb0      	pop	{r4, r5, r7, pc}
20000e88:	20001ca4 	andcs	r1, r0, r4, lsr #25
20000e8c:	20002354 	andcs	r2, r0, r4, asr r3
20000e90:	20001ca0 	andcs	r1, r0, r0, lsr #25

20000e94 <countBombOrFlag>:
int countBombOrFlag(int x, int y, int (*func)(struct Positions))
{
20000e94:	b5b0      	push	{r4, r5, r7, lr}
20000e96:	b08a      	sub	sp, #40	; 0x28
20000e98:	af02      	add	r7, sp, #8
20000e9a:	60f8      	str	r0, [r7, #12]
20000e9c:	60b9      	str	r1, [r7, #8]
20000e9e:	607a      	str	r2, [r7, #4]
	int found = 0;
20000ea0:	2300      	movs	r3, #0
20000ea2:	61fb      	str	r3, [r7, #28]
	for(int i = -1; i <= 1; i++)
20000ea4:	2301      	movs	r3, #1
20000ea6:	425b      	negs	r3, r3
20000ea8:	61bb      	str	r3, [r7, #24]
20000eaa:	e043      	b.n	20000f34 <countBombOrFlag+0xa0>
		for(int j = -1; j <= 1; j++)
20000eac:	2301      	movs	r3, #1
20000eae:	425b      	negs	r3, r3
20000eb0:	617b      	str	r3, [r7, #20]
20000eb2:	e039      	b.n	20000f28 <countBombOrFlag+0x94>
			if(validPos(x+i, y+j))
20000eb4:	68fa      	ldr	r2, [r7, #12]
20000eb6:	69bb      	ldr	r3, [r7, #24]
20000eb8:	18d0      	adds	r0, r2, r3
20000eba:	68ba      	ldr	r2, [r7, #8]
20000ebc:	697b      	ldr	r3, [r7, #20]
20000ebe:	18d3      	adds	r3, r2, r3
20000ec0:	0019      	movs	r1, r3
20000ec2:	f000 f8cf 	bl	20001064 <validPos>
20000ec6:	1e03      	subs	r3, r0, #0
20000ec8:	d02b      	beq.n	20000f22 <countBombOrFlag+0x8e>
				if(func(board[x+i][y+j]) == 1 && !(i == 0 && j == 0))
20000eca:	68fa      	ldr	r2, [r7, #12]
20000ecc:	69bb      	ldr	r3, [r7, #24]
20000ece:	18d1      	adds	r1, r2, r3
20000ed0:	68ba      	ldr	r2, [r7, #8]
20000ed2:	697b      	ldr	r3, [r7, #20]
20000ed4:	18d3      	adds	r3, r2, r3
20000ed6:	4c1b      	ldr	r4, [pc, #108]	; (20000f44 <countBombOrFlag+0xb0>)
20000ed8:	001a      	movs	r2, r3
20000eda:	0052      	lsls	r2, r2, #1
20000edc:	18d2      	adds	r2, r2, r3
20000ede:	00d3      	lsls	r3, r2, #3
20000ee0:	001a      	movs	r2, r3
20000ee2:	000b      	movs	r3, r1
20000ee4:	011b      	lsls	r3, r3, #4
20000ee6:	1a5b      	subs	r3, r3, r1
20000ee8:	00db      	lsls	r3, r3, #3
20000eea:	18d3      	adds	r3, r2, r3
20000eec:	2110      	movs	r1, #16
20000eee:	18e2      	adds	r2, r4, r3
20000ef0:	1851      	adds	r1, r2, r1
20000ef2:	466a      	mov	r2, sp
20000ef4:	c921      	ldmia	r1!, {r0, r5}
20000ef6:	c221      	stmia	r2!, {r0, r5}
20000ef8:	5918      	ldr	r0, [r3, r4]
20000efa:	18e2      	adds	r2, r4, r3
20000efc:	6851      	ldr	r1, [r2, #4]
20000efe:	18e2      	adds	r2, r4, r3
20000f00:	6892      	ldr	r2, [r2, #8]
20000f02:	18e3      	adds	r3, r4, r3
20000f04:	68db      	ldr	r3, [r3, #12]
20000f06:	687c      	ldr	r4, [r7, #4]
20000f08:	47a0      	blx	r4
20000f0a:	0003      	movs	r3, r0
20000f0c:	2b01      	cmp	r3, #1
20000f0e:	d108      	bne.n	20000f22 <countBombOrFlag+0x8e>
20000f10:	69bb      	ldr	r3, [r7, #24]
20000f12:	2b00      	cmp	r3, #0
20000f14:	d102      	bne.n	20000f1c <countBombOrFlag+0x88>
20000f16:	697b      	ldr	r3, [r7, #20]
20000f18:	2b00      	cmp	r3, #0
20000f1a:	d002      	beq.n	20000f22 <countBombOrFlag+0x8e>
					found++;
20000f1c:	69fb      	ldr	r3, [r7, #28]
20000f1e:	3301      	adds	r3, #1
20000f20:	61fb      	str	r3, [r7, #28]
		for(int j = -1; j <= 1; j++)
20000f22:	697b      	ldr	r3, [r7, #20]
20000f24:	3301      	adds	r3, #1
20000f26:	617b      	str	r3, [r7, #20]
20000f28:	697b      	ldr	r3, [r7, #20]
20000f2a:	2b01      	cmp	r3, #1
20000f2c:	ddc2      	ble.n	20000eb4 <countBombOrFlag+0x20>
	for(int i = -1; i <= 1; i++)
20000f2e:	69bb      	ldr	r3, [r7, #24]
20000f30:	3301      	adds	r3, #1
20000f32:	61bb      	str	r3, [r7, #24]
20000f34:	69bb      	ldr	r3, [r7, #24]
20000f36:	2b01      	cmp	r3, #1
20000f38:	ddb8      	ble.n	20000eac <countBombOrFlag+0x18>
	return found;
20000f3a:	69fb      	ldr	r3, [r7, #28]
}
20000f3c:	0018      	movs	r0, r3
20000f3e:	46bd      	mov	sp, r7
20000f40:	b008      	add	sp, #32
20000f42:	bdb0      	pop	{r4, r5, r7, pc}
20000f44:	20001ca4 	andcs	r1, r0, r4, lsr #25

20000f48 <isBomb>:
int isBomb(struct Positions pos)
{
20000f48:	b084      	sub	sp, #16
20000f4a:	b5b0      	push	{r4, r5, r7, lr}
20000f4c:	af00      	add	r7, sp, #0
20000f4e:	250c      	movs	r5, #12
20000f50:	1d3c      	adds	r4, r7, #4
20000f52:	1964      	adds	r4, r4, r5
20000f54:	6020      	str	r0, [r4, #0]
20000f56:	6061      	str	r1, [r4, #4]
20000f58:	60a2      	str	r2, [r4, #8]
20000f5a:	60e3      	str	r3, [r4, #12]
	return pos.bomb;
20000f5c:	1d3b      	adds	r3, r7, #4
20000f5e:	195b      	adds	r3, r3, r5
20000f60:	691b      	ldr	r3, [r3, #16]
}
20000f62:	0018      	movs	r0, r3
20000f64:	46bd      	mov	sp, r7
20000f66:	bcb0      	pop	{r4, r5, r7}
20000f68:	bc08      	pop	{r3}
20000f6a:	b004      	add	sp, #16
20000f6c:	4718      	bx	r3

20000f6e <isFlag>:
int isFlag(struct Positions pos)
{
20000f6e:	b084      	sub	sp, #16
20000f70:	b5b0      	push	{r4, r5, r7, lr}
20000f72:	af00      	add	r7, sp, #0
20000f74:	250c      	movs	r5, #12
20000f76:	1d3c      	adds	r4, r7, #4
20000f78:	1964      	adds	r4, r4, r5
20000f7a:	6020      	str	r0, [r4, #0]
20000f7c:	6061      	str	r1, [r4, #4]
20000f7e:	60a2      	str	r2, [r4, #8]
20000f80:	60e3      	str	r3, [r4, #12]
	return pos.flagged;
20000f82:	1d3b      	adds	r3, r7, #4
20000f84:	195b      	adds	r3, r3, r5
20000f86:	68db      	ldr	r3, [r3, #12]
}
20000f88:	0018      	movs	r0, r3
20000f8a:	46bd      	mov	sp, r7
20000f8c:	bcb0      	pop	{r4, r5, r7}
20000f8e:	bc08      	pop	{r3}
20000f90:	b004      	add	sp, #16
20000f92:	4718      	bx	r3

20000f94 <movePlayer>:


struct Player movePlayer(struct Player p, char moveCh)
{
20000f94:	b5b0      	push	{r4, r5, r7, lr}
20000f96:	b08a      	sub	sp, #40	; 0x28
20000f98:	af02      	add	r7, sp, #8
20000f9a:	60f8      	str	r0, [r7, #12]
20000f9c:	0038      	movs	r0, r7
20000f9e:	6001      	str	r1, [r0, #0]
20000fa0:	6042      	str	r2, [r0, #4]
20000fa2:	6083      	str	r3, [r0, #8]
	
	drawPos(board[p.x][p.y]);
20000fa4:	003b      	movs	r3, r7
20000fa6:	6819      	ldr	r1, [r3, #0]
20000fa8:	003b      	movs	r3, r7
20000faa:	685b      	ldr	r3, [r3, #4]
20000fac:	4c2a      	ldr	r4, [pc, #168]	; (20001058 <movePlayer+0xc4>)
20000fae:	001a      	movs	r2, r3
20000fb0:	0052      	lsls	r2, r2, #1
20000fb2:	18d2      	adds	r2, r2, r3
20000fb4:	00d3      	lsls	r3, r2, #3
20000fb6:	001a      	movs	r2, r3
20000fb8:	000b      	movs	r3, r1
20000fba:	011b      	lsls	r3, r3, #4
20000fbc:	1a5b      	subs	r3, r3, r1
20000fbe:	00db      	lsls	r3, r3, #3
20000fc0:	18d3      	adds	r3, r2, r3
20000fc2:	2110      	movs	r1, #16
20000fc4:	18e2      	adds	r2, r4, r3
20000fc6:	1851      	adds	r1, r2, r1
20000fc8:	466a      	mov	r2, sp
20000fca:	c921      	ldmia	r1!, {r0, r5}
20000fcc:	c221      	stmia	r2!, {r0, r5}
20000fce:	5918      	ldr	r0, [r3, r4]
20000fd0:	18e2      	adds	r2, r4, r3
20000fd2:	6851      	ldr	r1, [r2, #4]
20000fd4:	18e2      	adds	r2, r4, r3
20000fd6:	6892      	ldr	r2, [r2, #8]
20000fd8:	18e3      	adds	r3, r4, r3
20000fda:	68db      	ldr	r3, [r3, #12]
20000fdc:	f000 f85c 	bl	20001098 <drawPos>
	int *newXY;
	newXY = getNewXYFromCh(moveCh);
20000fe0:	2330      	movs	r3, #48	; 0x30
20000fe2:	18fb      	adds	r3, r7, r3
20000fe4:	781b      	ldrb	r3, [r3, #0]
20000fe6:	0018      	movs	r0, r3
20000fe8:	f000 f8a6 	bl	20001138 <getNewXYFromCh>
20000fec:	0003      	movs	r3, r0
20000fee:	61fb      	str	r3, [r7, #28]
	//TODO:
	//check if valid move
	int nextX = p.x + *newXY;
20000ff0:	003b      	movs	r3, r7
20000ff2:	681a      	ldr	r2, [r3, #0]
20000ff4:	69fb      	ldr	r3, [r7, #28]
20000ff6:	681b      	ldr	r3, [r3, #0]
20000ff8:	18d3      	adds	r3, r2, r3
20000ffa:	61bb      	str	r3, [r7, #24]
	int nextY = p.y + *(newXY +1);
20000ffc:	003b      	movs	r3, r7
20000ffe:	685a      	ldr	r2, [r3, #4]
20001000:	69fb      	ldr	r3, [r7, #28]
20001002:	3304      	adds	r3, #4
20001004:	681b      	ldr	r3, [r3, #0]
20001006:	18d3      	adds	r3, r2, r3
20001008:	617b      	str	r3, [r7, #20]
	if(validPos(nextX, nextY))
2000100a:	697a      	ldr	r2, [r7, #20]
2000100c:	69bb      	ldr	r3, [r7, #24]
2000100e:	0011      	movs	r1, r2
20001010:	0018      	movs	r0, r3
20001012:	f000 f827 	bl	20001064 <validPos>
20001016:	1e03      	subs	r3, r0, #0
20001018:	d005      	beq.n	20001026 <movePlayer+0x92>
	{
		p.x = nextX;
2000101a:	003b      	movs	r3, r7
2000101c:	69ba      	ldr	r2, [r7, #24]
2000101e:	601a      	str	r2, [r3, #0]
		p.y = nextY;
20001020:	003b      	movs	r3, r7
20001022:	697a      	ldr	r2, [r7, #20]
20001024:	605a      	str	r2, [r3, #4]
	}
	gotoxy(startX + p.x, startY + p.y);
20001026:	003b      	movs	r3, r7
20001028:	681a      	ldr	r2, [r3, #0]
2000102a:	003b      	movs	r3, r7
2000102c:	685b      	ldr	r3, [r3, #4]
2000102e:	0019      	movs	r1, r3
20001030:	0010      	movs	r0, r2
20001032:	f000 f940 	bl	200012b6 <gotoxy>
	printToGD(currX, currY, playerCh);
20001036:	4b09      	ldr	r3, [pc, #36]	; (2000105c <movePlayer+0xc8>)
20001038:	6818      	ldr	r0, [r3, #0]
2000103a:	4b09      	ldr	r3, [pc, #36]	; (20001060 <movePlayer+0xcc>)
2000103c:	681b      	ldr	r3, [r3, #0]
2000103e:	2224      	movs	r2, #36	; 0x24
20001040:	0019      	movs	r1, r3
20001042:	f7ff f8d7 	bl	200001f4 <printToGD>
	return p;
20001046:	68fb      	ldr	r3, [r7, #12]
20001048:	003a      	movs	r2, r7
2000104a:	ca13      	ldmia	r2!, {r0, r1, r4}
2000104c:	c313      	stmia	r3!, {r0, r1, r4}
}
2000104e:	68f8      	ldr	r0, [r7, #12]
20001050:	46bd      	mov	sp, r7
20001052:	b008      	add	sp, #32
20001054:	bdb0      	pop	{r4, r5, r7, pc}
20001056:	46c0      	nop			; (mov r8, r8)
20001058:	20001ca4 	andcs	r1, r0, r4, lsr #25
2000105c:	20002350 	andcs	r2, r0, r0, asr r3
20001060:	20001c98 	mulcs	r0, r8, ip

20001064 <validPos>:

int validPos(int x, int y)
{
20001064:	b580      	push	{r7, lr}
20001066:	b082      	sub	sp, #8
20001068:	af00      	add	r7, sp, #0
2000106a:	6078      	str	r0, [r7, #4]
2000106c:	6039      	str	r1, [r7, #0]
	if(x < 0 || x >= sizeX)
2000106e:	687b      	ldr	r3, [r7, #4]
20001070:	2b00      	cmp	r3, #0
20001072:	db02      	blt.n	2000107a <validPos+0x16>
20001074:	687b      	ldr	r3, [r7, #4]
20001076:	2b0d      	cmp	r3, #13
20001078:	dd01      	ble.n	2000107e <validPos+0x1a>
		return 0;
2000107a:	2300      	movs	r3, #0
2000107c:	e008      	b.n	20001090 <validPos+0x2c>
	else if(y < 0 || y >= sizeY)
2000107e:	683b      	ldr	r3, [r7, #0]
20001080:	2b00      	cmp	r3, #0
20001082:	db02      	blt.n	2000108a <validPos+0x26>
20001084:	683b      	ldr	r3, [r7, #0]
20001086:	2b04      	cmp	r3, #4
20001088:	dd01      	ble.n	2000108e <validPos+0x2a>
		return 0;
2000108a:	2300      	movs	r3, #0
2000108c:	e000      	b.n	20001090 <validPos+0x2c>
	else
		return 1;
2000108e:	2301      	movs	r3, #1
}
20001090:	0018      	movs	r0, r3
20001092:	46bd      	mov	sp, r7
20001094:	b002      	add	sp, #8
20001096:	bd80      	pop	{r7, pc}

20001098 <drawPos>:
void drawPos(struct Positions p)
{
20001098:	b084      	sub	sp, #16
2000109a:	b5b0      	push	{r4, r5, r7, lr}
2000109c:	b084      	sub	sp, #16
2000109e:	af00      	add	r7, sp, #0
200010a0:	2520      	movs	r5, #32
200010a2:	197c      	adds	r4, r7, r5
200010a4:	6020      	str	r0, [r4, #0]
200010a6:	6061      	str	r1, [r4, #4]
200010a8:	60a2      	str	r2, [r4, #8]
200010aa:	60e3      	str	r3, [r4, #12]
	gotoxy(startX + p.x, startY + p.y);
200010ac:	002c      	movs	r4, r5
200010ae:	193b      	adds	r3, r7, r4
200010b0:	681a      	ldr	r2, [r3, #0]
200010b2:	193b      	adds	r3, r7, r4
200010b4:	685b      	ldr	r3, [r3, #4]
200010b6:	0019      	movs	r1, r3
200010b8:	0010      	movs	r0, r2
200010ba:	f000 f8fc 	bl	200012b6 <gotoxy>
	if(p.opened)
200010be:	193b      	adds	r3, r7, r4
200010c0:	695b      	ldr	r3, [r3, #20]
200010c2:	2b00      	cmp	r3, #0
200010c4:	d011      	beq.n	200010ea <drawPos+0x52>
	{
		char chs[] = {'0','1','2','3','4','5','6','7','8','9'};
200010c6:	1d3b      	adds	r3, r7, #4
200010c8:	4a17      	ldr	r2, [pc, #92]	; (20001128 <drawPos+0x90>)
200010ca:	ca03      	ldmia	r2!, {r0, r1}
200010cc:	c303      	stmia	r3!, {r0, r1}
200010ce:	8812      	ldrh	r2, [r2, #0]
200010d0:	801a      	strh	r2, [r3, #0]
		printToGD(currX, currY, chs[p.numberOfBombs]);
200010d2:	4b16      	ldr	r3, [pc, #88]	; (2000112c <drawPos+0x94>)
200010d4:	6818      	ldr	r0, [r3, #0]
200010d6:	4b16      	ldr	r3, [pc, #88]	; (20001130 <drawPos+0x98>)
200010d8:	6819      	ldr	r1, [r3, #0]
200010da:	193b      	adds	r3, r7, r4
200010dc:	689b      	ldr	r3, [r3, #8]
200010de:	1d3a      	adds	r2, r7, #4
200010e0:	5cd3      	ldrb	r3, [r2, r3]
200010e2:	001a      	movs	r2, r3
200010e4:	f7ff f886 	bl	200001f4 <printToGD>
		printToGD(currX, currY, flagCh);
	}
	else
		printToGD(currX, currY, " ");
		
}
200010e8:	e016      	b.n	20001118 <drawPos+0x80>
	else if(p.flagged)
200010ea:	2320      	movs	r3, #32
200010ec:	18fb      	adds	r3, r7, r3
200010ee:	68db      	ldr	r3, [r3, #12]
200010f0:	2b00      	cmp	r3, #0
200010f2:	d008      	beq.n	20001106 <drawPos+0x6e>
		printToGD(currX, currY, flagCh);
200010f4:	4b0d      	ldr	r3, [pc, #52]	; (2000112c <drawPos+0x94>)
200010f6:	6818      	ldr	r0, [r3, #0]
200010f8:	4b0d      	ldr	r3, [pc, #52]	; (20001130 <drawPos+0x98>)
200010fa:	681b      	ldr	r3, [r3, #0]
200010fc:	225e      	movs	r2, #94	; 0x5e
200010fe:	0019      	movs	r1, r3
20001100:	f7ff f878 	bl	200001f4 <printToGD>
}
20001104:	e008      	b.n	20001118 <drawPos+0x80>
		printToGD(currX, currY, " ");
20001106:	4b09      	ldr	r3, [pc, #36]	; (2000112c <drawPos+0x94>)
20001108:	6818      	ldr	r0, [r3, #0]
2000110a:	4b09      	ldr	r3, [pc, #36]	; (20001130 <drawPos+0x98>)
2000110c:	681b      	ldr	r3, [r3, #0]
2000110e:	4a09      	ldr	r2, [pc, #36]	; (20001134 <drawPos+0x9c>)
20001110:	b2d2      	uxtb	r2, r2
20001112:	0019      	movs	r1, r3
20001114:	f7ff f86e 	bl	200001f4 <printToGD>
}
20001118:	46c0      	nop			; (mov r8, r8)
2000111a:	46bd      	mov	sp, r7
2000111c:	b004      	add	sp, #16
2000111e:	bcb0      	pop	{r4, r5, r7}
20001120:	bc08      	pop	{r3}
20001122:	b004      	add	sp, #16
20001124:	4718      	bx	r3
20001126:	46c0      	nop			; (mov r8, r8)
20001128:	20002860 	andcs	r2, r0, r0, ror #16
2000112c:	20002350 	andcs	r2, r0, r0, asr r3
20001130:	20001c98 	mulcs	r0, r8, ip
20001134:	2000285c 	andcs	r2, r0, ip, asr r8

20001138 <getNewXYFromCh>:
int * getNewXYFromCh(char ch)
{
20001138:	b580      	push	{r7, lr}
2000113a:	b082      	sub	sp, #8
2000113c:	af00      	add	r7, sp, #0
2000113e:	0002      	movs	r2, r0
20001140:	1dfb      	adds	r3, r7, #7
20001142:	701a      	strb	r2, [r3, #0]
	ch = tolower(ch);
20001144:	1dfb      	adds	r3, r7, #7
20001146:	781b      	ldrb	r3, [r3, #0]
20001148:	0018      	movs	r0, r3
2000114a:	f000 fd8b 	bl	20001c64 <tolower>
2000114e:	0002      	movs	r2, r0
20001150:	1dfb      	adds	r3, r7, #7
20001152:	701a      	strb	r2, [r3, #0]
	static int r[2];
	switch(ch)
20001154:	1dfb      	adds	r3, r7, #7
20001156:	781b      	ldrb	r3, [r3, #0]
20001158:	2b08      	cmp	r3, #8
2000115a:	d010      	beq.n	2000117e <getNewXYFromCh+0x46>
2000115c:	dc25      	bgt.n	200011aa <getNewXYFromCh+0x72>
2000115e:	2b06      	cmp	r3, #6
20001160:	d01c      	beq.n	2000119c <getNewXYFromCh+0x64>
20001162:	dc22      	bgt.n	200011aa <getNewXYFromCh+0x72>
20001164:	2b02      	cmp	r3, #2
20001166:	d002      	beq.n	2000116e <getNewXYFromCh+0x36>
20001168:	2b04      	cmp	r3, #4
2000116a:	d00f      	beq.n	2000118c <getNewXYFromCh+0x54>
2000116c:	e01d      	b.n	200011aa <getNewXYFromCh+0x72>
	{
		case 0x2:
		 r[0] = 0;
2000116e:	4b11      	ldr	r3, [pc, #68]	; (200011b4 <getNewXYFromCh+0x7c>)
20001170:	2200      	movs	r2, #0
20001172:	601a      	str	r2, [r3, #0]
		 r[1] = -1;
20001174:	4b0f      	ldr	r3, [pc, #60]	; (200011b4 <getNewXYFromCh+0x7c>)
20001176:	2201      	movs	r2, #1
20001178:	4252      	negs	r2, r2
2000117a:	605a      	str	r2, [r3, #4]
		 break;
2000117c:	e015      	b.n	200011aa <getNewXYFromCh+0x72>
		case 0x8:
		 r[0] = 0;
2000117e:	4b0d      	ldr	r3, [pc, #52]	; (200011b4 <getNewXYFromCh+0x7c>)
20001180:	2200      	movs	r2, #0
20001182:	601a      	str	r2, [r3, #0]
		 r[1] = 1;
20001184:	4b0b      	ldr	r3, [pc, #44]	; (200011b4 <getNewXYFromCh+0x7c>)
20001186:	2201      	movs	r2, #1
20001188:	605a      	str	r2, [r3, #4]
		 break;
2000118a:	e00e      	b.n	200011aa <getNewXYFromCh+0x72>
		case 0x4:
		 r[0] = -1;
2000118c:	4b09      	ldr	r3, [pc, #36]	; (200011b4 <getNewXYFromCh+0x7c>)
2000118e:	2201      	movs	r2, #1
20001190:	4252      	negs	r2, r2
20001192:	601a      	str	r2, [r3, #0]
		 r[1] = 0;
20001194:	4b07      	ldr	r3, [pc, #28]	; (200011b4 <getNewXYFromCh+0x7c>)
20001196:	2200      	movs	r2, #0
20001198:	605a      	str	r2, [r3, #4]
		 break;
2000119a:	e006      	b.n	200011aa <getNewXYFromCh+0x72>
		case 0x6:
		 r[0] = 1;
2000119c:	4b05      	ldr	r3, [pc, #20]	; (200011b4 <getNewXYFromCh+0x7c>)
2000119e:	2201      	movs	r2, #1
200011a0:	601a      	str	r2, [r3, #0]
		 r[1] = 0;
200011a2:	4b04      	ldr	r3, [pc, #16]	; (200011b4 <getNewXYFromCh+0x7c>)
200011a4:	2200      	movs	r2, #0
200011a6:	605a      	str	r2, [r3, #4]
		 break;
200011a8:	46c0      	nop			; (mov r8, r8)
	}
	return r;
200011aa:	4b02      	ldr	r3, [pc, #8]	; (200011b4 <getNewXYFromCh+0x7c>)
}
200011ac:	0018      	movs	r0, r3
200011ae:	46bd      	mov	sp, r7
200011b0:	b002      	add	sp, #8
200011b2:	bd80      	pop	{r7, pc}
200011b4:	20001c88 	andcs	r1, r0, r8, lsl #25

200011b8 <createBoard>:

void createBoard(struct Positions b[sizeX][sizeY])
{
200011b8:	b580      	push	{r7, lr}
200011ba:	b084      	sub	sp, #16
200011bc:	af00      	add	r7, sp, #0
200011be:	6078      	str	r0, [r7, #4]
	for(int x = 0; x < sizeX; x++)
200011c0:	2300      	movs	r3, #0
200011c2:	60fb      	str	r3, [r7, #12]
200011c4:	e06f      	b.n	200012a6 <createBoard+0xee>
	{
		for(int y = 0; y < sizeY; y++) 
200011c6:	2300      	movs	r3, #0
200011c8:	60bb      	str	r3, [r7, #8]
200011ca:	e066      	b.n	2000129a <createBoard+0xe2>
		{
			b[x][y].x = x;
200011cc:	68fa      	ldr	r2, [r7, #12]
200011ce:	0013      	movs	r3, r2
200011d0:	011b      	lsls	r3, r3, #4
200011d2:	1a9b      	subs	r3, r3, r2
200011d4:	00db      	lsls	r3, r3, #3
200011d6:	001a      	movs	r2, r3
200011d8:	687b      	ldr	r3, [r7, #4]
200011da:	1899      	adds	r1, r3, r2
200011dc:	68ba      	ldr	r2, [r7, #8]
200011de:	0013      	movs	r3, r2
200011e0:	005b      	lsls	r3, r3, #1
200011e2:	189b      	adds	r3, r3, r2
200011e4:	00db      	lsls	r3, r3, #3
200011e6:	68fa      	ldr	r2, [r7, #12]
200011e8:	505a      	str	r2, [r3, r1]
			b[x][y].y = y;
200011ea:	68fa      	ldr	r2, [r7, #12]
200011ec:	0013      	movs	r3, r2
200011ee:	011b      	lsls	r3, r3, #4
200011f0:	1a9b      	subs	r3, r3, r2
200011f2:	00db      	lsls	r3, r3, #3
200011f4:	001a      	movs	r2, r3
200011f6:	687b      	ldr	r3, [r7, #4]
200011f8:	1899      	adds	r1, r3, r2
200011fa:	68ba      	ldr	r2, [r7, #8]
200011fc:	0013      	movs	r3, r2
200011fe:	005b      	lsls	r3, r3, #1
20001200:	189b      	adds	r3, r3, r2
20001202:	00db      	lsls	r3, r3, #3
20001204:	18cb      	adds	r3, r1, r3
20001206:	3304      	adds	r3, #4
20001208:	68ba      	ldr	r2, [r7, #8]
2000120a:	601a      	str	r2, [r3, #0]
			b[x][y].numberOfBombs =  0;
2000120c:	68fa      	ldr	r2, [r7, #12]
2000120e:	0013      	movs	r3, r2
20001210:	011b      	lsls	r3, r3, #4
20001212:	1a9b      	subs	r3, r3, r2
20001214:	00db      	lsls	r3, r3, #3
20001216:	001a      	movs	r2, r3
20001218:	687b      	ldr	r3, [r7, #4]
2000121a:	1899      	adds	r1, r3, r2
2000121c:	68ba      	ldr	r2, [r7, #8]
2000121e:	0013      	movs	r3, r2
20001220:	005b      	lsls	r3, r3, #1
20001222:	189b      	adds	r3, r3, r2
20001224:	00db      	lsls	r3, r3, #3
20001226:	18cb      	adds	r3, r1, r3
20001228:	3308      	adds	r3, #8
2000122a:	2200      	movs	r2, #0
2000122c:	601a      	str	r2, [r3, #0]
			b[x][y].flagged = 0;
2000122e:	68fa      	ldr	r2, [r7, #12]
20001230:	0013      	movs	r3, r2
20001232:	011b      	lsls	r3, r3, #4
20001234:	1a9b      	subs	r3, r3, r2
20001236:	00db      	lsls	r3, r3, #3
20001238:	001a      	movs	r2, r3
2000123a:	687b      	ldr	r3, [r7, #4]
2000123c:	1899      	adds	r1, r3, r2
2000123e:	68ba      	ldr	r2, [r7, #8]
20001240:	0013      	movs	r3, r2
20001242:	005b      	lsls	r3, r3, #1
20001244:	189b      	adds	r3, r3, r2
20001246:	00db      	lsls	r3, r3, #3
20001248:	18cb      	adds	r3, r1, r3
2000124a:	330c      	adds	r3, #12
2000124c:	2200      	movs	r2, #0
2000124e:	601a      	str	r2, [r3, #0]
			b[x][y].opened = 0;
20001250:	68fa      	ldr	r2, [r7, #12]
20001252:	0013      	movs	r3, r2
20001254:	011b      	lsls	r3, r3, #4
20001256:	1a9b      	subs	r3, r3, r2
20001258:	00db      	lsls	r3, r3, #3
2000125a:	001a      	movs	r2, r3
2000125c:	687b      	ldr	r3, [r7, #4]
2000125e:	1899      	adds	r1, r3, r2
20001260:	68ba      	ldr	r2, [r7, #8]
20001262:	0013      	movs	r3, r2
20001264:	005b      	lsls	r3, r3, #1
20001266:	189b      	adds	r3, r3, r2
20001268:	00db      	lsls	r3, r3, #3
2000126a:	18cb      	adds	r3, r1, r3
2000126c:	3314      	adds	r3, #20
2000126e:	2200      	movs	r2, #0
20001270:	601a      	str	r2, [r3, #0]
			b[x][y].bomb = 0;
20001272:	68fa      	ldr	r2, [r7, #12]
20001274:	0013      	movs	r3, r2
20001276:	011b      	lsls	r3, r3, #4
20001278:	1a9b      	subs	r3, r3, r2
2000127a:	00db      	lsls	r3, r3, #3
2000127c:	001a      	movs	r2, r3
2000127e:	687b      	ldr	r3, [r7, #4]
20001280:	1899      	adds	r1, r3, r2
20001282:	68ba      	ldr	r2, [r7, #8]
20001284:	0013      	movs	r3, r2
20001286:	005b      	lsls	r3, r3, #1
20001288:	189b      	adds	r3, r3, r2
2000128a:	00db      	lsls	r3, r3, #3
2000128c:	18cb      	adds	r3, r1, r3
2000128e:	3310      	adds	r3, #16
20001290:	2200      	movs	r2, #0
20001292:	601a      	str	r2, [r3, #0]
		for(int y = 0; y < sizeY; y++) 
20001294:	68bb      	ldr	r3, [r7, #8]
20001296:	3301      	adds	r3, #1
20001298:	60bb      	str	r3, [r7, #8]
2000129a:	68bb      	ldr	r3, [r7, #8]
2000129c:	2b04      	cmp	r3, #4
2000129e:	dd95      	ble.n	200011cc <createBoard+0x14>
	for(int x = 0; x < sizeX; x++)
200012a0:	68fb      	ldr	r3, [r7, #12]
200012a2:	3301      	adds	r3, #1
200012a4:	60fb      	str	r3, [r7, #12]
200012a6:	68fb      	ldr	r3, [r7, #12]
200012a8:	2b0d      	cmp	r3, #13
200012aa:	dd8c      	ble.n	200011c6 <createBoard+0xe>
		} 
	}
}
200012ac:	46c0      	nop			; (mov r8, r8)
200012ae:	46c0      	nop			; (mov r8, r8)
200012b0:	46bd      	mov	sp, r7
200012b2:	b004      	add	sp, #16
200012b4:	bd80      	pop	{r7, pc}

200012b6 <gotoxy>:


void gotoxy(int x, int y)
{
200012b6:	b580      	push	{r7, lr}
200012b8:	b082      	sub	sp, #8
200012ba:	af00      	add	r7, sp, #0
200012bc:	6078      	str	r0, [r7, #4]
200012be:	6039      	str	r1, [r7, #0]
  currX = x;
200012c0:	4b04      	ldr	r3, [pc, #16]	; (200012d4 <gotoxy+0x1e>)
200012c2:	687a      	ldr	r2, [r7, #4]
200012c4:	601a      	str	r2, [r3, #0]
  currY = y;
200012c6:	4b04      	ldr	r3, [pc, #16]	; (200012d8 <gotoxy+0x22>)
200012c8:	683a      	ldr	r2, [r7, #0]
200012ca:	601a      	str	r2, [r3, #0]
}
200012cc:	46c0      	nop			; (mov r8, r8)
200012ce:	46bd      	mov	sp, r7
200012d0:	b002      	add	sp, #8
200012d2:	bd80      	pop	{r7, pc}
200012d4:	20002350 	andcs	r2, r0, r0, asr r3
200012d8:	20001c98 	mulcs	r0, r8, ip

200012dc <reset_game>:

void reset_game(int * gameStarted, int * nSameKey, struct Player * p)
{
200012dc:	b580      	push	{r7, lr}
200012de:	b084      	sub	sp, #16
200012e0:	af00      	add	r7, sp, #0
200012e2:	60f8      	str	r0, [r7, #12]
200012e4:	60b9      	str	r1, [r7, #8]
200012e6:	607a      	str	r2, [r7, #4]
	isBombPtr = isBomb;
200012e8:	4b21      	ldr	r3, [pc, #132]	; (20001370 <reset_game+0x94>)
200012ea:	4a22      	ldr	r2, [pc, #136]	; (20001374 <reset_game+0x98>)
200012ec:	601a      	str	r2, [r3, #0]
	isFlagPtr = isFlag;
200012ee:	4b22      	ldr	r3, [pc, #136]	; (20001378 <reset_game+0x9c>)
200012f0:	4a22      	ldr	r2, [pc, #136]	; (2000137c <reset_game+0xa0>)
200012f2:	601a      	str	r2, [r3, #0]
	graphic_clear_screen();
200012f4:	f7ff f85f 	bl	200003b6 <graphic_clear_screen>
	createBoard(&board);
200012f8:	4b21      	ldr	r3, [pc, #132]	; (20001380 <reset_game+0xa4>)
200012fa:	0018      	movs	r0, r3
200012fc:	f7ff ff5c 	bl	200011b8 <createBoard>
	*gameStarted = 0;	
20001300:	68fb      	ldr	r3, [r7, #12]
20001302:	2200      	movs	r2, #0
20001304:	601a      	str	r2, [r3, #0]
	p->x = 0;
20001306:	687b      	ldr	r3, [r7, #4]
20001308:	2200      	movs	r2, #0
2000130a:	601a      	str	r2, [r3, #0]
	p->y = 0;
2000130c:	687b      	ldr	r3, [r7, #4]
2000130e:	2200      	movs	r2, #0
20001310:	605a      	str	r2, [r3, #4]
	*nSameKey = 0;
20001312:	68bb      	ldr	r3, [r7, #8]
20001314:	2200      	movs	r2, #0
20001316:	601a      	str	r2, [r3, #0]
	gotoxy(0,0);
20001318:	2100      	movs	r1, #0
2000131a:	2000      	movs	r0, #0
2000131c:	f7ff ffcb 	bl	200012b6 <gotoxy>
	printToGD(currX, currY, playerCh);
20001320:	4b18      	ldr	r3, [pc, #96]	; (20001384 <reset_game+0xa8>)
20001322:	6818      	ldr	r0, [r3, #0]
20001324:	4b18      	ldr	r3, [pc, #96]	; (20001388 <reset_game+0xac>)
20001326:	681b      	ldr	r3, [r3, #0]
20001328:	2224      	movs	r2, #36	; 0x24
2000132a:	0019      	movs	r1, r3
2000132c:	f7fe ff62 	bl	200001f4 <printToGD>
	print_start_text_ascii();
20001330:	f7ff f84a 	bl	200003c8 <print_start_text_ascii>
	print_flags(Bombs - placed_flaggs);
20001334:	4b15      	ldr	r3, [pc, #84]	; (2000138c <reset_game+0xb0>)
20001336:	681b      	ldr	r3, [r3, #0]
20001338:	220a      	movs	r2, #10
2000133a:	1ad3      	subs	r3, r2, r3
2000133c:	0018      	movs	r0, r3
2000133e:	f7ff f86b 	bl	20000418 <print_flags>
	gameover = 0;
20001342:	4b13      	ldr	r3, [pc, #76]	; (20001390 <reset_game+0xb4>)
20001344:	2200      	movs	r2, #0
20001346:	601a      	str	r2, [r3, #0]
	currX = 0;
20001348:	4b0e      	ldr	r3, [pc, #56]	; (20001384 <reset_game+0xa8>)
2000134a:	2200      	movs	r2, #0
2000134c:	601a      	str	r2, [r3, #0]
	currY = 0;
2000134e:	4b0e      	ldr	r3, [pc, #56]	; (20001388 <reset_game+0xac>)
20001350:	2200      	movs	r2, #0
20001352:	601a      	str	r2, [r3, #0]
	running = 0;
20001354:	4b0f      	ldr	r3, [pc, #60]	; (20001394 <reset_game+0xb8>)
20001356:	2200      	movs	r2, #0
20001358:	601a      	str	r2, [r3, #0]
	gameover = 0;	
2000135a:	4b0d      	ldr	r3, [pc, #52]	; (20001390 <reset_game+0xb4>)
2000135c:	2200      	movs	r2, #0
2000135e:	601a      	str	r2, [r3, #0]
	placed_flaggs = 0;
20001360:	4b0a      	ldr	r3, [pc, #40]	; (2000138c <reset_game+0xb0>)
20001362:	2200      	movs	r2, #0
20001364:	601a      	str	r2, [r3, #0]
20001366:	46c0      	nop			; (mov r8, r8)
20001368:	46bd      	mov	sp, r7
2000136a:	b004      	add	sp, #16
2000136c:	bd80      	pop	{r7, pc}
2000136e:	46c0      	nop			; (mov r8, r8)
20001370:	20002354 	andcs	r2, r0, r4, asr r3
20001374:	20000f49 	andcs	r0, r0, r9, asr #30
20001378:	20001ca0 	andcs	r1, r0, r0, lsr #25
2000137c:	20000f6f 	andcs	r0, r0, pc, ror #30
20001380:	20001ca4 	andcs	r1, r0, r4, lsr #25
20001384:	20002350 	andcs	r2, r0, r0, asr r3
20001388:	20001c98 	mulcs	r0, r8, ip
2000138c:	20002358 	andcs	r2, r0, r8, asr r3
20001390:	2000234c 	andcs	r2, r0, ip, asr #6
20001394:	20001c9c 	mulcs	r0, ip, ip

20001398 <timer6_init>:
volatile int seconds;
int timer_running;


void timer6_init()
{
20001398:	b580      	push	{r7, lr}
2000139a:	af00      	add	r7, sp, #0
	ticks = 0; 
2000139c:	4b1b      	ldr	r3, [pc, #108]	; (2000140c <timer6_init+0x74>)
2000139e:	2200      	movs	r2, #0
200013a0:	601a      	str	r2, [r3, #0]
	seconds = 0;
200013a2:	4b1b      	ldr	r3, [pc, #108]	; (20001410 <timer6_init+0x78>)
200013a4:	2200      	movs	r2, #0
200013a6:	601a      	str	r2, [r3, #0]
	*TIM6_CR1 &= ~CEN; //stoppa räknare
200013a8:	4b1a      	ldr	r3, [pc, #104]	; (20001414 <timer6_init+0x7c>)
200013aa:	881b      	ldrh	r3, [r3, #0]
200013ac:	b29b      	uxth	r3, r3
200013ae:	4a19      	ldr	r2, [pc, #100]	; (20001414 <timer6_init+0x7c>)
200013b0:	2101      	movs	r1, #1
200013b2:	438b      	bics	r3, r1
200013b4:	b29b      	uxth	r3, r3
200013b6:	8013      	strh	r3, [r2, #0]
	//*SCB_VTOR = REALLOC;
	*TIM6_IRQVEC = timer6_interrupt;
200013b8:	4b17      	ldr	r3, [pc, #92]	; (20001418 <timer6_init+0x80>)
200013ba:	681b      	ldr	r3, [r3, #0]
200013bc:	3319      	adds	r3, #25
200013be:	33ff      	adds	r3, #255	; 0xff
200013c0:	4a16      	ldr	r2, [pc, #88]	; (2000141c <timer6_init+0x84>)
200013c2:	601a      	str	r2, [r3, #0]
	*NVIC_TIM6_ISER |= NVIC_TIM6_IRQ_BPOS;
200013c4:	4b16      	ldr	r3, [pc, #88]	; (20001420 <timer6_init+0x88>)
200013c6:	681a      	ldr	r2, [r3, #0]
200013c8:	4b15      	ldr	r3, [pc, #84]	; (20001420 <timer6_init+0x88>)
200013ca:	2180      	movs	r1, #128	; 0x80
200013cc:	03c9      	lsls	r1, r1, #15
200013ce:	430a      	orrs	r2, r1
200013d0:	601a      	str	r2, [r3, #0]
	
	//100ms tidbas
	*TIM6_PSC = 839;
200013d2:	4b14      	ldr	r3, [pc, #80]	; (20001424 <timer6_init+0x8c>)
200013d4:	4a14      	ldr	r2, [pc, #80]	; (20001428 <timer6_init+0x90>)
200013d6:	801a      	strh	r2, [r3, #0]
    *TIM6_ARR = 9999;
200013d8:	4b14      	ldr	r3, [pc, #80]	; (2000142c <timer6_init+0x94>)
200013da:	4a15      	ldr	r2, [pc, #84]	; (20001430 <timer6_init+0x98>)
200013dc:	801a      	strh	r2, [r3, #0]
	*TIM6_DIER |= UIE;
200013de:	4b15      	ldr	r3, [pc, #84]	; (20001434 <timer6_init+0x9c>)
200013e0:	881b      	ldrh	r3, [r3, #0]
200013e2:	b29b      	uxth	r3, r3
200013e4:	4a13      	ldr	r2, [pc, #76]	; (20001434 <timer6_init+0x9c>)
200013e6:	2101      	movs	r1, #1
200013e8:	430b      	orrs	r3, r1
200013ea:	b29b      	uxth	r3, r3
200013ec:	8013      	strh	r3, [r2, #0]
	*TIM6_CR1 |= CEN; //starta räknare
200013ee:	4b09      	ldr	r3, [pc, #36]	; (20001414 <timer6_init+0x7c>)
200013f0:	881b      	ldrh	r3, [r3, #0]
200013f2:	b29b      	uxth	r3, r3
200013f4:	4a07      	ldr	r2, [pc, #28]	; (20001414 <timer6_init+0x7c>)
200013f6:	2101      	movs	r1, #1
200013f8:	430b      	orrs	r3, r1
200013fa:	b29b      	uxth	r3, r3
200013fc:	8013      	strh	r3, [r2, #0]
	timer_running = 1;
200013fe:	4b0e      	ldr	r3, [pc, #56]	; (20001438 <timer6_init+0xa0>)
20001400:	2201      	movs	r2, #1
20001402:	601a      	str	r2, [r3, #0]
}
20001404:	46c0      	nop			; (mov r8, r8)
20001406:	46bd      	mov	sp, r7
20001408:	bd80      	pop	{r7, pc}
2000140a:	46c0      	nop			; (mov r8, r8)
2000140c:	20002360 	andcs	r2, r0, r0, ror #6
20001410:	2000235c 	andcs	r2, r0, ip, asr r3
20001414:	40001000 	andmi	r1, r0, r0
20001418:	e000ed08 	and	lr, r0, r8, lsl #26
2000141c:	2000143d 	andcs	r1, r0, sp, lsr r4
20001420:	e000e104 	and	lr, r0, r4, lsl #2
20001424:	40001028 	andmi	r1, r0, r8, lsr #32
20001428:	00000347 	andeq	r0, r0, r7, asr #6
2000142c:	4000102c 	andmi	r1, r0, ip, lsr #32
20001430:	0000270f 	andeq	r2, r0, pc, lsl #14
20001434:	4000100c 	andmi	r1, r0, ip
20001438:	20002364 	andcs	r2, r0, r4, ror #6

2000143c <timer6_interrupt>:


void timer6_interrupt()
{
2000143c:	b580      	push	{r7, lr}
2000143e:	af00      	add	r7, sp, #0
	*TIM6_SR &= ~UIF;
20001440:	4b0d      	ldr	r3, [pc, #52]	; (20001478 <timer6_interrupt+0x3c>)
20001442:	881b      	ldrh	r3, [r3, #0]
20001444:	b29b      	uxth	r3, r3
20001446:	4a0c      	ldr	r2, [pc, #48]	; (20001478 <timer6_interrupt+0x3c>)
20001448:	2101      	movs	r1, #1
2000144a:	438b      	bics	r3, r1
2000144c:	b29b      	uxth	r3, r3
2000144e:	8013      	strh	r3, [r2, #0]
	ticks++;
20001450:	4b0a      	ldr	r3, [pc, #40]	; (2000147c <timer6_interrupt+0x40>)
20001452:	681b      	ldr	r3, [r3, #0]
20001454:	1c5a      	adds	r2, r3, #1
20001456:	4b09      	ldr	r3, [pc, #36]	; (2000147c <timer6_interrupt+0x40>)
20001458:	601a      	str	r2, [r3, #0]
	if(ticks > 9)
2000145a:	4b08      	ldr	r3, [pc, #32]	; (2000147c <timer6_interrupt+0x40>)
2000145c:	681b      	ldr	r3, [r3, #0]
2000145e:	2b09      	cmp	r3, #9
20001460:	dd07      	ble.n	20001472 <timer6_interrupt+0x36>
	{
		ticks = 0;
20001462:	4b06      	ldr	r3, [pc, #24]	; (2000147c <timer6_interrupt+0x40>)
20001464:	2200      	movs	r2, #0
20001466:	601a      	str	r2, [r3, #0]
		seconds ++;
20001468:	4b05      	ldr	r3, [pc, #20]	; (20001480 <timer6_interrupt+0x44>)
2000146a:	681b      	ldr	r3, [r3, #0]
2000146c:	1c5a      	adds	r2, r3, #1
2000146e:	4b04      	ldr	r3, [pc, #16]	; (20001480 <timer6_interrupt+0x44>)
20001470:	601a      	str	r2, [r3, #0]
	}
}
20001472:	46c0      	nop			; (mov r8, r8)
20001474:	46bd      	mov	sp, r7
20001476:	bd80      	pop	{r7, pc}
20001478:	40001010 	andmi	r1, r0, r0, lsl r0
2000147c:	20002360 	andcs	r2, r0, r0, ror #6
20001480:	2000235c 	andcs	r2, r0, ip, asr r3

20001484 <toggle_timer_running>:

void toggle_timer_running()
{
20001484:	b580      	push	{r7, lr}
20001486:	af00      	add	r7, sp, #0
	timer_running = !timer_running;
20001488:	4b07      	ldr	r3, [pc, #28]	; (200014a8 <toggle_timer_running+0x24>)
2000148a:	681b      	ldr	r3, [r3, #0]
2000148c:	425a      	negs	r2, r3
2000148e:	4153      	adcs	r3, r2
20001490:	b2db      	uxtb	r3, r3
20001492:	001a      	movs	r2, r3
20001494:	4b04      	ldr	r3, [pc, #16]	; (200014a8 <toggle_timer_running+0x24>)
20001496:	601a      	str	r2, [r3, #0]
	set_running(timer_running);
20001498:	4b03      	ldr	r3, [pc, #12]	; (200014a8 <toggle_timer_running+0x24>)
2000149a:	681b      	ldr	r3, [r3, #0]
2000149c:	0018      	movs	r0, r3
2000149e:	f000 f805 	bl	200014ac <set_running>
}
200014a2:	46c0      	nop			; (mov r8, r8)
200014a4:	46bd      	mov	sp, r7
200014a6:	bd80      	pop	{r7, pc}
200014a8:	20002364 	andcs	r2, r0, r4, ror #6

200014ac <set_running>:

void set_running(int r)
{
200014ac:	b580      	push	{r7, lr}
200014ae:	b082      	sub	sp, #8
200014b0:	af00      	add	r7, sp, #0
200014b2:	6078      	str	r0, [r7, #4]
	if(r)
200014b4:	687b      	ldr	r3, [r7, #4]
200014b6:	2b00      	cmp	r3, #0
200014b8:	d008      	beq.n	200014cc <set_running+0x20>
		*TIM6_CR1 |= CEN; //starta räknare
200014ba:	4b0c      	ldr	r3, [pc, #48]	; (200014ec <set_running+0x40>)
200014bc:	881b      	ldrh	r3, [r3, #0]
200014be:	b29b      	uxth	r3, r3
200014c0:	4a0a      	ldr	r2, [pc, #40]	; (200014ec <set_running+0x40>)
200014c2:	2101      	movs	r1, #1
200014c4:	430b      	orrs	r3, r1
200014c6:	b29b      	uxth	r3, r3
200014c8:	8013      	strh	r3, [r2, #0]
200014ca:	e007      	b.n	200014dc <set_running+0x30>
	else
		*TIM6_CR1 &= ~CEN; //stoppa räknare
200014cc:	4b07      	ldr	r3, [pc, #28]	; (200014ec <set_running+0x40>)
200014ce:	881b      	ldrh	r3, [r3, #0]
200014d0:	b29b      	uxth	r3, r3
200014d2:	4a06      	ldr	r2, [pc, #24]	; (200014ec <set_running+0x40>)
200014d4:	2101      	movs	r1, #1
200014d6:	438b      	bics	r3, r1
200014d8:	b29b      	uxth	r3, r3
200014da:	8013      	strh	r3, [r2, #0]
	timer_running = r;
200014dc:	4b04      	ldr	r3, [pc, #16]	; (200014f0 <set_running+0x44>)
200014de:	687a      	ldr	r2, [r7, #4]
200014e0:	601a      	str	r2, [r3, #0]
}
200014e2:	46c0      	nop			; (mov r8, r8)
200014e4:	46bd      	mov	sp, r7
200014e6:	b002      	add	sp, #8
200014e8:	bd80      	pop	{r7, pc}
200014ea:	46c0      	nop			; (mov r8, r8)
200014ec:	40001000 	andmi	r1, r0, r0
200014f0:	20002364 	andcs	r2, r0, r4, ror #6

200014f4 <reset_timer>:
void reset_timer()
{
200014f4:	b580      	push	{r7, lr}
200014f6:	af00      	add	r7, sp, #0
	ticks = 0;
200014f8:	4b04      	ldr	r3, [pc, #16]	; (2000150c <reset_timer+0x18>)
200014fa:	2200      	movs	r2, #0
200014fc:	601a      	str	r2, [r3, #0]
	seconds = 0;
200014fe:	4b04      	ldr	r3, [pc, #16]	; (20001510 <reset_timer+0x1c>)
20001500:	2200      	movs	r2, #0
20001502:	601a      	str	r2, [r3, #0]
20001504:	46c0      	nop			; (mov r8, r8)
20001506:	46bd      	mov	sp, r7
20001508:	bd80      	pop	{r7, pc}
2000150a:	46c0      	nop			; (mov r8, r8)
2000150c:	20002360 	andcs	r2, r0, r0, ror #6
20001510:	2000235c 	andcs	r2, r0, ip, asr r3

20001514 <init_keypad>:
unsigned char current_state = initState;

static volatile GPIO * port;

void init_keypad(GPIO * p)
{
20001514:	b580      	push	{r7, lr}
20001516:	b082      	sub	sp, #8
20001518:	af00      	add	r7, sp, #0
2000151a:	6078      	str	r0, [r7, #4]
	port = p;
2000151c:	4b0a      	ldr	r3, [pc, #40]	; (20001548 <init_keypad+0x34>)
2000151e:	687a      	ldr	r2, [r7, #4]
20001520:	601a      	str	r2, [r3, #0]
	port->moder = 0x55000000; //*GPIO_MODER = 0x55000000;
20001522:	4b09      	ldr	r3, [pc, #36]	; (20001548 <init_keypad+0x34>)
20001524:	681b      	ldr	r3, [r3, #0]
20001526:	22aa      	movs	r2, #170	; 0xaa
20001528:	05d2      	lsls	r2, r2, #23
2000152a:	601a      	str	r2, [r3, #0]
	port->otyper = 0xFFAA0000; // *GPIO_OTYPER = 0xFFAA0000;
2000152c:	4b06      	ldr	r3, [pc, #24]	; (20001548 <init_keypad+0x34>)
2000152e:	681b      	ldr	r3, [r3, #0]
20001530:	4a06      	ldr	r2, [pc, #24]	; (2000154c <init_keypad+0x38>)
20001532:	605a      	str	r2, [r3, #4]
	port->pupdr = 0x0F0000; //	*GPIO_PUPDR = 0x0F0000;
20001534:	4b04      	ldr	r3, [pc, #16]	; (20001548 <init_keypad+0x34>)
20001536:	681b      	ldr	r3, [r3, #0]
20001538:	22f0      	movs	r2, #240	; 0xf0
2000153a:	0312      	lsls	r2, r2, #12
2000153c:	60da      	str	r2, [r3, #12]
}
2000153e:	46c0      	nop			; (mov r8, r8)
20001540:	46bd      	mov	sp, r7
20001542:	b002      	add	sp, #8
20001544:	bd80      	pop	{r7, pc}
20001546:	46c0      	nop			; (mov r8, r8)
20001548:	20001c94 	mulcs	r0, r4, ip
2000154c:	ffaa0000 			; <UNDEFINED> instruction: 0xffaa0000

20001550 <readKey>:

unsigned char readKey(void)
{
20001550:	b590      	push	{r4, r7, lr}
20001552:	b087      	sub	sp, #28
20001554:	af00      	add	r7, sp, #0
	unsigned char keyValue[] = {1,2,3,0xA,4,5,6,0xB,7,8,9,0xC,0xE,0,0xF,0xD};
20001556:	003b      	movs	r3, r7
20001558:	4a16      	ldr	r2, [pc, #88]	; (200015b4 <readKey+0x64>)
2000155a:	ca13      	ldmia	r2!, {r0, r1, r4}
2000155c:	c313      	stmia	r3!, {r0, r1, r4}
2000155e:	6812      	ldr	r2, [r2, #0]
20001560:	601a      	str	r2, [r3, #0]
	for(int row = 0; row< 4; row++)
20001562:	2300      	movs	r3, #0
20001564:	617b      	str	r3, [r7, #20]
20001566:	e019      	b.n	2000159c <readKey+0x4c>
	{
		activateRow(row+1);
20001568:	697b      	ldr	r3, [r7, #20]
2000156a:	3301      	adds	r3, #1
2000156c:	0018      	movs	r0, r3
2000156e:	f000 f853 	bl	20001618 <activateRow>
		int col = readColumn();
20001572:	f000 f885 	bl	20001680 <readColumn>
20001576:	0003      	movs	r3, r0
20001578:	613b      	str	r3, [r7, #16]
		if(col != 0)
2000157a:	693b      	ldr	r3, [r7, #16]
2000157c:	2b00      	cmp	r3, #0
2000157e:	d00a      	beq.n	20001596 <readKey+0x46>
		{
			activateRow(0);
20001580:	2000      	movs	r0, #0
20001582:	f000 f849 	bl	20001618 <activateRow>
			return keyValue[row*4 + (col-1)];
20001586:	697b      	ldr	r3, [r7, #20]
20001588:	009a      	lsls	r2, r3, #2
2000158a:	693b      	ldr	r3, [r7, #16]
2000158c:	3b01      	subs	r3, #1
2000158e:	18d3      	adds	r3, r2, r3
20001590:	003a      	movs	r2, r7
20001592:	5cd3      	ldrb	r3, [r2, r3]
20001594:	e009      	b.n	200015aa <readKey+0x5a>
	for(int row = 0; row< 4; row++)
20001596:	697b      	ldr	r3, [r7, #20]
20001598:	3301      	adds	r3, #1
2000159a:	617b      	str	r3, [r7, #20]
2000159c:	697b      	ldr	r3, [r7, #20]
2000159e:	2b03      	cmp	r3, #3
200015a0:	dde2      	ble.n	20001568 <readKey+0x18>
		}
	}
	activateRow(0);
200015a2:	2000      	movs	r0, #0
200015a4:	f000 f838 	bl	20001618 <activateRow>
	return noKeyReturn;
200015a8:	23ff      	movs	r3, #255	; 0xff
}
200015aa:	0018      	movs	r0, r3
200015ac:	46bd      	mov	sp, r7
200015ae:	b007      	add	sp, #28
200015b0:	bd90      	pop	{r4, r7, pc}
200015b2:	46c0      	nop			; (mov r8, r8)
200015b4:	2000286c 	andcs	r2, r0, ip, ror #16

200015b8 <keyb_enhanced>:

unsigned char keyb_enhanced(void)
{
200015b8:	b590      	push	{r4, r7, lr}
200015ba:	b083      	sub	sp, #12
200015bc:	af00      	add	r7, sp, #0
	if(current_state == waitState)
200015be:	4b14      	ldr	r3, [pc, #80]	; (20001610 <keyb_enhanced+0x58>)
200015c0:	781b      	ldrb	r3, [r3, #0]
200015c2:	2b01      	cmp	r3, #1
200015c4:	d10d      	bne.n	200015e2 <keyb_enhanced+0x2a>
	{
		activateRow(5);
200015c6:	2005      	movs	r0, #5
200015c8:	f000 f826 	bl	20001618 <activateRow>
		if(port->idrHigh == 0)//if(*GPIO_IDR_HIGH == 0)
200015cc:	4b11      	ldr	r3, [pc, #68]	; (20001614 <keyb_enhanced+0x5c>)
200015ce:	681b      	ldr	r3, [r3, #0]
200015d0:	7c5b      	ldrb	r3, [r3, #17]
200015d2:	b2db      	uxtb	r3, r3
200015d4:	2b00      	cmp	r3, #0
200015d6:	d102      	bne.n	200015de <keyb_enhanced+0x26>
		{ current_state = initState; }
200015d8:	4b0d      	ldr	r3, [pc, #52]	; (20001610 <keyb_enhanced+0x58>)
200015da:	2200      	movs	r2, #0
200015dc:	701a      	strb	r2, [r3, #0]
		return sameKeyReturn;
200015de:	23fe      	movs	r3, #254	; 0xfe
200015e0:	e012      	b.n	20001608 <keyb_enhanced+0x50>
	}
	if(current_state == initState)
200015e2:	4b0b      	ldr	r3, [pc, #44]	; (20001610 <keyb_enhanced+0x58>)
200015e4:	781b      	ldrb	r3, [r3, #0]
200015e6:	2b00      	cmp	r3, #0
200015e8:	d10e      	bne.n	20001608 <keyb_enhanced+0x50>
	{
		unsigned char c = readKey();
200015ea:	1dfc      	adds	r4, r7, #7
200015ec:	f7ff ffb0 	bl	20001550 <readKey>
200015f0:	0003      	movs	r3, r0
200015f2:	7023      	strb	r3, [r4, #0]
		if(c != noKeyReturn)
200015f4:	1dfb      	adds	r3, r7, #7
200015f6:	781b      	ldrb	r3, [r3, #0]
200015f8:	2bff      	cmp	r3, #255	; 0xff
200015fa:	d002      	beq.n	20001602 <keyb_enhanced+0x4a>
			current_state = waitState;
200015fc:	4b04      	ldr	r3, [pc, #16]	; (20001610 <keyb_enhanced+0x58>)
200015fe:	2201      	movs	r2, #1
20001600:	701a      	strb	r2, [r3, #0]
		return c;
20001602:	1dfb      	adds	r3, r7, #7
20001604:	781b      	ldrb	r3, [r3, #0]
20001606:	e7ff      	b.n	20001608 <keyb_enhanced+0x50>
	}

}
20001608:	0018      	movs	r0, r3
2000160a:	46bd      	mov	sp, r7
2000160c:	b003      	add	sp, #12
2000160e:	bd90      	pop	{r4, r7, pc}
20001610:	20001c90 	mulcs	r0, r0, ip
20001614:	20001c94 	mulcs	r0, r4, ip

20001618 <activateRow>:

void activateRow(int row)
{ /* Aktivera angiven rad hos tangentbordet, eller
20001618:	b580      	push	{r7, lr}
2000161a:	b082      	sub	sp, #8
2000161c:	af00      	add	r7, sp, #0
2000161e:	6078      	str	r0, [r7, #4]
20001620:	687b      	ldr	r3, [r7, #4]
20001622:	2b05      	cmp	r3, #5
20001624:	d823      	bhi.n	2000166e <activateRow+0x56>
20001626:	687b      	ldr	r3, [r7, #4]
20001628:	009a      	lsls	r2, r3, #2
2000162a:	4b13      	ldr	r3, [pc, #76]	; (20001678 <activateRow+0x60>)
2000162c:	18d3      	adds	r3, r2, r3
2000162e:	681b      	ldr	r3, [r3, #0]
20001630:	469f      	mov	pc, r3
* deaktivera samtliga */
	switch( row )
	{
		//port.odrHigh
		case 1: port->odrHigh = 0x10; break;
20001632:	4b12      	ldr	r3, [pc, #72]	; (2000167c <activateRow+0x64>)
20001634:	681b      	ldr	r3, [r3, #0]
20001636:	2210      	movs	r2, #16
20001638:	755a      	strb	r2, [r3, #21]
2000163a:	e018      	b.n	2000166e <activateRow+0x56>
		case 2: port->odrHigh = 0x20; break;
2000163c:	4b0f      	ldr	r3, [pc, #60]	; (2000167c <activateRow+0x64>)
2000163e:	681b      	ldr	r3, [r3, #0]
20001640:	2220      	movs	r2, #32
20001642:	755a      	strb	r2, [r3, #21]
20001644:	e013      	b.n	2000166e <activateRow+0x56>
		case 3: port->odrHigh = 0x40; break;
20001646:	4b0d      	ldr	r3, [pc, #52]	; (2000167c <activateRow+0x64>)
20001648:	681b      	ldr	r3, [r3, #0]
2000164a:	2240      	movs	r2, #64	; 0x40
2000164c:	755a      	strb	r2, [r3, #21]
2000164e:	e00e      	b.n	2000166e <activateRow+0x56>
		case 4: port->odrHigh = 0x80; break;
20001650:	4b0a      	ldr	r3, [pc, #40]	; (2000167c <activateRow+0x64>)
20001652:	681b      	ldr	r3, [r3, #0]
20001654:	2280      	movs	r2, #128	; 0x80
20001656:	755a      	strb	r2, [r3, #21]
20001658:	e009      	b.n	2000166e <activateRow+0x56>
		case 5: port->odrHigh = 0xF0; break; 
2000165a:	4b08      	ldr	r3, [pc, #32]	; (2000167c <activateRow+0x64>)
2000165c:	681b      	ldr	r3, [r3, #0]
2000165e:	22f0      	movs	r2, #240	; 0xf0
20001660:	755a      	strb	r2, [r3, #21]
20001662:	e004      	b.n	2000166e <activateRow+0x56>
		case 0: port->odrHigh = 0x00; break;
20001664:	4b05      	ldr	r3, [pc, #20]	; (2000167c <activateRow+0x64>)
20001666:	681b      	ldr	r3, [r3, #0]
20001668:	2200      	movs	r2, #0
2000166a:	755a      	strb	r2, [r3, #21]
2000166c:	46c0      	nop			; (mov r8, r8)
	}
}
2000166e:	46c0      	nop			; (mov r8, r8)
20001670:	46bd      	mov	sp, r7
20001672:	b002      	add	sp, #8
20001674:	bd80      	pop	{r7, pc}
20001676:	46c0      	nop			; (mov r8, r8)
20001678:	2000287c 	andcs	r2, r0, ip, ror r8
2000167c:	20001c94 	mulcs	r0, r4, ip

20001680 <readColumn>:
int readColumn(void)
{
20001680:	b580      	push	{r7, lr}
20001682:	b082      	sub	sp, #8
20001684:	af00      	add	r7, sp, #0
	/* Om någon tangent (i aktiverad rad)
	* är nedtryckt, returnera dess kolumnnummer,
	* annars, returnera 0 */
	unsigned char c;
	c = port->idrHigh; //*GPIO_IDR_HIGH;
20001686:	4b13      	ldr	r3, [pc, #76]	; (200016d4 <readColumn+0x54>)
20001688:	681a      	ldr	r2, [r3, #0]
2000168a:	1dfb      	adds	r3, r7, #7
2000168c:	7c52      	ldrb	r2, [r2, #17]
2000168e:	701a      	strb	r2, [r3, #0]
	if (c & 0x8) return 4;
20001690:	1dfb      	adds	r3, r7, #7
20001692:	781b      	ldrb	r3, [r3, #0]
20001694:	2208      	movs	r2, #8
20001696:	4013      	ands	r3, r2
20001698:	d001      	beq.n	2000169e <readColumn+0x1e>
2000169a:	2304      	movs	r3, #4
2000169c:	e015      	b.n	200016ca <readColumn+0x4a>
	if (c & 0x4) return 3;
2000169e:	1dfb      	adds	r3, r7, #7
200016a0:	781b      	ldrb	r3, [r3, #0]
200016a2:	2204      	movs	r2, #4
200016a4:	4013      	ands	r3, r2
200016a6:	d001      	beq.n	200016ac <readColumn+0x2c>
200016a8:	2303      	movs	r3, #3
200016aa:	e00e      	b.n	200016ca <readColumn+0x4a>
	if (c & 0x2) return 2;
200016ac:	1dfb      	adds	r3, r7, #7
200016ae:	781b      	ldrb	r3, [r3, #0]
200016b0:	2202      	movs	r2, #2
200016b2:	4013      	ands	r3, r2
200016b4:	d001      	beq.n	200016ba <readColumn+0x3a>
200016b6:	2302      	movs	r3, #2
200016b8:	e007      	b.n	200016ca <readColumn+0x4a>
	if (c & 0x1) return 1;
200016ba:	1dfb      	adds	r3, r7, #7
200016bc:	781b      	ldrb	r3, [r3, #0]
200016be:	2201      	movs	r2, #1
200016c0:	4013      	ands	r3, r2
200016c2:	d001      	beq.n	200016c8 <readColumn+0x48>
200016c4:	2301      	movs	r3, #1
200016c6:	e000      	b.n	200016ca <readColumn+0x4a>
	return 0;
200016c8:	2300      	movs	r3, #0
200016ca:	0018      	movs	r0, r3
200016cc:	46bd      	mov	sp, r7
200016ce:	b002      	add	sp, #8
200016d0:	bd80      	pop	{r7, pc}
200016d2:	46c0      	nop			; (mov r8, r8)
200016d4:	20001c94 	mulcs	r0, r4, ip

200016d8 <main>:
#define GPIO_D (*((volatile GPIO*) 0x40020c00))

#define    SCB_VTOR            ((volatile unsigned int *)        0xE000ED08)
void init_app();
int main(void)
{   
200016d8:	b5b0      	push	{r4, r5, r7, lr}
200016da:	b08c      	sub	sp, #48	; 0x30
200016dc:	af02      	add	r7, sp, #8
	init_app();
200016de:	f000 f8dd 	bl	2000189c <init_app>
	
	running = 1;
200016e2:	4b69      	ldr	r3, [pc, #420]	; (20001888 <main+0x1b0>)
200016e4:	2201      	movs	r2, #1
200016e6:	601a      	str	r2, [r3, #0]
	int gameStarted = 0;	
200016e8:	2300      	movs	r3, #0
200016ea:	623b      	str	r3, [r7, #32]
	struct Player p;
	char hitCh;
	char lastKey = 0;
200016ec:	2326      	movs	r3, #38	; 0x26
200016ee:	18fb      	adds	r3, r7, r3
200016f0:	2200      	movs	r2, #0
200016f2:	701a      	strb	r2, [r3, #0]
	int nSameKey = 0;
200016f4:	2300      	movs	r3, #0
200016f6:	613b      	str	r3, [r7, #16]

	//TODO: kolla vad som faktiskt behöver städas upp...
	//kolla varför den hänger sig ibland, hallå?? vin?!
	while(running)
200016f8:	e0bc      	b.n	20001874 <main+0x19c>
	{
		reset_game(&gameStarted, &nSameKey, &p);
200016fa:	2314      	movs	r3, #20
200016fc:	18fa      	adds	r2, r7, r3
200016fe:	2310      	movs	r3, #16
20001700:	18f9      	adds	r1, r7, r3
20001702:	2320      	movs	r3, #32
20001704:	18fb      	adds	r3, r7, r3
20001706:	0018      	movs	r0, r3
20001708:	f7ff fde8 	bl	200012dc <reset_game>
		while(!gameover)
2000170c:	e09e      	b.n	2000184c <main+0x174>
		{
			print_timer(seconds, ticks);
2000170e:	4b5f      	ldr	r3, [pc, #380]	; (2000188c <main+0x1b4>)
20001710:	681a      	ldr	r2, [r3, #0]
20001712:	4b5f      	ldr	r3, [pc, #380]	; (20001890 <main+0x1b8>)
20001714:	681b      	ldr	r3, [r3, #0]
20001716:	0019      	movs	r1, r3
20001718:	0010      	movs	r0, r2
2000171a:	f7fe feb1 	bl	20000480 <print_timer>
			checkWin();
2000171e:	f7ff f8af 	bl	20000880 <checkWin>
			hitCh = keyb_enhanced();
20001722:	2527      	movs	r5, #39	; 0x27
20001724:	197c      	adds	r4, r7, r5
20001726:	f7ff ff47 	bl	200015b8 <keyb_enhanced>
2000172a:	0003      	movs	r3, r0
2000172c:	7023      	strb	r3, [r4, #0]
			if( hitCh != noKeyReturn)
2000172e:	002a      	movs	r2, r5
20001730:	18bb      	adds	r3, r7, r2
20001732:	781b      	ldrb	r3, [r3, #0]
20001734:	2bff      	cmp	r3, #255	; 0xff
20001736:	d066      	beq.n	20001806 <main+0x12e>
			{
				if(nSameKey >= sameKeyMax) //ska vi ge samma input igen?
20001738:	693b      	ldr	r3, [r7, #16]
2000173a:	2b0e      	cmp	r3, #14
2000173c:	dd06      	ble.n	2000174c <main+0x74>
				{
					hitCh = lastKey;
2000173e:	18bb      	adds	r3, r7, r2
20001740:	2226      	movs	r2, #38	; 0x26
20001742:	18ba      	adds	r2, r7, r2
20001744:	7812      	ldrb	r2, [r2, #0]
20001746:	701a      	strb	r2, [r3, #0]
					nSameKey = 0;
20001748:	2300      	movs	r3, #0
2000174a:	613b      	str	r3, [r7, #16]
				}
				
				if(hitCh != sameKeyReturn)// vi har en ny knapp, spara i lastkey
2000174c:	2227      	movs	r2, #39	; 0x27
2000174e:	18bb      	adds	r3, r7, r2
20001750:	781b      	ldrb	r3, [r3, #0]
20001752:	2bfe      	cmp	r3, #254	; 0xfe
20001754:	d004      	beq.n	20001760 <main+0x88>
					lastKey = hitCh;
20001756:	2326      	movs	r3, #38	; 0x26
20001758:	18fb      	adds	r3, r7, r3
2000175a:	18ba      	adds	r2, r7, r2
2000175c:	7812      	ldrb	r2, [r2, #0]
2000175e:	701a      	strb	r2, [r3, #0]
				switch(hitCh)
20001760:	2327      	movs	r3, #39	; 0x27
20001762:	18fb      	adds	r3, r7, r3
20001764:	781b      	ldrb	r3, [r3, #0]
20001766:	2b0a      	cmp	r3, #10
20001768:	d002      	beq.n	20001770 <main+0x98>
2000176a:	2b0b      	cmp	r3, #11
2000176c:	d019      	beq.n	200017a2 <main+0xca>
2000176e:	e027      	b.n	200017c0 <main+0xe8>
				{
					case 0xA: // open
					if(!gameStarted)
20001770:	6a3b      	ldr	r3, [r7, #32]
20001772:	2b00      	cmp	r3, #0
20001774:	d10b      	bne.n	2000178e <main+0xb6>
					{
						makeFirstOpen(p);
20001776:	2314      	movs	r3, #20
20001778:	18fb      	adds	r3, r7, r3
2000177a:	6818      	ldr	r0, [r3, #0]
2000177c:	6859      	ldr	r1, [r3, #4]
2000177e:	689a      	ldr	r2, [r3, #8]
20001780:	f7ff f956 	bl	20000a30 <makeFirstOpen>
						gameStarted = 1;
20001784:	2301      	movs	r3, #1
20001786:	623b      	str	r3, [r7, #32]
						toggle_timer_running();
20001788:	f7ff fe7c 	bl	20001484 <toggle_timer_running>
					}
					else
						openPos(p.x, p.y);
					break;
2000178c:	e03e      	b.n	2000180c <main+0x134>
						openPos(p.x, p.y);
2000178e:	2114      	movs	r1, #20
20001790:	187b      	adds	r3, r7, r1
20001792:	681a      	ldr	r2, [r3, #0]
20001794:	187b      	adds	r3, r7, r1
20001796:	685b      	ldr	r3, [r3, #4]
20001798:	0019      	movs	r1, r3
2000179a:	0010      	movs	r0, r2
2000179c:	f7ff fa4c 	bl	20000c38 <openPos>
					break;
200017a0:	e034      	b.n	2000180c <main+0x134>
					case 0xB: // place flag
					placeFlag(p);
200017a2:	2314      	movs	r3, #20
200017a4:	18fb      	adds	r3, r7, r3
200017a6:	6818      	ldr	r0, [r3, #0]
200017a8:	6859      	ldr	r1, [r3, #4]
200017aa:	689a      	ldr	r2, [r3, #8]
200017ac:	f7ff f99a 	bl	20000ae4 <placeFlag>
					print_flags(Bombs - placed_flaggs);
200017b0:	4b38      	ldr	r3, [pc, #224]	; (20001894 <main+0x1bc>)
200017b2:	681b      	ldr	r3, [r3, #0]
200017b4:	220a      	movs	r2, #10
200017b6:	1ad3      	subs	r3, r2, r3
200017b8:	0018      	movs	r0, r3
200017ba:	f7fe fe2d 	bl	20000418 <print_flags>
					break;
200017be:	e025      	b.n	2000180c <main+0x134>
					default:	//move
					if(hitCh == 0x2 || hitCh == 0x4 || hitCh == 0x8 || hitCh == 0x6)
200017c0:	2227      	movs	r2, #39	; 0x27
200017c2:	18bb      	adds	r3, r7, r2
200017c4:	781b      	ldrb	r3, [r3, #0]
200017c6:	2b02      	cmp	r3, #2
200017c8:	d00b      	beq.n	200017e2 <main+0x10a>
200017ca:	18bb      	adds	r3, r7, r2
200017cc:	781b      	ldrb	r3, [r3, #0]
200017ce:	2b04      	cmp	r3, #4
200017d0:	d007      	beq.n	200017e2 <main+0x10a>
200017d2:	18bb      	adds	r3, r7, r2
200017d4:	781b      	ldrb	r3, [r3, #0]
200017d6:	2b08      	cmp	r3, #8
200017d8:	d003      	beq.n	200017e2 <main+0x10a>
200017da:	18bb      	adds	r3, r7, r2
200017dc:	781b      	ldrb	r3, [r3, #0]
200017de:	2b06      	cmp	r3, #6
200017e0:	d113      	bne.n	2000180a <main+0x132>
						p = movePlayer(p, hitCh);
200017e2:	2314      	movs	r3, #20
200017e4:	18fc      	adds	r4, r7, r3
200017e6:	0038      	movs	r0, r7
200017e8:	18fb      	adds	r3, r7, r3
200017ea:	2227      	movs	r2, #39	; 0x27
200017ec:	18ba      	adds	r2, r7, r2
200017ee:	7812      	ldrb	r2, [r2, #0]
200017f0:	9200      	str	r2, [sp, #0]
200017f2:	6819      	ldr	r1, [r3, #0]
200017f4:	685a      	ldr	r2, [r3, #4]
200017f6:	689b      	ldr	r3, [r3, #8]
200017f8:	f7ff fbcc 	bl	20000f94 <movePlayer>
200017fc:	003a      	movs	r2, r7
200017fe:	0023      	movs	r3, r4
20001800:	ca13      	ldmia	r2!, {r0, r1, r4}
20001802:	c313      	stmia	r3!, {r0, r1, r4}
					break;
20001804:	e001      	b.n	2000180a <main+0x132>
				}
			}
20001806:	46c0      	nop			; (mov r8, r8)
20001808:	e000      	b.n	2000180c <main+0x134>
					break;
2000180a:	46c0      	nop			; (mov r8, r8)
			if(hitCh == noKeyReturn) // ingen knapp nedtryckt, samma irad = 0
2000180c:	2327      	movs	r3, #39	; 0x27
2000180e:	18fb      	adds	r3, r7, r3
20001810:	781b      	ldrb	r3, [r3, #0]
20001812:	2bff      	cmp	r3, #255	; 0xff
20001814:	d101      	bne.n	2000181a <main+0x142>
					nSameKey = 0;
20001816:	2300      	movs	r3, #0
20001818:	613b      	str	r3, [r7, #16]
			if(hitCh == sameKeyReturn && (lastKey == 0x2 || lastKey == 0x4 || lastKey == 0x8 || lastKey == 0x6))
2000181a:	2327      	movs	r3, #39	; 0x27
2000181c:	18fb      	adds	r3, r7, r3
2000181e:	781b      	ldrb	r3, [r3, #0]
20001820:	2bfe      	cmp	r3, #254	; 0xfe
20001822:	d113      	bne.n	2000184c <main+0x174>
20001824:	2226      	movs	r2, #38	; 0x26
20001826:	18bb      	adds	r3, r7, r2
20001828:	781b      	ldrb	r3, [r3, #0]
2000182a:	2b02      	cmp	r3, #2
2000182c:	d00b      	beq.n	20001846 <main+0x16e>
2000182e:	18bb      	adds	r3, r7, r2
20001830:	781b      	ldrb	r3, [r3, #0]
20001832:	2b04      	cmp	r3, #4
20001834:	d007      	beq.n	20001846 <main+0x16e>
20001836:	18bb      	adds	r3, r7, r2
20001838:	781b      	ldrb	r3, [r3, #0]
2000183a:	2b08      	cmp	r3, #8
2000183c:	d003      	beq.n	20001846 <main+0x16e>
2000183e:	18bb      	adds	r3, r7, r2
20001840:	781b      	ldrb	r3, [r3, #0]
20001842:	2b06      	cmp	r3, #6
20001844:	d102      	bne.n	2000184c <main+0x174>
				nSameKey++; //vi har samma knapp ige, och det är en "move" knapp, öka samma irad
20001846:	693b      	ldr	r3, [r7, #16]
20001848:	3301      	adds	r3, #1
2000184a:	613b      	str	r3, [r7, #16]
		while(!gameover)
2000184c:	4b12      	ldr	r3, [pc, #72]	; (20001898 <main+0x1c0>)
2000184e:	681b      	ldr	r3, [r3, #0]
20001850:	2b00      	cmp	r3, #0
20001852:	d100      	bne.n	20001856 <main+0x17e>
20001854:	e75b      	b.n	2000170e <main+0x36>
		}
		
		toggle_timer_running();
20001856:	f7ff fe15 	bl	20001484 <toggle_timer_running>
		reset_timer();
2000185a:	f7ff fe4b 	bl	200014f4 <reset_timer>
		running = play_again();
2000185e:	f000 f841 	bl	200018e4 <play_again>
20001862:	0002      	movs	r2, r0
20001864:	4b08      	ldr	r3, [pc, #32]	; (20001888 <main+0x1b0>)
20001866:	601a      	str	r2, [r3, #0]
		placed_flaggs = 0;
20001868:	4b0a      	ldr	r3, [pc, #40]	; (20001894 <main+0x1bc>)
2000186a:	2200      	movs	r2, #0
2000186c:	601a      	str	r2, [r3, #0]
		gameover = 0;
2000186e:	4b0a      	ldr	r3, [pc, #40]	; (20001898 <main+0x1c0>)
20001870:	2200      	movs	r2, #0
20001872:	601a      	str	r2, [r3, #0]
	while(running)
20001874:	4b04      	ldr	r3, [pc, #16]	; (20001888 <main+0x1b0>)
20001876:	681b      	ldr	r3, [r3, #0]
20001878:	2b00      	cmp	r3, #0
2000187a:	d000      	beq.n	2000187e <main+0x1a6>
2000187c:	e73d      	b.n	200016fa <main+0x22>
	}
	return 0;
2000187e:	2300      	movs	r3, #0
}
20001880:	0018      	movs	r0, r3
20001882:	46bd      	mov	sp, r7
20001884:	b00a      	add	sp, #40	; 0x28
20001886:	bdb0      	pop	{r4, r5, r7, pc}
20001888:	20001c9c 	mulcs	r0, ip, ip
2000188c:	2000235c 	andcs	r2, r0, ip, asr r3
20001890:	20002360 	andcs	r2, r0, r0, ror #6
20001894:	20002358 	andcs	r2, r0, r8, asr r3
20001898:	2000234c 	andcs	r2, r0, ip, asr #6

2000189c <init_app>:

void init_app(void)
{
2000189c:	b580      	push	{r7, lr}
2000189e:	af00      	add	r7, sp, #0
	init_keypad(&GPIO_D);
200018a0:	4b0b      	ldr	r3, [pc, #44]	; (200018d0 <init_app+0x34>)
200018a2:	0018      	movs	r0, r3
200018a4:	f7ff fe36 	bl	20001514 <init_keypad>
	GPIO_D.otyper = 0xFFAA0000; // *GPIO_OTYPER = 0xFFAA0000;
	GPIO_D.pupdr = 0x0F0000; //	*GPIO_PUPDR = 0x0F0000;
	GPIO_D.odrHigh = 0xF;
	*/
	
	*GPIO_E_MODER = 0x55555555;
200018a8:	4b0a      	ldr	r3, [pc, #40]	; (200018d4 <init_app+0x38>)
200018aa:	4a0b      	ldr	r2, [pc, #44]	; (200018d8 <init_app+0x3c>)
200018ac:	601a      	str	r2, [r3, #0]
	*SCB_VTOR = REALLOC;
200018ae:	4b0b      	ldr	r3, [pc, #44]	; (200018dc <init_app+0x40>)
200018b0:	4a0b      	ldr	r2, [pc, #44]	; (200018e0 <init_app+0x44>)
200018b2:	601a      	str	r2, [r3, #0]
	graphic_initialize();
200018b4:	f7fe fd7c 	bl	200003b0 <graphic_initialize>
	sysTick_init();
200018b8:	f7fe fbf2 	bl	200000a0 <sysTick_init>
	timer6_init();
200018bc:	f7ff fd6c 	bl	20001398 <timer6_init>
	toggle_timer_running();
200018c0:	f7ff fde0 	bl	20001484 <toggle_timer_running>
	ascii_init();
200018c4:	f7fe fdf4 	bl	200004b0 <ascii_init>
}
200018c8:	46c0      	nop			; (mov r8, r8)
200018ca:	46bd      	mov	sp, r7
200018cc:	bd80      	pop	{r7, pc}
200018ce:	46c0      	nop			; (mov r8, r8)
200018d0:	40020c00 	andmi	r0, r2, r0, lsl #24
200018d4:	40021000 	andmi	r1, r2, r0
200018d8:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab
200018dc:	e000ed08 	and	lr, r0, r8, lsl #26
200018e0:	2001c000 	andcs	ip, r1, r0

200018e4 <play_again>:

int play_again()
{
200018e4:	b5b0      	push	{r4, r5, r7, lr}
200018e6:	b08e      	sub	sp, #56	; 0x38
200018e8:	af00      	add	r7, sp, #0
	char upper[] = "Play again? yes -> D";
200018ea:	2420      	movs	r4, #32
200018ec:	193b      	adds	r3, r7, r4
200018ee:	4a1b      	ldr	r2, [pc, #108]	; (2000195c <play_again+0x78>)
200018f0:	ca23      	ldmia	r2!, {r0, r1, r5}
200018f2:	c323      	stmia	r3!, {r0, r1, r5}
200018f4:	ca03      	ldmia	r2!, {r0, r1}
200018f6:	c303      	stmia	r3!, {r0, r1}
200018f8:	7812      	ldrb	r2, [r2, #0]
200018fa:	701a      	strb	r2, [r3, #0]
	char lower[] = "yes -> D, no -> anything";
200018fc:	1d3b      	adds	r3, r7, #4
200018fe:	4a18      	ldr	r2, [pc, #96]	; (20001960 <play_again+0x7c>)
20001900:	ca23      	ldmia	r2!, {r0, r1, r5}
20001902:	c323      	stmia	r3!, {r0, r1, r5}
20001904:	ca23      	ldmia	r2!, {r0, r1, r5}
20001906:	c323      	stmia	r3!, {r0, r1, r5}
20001908:	7812      	ldrb	r2, [r2, #0]
2000190a:	701a      	strb	r2, [r3, #0]
	ascii_gotoxy(1,1);
2000190c:	2101      	movs	r1, #1
2000190e:	2001      	movs	r0, #1
20001910:	f7fe fde4 	bl	200004dc <ascii_gotoxy>
	ascii_write_string(upper);
20001914:	193b      	adds	r3, r7, r4
20001916:	0018      	movs	r0, r3
20001918:	f7fe fdfe 	bl	20000518 <ascii_write_string>
	//ascii_gotoxy(1,2);
	//ascii_write_string(lower);
	char hitch = 0xFF;
2000191c:	2337      	movs	r3, #55	; 0x37
2000191e:	18fb      	adds	r3, r7, r3
20001920:	22ff      	movs	r2, #255	; 0xff
20001922:	701a      	strb	r2, [r3, #0]
	while(1)
	{
		hitch = keyb_enhanced();
20001924:	2537      	movs	r5, #55	; 0x37
20001926:	197c      	adds	r4, r7, r5
20001928:	f7ff fe46 	bl	200015b8 <keyb_enhanced>
2000192c:	0003      	movs	r3, r0
2000192e:	7023      	strb	r3, [r4, #0]
		if(hitch != sameKeyReturn && hitch != noKeyReturn)
20001930:	197b      	adds	r3, r7, r5
20001932:	781b      	ldrb	r3, [r3, #0]
20001934:	2bfe      	cmp	r3, #254	; 0xfe
20001936:	d0f5      	beq.n	20001924 <play_again+0x40>
20001938:	197b      	adds	r3, r7, r5
2000193a:	781b      	ldrb	r3, [r3, #0]
2000193c:	2bff      	cmp	r3, #255	; 0xff
2000193e:	d100      	bne.n	20001942 <play_again+0x5e>
		hitch = keyb_enhanced();
20001940:	e7f0      	b.n	20001924 <play_again+0x40>
			break;
20001942:	46c0      	nop			; (mov r8, r8)
	}
	return hitch == 0xD;
20001944:	2337      	movs	r3, #55	; 0x37
20001946:	18fb      	adds	r3, r7, r3
20001948:	781b      	ldrb	r3, [r3, #0]
2000194a:	3b0d      	subs	r3, #13
2000194c:	425a      	negs	r2, r3
2000194e:	4153      	adcs	r3, r2
20001950:	b2db      	uxtb	r3, r3
	
}
20001952:	0018      	movs	r0, r3
20001954:	46bd      	mov	sp, r7
20001956:	b00e      	add	sp, #56	; 0x38
20001958:	bdb0      	pop	{r4, r5, r7, pc}
2000195a:	46c0      	nop			; (mov r8, r8)
2000195c:	20002894 	mulcs	r0, r4, r8
20001960:	200028ac 	andcs	r2, r0, ip, lsr #17

20001964 <__udivsi3>:
20001964:	2200      	movs	r2, #0
20001966:	0843      	lsrs	r3, r0, #1
20001968:	428b      	cmp	r3, r1
2000196a:	d374      	bcc.n	20001a56 <__udivsi3+0xf2>
2000196c:	0903      	lsrs	r3, r0, #4
2000196e:	428b      	cmp	r3, r1
20001970:	d35f      	bcc.n	20001a32 <__udivsi3+0xce>
20001972:	0a03      	lsrs	r3, r0, #8
20001974:	428b      	cmp	r3, r1
20001976:	d344      	bcc.n	20001a02 <__udivsi3+0x9e>
20001978:	0b03      	lsrs	r3, r0, #12
2000197a:	428b      	cmp	r3, r1
2000197c:	d328      	bcc.n	200019d0 <__udivsi3+0x6c>
2000197e:	0c03      	lsrs	r3, r0, #16
20001980:	428b      	cmp	r3, r1
20001982:	d30d      	bcc.n	200019a0 <__udivsi3+0x3c>
20001984:	22ff      	movs	r2, #255	; 0xff
20001986:	0209      	lsls	r1, r1, #8
20001988:	ba12      	rev	r2, r2
2000198a:	0c03      	lsrs	r3, r0, #16
2000198c:	428b      	cmp	r3, r1
2000198e:	d302      	bcc.n	20001996 <__udivsi3+0x32>
20001990:	1212      	asrs	r2, r2, #8
20001992:	0209      	lsls	r1, r1, #8
20001994:	d065      	beq.n	20001a62 <__udivsi3+0xfe>
20001996:	0b03      	lsrs	r3, r0, #12
20001998:	428b      	cmp	r3, r1
2000199a:	d319      	bcc.n	200019d0 <__udivsi3+0x6c>
2000199c:	e000      	b.n	200019a0 <__udivsi3+0x3c>
2000199e:	0a09      	lsrs	r1, r1, #8
200019a0:	0bc3      	lsrs	r3, r0, #15
200019a2:	428b      	cmp	r3, r1
200019a4:	d301      	bcc.n	200019aa <__udivsi3+0x46>
200019a6:	03cb      	lsls	r3, r1, #15
200019a8:	1ac0      	subs	r0, r0, r3
200019aa:	4152      	adcs	r2, r2
200019ac:	0b83      	lsrs	r3, r0, #14
200019ae:	428b      	cmp	r3, r1
200019b0:	d301      	bcc.n	200019b6 <__udivsi3+0x52>
200019b2:	038b      	lsls	r3, r1, #14
200019b4:	1ac0      	subs	r0, r0, r3
200019b6:	4152      	adcs	r2, r2
200019b8:	0b43      	lsrs	r3, r0, #13
200019ba:	428b      	cmp	r3, r1
200019bc:	d301      	bcc.n	200019c2 <__udivsi3+0x5e>
200019be:	034b      	lsls	r3, r1, #13
200019c0:	1ac0      	subs	r0, r0, r3
200019c2:	4152      	adcs	r2, r2
200019c4:	0b03      	lsrs	r3, r0, #12
200019c6:	428b      	cmp	r3, r1
200019c8:	d301      	bcc.n	200019ce <__udivsi3+0x6a>
200019ca:	030b      	lsls	r3, r1, #12
200019cc:	1ac0      	subs	r0, r0, r3
200019ce:	4152      	adcs	r2, r2
200019d0:	0ac3      	lsrs	r3, r0, #11
200019d2:	428b      	cmp	r3, r1
200019d4:	d301      	bcc.n	200019da <__udivsi3+0x76>
200019d6:	02cb      	lsls	r3, r1, #11
200019d8:	1ac0      	subs	r0, r0, r3
200019da:	4152      	adcs	r2, r2
200019dc:	0a83      	lsrs	r3, r0, #10
200019de:	428b      	cmp	r3, r1
200019e0:	d301      	bcc.n	200019e6 <__udivsi3+0x82>
200019e2:	028b      	lsls	r3, r1, #10
200019e4:	1ac0      	subs	r0, r0, r3
200019e6:	4152      	adcs	r2, r2
200019e8:	0a43      	lsrs	r3, r0, #9
200019ea:	428b      	cmp	r3, r1
200019ec:	d301      	bcc.n	200019f2 <__udivsi3+0x8e>
200019ee:	024b      	lsls	r3, r1, #9
200019f0:	1ac0      	subs	r0, r0, r3
200019f2:	4152      	adcs	r2, r2
200019f4:	0a03      	lsrs	r3, r0, #8
200019f6:	428b      	cmp	r3, r1
200019f8:	d301      	bcc.n	200019fe <__udivsi3+0x9a>
200019fa:	020b      	lsls	r3, r1, #8
200019fc:	1ac0      	subs	r0, r0, r3
200019fe:	4152      	adcs	r2, r2
20001a00:	d2cd      	bcs.n	2000199e <__udivsi3+0x3a>
20001a02:	09c3      	lsrs	r3, r0, #7
20001a04:	428b      	cmp	r3, r1
20001a06:	d301      	bcc.n	20001a0c <__udivsi3+0xa8>
20001a08:	01cb      	lsls	r3, r1, #7
20001a0a:	1ac0      	subs	r0, r0, r3
20001a0c:	4152      	adcs	r2, r2
20001a0e:	0983      	lsrs	r3, r0, #6
20001a10:	428b      	cmp	r3, r1
20001a12:	d301      	bcc.n	20001a18 <__udivsi3+0xb4>
20001a14:	018b      	lsls	r3, r1, #6
20001a16:	1ac0      	subs	r0, r0, r3
20001a18:	4152      	adcs	r2, r2
20001a1a:	0943      	lsrs	r3, r0, #5
20001a1c:	428b      	cmp	r3, r1
20001a1e:	d301      	bcc.n	20001a24 <__udivsi3+0xc0>
20001a20:	014b      	lsls	r3, r1, #5
20001a22:	1ac0      	subs	r0, r0, r3
20001a24:	4152      	adcs	r2, r2
20001a26:	0903      	lsrs	r3, r0, #4
20001a28:	428b      	cmp	r3, r1
20001a2a:	d301      	bcc.n	20001a30 <__udivsi3+0xcc>
20001a2c:	010b      	lsls	r3, r1, #4
20001a2e:	1ac0      	subs	r0, r0, r3
20001a30:	4152      	adcs	r2, r2
20001a32:	08c3      	lsrs	r3, r0, #3
20001a34:	428b      	cmp	r3, r1
20001a36:	d301      	bcc.n	20001a3c <__udivsi3+0xd8>
20001a38:	00cb      	lsls	r3, r1, #3
20001a3a:	1ac0      	subs	r0, r0, r3
20001a3c:	4152      	adcs	r2, r2
20001a3e:	0883      	lsrs	r3, r0, #2
20001a40:	428b      	cmp	r3, r1
20001a42:	d301      	bcc.n	20001a48 <__udivsi3+0xe4>
20001a44:	008b      	lsls	r3, r1, #2
20001a46:	1ac0      	subs	r0, r0, r3
20001a48:	4152      	adcs	r2, r2
20001a4a:	0843      	lsrs	r3, r0, #1
20001a4c:	428b      	cmp	r3, r1
20001a4e:	d301      	bcc.n	20001a54 <__udivsi3+0xf0>
20001a50:	004b      	lsls	r3, r1, #1
20001a52:	1ac0      	subs	r0, r0, r3
20001a54:	4152      	adcs	r2, r2
20001a56:	1a41      	subs	r1, r0, r1
20001a58:	d200      	bcs.n	20001a5c <__udivsi3+0xf8>
20001a5a:	4601      	mov	r1, r0
20001a5c:	4152      	adcs	r2, r2
20001a5e:	4610      	mov	r0, r2
20001a60:	4770      	bx	lr
20001a62:	e7ff      	b.n	20001a64 <__udivsi3+0x100>
20001a64:	b501      	push	{r0, lr}
20001a66:	2000      	movs	r0, #0
20001a68:	f000 f8f0 	bl	20001c4c <__aeabi_idiv0>
20001a6c:	bd02      	pop	{r1, pc}
20001a6e:	46c0      	nop			; (mov r8, r8)

20001a70 <__aeabi_uidivmod>:
20001a70:	2900      	cmp	r1, #0
20001a72:	d0f7      	beq.n	20001a64 <__udivsi3+0x100>
20001a74:	e776      	b.n	20001964 <__udivsi3>
20001a76:	4770      	bx	lr

20001a78 <__divsi3>:
20001a78:	4603      	mov	r3, r0
20001a7a:	430b      	orrs	r3, r1
20001a7c:	d47f      	bmi.n	20001b7e <__divsi3+0x106>
20001a7e:	2200      	movs	r2, #0
20001a80:	0843      	lsrs	r3, r0, #1
20001a82:	428b      	cmp	r3, r1
20001a84:	d374      	bcc.n	20001b70 <__divsi3+0xf8>
20001a86:	0903      	lsrs	r3, r0, #4
20001a88:	428b      	cmp	r3, r1
20001a8a:	d35f      	bcc.n	20001b4c <__divsi3+0xd4>
20001a8c:	0a03      	lsrs	r3, r0, #8
20001a8e:	428b      	cmp	r3, r1
20001a90:	d344      	bcc.n	20001b1c <__divsi3+0xa4>
20001a92:	0b03      	lsrs	r3, r0, #12
20001a94:	428b      	cmp	r3, r1
20001a96:	d328      	bcc.n	20001aea <__divsi3+0x72>
20001a98:	0c03      	lsrs	r3, r0, #16
20001a9a:	428b      	cmp	r3, r1
20001a9c:	d30d      	bcc.n	20001aba <__divsi3+0x42>
20001a9e:	22ff      	movs	r2, #255	; 0xff
20001aa0:	0209      	lsls	r1, r1, #8
20001aa2:	ba12      	rev	r2, r2
20001aa4:	0c03      	lsrs	r3, r0, #16
20001aa6:	428b      	cmp	r3, r1
20001aa8:	d302      	bcc.n	20001ab0 <__divsi3+0x38>
20001aaa:	1212      	asrs	r2, r2, #8
20001aac:	0209      	lsls	r1, r1, #8
20001aae:	d065      	beq.n	20001b7c <__divsi3+0x104>
20001ab0:	0b03      	lsrs	r3, r0, #12
20001ab2:	428b      	cmp	r3, r1
20001ab4:	d319      	bcc.n	20001aea <__divsi3+0x72>
20001ab6:	e000      	b.n	20001aba <__divsi3+0x42>
20001ab8:	0a09      	lsrs	r1, r1, #8
20001aba:	0bc3      	lsrs	r3, r0, #15
20001abc:	428b      	cmp	r3, r1
20001abe:	d301      	bcc.n	20001ac4 <__divsi3+0x4c>
20001ac0:	03cb      	lsls	r3, r1, #15
20001ac2:	1ac0      	subs	r0, r0, r3
20001ac4:	4152      	adcs	r2, r2
20001ac6:	0b83      	lsrs	r3, r0, #14
20001ac8:	428b      	cmp	r3, r1
20001aca:	d301      	bcc.n	20001ad0 <__divsi3+0x58>
20001acc:	038b      	lsls	r3, r1, #14
20001ace:	1ac0      	subs	r0, r0, r3
20001ad0:	4152      	adcs	r2, r2
20001ad2:	0b43      	lsrs	r3, r0, #13
20001ad4:	428b      	cmp	r3, r1
20001ad6:	d301      	bcc.n	20001adc <__divsi3+0x64>
20001ad8:	034b      	lsls	r3, r1, #13
20001ada:	1ac0      	subs	r0, r0, r3
20001adc:	4152      	adcs	r2, r2
20001ade:	0b03      	lsrs	r3, r0, #12
20001ae0:	428b      	cmp	r3, r1
20001ae2:	d301      	bcc.n	20001ae8 <__divsi3+0x70>
20001ae4:	030b      	lsls	r3, r1, #12
20001ae6:	1ac0      	subs	r0, r0, r3
20001ae8:	4152      	adcs	r2, r2
20001aea:	0ac3      	lsrs	r3, r0, #11
20001aec:	428b      	cmp	r3, r1
20001aee:	d301      	bcc.n	20001af4 <__divsi3+0x7c>
20001af0:	02cb      	lsls	r3, r1, #11
20001af2:	1ac0      	subs	r0, r0, r3
20001af4:	4152      	adcs	r2, r2
20001af6:	0a83      	lsrs	r3, r0, #10
20001af8:	428b      	cmp	r3, r1
20001afa:	d301      	bcc.n	20001b00 <__divsi3+0x88>
20001afc:	028b      	lsls	r3, r1, #10
20001afe:	1ac0      	subs	r0, r0, r3
20001b00:	4152      	adcs	r2, r2
20001b02:	0a43      	lsrs	r3, r0, #9
20001b04:	428b      	cmp	r3, r1
20001b06:	d301      	bcc.n	20001b0c <__divsi3+0x94>
20001b08:	024b      	lsls	r3, r1, #9
20001b0a:	1ac0      	subs	r0, r0, r3
20001b0c:	4152      	adcs	r2, r2
20001b0e:	0a03      	lsrs	r3, r0, #8
20001b10:	428b      	cmp	r3, r1
20001b12:	d301      	bcc.n	20001b18 <__divsi3+0xa0>
20001b14:	020b      	lsls	r3, r1, #8
20001b16:	1ac0      	subs	r0, r0, r3
20001b18:	4152      	adcs	r2, r2
20001b1a:	d2cd      	bcs.n	20001ab8 <__divsi3+0x40>
20001b1c:	09c3      	lsrs	r3, r0, #7
20001b1e:	428b      	cmp	r3, r1
20001b20:	d301      	bcc.n	20001b26 <__divsi3+0xae>
20001b22:	01cb      	lsls	r3, r1, #7
20001b24:	1ac0      	subs	r0, r0, r3
20001b26:	4152      	adcs	r2, r2
20001b28:	0983      	lsrs	r3, r0, #6
20001b2a:	428b      	cmp	r3, r1
20001b2c:	d301      	bcc.n	20001b32 <__divsi3+0xba>
20001b2e:	018b      	lsls	r3, r1, #6
20001b30:	1ac0      	subs	r0, r0, r3
20001b32:	4152      	adcs	r2, r2
20001b34:	0943      	lsrs	r3, r0, #5
20001b36:	428b      	cmp	r3, r1
20001b38:	d301      	bcc.n	20001b3e <__divsi3+0xc6>
20001b3a:	014b      	lsls	r3, r1, #5
20001b3c:	1ac0      	subs	r0, r0, r3
20001b3e:	4152      	adcs	r2, r2
20001b40:	0903      	lsrs	r3, r0, #4
20001b42:	428b      	cmp	r3, r1
20001b44:	d301      	bcc.n	20001b4a <__divsi3+0xd2>
20001b46:	010b      	lsls	r3, r1, #4
20001b48:	1ac0      	subs	r0, r0, r3
20001b4a:	4152      	adcs	r2, r2
20001b4c:	08c3      	lsrs	r3, r0, #3
20001b4e:	428b      	cmp	r3, r1
20001b50:	d301      	bcc.n	20001b56 <__divsi3+0xde>
20001b52:	00cb      	lsls	r3, r1, #3
20001b54:	1ac0      	subs	r0, r0, r3
20001b56:	4152      	adcs	r2, r2
20001b58:	0883      	lsrs	r3, r0, #2
20001b5a:	428b      	cmp	r3, r1
20001b5c:	d301      	bcc.n	20001b62 <__divsi3+0xea>
20001b5e:	008b      	lsls	r3, r1, #2
20001b60:	1ac0      	subs	r0, r0, r3
20001b62:	4152      	adcs	r2, r2
20001b64:	0843      	lsrs	r3, r0, #1
20001b66:	428b      	cmp	r3, r1
20001b68:	d301      	bcc.n	20001b6e <__divsi3+0xf6>
20001b6a:	004b      	lsls	r3, r1, #1
20001b6c:	1ac0      	subs	r0, r0, r3
20001b6e:	4152      	adcs	r2, r2
20001b70:	1a41      	subs	r1, r0, r1
20001b72:	d200      	bcs.n	20001b76 <__divsi3+0xfe>
20001b74:	4601      	mov	r1, r0
20001b76:	4152      	adcs	r2, r2
20001b78:	4610      	mov	r0, r2
20001b7a:	4770      	bx	lr
20001b7c:	e05d      	b.n	20001c3a <__divsi3+0x1c2>
20001b7e:	0fca      	lsrs	r2, r1, #31
20001b80:	d000      	beq.n	20001b84 <__divsi3+0x10c>
20001b82:	4249      	negs	r1, r1
20001b84:	1003      	asrs	r3, r0, #32
20001b86:	d300      	bcc.n	20001b8a <__divsi3+0x112>
20001b88:	4240      	negs	r0, r0
20001b8a:	4053      	eors	r3, r2
20001b8c:	2200      	movs	r2, #0
20001b8e:	469c      	mov	ip, r3
20001b90:	0903      	lsrs	r3, r0, #4
20001b92:	428b      	cmp	r3, r1
20001b94:	d32d      	bcc.n	20001bf2 <__divsi3+0x17a>
20001b96:	0a03      	lsrs	r3, r0, #8
20001b98:	428b      	cmp	r3, r1
20001b9a:	d312      	bcc.n	20001bc2 <__divsi3+0x14a>
20001b9c:	22fc      	movs	r2, #252	; 0xfc
20001b9e:	0189      	lsls	r1, r1, #6
20001ba0:	ba12      	rev	r2, r2
20001ba2:	0a03      	lsrs	r3, r0, #8
20001ba4:	428b      	cmp	r3, r1
20001ba6:	d30c      	bcc.n	20001bc2 <__divsi3+0x14a>
20001ba8:	0189      	lsls	r1, r1, #6
20001baa:	1192      	asrs	r2, r2, #6
20001bac:	428b      	cmp	r3, r1
20001bae:	d308      	bcc.n	20001bc2 <__divsi3+0x14a>
20001bb0:	0189      	lsls	r1, r1, #6
20001bb2:	1192      	asrs	r2, r2, #6
20001bb4:	428b      	cmp	r3, r1
20001bb6:	d304      	bcc.n	20001bc2 <__divsi3+0x14a>
20001bb8:	0189      	lsls	r1, r1, #6
20001bba:	d03a      	beq.n	20001c32 <__divsi3+0x1ba>
20001bbc:	1192      	asrs	r2, r2, #6
20001bbe:	e000      	b.n	20001bc2 <__divsi3+0x14a>
20001bc0:	0989      	lsrs	r1, r1, #6
20001bc2:	09c3      	lsrs	r3, r0, #7
20001bc4:	428b      	cmp	r3, r1
20001bc6:	d301      	bcc.n	20001bcc <__divsi3+0x154>
20001bc8:	01cb      	lsls	r3, r1, #7
20001bca:	1ac0      	subs	r0, r0, r3
20001bcc:	4152      	adcs	r2, r2
20001bce:	0983      	lsrs	r3, r0, #6
20001bd0:	428b      	cmp	r3, r1
20001bd2:	d301      	bcc.n	20001bd8 <__divsi3+0x160>
20001bd4:	018b      	lsls	r3, r1, #6
20001bd6:	1ac0      	subs	r0, r0, r3
20001bd8:	4152      	adcs	r2, r2
20001bda:	0943      	lsrs	r3, r0, #5
20001bdc:	428b      	cmp	r3, r1
20001bde:	d301      	bcc.n	20001be4 <__divsi3+0x16c>
20001be0:	014b      	lsls	r3, r1, #5
20001be2:	1ac0      	subs	r0, r0, r3
20001be4:	4152      	adcs	r2, r2
20001be6:	0903      	lsrs	r3, r0, #4
20001be8:	428b      	cmp	r3, r1
20001bea:	d301      	bcc.n	20001bf0 <__divsi3+0x178>
20001bec:	010b      	lsls	r3, r1, #4
20001bee:	1ac0      	subs	r0, r0, r3
20001bf0:	4152      	adcs	r2, r2
20001bf2:	08c3      	lsrs	r3, r0, #3
20001bf4:	428b      	cmp	r3, r1
20001bf6:	d301      	bcc.n	20001bfc <__divsi3+0x184>
20001bf8:	00cb      	lsls	r3, r1, #3
20001bfa:	1ac0      	subs	r0, r0, r3
20001bfc:	4152      	adcs	r2, r2
20001bfe:	0883      	lsrs	r3, r0, #2
20001c00:	428b      	cmp	r3, r1
20001c02:	d301      	bcc.n	20001c08 <__divsi3+0x190>
20001c04:	008b      	lsls	r3, r1, #2
20001c06:	1ac0      	subs	r0, r0, r3
20001c08:	4152      	adcs	r2, r2
20001c0a:	d2d9      	bcs.n	20001bc0 <__divsi3+0x148>
20001c0c:	0843      	lsrs	r3, r0, #1
20001c0e:	428b      	cmp	r3, r1
20001c10:	d301      	bcc.n	20001c16 <__divsi3+0x19e>
20001c12:	004b      	lsls	r3, r1, #1
20001c14:	1ac0      	subs	r0, r0, r3
20001c16:	4152      	adcs	r2, r2
20001c18:	1a41      	subs	r1, r0, r1
20001c1a:	d200      	bcs.n	20001c1e <__divsi3+0x1a6>
20001c1c:	4601      	mov	r1, r0
20001c1e:	4663      	mov	r3, ip
20001c20:	4152      	adcs	r2, r2
20001c22:	105b      	asrs	r3, r3, #1
20001c24:	4610      	mov	r0, r2
20001c26:	d301      	bcc.n	20001c2c <__divsi3+0x1b4>
20001c28:	4240      	negs	r0, r0
20001c2a:	2b00      	cmp	r3, #0
20001c2c:	d500      	bpl.n	20001c30 <__divsi3+0x1b8>
20001c2e:	4249      	negs	r1, r1
20001c30:	4770      	bx	lr
20001c32:	4663      	mov	r3, ip
20001c34:	105b      	asrs	r3, r3, #1
20001c36:	d300      	bcc.n	20001c3a <__divsi3+0x1c2>
20001c38:	4240      	negs	r0, r0
20001c3a:	b501      	push	{r0, lr}
20001c3c:	2000      	movs	r0, #0
20001c3e:	f000 f805 	bl	20001c4c <__aeabi_idiv0>
20001c42:	bd02      	pop	{r1, pc}

20001c44 <__aeabi_idivmod>:
20001c44:	2900      	cmp	r1, #0
20001c46:	d0f8      	beq.n	20001c3a <__divsi3+0x1c2>
20001c48:	e716      	b.n	20001a78 <__divsi3>
20001c4a:	4770      	bx	lr

20001c4c <__aeabi_idiv0>:
20001c4c:	4770      	bx	lr
20001c4e:	46c0      	nop			; (mov r8, r8)

20001c50 <memcpy>:
20001c50:	2300      	movs	r3, #0
20001c52:	b510      	push	{r4, lr}
20001c54:	429a      	cmp	r2, r3
20001c56:	d100      	bne.n	20001c5a <memcpy+0xa>
20001c58:	bd10      	pop	{r4, pc}
20001c5a:	5ccc      	ldrb	r4, [r1, r3]
20001c5c:	54c4      	strb	r4, [r0, r3]
20001c5e:	3301      	adds	r3, #1
20001c60:	e7f8      	b.n	20001c54 <memcpy+0x4>
	...

20001c64 <tolower>:
20001c64:	2203      	movs	r2, #3
20001c66:	4b03      	ldr	r3, [pc, #12]	; (20001c74 <tolower+0x10>)
20001c68:	5c1b      	ldrb	r3, [r3, r0]
20001c6a:	4013      	ands	r3, r2
20001c6c:	2b01      	cmp	r3, #1
20001c6e:	d100      	bne.n	20001c72 <tolower+0xe>
20001c70:	3020      	adds	r0, #32
20001c72:	4770      	bx	lr
20001c74:	200028c6 	andcs	r2, r0, r6, asr #17

20001c78 <systick_flag>:
20001c78:	00000000 	andeq	r0, r0, r0

20001c7c <delay_count>:
20001c7c:	00000000 	andeq	r0, r0, r0

20001c80 <counting>:
20001c80:	00000000 	andeq	r0, r0, r0

20001c84 <used_for_rand>:
20001c84:	00000000 	andeq	r0, r0, r0

20001c88 <r.4188>:
	...

20001c90 <current_state>:
20001c90:	00000000 	andeq	r0, r0, r0

20001c94 <port>:
20001c94:	00000000 	andeq	r0, r0, r0

20001c98 <currY>:
20001c98:	00000000 	andeq	r0, r0, r0

20001c9c <running>:
20001c9c:	00000000 	andeq	r0, r0, r0

20001ca0 <isFlagPtr>:
20001ca0:	00000000 	andeq	r0, r0, r0

20001ca4 <board>:
	...

20002334 <position>:
	...

2000234c <gameover>:
2000234c:	00000000 	andeq	r0, r0, r0

20002350 <currX>:
20002350:	00000000 	andeq	r0, r0, r0

20002354 <isBombPtr>:
20002354:	00000000 	andeq	r0, r0, r0

20002358 <placed_flaggs>:
20002358:	00000000 	andeq	r0, r0, r0

2000235c <seconds>:
2000235c:	00000000 	andeq	r0, r0, r0

20002360 <ticks>:
20002360:	00000000 	andeq	r0, r0, r0

20002364 <timer_running>:
20002364:	00000000 	andeq	r0, r0, r0

20002368 <zero>:
20002368:	00000030 	andeq	r0, r0, r0, lsr r0
2000236c:	00000000 	andeq	r0, r0, r0
20002370:	01000000 	mrseq	r0, (UNDEF: 0)
20002374:	00010101 	andeq	r0, r1, r1, lsl #2
20002378:	01010000 	mrseq	r0, (UNDEF: 1)
2000237c:	01010000 	mrseq	r0, (UNDEF: 1)
20002380:	00010000 	andeq	r0, r1, r0
20002384:	01000000 	mrseq	r0, (UNDEF: 0)
20002388:	00010000 	andeq	r0, r1, r0
2000238c:	01010000 	mrseq	r0, (UNDEF: 1)
20002390:	00010000 	andeq	r0, r1, r0
20002394:	01000100 	mrseq	r0, (UNDEF: 16)
20002398:	00010000 	andeq	r0, r1, r0
2000239c:	01000001 	tsteq	r0, r1
200023a0:	01010000 	mrseq	r0, (UNDEF: 1)
200023a4:	01000000 	mrseq	r0, (UNDEF: 0)
200023a8:	00010000 	andeq	r0, r1, r0
200023ac:	01000000 	mrseq	r0, (UNDEF: 0)
200023b0:	01010000 	mrseq	r0, (UNDEF: 1)
200023b4:	01010000 	mrseq	r0, (UNDEF: 1)
200023b8:	01000000 	mrseq	r0, (UNDEF: 0)
200023bc:	00010101 	andeq	r0, r1, r1, lsl #2
	...

200023cc <one>:
200023cc:	00000031 	andeq	r0, r0, r1, lsr r0
	...
200023d8:	00000101 	andeq	r0, r0, r1, lsl #2
200023dc:	01000000 	mrseq	r0, (UNDEF: 0)
200023e0:	00000100 	andeq	r0, r0, r0, lsl #2
200023e4:	00010000 	andeq	r0, r1, r0
200023e8:	00000100 	andeq	r0, r0, r0, lsl #2
200023ec:	00000000 	andeq	r0, r0, r0
200023f0:	00000100 	andeq	r0, r0, r0, lsl #2
200023f4:	00000000 	andeq	r0, r0, r0
200023f8:	00000100 	andeq	r0, r0, r0, lsl #2
200023fc:	00000000 	andeq	r0, r0, r0
20002400:	00000100 	andeq	r0, r0, r0, lsl #2
20002404:	00000000 	andeq	r0, r0, r0
20002408:	00000100 	andeq	r0, r0, r0, lsl #2
2000240c:	00000000 	andeq	r0, r0, r0
20002410:	00000100 	andeq	r0, r0, r0, lsl #2
20002414:	00000000 	andeq	r0, r0, r0
20002418:	00000100 	andeq	r0, r0, r0, lsl #2
2000241c:	01010000 	mrseq	r0, (UNDEF: 1)
20002420:	01010101 	tsteq	r1, r1, lsl #2
	...

20002430 <two>:
20002430:	00000032 	andeq	r0, r0, r2, lsr r0
	...
2000243c:	00010101 	andeq	r0, r1, r1, lsl #2
20002440:	01000000 	mrseq	r0, (UNDEF: 0)
20002444:	01010000 	mrseq	r0, (UNDEF: 1)
20002448:	00010000 	andeq	r0, r1, r0
2000244c:	01000000 	mrseq	r0, (UNDEF: 0)
20002450:	00000000 	andeq	r0, r0, r0
20002454:	01000000 	mrseq	r0, (UNDEF: 0)
20002458:	00000000 	andeq	r0, r0, r0
2000245c:	00010000 	andeq	r0, r1, r0
20002460:	00000000 	andeq	r0, r0, r0
20002464:	00000100 	andeq	r0, r0, r0, lsl #2
20002468:	00000000 	andeq	r0, r0, r0
2000246c:	00000001 	andeq	r0, r0, r1
20002470:	01000000 	mrseq	r0, (UNDEF: 0)
20002474:	00000000 	andeq	r0, r0, r0
20002478:	01010000 	mrseq	r0, (UNDEF: 1)
2000247c:	00000000 	andeq	r0, r0, r0
20002480:	01010000 	mrseq	r0, (UNDEF: 1)
20002484:	01010101 	tsteq	r1, r1, lsl #2
	...

20002494 <three>:
20002494:	00000033 	andeq	r0, r0, r3, lsr r0
20002498:	00000000 	andeq	r0, r0, r0
2000249c:	01010000 	mrseq	r0, (UNDEF: 1)
200024a0:	00010101 	andeq	r0, r1, r1, lsl #2
200024a4:	00000000 	andeq	r0, r0, r0
200024a8:	01010000 	mrseq	r0, (UNDEF: 1)
200024ac:	00000000 	andeq	r0, r0, r0
200024b0:	01000000 	mrseq	r0, (UNDEF: 0)
200024b4:	00000000 	andeq	r0, r0, r0
200024b8:	01010000 	mrseq	r0, (UNDEF: 1)
200024bc:	01000000 	mrseq	r0, (UNDEF: 0)
200024c0:	00010101 	andeq	r0, r1, r1, lsl #2
200024c4:	00000000 	andeq	r0, r0, r0
200024c8:	01010000 	mrseq	r0, (UNDEF: 1)
200024cc:	00000000 	andeq	r0, r0, r0
200024d0:	01000000 	mrseq	r0, (UNDEF: 0)
200024d4:	00000000 	andeq	r0, r0, r0
200024d8:	01000000 	mrseq	r0, (UNDEF: 0)
200024dc:	00000000 	andeq	r0, r0, r0
200024e0:	01000000 	mrseq	r0, (UNDEF: 0)
200024e4:	01010000 	mrseq	r0, (UNDEF: 1)
200024e8:	00010101 	andeq	r0, r1, r1, lsl #2
	...

200024f8 <four>:
200024f8:	00000034 	andeq	r0, r0, r4, lsr r0
	...
20002504:	01010000 	mrseq	r0, (UNDEF: 1)
20002508:	00000000 	andeq	r0, r0, r0
2000250c:	01000100 	mrseq	r0, (UNDEF: 16)
20002510:	00000000 	andeq	r0, r0, r0
20002514:	01000001 	tsteq	r0, r1
20002518:	01000000 	mrseq	r0, (UNDEF: 0)
2000251c:	01000000 	mrseq	r0, (UNDEF: 0)
20002520:	00010000 	andeq	r0, r1, r0
20002524:	01000000 	mrseq	r0, (UNDEF: 0)
20002528:	01010000 	mrseq	r0, (UNDEF: 1)
2000252c:	01010101 	tsteq	r1, r1, lsl #2
20002530:	00000001 	andeq	r0, r0, r1
20002534:	01000000 	mrseq	r0, (UNDEF: 0)
20002538:	00000000 	andeq	r0, r0, r0
2000253c:	01000000 	mrseq	r0, (UNDEF: 0)
20002540:	00000000 	andeq	r0, r0, r0
20002544:	01000000 	mrseq	r0, (UNDEF: 0)
20002548:	00000000 	andeq	r0, r0, r0
2000254c:	01000000 	mrseq	r0, (UNDEF: 0)
	...

2000255c <doll>:
2000255c:	00000024 	andeq	r0, r0, r4, lsr #32
20002560:	00000100 	andeq	r0, r0, r0, lsl #2
20002564:	00000000 	andeq	r0, r0, r0
20002568:	00000100 	andeq	r0, r0, r0, lsl #2
2000256c:	01000000 	mrseq	r0, (UNDEF: 0)
20002570:	01010101 	tsteq	r1, r1, lsl #2
20002574:	01010000 	mrseq	r0, (UNDEF: 1)
20002578:	00000100 	andeq	r0, r0, r0, lsl #2
2000257c:	01010000 	mrseq	r0, (UNDEF: 1)
20002580:	00000100 	andeq	r0, r0, r0, lsl #2
20002584:	01000000 	mrseq	r0, (UNDEF: 0)
20002588:	00000101 	andeq	r0, r0, r1, lsl #2
2000258c:	00000000 	andeq	r0, r0, r0
20002590:	00010101 	andeq	r0, r1, r1, lsl #2
20002594:	00000000 	andeq	r0, r0, r0
20002598:	01010001 	tsteq	r1, r1
2000259c:	00000000 	andeq	r0, r0, r0
200025a0:	01010001 	tsteq	r1, r1
200025a4:	00010000 	andeq	r0, r1, r0
200025a8:	00010101 	andeq	r0, r1, r1, lsl #2
200025ac:	01000000 	mrseq	r0, (UNDEF: 0)
200025b0:	00000101 	andeq	r0, r0, r1, lsl #2
200025b4:	00000000 	andeq	r0, r0, r0
200025b8:	00000001 	andeq	r0, r0, r1
200025bc:	00000000 	andeq	r0, r0, r0

200025c0 <star>:
200025c0:	0000002a 	andeq	r0, r0, sl, lsr #32
200025c4:	00000001 	andeq	r0, r0, r1
200025c8:	00010000 	andeq	r0, r1, r0
200025cc:	00010001 	andeq	r0, r1, r1
200025d0:	01000000 	mrseq	r0, (UNDEF: 0)
200025d4:	00000101 	andeq	r0, r0, r1, lsl #2
200025d8:	01000000 	mrseq	r0, (UNDEF: 0)
200025dc:	00000101 	andeq	r0, r0, r1, lsl #2
200025e0:	00010000 	andeq	r0, r1, r0
200025e4:	00010001 	andeq	r0, r1, r1
200025e8:	00000000 	andeq	r0, r0, r0
200025ec:	00000001 	andeq	r0, r0, r1
	...

20002624 <arrow>:
20002624:	0000005e 	andeq	r0, r0, lr, asr r0
	...
20002630:	00000100 	andeq	r0, r0, r0, lsl #2
20002634:	00000000 	andeq	r0, r0, r0
20002638:	00010001 	andeq	r0, r1, r1
2000263c:	01000000 	mrseq	r0, (UNDEF: 0)
20002640:	01000000 	mrseq	r0, (UNDEF: 0)
20002644:	00010000 	andeq	r0, r1, r0
20002648:	00000000 	andeq	r0, r0, r0
2000264c:	00000001 	andeq	r0, r0, r1
	...

20002688 <flag>:
20002688:	00000020 	andeq	r0, r0, r0, lsr #32
	...
20002694:	00010000 	andeq	r0, r1, r0
20002698:	00000000 	andeq	r0, r0, r0
2000269c:	00010100 	andeq	r0, r1, r0, lsl #2
200026a0:	00000000 	andeq	r0, r0, r0
200026a4:	00010101 	andeq	r0, r1, r1, lsl #2
200026a8:	01000000 	mrseq	r0, (UNDEF: 0)
200026ac:	00010101 	andeq	r0, r1, r1, lsl #2
200026b0:	01010000 	mrseq	r0, (UNDEF: 1)
200026b4:	00010101 	andeq	r0, r1, r1, lsl #2
200026b8:	00000000 	andeq	r0, r0, r0
200026bc:	00010000 	andeq	r0, r1, r0
200026c0:	00000000 	andeq	r0, r0, r0
200026c4:	00010000 	andeq	r0, r1, r0
200026c8:	00000000 	andeq	r0, r0, r0
200026cc:	00010000 	andeq	r0, r1, r0
200026d0:	00000000 	andeq	r0, r0, r0
200026d4:	01010100 	mrseq	r0, (UNDEF: 17)
200026d8:	01000000 	mrseq	r0, (UNDEF: 0)
200026dc:	01010101 	tsteq	r1, r1, lsl #2
200026e0:	00000001 	andeq	r0, r0, r1
	...

200026ec <space>:
200026ec:	00000020 	andeq	r0, r0, r0, lsr #32
	...
20002750:	2000027a 	andcs	r0, r0, sl, ror r2
20002754:	200002b6 			; <UNDEFINED> instruction: 0x200002b6
20002758:	200002b6 			; <UNDEFINED> instruction: 0x200002b6
2000275c:	200002b6 			; <UNDEFINED> instruction: 0x200002b6
20002760:	200002b6 			; <UNDEFINED> instruction: 0x200002b6
20002764:	200002b6 			; <UNDEFINED> instruction: 0x200002b6
20002768:	2000028e 	andcs	r0, r0, lr, lsl #5
2000276c:	200002b6 			; <UNDEFINED> instruction: 0x200002b6
20002770:	200002b6 			; <UNDEFINED> instruction: 0x200002b6
20002774:	200002b6 			; <UNDEFINED> instruction: 0x200002b6
20002778:	200002b6 			; <UNDEFINED> instruction: 0x200002b6
2000277c:	200002b6 			; <UNDEFINED> instruction: 0x200002b6
20002780:	20000216 	andcs	r0, r0, r6, lsl r2
20002784:	2000022a 	andcs	r0, r0, sl, lsr #4
20002788:	2000023e 	andcs	r0, r0, lr, lsr r2
2000278c:	20000252 	andcs	r0, r0, r2, asr r2
20002790:	20000266 	andcs	r0, r0, r6, ror #4
20002794:	200002b6 			; <UNDEFINED> instruction: 0x200002b6
20002798:	200002b6 			; <UNDEFINED> instruction: 0x200002b6
2000279c:	200002b6 			; <UNDEFINED> instruction: 0x200002b6
200027a0:	200002b6 			; <UNDEFINED> instruction: 0x200002b6
200027a4:	200002b6 			; <UNDEFINED> instruction: 0x200002b6
200027a8:	200002b6 			; <UNDEFINED> instruction: 0x200002b6
200027ac:	200002b6 			; <UNDEFINED> instruction: 0x200002b6
200027b0:	200002b6 			; <UNDEFINED> instruction: 0x200002b6
200027b4:	200002b6 			; <UNDEFINED> instruction: 0x200002b6
200027b8:	200002b6 			; <UNDEFINED> instruction: 0x200002b6
200027bc:	200002b6 			; <UNDEFINED> instruction: 0x200002b6
200027c0:	200002b6 			; <UNDEFINED> instruction: 0x200002b6
200027c4:	200002b6 			; <UNDEFINED> instruction: 0x200002b6
200027c8:	200002b6 			; <UNDEFINED> instruction: 0x200002b6
200027cc:	200002b6 			; <UNDEFINED> instruction: 0x200002b6
200027d0:	200002b6 			; <UNDEFINED> instruction: 0x200002b6
200027d4:	200002b6 			; <UNDEFINED> instruction: 0x200002b6
200027d8:	200002b6 			; <UNDEFINED> instruction: 0x200002b6
200027dc:	200002b6 			; <UNDEFINED> instruction: 0x200002b6
200027e0:	200002b6 			; <UNDEFINED> instruction: 0x200002b6
200027e4:	200002b6 			; <UNDEFINED> instruction: 0x200002b6
200027e8:	200002b6 			; <UNDEFINED> instruction: 0x200002b6
200027ec:	200002b6 			; <UNDEFINED> instruction: 0x200002b6
200027f0:	200002b6 			; <UNDEFINED> instruction: 0x200002b6
200027f4:	200002b6 			; <UNDEFINED> instruction: 0x200002b6
200027f8:	200002b6 			; <UNDEFINED> instruction: 0x200002b6
200027fc:	200002b6 			; <UNDEFINED> instruction: 0x200002b6
20002800:	200002b6 			; <UNDEFINED> instruction: 0x200002b6
20002804:	200002b6 			; <UNDEFINED> instruction: 0x200002b6
20002808:	200002b6 			; <UNDEFINED> instruction: 0x200002b6
2000280c:	200002b6 			; <UNDEFINED> instruction: 0x200002b6
20002810:	200002b6 			; <UNDEFINED> instruction: 0x200002b6
20002814:	200002b6 			; <UNDEFINED> instruction: 0x200002b6
20002818:	200002b6 			; <UNDEFINED> instruction: 0x200002b6
2000281c:	200002b6 			; <UNDEFINED> instruction: 0x200002b6
20002820:	200002b6 			; <UNDEFINED> instruction: 0x200002b6
20002824:	200002b6 			; <UNDEFINED> instruction: 0x200002b6
20002828:	200002b6 			; <UNDEFINED> instruction: 0x200002b6
2000282c:	200002b6 			; <UNDEFINED> instruction: 0x200002b6
20002830:	200002b6 			; <UNDEFINED> instruction: 0x200002b6
20002834:	200002b6 			; <UNDEFINED> instruction: 0x200002b6
20002838:	200002a2 	andcs	r0, r0, r2, lsr #5
2000283c:	67616c46 	strbvs	r6, [r1, -r6, asr #24]!
20002840:	656c2073 	strbvs	r2, [ip, #-115]!	; 0xffffff8d
20002844:	203a7466 	eorscs	r7, sl, r6, ror #8
20002848:	00000000 	andeq	r0, r0, r0
2000284c:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
20002850:	09203a72 	stmdbeq	r0!, {r1, r4, r5, r6, r9, fp, ip, sp}
20002854:	00000009 	andeq	r0, r0, r9
20002858:	00002020 	andeq	r2, r0, r0, lsr #32
2000285c:	00000020 	andeq	r0, r0, r0, lsr #32
20002860:	33323130 	teqcc	r2, #48, 2
20002864:	37363534 			; <UNDEFINED> instruction: 0x37363534
20002868:	00003938 	andeq	r3, r0, r8, lsr r9
2000286c:	0a030201 	beq	200c3078 <_ctype_+0xc07b3>
20002870:	0b060504 	bleq	20183c88 <_ctype_+0x1813c3>
20002874:	0c090807 	stceq	8, cr0, [r9], {7}
20002878:	0d0f000e 	stceq	0, cr0, [pc, #-56]	; 20002848 <space+0x15c>
2000287c:	20001664 	andcs	r1, r0, r4, ror #12
20002880:	20001632 	andcs	r1, r0, r2, lsr r6
20002884:	2000163c 	andcs	r1, r0, ip, lsr r6
20002888:	20001646 	andcs	r1, r0, r6, asr #12
2000288c:	20001650 	andcs	r1, r0, r0, asr r6
20002890:	2000165a 	andcs	r1, r0, sl, asr r6
20002894:	79616c50 	stmdbvc	r1!, {r4, r6, sl, fp, sp, lr}^
20002898:	61676120 	cmnvs	r7, r0, lsr #2
2000289c:	203f6e69 	eorscs	r6, pc, r9, ror #28
200028a0:	20736579 	rsbscs	r6, r3, r9, ror r5
200028a4:	44203e2d 	strtmi	r3, [r0], #-3629	; 0xfffff1d3
200028a8:	00000000 	andeq	r0, r0, r0
200028ac:	20736579 	rsbscs	r6, r3, r9, ror r5
200028b0:	44203e2d 	strtmi	r3, [r0], #-3629	; 0xfffff1d3
200028b4:	6f6e202c 	svcvs	0x006e202c
200028b8:	203e2d20 	eorscs	r2, lr, r0, lsr #26
200028bc:	74796e61 	ldrbtvc	r6, [r9], #-3681	; 0xfffff19f
200028c0:	676e6968 	strbvs	r6, [lr, -r8, ror #18]!
	...

200028c5 <_ctype_>:
200028c5:	20202000 	eorcs	r2, r0, r0
200028c9:	20202020 	eorcs	r2, r0, r0, lsr #32
200028cd:	28282020 	stmdacs	r8!, {r5, sp}
200028d1:	20282828 	eorcs	r2, r8, r8, lsr #16
200028d5:	20202020 	eorcs	r2, r0, r0, lsr #32
200028d9:	20202020 	eorcs	r2, r0, r0, lsr #32
200028dd:	20202020 	eorcs	r2, r0, r0, lsr #32
200028e1:	20202020 	eorcs	r2, r0, r0, lsr #32
200028e5:	10108820 	andsne	r8, r0, r0, lsr #16
200028e9:	10101010 	andsne	r1, r0, r0, lsl r0
200028ed:	10101010 	andsne	r1, r0, r0, lsl r0
200028f1:	10101010 	andsne	r1, r0, r0, lsl r0
200028f5:	04040410 	streq	r0, [r4], #-1040	; 0xfffffbf0
200028f9:	04040404 	streq	r0, [r4], #-1028	; 0xfffffbfc
200028fd:	10040404 	andne	r0, r4, r4, lsl #8
20002901:	10101010 	andsne	r1, r0, r0, lsl r0
20002905:	41411010 	cmpmi	r1, r0, lsl r0
20002909:	41414141 	cmpmi	r1, r1, asr #2
2000290d:	01010101 	tsteq	r1, r1, lsl #2
20002911:	01010101 	tsteq	r1, r1, lsl #2
20002915:	01010101 	tsteq	r1, r1, lsl #2
20002919:	01010101 	tsteq	r1, r1, lsl #2
2000291d:	01010101 	tsteq	r1, r1, lsl #2
20002921:	10101010 	andsne	r1, r0, r0, lsl r0
20002925:	42421010 	submi	r1, r2, #16
20002929:	42424242 	submi	r4, r2, #536870916	; 0x20000004
2000292d:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
20002931:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
20002935:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
20002939:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
2000293d:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
20002941:	10101010 	andsne	r1, r0, r0, lsl r0
20002945:	00000020 	andeq	r0, r0, r0, lsr #32
	...

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	00000835 	andeq	r0, r0, r5, lsr r8
       4:	00000004 	andeq	r0, r0, r4
       8:	01040000 	mrseq	r0, (UNDEF: 4)
       c:	0000028d 	andeq	r0, r0, sp, lsl #5
      10:	0000b30c 	andeq	fp, r0, ip, lsl #6
      14:	00014300 	andeq	r4, r1, r0, lsl #6
      18:	00001400 	andeq	r1, r0, r0, lsl #8
      1c:	00086a20 	andeq	r6, r8, r0, lsr #20
      20:	00000000 	andeq	r0, r0, r0
      24:	03a40200 			; <UNDEFINED> instruction: 0x03a40200
      28:	03610000 	cmneq	r1, #0
      2c:	004d1006 	subeq	r1, sp, r6
      30:	76030000 	strvc	r0, [r3], -r0
      34:	03006c61 	movweq	r6, #3169	; 0xc61
      38:	004d0707 	subeq	r0, sp, r7, lsl #14
      3c:	04000000 	streq	r0, [r0], #-0
      40:	0000031d 	andeq	r0, r0, sp, lsl r3
      44:	54070803 	strpl	r0, [r7], #-2051	; 0xfffff7fd
      48:	01000000 	mrseq	r0, (UNDEF: 0)
      4c:	08010500 	stmdaeq	r1, {r8, sl}
      50:	00000127 	andeq	r0, r0, r7, lsr #2
      54:	00004d06 	andeq	r4, r0, r6, lsl #26
      58:	00006a00 	andeq	r6, r0, r0, lsl #20
      5c:	006a0700 	rsbeq	r0, sl, r0, lsl #14
      60:	070b0000 	streq	r0, [fp, -r0]
      64:	0000006a 	andeq	r0, r0, sl, rrx
      68:	04050007 	streq	r0, [r5], #-7
      6c:	00024307 	andeq	r4, r2, r7, lsl #6
      70:	002f0800 	eoreq	r0, pc, r0, lsl #16
      74:	09030000 	stmdbeq	r3, {}	; <UNPREDICTABLE>
      78:	00002503 	andeq	r2, r0, r3, lsl #10
      7c:	010d0900 	tsteq	sp, r0, lsl #18
      80:	0b030000 	bleq	c0088 <startup-0x1ff3ff78>
      84:	0000710a 	andeq	r7, r0, sl, lsl #2
      88:	68030500 	stmdavs	r3, {r8, sl}
      8c:	0a200023 	beq	800120 <startup-0x1f7ffee0>
      90:	00656e6f 	rsbeq	r6, r5, pc, ror #28
      94:	710a1803 	tstvc	sl, r3, lsl #16
      98:	05000000 	streq	r0, [r0, #-0]
      9c:	0023cc03 	eoreq	ip, r3, r3, lsl #24
      a0:	77740a20 	ldrbvc	r0, [r4, -r0, lsr #20]!
      a4:	2503006f 	strcs	r0, [r3, #-111]	; 0xffffff91
      a8:	0000710a 	andeq	r7, r0, sl, lsl #2
      ac:	30030500 	andcc	r0, r3, r0, lsl #10
      b0:	09200024 	stmdbeq	r0!, {r2, r5}
      b4:	00000325 	andeq	r0, r0, r5, lsr #6
      b8:	710a3103 	tstvc	sl, r3, lsl #2
      bc:	05000000 	streq	r0, [r0, #-0]
      c0:	00249403 	eoreq	r9, r4, r3, lsl #8
      c4:	00890920 	addeq	r0, r9, r0, lsr #18
      c8:	3d030000 	stccc	0, cr0, [r3, #-0]
      cc:	0000710a 	andeq	r7, r0, sl, lsl #2
      d0:	f8030500 			; <UNDEFINED> instruction: 0xf8030500
      d4:	09200024 	stmdbeq	r0!, {r2, r5}
      d8:	00000419 	andeq	r0, r0, r9, lsl r4
      dc:	710a4903 	tstvc	sl, r3, lsl #18
      e0:	05000000 	streq	r0, [r0, #-0]
      e4:	00255c03 	eoreq	r5, r5, r3, lsl #24
      e8:	002a0920 	eoreq	r0, sl, r0, lsr #18
      ec:	55030000 	strpl	r0, [r3, #-0]
      f0:	0000710a 	andeq	r7, r0, sl, lsl #2
      f4:	c0030500 	andgt	r0, r3, r0, lsl #10
      f8:	09200025 	stmdbeq	r0!, {r0, r2, r5}
      fc:	00000340 	andeq	r0, r0, r0, asr #6
     100:	710a6103 	tstvc	sl, r3, lsl #2
     104:	05000000 	streq	r0, [r0, #-0]
     108:	00262403 	eoreq	r2, r6, r3, lsl #8
     10c:	03740920 	cmneq	r4, #32, 18	; 0x80000
     110:	6d030000 	stcvs	0, cr0, [r3, #-0]
     114:	0000710a 	andeq	r7, r0, sl, lsl #2
     118:	88030500 	stmdahi	r3, {r8, sl}
     11c:	09200026 	stmdbeq	r0!, {r1, r2, r5}
     120:	000003ad 	andeq	r0, r0, sp, lsr #7
     124:	710a7903 	tstvc	sl, r3, lsl #18
     128:	05000000 	streq	r0, [r0, #-0]
     12c:	0026ec03 	eoreq	lr, r6, r3, lsl #24
     130:	036c0b20 	cmneq	ip, #32, 22	; 0x8000
     134:	0d010000 	stceq	0, cr0, [r1, #-0]
     138:	00014a15 	andeq	r4, r1, r5, lsl sl
     13c:	78030500 	stmdavc	r3, {r8, sl}
     140:	0c20001c 	stceq	0, cr0, [r0], #-112	; 0xffffff90
     144:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
     148:	430d0074 	movwmi	r0, #53364	; 0xd074
     14c:	0b000001 	bleq	158 <startup-0x1ffffea8>
     150:	00000398 	muleq	r0, r8, r3
     154:	4a150e01 	bmi	543960 <startup-0x1fabc6a0>
     158:	05000001 	streq	r0, [r0, #-1]
     15c:	001c7c03 	andseq	r7, ip, r3, lsl #24
     160:	01ac0b20 			; <UNDEFINED> instruction: 0x01ac0b20
     164:	10010000 	andne	r0, r1, r0
     168:	00014a15 	andeq	r4, r1, r5, lsl sl
     16c:	80030500 	andhi	r0, r3, r0, lsl #10
     170:	0b20001c 	bleq	8001e8 <startup-0x1f7ffe18>
     174:	0000040b 	andeq	r0, r0, fp, lsl #8
     178:	4a151101 	bmi	544584 <startup-0x1fabba7c>
     17c:	05000001 	streq	r0, [r0, #-1]
     180:	001c8403 	andseq	r8, ip, r3, lsl #8
     184:	01120e20 	tsteq	r2, r0, lsr #28
     188:	0c020000 	stceq	0, cr0, [r2], {-0}
     18c:	085a0601 	ldmdaeq	sl, {r0, r9, sl}^
     190:	00242000 	eoreq	r2, r4, r0
     194:	9c010000 	stcls	0, cr0, [r1], {-0}
     198:	000001ac 	andeq	r0, r0, ip, lsr #3
     19c:	00736d0f 	rsbseq	r6, r3, pc, lsl #26
     1a0:	1f010c02 	svcne	0x00010c02
     1a4:	0000006a 	andeq	r0, r0, sl, rrx
     1a8:	00749102 	rsbseq	r9, r4, r2, lsl #2
     1ac:	00007d10 	andeq	r7, r0, r0, lsl sp
     1b0:	06fc0200 	ldrbteq	r0, [ip], r0, lsl #4
     1b4:	20000814 	andcs	r0, r0, r4, lsl r8
     1b8:	00000046 	andeq	r0, r0, r6, asr #32
     1bc:	01d19c01 	bicseq	r9, r1, r1, lsl #24
     1c0:	75110000 	ldrvc	r0, [r1, #-0]
     1c4:	fc020073 	stc2	0, cr0, [r2], {115}	; 0x73
     1c8:	00006a1f 	andeq	r6, r0, pc, lsl sl
     1cc:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     1d0:	02811200 	addeq	r1, r1, #0, 4
     1d4:	ee020000 	cdp	0, 0, cr0, cr2, cr0, {0}
     1d8:	0007d006 	andeq	sp, r7, r6
     1dc:	00004420 	andeq	r4, r0, r0, lsr #8
     1e0:	139c0100 	orrsne	r0, ip, #0, 2
     1e4:	0000032b 	andeq	r0, r0, fp, lsr #6
     1e8:	8806e502 	stmdahi	r6, {r1, r8, sl, sp, lr, pc}
     1ec:	48200007 	stmdami	r0!, {r0, r1, r2}
     1f0:	01000000 	mrseq	r0, (UNDEF: 0)
     1f4:	0002149c 	muleq	r2, ip, r4
     1f8:	00781100 	rsbseq	r1, r8, r0, lsl #2
     1fc:	4d21e502 	cfstr32mi	mvfx14, [r1, #-8]!
     200:	02000000 	andeq	r0, r0, #0
     204:	63146f91 	tstvs	r4, #580	; 0x244
     208:	07e70200 	strbeq	r0, [r7, r0, lsl #4]!
     20c:	0000004d 	andeq	r0, r0, sp, asr #32
     210:	00779102 	rsbseq	r9, r7, r2, lsl #2
     214:	0001f713 	andeq	pc, r1, r3, lsl r7	; <UNPREDICTABLE>
     218:	06df0200 	ldrbeq	r0, [pc], r0, lsl #4
     21c:	20000750 	andcs	r0, r0, r0, asr r7
     220:	00000038 	andeq	r0, r0, r8, lsr r0
     224:	02459c01 	subeq	r9, r5, #256	; 0x100
     228:	78110000 	ldmdavc	r1, {}	; <UNPREDICTABLE>
     22c:	1fdf0200 	svcne	0x00df0200
     230:	0000004d 	andeq	r0, r0, sp, asr #32
     234:	146f9102 	strbtne	r9, [pc], #-258	; 23c <startup-0x1ffffdc4>
     238:	e1020063 	tst	r2, r3, rrx
     23c:	00004d07 	andeq	r4, r0, r7, lsl #26
     240:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
     244:	03d31000 	bicseq	r1, r3, #0
     248:	d8020000 	stmdale	r2, {}	; <UNPREDICTABLE>
     24c:	00072006 	andeq	r2, r7, r6
     250:	00003020 	andeq	r3, r0, r0, lsr #32
     254:	6b9c0100 	blvs	fe70065c <_ctype_+0xde6fdd97>
     258:	11000002 	tstne	r0, r2
     25c:	00646d63 	rsbeq	r6, r4, r3, ror #26
     260:	4d22d802 	stcmi	8, cr13, [r2, #-8]!
     264:	02000000 	andeq	r0, r0, #0
     268:	10007791 	mulne	r0, r1, r7
     26c:	0000000d 	andeq	r0, r0, sp
     270:	f606d202 			; <UNDEFINED> instruction: 0xf606d202
     274:	2a200006 	bcs	800294 <startup-0x1f7ffd6c>
     278:	01000000 	mrseq	r0, (UNDEF: 0)
     27c:	0002919c 	muleq	r2, ip, r1
     280:	6d631100 	stfvse	f1, [r3, #-0]
     284:	d2020064 	andle	r0, r2, #100	; 0x64
     288:	00004d1f 	andeq	r4, r0, pc, lsl sp
     28c:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
     290:	02631000 	rsbeq	r1, r3, #0
     294:	cc020000 	stcgt	0, cr0, [r2], {-0}
     298:	0006cc06 	andeq	ip, r6, r6, lsl #24
     29c:	00002a20 	andeq	r2, r0, r0, lsr #20
     2a0:	b79c0100 	ldrlt	r0, [ip, r0, lsl #2]
     2a4:	15000002 	strne	r0, [r0, #-2]
     2a8:	000003f5 	strdeq	r0, [r0], -r5
     2ac:	4d1ccc02 	ldcmi	12, cr12, [ip, #-8]
     2b0:	02000000 	andeq	r0, r0, #0
     2b4:	16007791 			; <UNDEFINED> instruction: 0x16007791
     2b8:	000001cf 	andeq	r0, r0, pc, asr #3
     2bc:	e00fc302 	and	ip, pc, r2, lsl #6
     2c0:	98000002 	stmdals	r0, {r1}
     2c4:	34200006 	strtcc	r0, [r0], #-6
     2c8:	01000000 	mrseq	r0, (UNDEF: 0)
     2cc:	0002e09c 	muleq	r2, ip, r0
     2d0:	76721400 	ldrbtvc	r1, [r2], -r0, lsl #8
     2d4:	10c80200 	sbcne	r0, r8, r0, lsl #4
     2d8:	000002e0 	andeq	r0, r0, r0, ror #5
     2dc:	00779102 	rsbseq	r9, r7, r2, lsl #2
     2e0:	1e080105 	adfnee	f0, f0, f5
     2e4:	16000001 	strne	r0, [r0], -r1
     2e8:	0000012c 	andeq	r0, r0, ip, lsr #2
     2ec:	e00fba02 	and	fp, pc, r2, lsl #20
     2f0:	58000002 	stmdapl	r0, {r1}
     2f4:	40200006 	eormi	r0, r0, r6
     2f8:	01000000 	mrseq	r0, (UNDEF: 0)
     2fc:	0003109c 	muleq	r3, ip, r0
     300:	76721400 	ldrbtvc	r1, [r2], -r0, lsl #8
     304:	10bf0200 	adcsne	r0, pc, r0, lsl #4
     308:	000002e0 	andeq	r0, r0, r0, ror #5
     30c:	006f9102 	rsbeq	r9, pc, r2, lsl #2
     310:	0003ea16 	andeq	lr, r3, r6, lsl sl
     314:	0fb00200 	svceq	0x00b00200
     318:	000002e0 	andeq	r0, r0, r0, ror #5
     31c:	20000618 	andcs	r0, r0, r8, lsl r6
     320:	00000040 	andeq	r0, r0, r0, asr #32
     324:	03399c01 	teqeq	r9, #256	; 0x100
     328:	72140000 	andsvc	r0, r4, #0
     32c:	b5020076 	strlt	r0, [r2, #-118]	; 0xffffff8a
     330:	0002e010 	andeq	lr, r2, r0, lsl r0
     334:	6f910200 	svcvs	0x00910200
     338:	03b31000 			; <UNDEFINED> instruction: 0x03b31000
     33c:	a8020000 	stmdage	r2, {}	; <UNPREDICTABLE>
     340:	0005dc06 	andeq	sp, r5, r6, lsl #24
     344:	00003c20 	andeq	r3, r0, r0, lsr #24
     348:	5f9c0100 	svcpl	0x009c0100
     34c:	11000003 	tstne	r0, r3
     350:	00646d63 	rsbeq	r6, r4, r3, ror #26
     354:	4d19a802 	ldcmi	8, cr10, [r9, #-8]
     358:	02000000 	andeq	r0, r0, #0
     35c:	10007791 	mulne	r0, r1, r7
     360:	000003fa 	strdeq	r0, [r0], -sl
     364:	a006a102 	andge	sl, r6, r2, lsl #2
     368:	3c200005 	stccc	0, cr0, [r0], #-20	; 0xffffffec
     36c:	01000000 	mrseq	r0, (UNDEF: 0)
     370:	0003849c 	muleq	r3, ip, r4
     374:	68631100 	stmdavs	r3!, {r8, ip}^
     378:	1ca10200 	sfmne	f0, 4, [r1]
     37c:	0000004d 	andeq	r0, r0, sp, asr #32
     380:	00779102 	rsbseq	r9, r7, r2, lsl #2
     384:	00035910 	andeq	r5, r3, r0, lsl r9
     388:	06960200 	ldreq	r0, [r6], r0, lsl #4
     38c:	20000542 	andcs	r0, r0, r2, asr #10
     390:	0000005e 	andeq	r0, r0, lr, asr r0
     394:	03d29c01 	bicseq	r9, r2, #256	; 0x100
     398:	6e110000 	cdpvs	0, 1, cr0, cr1, cr0, {0}
     39c:	02006d75 	andeq	r6, r0, #7488	; 0x1d40
     3a0:	01431d96 			; <UNDEFINED> instruction: 0x01431d96
     3a4:	91020000 	mrsls	r0, (UNDEF: 2)
     3a8:	0560176c 	strbeq	r1, [r0, #-1900]!	; 0xfffff894
     3ac:	00382000 	eorseq	r2, r8, r0
     3b0:	ce0b0000 	cdpgt	0, 0, cr0, cr11, cr0, {0}
     3b4:	02000003 	andeq	r0, r0, #3
     3b8:	0143079b 			; <UNDEFINED> instruction: 0x0143079b
     3bc:	91020000 	mrsls	r0, (UNDEF: 2)
     3c0:	013e0b74 	teqeq	lr, r4, ror fp
     3c4:	9c020000 	stcls	0, cr0, [r2], {-0}
     3c8:	00014307 	andeq	r4, r1, r7, lsl #6
     3cc:	70910200 	addsvc	r0, r1, r0, lsl #4
     3d0:	94100000 	ldrls	r0, [r0], #-0
     3d4:	02000000 	andeq	r0, r0, #0
     3d8:	05180691 	ldreq	r0, [r8, #-1681]	; 0xfffff96f
     3dc:	002a2000 	eoreq	r2, sl, r0
     3e0:	9c010000 	stcls	0, cr0, [r1], {-0}
     3e4:	000003f6 	strdeq	r0, [r0], -r6
     3e8:	02007011 	andeq	r7, r0, #17
     3ec:	03f62091 	mvnseq	r2, #145	; 0x91
     3f0:	91020000 	mrsls	r0, (UNDEF: 2)
     3f4:	04180074 	ldreq	r0, [r8], #-116	; 0xffffff8c
     3f8:	0000004d 	andeq	r0, r0, sp, asr #32
     3fc:	00027410 	andeq	r7, r2, r0, lsl r4
     400:	068b0200 	streq	r0, [fp], r0, lsl #4
     404:	200004dc 	ldrdcs	r0, [r0], -ip
     408:	0000003c 	andeq	r0, r0, ip, lsr r0
     40c:	043c9c01 	ldrteq	r9, [ip], #-3073	; 0xfffff3ff
     410:	78110000 	ldmdavc	r1, {}	; <UNPREDICTABLE>
     414:	178b0200 	strne	r0, [fp, r0, lsl #4]
     418:	00000143 	andeq	r0, r0, r3, asr #2
     41c:	116c9102 	cmnne	ip, r2, lsl #2
     420:	8b020079 	blhi	8060c <startup-0x1ff7f9f4>
     424:	0001431e 	andeq	r4, r1, lr, lsl r3
     428:	68910200 	ldmvs	r1, {r9}
     42c:	0002500b 	andeq	r5, r2, fp
     430:	068d0200 	streq	r0, [sp], r0, lsl #4
     434:	00000143 	andeq	r0, r0, r3, asr #2
     438:	00749102 	rsbseq	r9, r4, r2, lsl #2
     43c:	00003819 	andeq	r3, r0, r9, lsl r8
     440:	06840200 	streq	r0, [r4], r0, lsl #4
     444:	200004b0 			; <UNDEFINED> instruction: 0x200004b0
     448:	0000002c 	andeq	r0, r0, ip, lsr #32
     44c:	04619c01 	strbteq	r9, [r1], #-3073	; 0xfffff3ff
     450:	741a0000 	ldrvc	r0, [sl], #-0
     454:	02000002 	andeq	r0, r0, #2
     458:	0143025f 	cmpeq	r3, pc, asr r2
     45c:	001b0000 	andseq	r0, fp, r0
     460:	00a71000 	adceq	r1, r7, r0
     464:	7b020000 	blvc	8046c <startup-0x1ff7fb94>
     468:	00048006 	andeq	r8, r4, r6
     46c:	00003020 	andeq	r3, r0, r0, lsr #32
     470:	b69c0100 	ldrlt	r0, [ip], r0, lsl #2
     474:	15000004 	strne	r0, [r0, #-4]
     478:	000001bf 			; <UNDEFINED> instruction: 0x000001bf
     47c:	43167b02 	tstmi	r6, #2048	; 0x800
     480:	02000001 	andeq	r0, r0, #1
     484:	52157491 	andspl	r7, r5, #-1862270976	; 0x91000000
     488:	02000003 	andeq	r0, r0, #3
     48c:	0143207b 	hvceq	12811	; 0x320b
     490:	91020000 	mrsls	r0, (UNDEF: 2)
     494:	02741c70 	rsbseq	r1, r4, #112, 24	; 0x7000
     498:	5f020000 	svcpl	0x00020000
     49c:	00014302 	andeq	r4, r1, r2, lsl #6
     4a0:	0004a700 	andeq	sl, r4, r0, lsl #14
     4a4:	1a001b00 	bne	70ac <startup-0x1fff8f54>
     4a8:	00000359 	andeq	r0, r0, r9, asr r3
     4ac:	43037002 	movwmi	r7, #12290	; 0x3002
     4b0:	1b000001 	blne	4bc <startup-0x1ffffb44>
     4b4:	46100000 	ldrmi	r0, [r0], -r0
     4b8:	02000003 	andeq	r0, r0, #3
     4bc:	04180667 	ldreq	r0, [r8], #-1639	; 0xfffff999
     4c0:	00682000 	rsbeq	r2, r8, r0
     4c4:	9c010000 	stcls	0, cr0, [r1], {-0}
     4c8:	00000541 	andeq	r0, r0, r1, asr #10
     4cc:	02006611 	andeq	r6, r0, #17825792	; 0x1100000
     4d0:	01431667 	cmpeq	r3, r7, ror #12
     4d4:	91020000 	mrsls	r0, (UNDEF: 2)
     4d8:	04261d6c 	strteq	r1, [r6], #-3436	; 0xfffff294
     4dc:	002e2000 	eoreq	r2, lr, r0
     4e0:	05160000 	ldreq	r0, [r6, #-0]
     4e4:	741c0000 	ldrvc	r0, [ip], #-0
     4e8:	02000002 	andeq	r0, r0, #2
     4ec:	0143025f 	cmpeq	r3, pc, asr r2
     4f0:	04f80000 	ldrbteq	r0, [r8], #0
     4f4:	001b0000 	andseq	r0, fp, r0
     4f8:	0000600b 	andeq	r6, r0, fp
     4fc:	086c0200 	stmdaeq	ip!, {r9}^
     500:	00000541 	andeq	r0, r0, r1, asr #10
     504:	1a749102 	bne	1d24914 <startup-0x1e2db6ec>
     508:	00000359 	andeq	r0, r0, r9, asr r3
     50c:	43037002 	movwmi	r7, #12290	; 0x3002
     510:	1b000001 	blne	51c <startup-0x1ffffae4>
     514:	56170000 	ldrpl	r0, [r7], -r0
     518:	1c200004 	stcne	0, cr0, [r0], #-16
     51c:	1c000000 	stcne	0, cr0, [r0], {-0}
     520:	00000274 	andeq	r0, r0, r4, ror r2
     524:	43025f02 	movwmi	r5, #12034	; 0x2f02
     528:	31000001 	tstcc	r0, r1
     52c:	1b000005 	blne	548 <startup-0x1ffffab8>
     530:	03591a00 	cmpeq	r9, #0, 20
     534:	70020000 	andvc	r0, r2, r0
     538:	00014303 	andeq	r4, r1, r3, lsl #6
     53c:	00001b00 	andeq	r1, r0, r0, lsl #22
     540:	004d0600 	subeq	r0, sp, r0, lsl #12
     544:	05510000 	ldrbeq	r0, [r1, #-0]
     548:	6a070000 	bvs	1c0550 <startup-0x1fe3fab0>
     54c:	02000000 	andeq	r0, r0, #0
     550:	00661900 	rsbeq	r1, r6, r0, lsl #18
     554:	5d020000 	stcpl	0, cr0, [r2, #-0]
     558:	0003c806 	andeq	ip, r3, r6, lsl #16
     55c:	00005020 	andeq	r5, r0, r0, lsr #32
     560:	989c0100 	ldmls	ip, {r8}
     564:	1c000005 	stcne	0, cr0, [r0], {5}
     568:	00000274 	andeq	r0, r0, r4, ror r2
     56c:	43025f02 	movwmi	r5, #12034	; 0x2f02
     570:	79000001 	stmdbvc	r0, {r0}
     574:	1b000005 	blne	590 <startup-0x1ffffa70>
     578:	004c0b00 	subeq	r0, ip, r0, lsl #22
     57c:	60020000 	andvs	r0, r2, r0
     580:	00059807 	andeq	r9, r5, r7, lsl #16
     584:	60910200 	addsvs	r0, r1, r0, lsl #4
     588:	0005dc0b 	andeq	sp, r5, fp, lsl #24
     58c:	07610200 	strbeq	r0, [r1, -r0, lsl #4]!
     590:	000005a8 	andeq	r0, r0, r8, lsr #11
     594:	00549102 	subseq	r9, r4, r2, lsl #2
     598:	00004d06 	andeq	r4, r0, r6, lsl #26
     59c:	0005a800 	andeq	sl, r5, r0, lsl #16
     5a0:	006a0700 	rsbeq	r0, sl, r0, lsl #14
     5a4:	000c0000 	andeq	r0, ip, r0
     5a8:	00004d06 	andeq	r4, r0, r6, lsl #26
     5ac:	0005b800 	andeq	fp, r5, r0, lsl #16
     5b0:	006a0700 	rsbeq	r0, sl, r0, lsl #14
     5b4:	00090000 	andeq	r0, r9, r0
     5b8:	00005213 	andeq	r5, r0, r3, lsl r2
     5bc:	06550200 	ldrbeq	r0, [r5], -r0, lsl #4
     5c0:	200003c2 	andcs	r0, r0, r2, asr #7
     5c4:	00000006 	andeq	r0, r0, r6
     5c8:	05e79c01 	strbeq	r9, [r7, #3073]!	; 0xc01
     5cc:	78110000 	ldmdavc	r1, {}	; <UNPREDICTABLE>
     5d0:	1e550200 	cdpne	2, 5, cr0, cr5, cr0, {0}
     5d4:	00000143 	andeq	r0, r0, r3, asr #2
     5d8:	79115001 	ldmdbvc	r1, {r0, ip, lr}
     5dc:	25550200 	ldrbcs	r0, [r5, #-512]	; 0xfffffe00
     5e0:	00000143 	andeq	r0, r0, r3, asr #2
     5e4:	13005101 	movwne	r5, #257	; 0x101
     5e8:	000001e5 	andeq	r0, r0, r5, ror #3
     5ec:	bc064f02 	stclt	15, cr4, [r6], {2}
     5f0:	06200003 	strteq	r0, [r0], -r3
     5f4:	01000000 	mrseq	r0, (UNDEF: 0)
     5f8:	0006169c 	muleq	r6, ip, r6
     5fc:	00781100 	rsbseq	r1, r8, r0, lsl #2
     600:	431c4f02 	tstmi	ip, #2, 30
     604:	01000001 	tsteq	r0, r1
     608:	00791150 	rsbseq	r1, r9, r0, asr r1
     60c:	43234f02 			; <UNDEFINED> instruction: 0x43234f02
     610:	01000001 	tsteq	r0, r1
     614:	791e0051 	ldmdbvc	lr, {r0, r4, r6}
     618:	02000003 	andeq	r0, r0, #3
     61c:	03b60649 			; <UNDEFINED> instruction: 0x03b60649
     620:	00062000 	andeq	r2, r6, r0
     624:	9c010000 	stcls	0, cr0, [r1], {-0}
     628:	0002171e 	andeq	r1, r2, lr, lsl r7
     62c:	06430200 	strbeq	r0, [r3], -r0, lsl #4
     630:	200003b0 			; <UNDEFINED> instruction: 0x200003b0
     634:	00000006 	andeq	r0, r0, r6
     638:	c4109c01 	ldrgt	r9, [r0], #-3073	; 0xfffff3ff
     63c:	02000001 	andeq	r0, r0, #1
     640:	032c0637 			; <UNDEFINED> instruction: 0x032c0637
     644:	00842000 	addeq	r2, r4, r0
     648:	9c010000 	stcls	0, cr0, [r1], {-0}
     64c:	000006a7 	andeq	r0, r0, r7, lsr #13
     650:	02007811 	andeq	r7, r0, #1114112	; 0x110000
     654:	01431537 	cmpeq	r3, r7, lsr r5
     658:	91020000 	mrsls	r0, (UNDEF: 2)
     65c:	00791164 	rsbseq	r1, r9, r4, ror #2
     660:	431c3702 	tstmi	ip, #524288	; 0x80000
     664:	02000001 	andeq	r0, r0, #1
     668:	63116091 	tstvs	r1, #145	; 0x91
     66c:	37020068 	strcc	r0, [r2, -r8, rrx]
     670:	00007128 	andeq	r7, r0, r8, lsr #2
     674:	78910200 	ldmvc	r1, {r9}
     678:	00034017 	andeq	r4, r3, r7, lsl r0
     67c:	00006020 	andeq	r6, r0, r0, lsr #32
     680:	00691400 	rsbeq	r1, r9, r0, lsl #8
     684:	430a3902 	movwmi	r3, #43266	; 0xa902
     688:	02000001 	andeq	r0, r0, #1
     68c:	46176c91 			; <UNDEFINED> instruction: 0x46176c91
     690:	4e200003 	cdpmi	0, 2, cr0, cr0, cr3, {0}
     694:	14000000 	strne	r0, [r0], #-0
     698:	3a02006a 	bcc	80848 <startup-0x1ff7f7b8>
     69c:	0001430b 	andeq	r4, r1, fp, lsl #6
     6a0:	68910200 	ldmvs	r1, {r9}
     6a4:	10000000 	andne	r0, r0, r0
     6a8:	0000018e 	andeq	r0, r0, lr, lsl #3
     6ac:	f4061302 	vst2.8	{d1-d4}, [r6], r2
     6b0:	38200001 	stmdacc	r0!, {r0}
     6b4:	01000001 	tsteq	r0, r1
     6b8:	0007079c 	muleq	r7, ip, r7
     6bc:	00781100 	rsbseq	r1, r8, r0, lsl #2
     6c0:	43141302 	tstmi	r4, #134217728	; 0x8000000
     6c4:	03000001 	movweq	r0, #1
     6c8:	117efc91 			; <UNDEFINED> instruction: 0x117efc91
     6cc:	13020079 	movwne	r0, #8313	; 0x2079
     6d0:	0001431b 	andeq	r4, r1, fp, lsl r3
     6d4:	f8910300 			; <UNDEFINED> instruction: 0xf8910300
     6d8:	6863117e 	stmdavs	r3!, {r1, r2, r3, r4, r5, r6, r8, ip}^
     6dc:	22130200 	andscs	r0, r3, #0, 4
     6e0:	0000004d 	andeq	r0, r0, sp, asr #32
     6e4:	7ef79103 	nrmvcs	f1, f3
     6e8:	0000210b 	andeq	r2, r0, fp, lsl #2
     6ec:	0b150200 	bleq	540ef4 <startup-0x1fabf10c>
     6f0:	00000071 	andeq	r0, r0, r1, ror r0
     6f4:	7f849103 	svcvc	0x00849103
     6f8:	0001c41a 	andeq	ip, r1, sl, lsl r4
     6fc:	02340200 	eorseq	r0, r4, #0, 4
     700:	00000143 	andeq	r0, r0, r3, asr #2
     704:	1000001b 	andne	r0, r0, fp, lsl r0
     708:	0000038e 	andeq	r0, r0, lr, lsl #7
     70c:	c8060b02 	stmdagt	r6, {r1, r8, r9, fp}
     710:	2c200001 	stccs	0, cr0, [r0], #-4
     714:	01000000 	mrseq	r0, (UNDEF: 0)
     718:	0007459c 	muleq	r7, ip, r5
     71c:	01b51500 			; <UNDEFINED> instruction: 0x01b51500
     720:	0b020000 	bleq	80728 <startup-0x1ff7f8d8>
     724:	00014314 	andeq	r4, r1, r4, lsl r3
     728:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     72c:	0001d617 	andeq	sp, r1, r7, lsl r6
     730:	00000420 	andeq	r0, r0, r0, lsr #8
     734:	00381a00 	eorseq	r1, r8, r0, lsl #20
     738:	0e020000 	cdpeq	0, 0, cr0, cr2, cr0, {0}
     73c:	00014303 	andeq	r4, r1, r3, lsl #6
     740:	00001b00 	andeq	r1, r0, r0, lsl #22
     744:	008e1000 	addeq	r1, lr, r0
     748:	51010000 	mrspl	r0, (UNDEF: 1)
     74c:	00017c06 	andeq	r7, r1, r6, lsl #24
     750:	00004c20 	andeq	r4, r0, r0, lsr #24
     754:	6b9c0100 	blvs	fe700b5c <_ctype_+0xde6fe297>
     758:	15000007 	strne	r0, [r0, #-7]
     75c:	0000039e 	muleq	r0, lr, r3
     760:	6a1a5101 	bvs	694b6c <startup-0x1f96b494>
     764:	02000000 	andeq	r0, r0, #0
     768:	1e007491 	mcrne	4, 0, r7, cr0, cr1, {4}
     76c:	0000022a 	andeq	r0, r0, sl, lsr #4
     770:	4c064a01 			; <UNDEFINED> instruction: 0x4c064a01
     774:	30200001 	eorcc	r0, r0, r1
     778:	01000000 	mrseq	r0, (UNDEF: 0)
     77c:	01981f9c 			; <UNDEFINED> instruction: 0x01981f9c
     780:	3f010000 	svccc	0x00010000
     784:	00010806 	andeq	r0, r1, r6, lsl #16
     788:	00004420 	andeq	r4, r0, r0, lsr #8
     78c:	109c0100 	addsne	r0, ip, r0, lsl #2
     790:	00000309 	andeq	r0, r0, r9, lsl #6
     794:	e8063901 	stmda	r6, {r0, r8, fp, ip, sp}
     798:	20200000 	eorcs	r0, r0, r0
     79c:	01000000 	mrseq	r0, (UNDEF: 0)
     7a0:	0007da9c 	muleq	r7, ip, sl
     7a4:	00f41d00 	rscseq	r1, r4, r0, lsl #26
     7a8:	00042000 	andeq	r2, r4, r0
     7ac:	07c10000 	strbeq	r0, [r1, r0]
     7b0:	2a1a0000 	bcs	6807b8 <startup-0x1f97f848>
     7b4:	01000002 	tsteq	r0, r2
     7b8:	0143143b 	cmpeq	r3, fp, lsr r4
     7bc:	001b0000 	andseq	r0, fp, r0
     7c0:	00fa1700 	rscseq	r1, sl, r0, lsl #14
     7c4:	00042000 	andeq	r2, r4, r0
     7c8:	981a0000 	ldmdals	sl, {}	; <UNPREDICTABLE>
     7cc:	01000001 	tsteq	r0, r1
     7d0:	0143073c 	cmpeq	r3, ip, lsr r7
     7d4:	001b0000 	andseq	r0, fp, r0
     7d8:	001e0000 	andseq	r0, lr, r0
     7dc:	01000000 	mrseq	r0, (UNDEF: 0)
     7e0:	00b80631 	adcseq	r0, r8, r1, lsr r6
     7e4:	00302000 	eorseq	r2, r0, r0
     7e8:	9c010000 	stcls	0, cr0, [r1], {-0}
     7ec:	00020a12 	andeq	r0, r2, r2, lsl sl
     7f0:	062b0100 	strteq	r0, [fp], -r0, lsl #2
     7f4:	200000a0 	andcs	r0, r0, r0, lsr #1
     7f8:	00000018 	andeq	r0, r0, r8, lsl r0
     7fc:	43129c01 	tstmi	r2, #256	; 0x100
     800:	01000000 	mrseq	r0, (UNDEF: 0)
     804:	00800625 	addeq	r0, r0, r5, lsr #12
     808:	00202000 	eoreq	r2, r0, r0
     80c:	9c010000 	stcls	0, cr0, [r1], {-0}
     810:	0003c120 	andeq	ip, r3, r0, lsr #2
     814:	051f0100 	ldreq	r0, [pc, #-256]	; 71c <startup-0x1ffff8e4>
     818:	00000143 	andeq	r0, r0, r3, asr #2
     81c:	2000005c 	andcs	r0, r0, ip, asr r0
     820:	00000024 	andeq	r0, r0, r4, lsr #32
     824:	58129c01 	ldmdapl	r2, {r0, sl, fp, ip, pc}
     828:	01000002 	tsteq	r0, r2
     82c:	00140616 	andseq	r0, r4, r6, lsl r6
     830:	00482000 	subeq	r2, r8, r0
     834:	9c010000 	stcls	0, cr0, [r1], {-0}
     838:	00073d00 	andeq	r3, r7, r0, lsl #26
     83c:	3a000400 	bcc	1844 <startup-0x1fffe7bc>
     840:	04000002 	streq	r0, [r0], #-2
     844:	00028d01 	andeq	r8, r2, r1, lsl #26
     848:	05320c00 	ldreq	r0, [r2, #-3072]!	; 0xfffff400
     84c:	01430000 	mrseq	r0, (UNDEF: 67)
     850:	08800000 	stmeq	r0, {}	; <UNPREDICTABLE>
     854:	0b182000 	bleq	60885c <startup-0x1f9f77a4>
     858:	04170000 	ldreq	r0, [r7], #-0
     85c:	38020000 	stmdacc	r2, {}	; <UNPREDICTABLE>
     860:	18000004 	stmdane	r0, {r2}
     864:	7d080202 	sfmvc	f0, 4, [r8, #-8]
     868:	03000000 	movweq	r0, #0
     86c:	04020078 	streq	r0, [r2], #-120	; 0xffffff88
     870:	00007d06 	andeq	r7, r0, r6, lsl #26
     874:	79030000 	stmdbvc	r3, {}	; <UNPREDICTABLE>
     878:	08040200 	stmdaeq	r4, {r9}
     87c:	0000007d 	andeq	r0, r0, sp, ror r0
     880:	05990404 	ldreq	r0, [r9, #1028]	; 0x404
     884:	04020000 	streq	r0, [r2], #-0
     888:	00007d0b 	andeq	r7, r0, fp, lsl #26
     88c:	18040800 	stmdane	r4, {fp}
     890:	02000005 	andeq	r0, r0, #5
     894:	007d0605 	rsbseq	r0, sp, r5, lsl #12
     898:	040c0000 	streq	r0, [ip], #-0
     89c:	0000041e 	andeq	r0, r0, lr, lsl r4
     8a0:	7d0f0502 	cfstr32vc	mvfx0, [pc, #-8]	; 8a0 <startup-0x1ffff760>
     8a4:	10000000 	andne	r0, r0, r0
     8a8:	00044e04 	andeq	r4, r4, r4, lsl #28
     8ac:	15050200 	strne	r0, [r5, #-512]	; 0xfffffe00
     8b0:	0000007d 	andeq	r0, r0, sp, ror r0
     8b4:	04050014 	streq	r0, [r5], #-20	; 0xffffffec
     8b8:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
     8bc:	04f10600 	ldrbteq	r0, [r1], #1536	; 0x600
     8c0:	06020000 	streq	r0, [r2], -r0
     8c4:	00002502 	andeq	r2, r0, r2, lsl #10
     8c8:	34030500 	strcc	r0, [r3], #-1280	; 0xfffffb00
     8cc:	02200023 	eoreq	r0, r0, #35	; 0x23
     8d0:	000004ad 	andeq	r0, r0, sp, lsr #9
     8d4:	0807020c 	stmdaeq	r7, {r2, r3, r9}
     8d8:	000000c7 	andeq	r0, r0, r7, asr #1
     8dc:	02007803 	andeq	r7, r0, #196608	; 0x30000
     8e0:	007d0609 	rsbseq	r0, sp, r9, lsl #12
     8e4:	03000000 	movweq	r0, #0
     8e8:	09020079 	stmdbeq	r2, {r0, r3, r4, r5, r6}
     8ec:	00007d08 	andeq	r7, r0, r8, lsl #26
     8f0:	5c040400 	cfstrspl	mvf0, [r4], {-0}
     8f4:	02000004 	andeq	r0, r0, #4
     8f8:	007d060a 	rsbseq	r0, sp, sl, lsl #12
     8fc:	00080000 	andeq	r0, r8, r0
     900:	00007d07 	andeq	r7, r0, r7, lsl #26
     904:	0000d600 	andeq	sp, r0, r0, lsl #12
     908:	00250800 	eoreq	r0, r5, r0, lsl #16
     90c:	06000000 	streq	r0, [r0], -r0
     910:	000005f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     914:	e8072b02 	stmda	r7, {r1, r8, r9, fp, sp}
     918:	05000000 	streq	r0, [r0, #-0]
     91c:	00235403 	eoreq	r5, r3, r3, lsl #8
     920:	c7040920 	strgt	r0, [r4, -r0, lsr #18]
     924:	06000000 	streq	r0, [r0], -r0
     928:	000004d9 	ldrdeq	r0, [r0], -r9
     92c:	e8072c02 	stmda	r7, {r1, sl, fp, sp}
     930:	05000000 	streq	r0, [r0, #-0]
     934:	001ca003 	andseq	sl, ip, r3
     938:	00250a20 	eoreq	r0, r5, r0, lsr #20
     93c:	01160000 	tsteq	r6, r0
     940:	160b0000 	strne	r0, [fp], -r0
     944:	0d000001 	stceq	0, cr0, [r0, #-4]
     948:	0001160b 	andeq	r1, r1, fp, lsl #12
     94c:	0c000400 	cfstrseq	mvf0, [r0], {-0}
     950:	02430704 	subeq	r0, r3, #4, 14	; 0x100000
     954:	fa060000 	blx	18095c <startup-0x1fe7f6a4>
     958:	02000005 	andeq	r0, r0, #5
     95c:	0100122d 	tsteq	r0, sp, lsr #4
     960:	03050000 	movweq	r0, #20480	; 0x5000
     964:	20001ca4 	andcs	r1, r0, r4, lsr #25
     968:	00047706 	andeq	r7, r4, r6, lsl #14
     96c:	052e0200 	streq	r0, [lr, #-512]!	; 0xfffffe00
     970:	0000007d 	andeq	r0, r0, sp, ror r0
     974:	23500305 	cmpcs	r0, #335544320	; 0x14000000
     978:	7d062000 	stcvc	0, cr2, [r6, #-0]
     97c:	02000004 	andeq	r0, r0, #4
     980:	007d052f 	rsbseq	r0, sp, pc, lsr #10
     984:	03050000 	movweq	r0, #20480	; 0x5000
     988:	20001c98 	mulcs	r0, r8, ip
     98c:	00065806 	andeq	r5, r6, r6, lsl #16
     990:	05300200 	ldreq	r0, [r0, #-512]!	; 0xfffffe00
     994:	0000007d 	andeq	r0, r0, sp, ror r0
     998:	1c9c0305 	ldcne	3, cr0, [ip], {5}
     99c:	b4062000 	strlt	r2, [r6], #-0
     9a0:	02000004 	andeq	r0, r0, #4
     9a4:	007d0531 	rsbseq	r0, sp, r1, lsr r5
     9a8:	03050000 	movweq	r0, #20480	; 0x5000
     9ac:	2000234c 	andcs	r2, r0, ip, asr #6
     9b0:	0004e306 	andeq	lr, r4, r6, lsl #6
     9b4:	05320200 	ldreq	r0, [r2, #-512]!	; 0xfffffe00
     9b8:	0000007d 	andeq	r0, r0, sp, ror r0
     9bc:	23580305 	cmpcs	r8, #335544320	; 0x14000000
     9c0:	fa0d2000 	blx	3489c8 <startup-0x1fcb7638>
     9c4:	01000004 	tsteq	r0, r4
     9c8:	12dc06e3 	sbcsne	r0, ip, #238026752	; 0xe300000
     9cc:	00bc2000 	adcseq	r2, ip, r0
     9d0:	9c010000 	stcls	0, cr0, [r1], {-0}
     9d4:	000001cb 	andeq	r0, r0, fp, asr #3
     9d8:	0004c40e 	andeq	ip, r4, lr, lsl #8
     9dc:	17e30100 	strbne	r0, [r3, r0, lsl #2]!
     9e0:	000001cb 	andeq	r0, r0, fp, asr #3
     9e4:	0e749102 	expeqs	f1, f2
     9e8:	000004d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     9ec:	cb2ae301 	blgt	ab95f8 <startup-0x1f546a08>
     9f0:	02000001 	andeq	r0, r0, #1
     9f4:	700f7091 	mulvc	pc, r1, r0	; <UNPREDICTABLE>
     9f8:	44e30100 	strbtmi	r0, [r3], #256	; 0x100
     9fc:	000001d1 	ldrdeq	r0, [r0], -r1
     a00:	006c9102 	rsbeq	r9, ip, r2, lsl #2
     a04:	007d0409 	rsbseq	r0, sp, r9, lsl #8
     a08:	04090000 	streq	r0, [r9], #-0
     a0c:	00000096 	muleq	r0, r6, r0
     a10:	00027a10 	andeq	r7, r2, r0, lsl sl
     a14:	06dd0100 	ldrbeq	r0, [sp], r0, lsl #2
     a18:	200012b6 			; <UNDEFINED> instruction: 0x200012b6
     a1c:	00000026 	andeq	r0, r0, r6, lsr #32
     a20:	02089c01 	andeq	r9, r8, #256	; 0x100
     a24:	780f0000 	stmdavc	pc, {}	; <UNPREDICTABLE>
     a28:	11dd0100 	bicsne	r0, sp, r0, lsl #2
     a2c:	0000007d 	andeq	r0, r0, sp, ror r0
     a30:	0f749102 	svceq	0x00749102
     a34:	dd010079 	stcle	0, cr0, [r1, #-484]	; 0xfffffe1c
     a38:	00007d18 	andeq	r7, r0, r8, lsl sp
     a3c:	70910200 	addsvc	r0, r1, r0, lsl #4
     a40:	04421000 	strbeq	r1, [r2], #-0
     a44:	cc010000 	stcgt	0, cr0, [r1], {-0}
     a48:	0011b806 	andseq	fp, r1, r6, lsl #16
     a4c:	0000fe20 	andeq	pc, r0, r0, lsr #28
     a50:	5a9c0100 	bpl	fe700e58 <_ctype_+0xde6fe593>
     a54:	0f000002 	svceq	0x00000002
     a58:	cc010062 	stcgt	0, cr0, [r1], {98}	; 0x62
     a5c:	00026a23 	andeq	r6, r2, r3, lsr #20
     a60:	6c910200 	lfmvs	f0, 4, [r1], {0}
     a64:	0011c011 	andseq	ip, r1, r1, lsl r0
     a68:	0000ec20 	andeq	lr, r0, r0, lsr #24
     a6c:	00781200 	rsbseq	r1, r8, r0, lsl #4
     a70:	7d0ace01 	stcvc	14, cr12, [sl, #-4]
     a74:	02000000 	andeq	r0, r0, #0
     a78:	c6117491 			; <UNDEFINED> instruction: 0xc6117491
     a7c:	da200011 	ble	800ac8 <startup-0x1f7ff538>
     a80:	12000000 	andne	r0, r0, #0
     a84:	d0010079 	andle	r0, r1, r9, ror r0
     a88:	00007d0b 	andeq	r7, r0, fp, lsl #26
     a8c:	70910200 	addsvc	r0, r1, r0, lsl #4
     a90:	0a000000 	beq	a98 <startup-0x1ffff568>
     a94:	00000025 	andeq	r0, r0, r5, lsr #32
     a98:	0000026a 	andeq	r0, r0, sl, ror #4
     a9c:	0001160b 	andeq	r1, r1, fp, lsl #12
     aa0:	09000400 	stmdbeq	r0, {sl}
     aa4:	00025a04 	andeq	r5, r2, r4, lsl #20
     aa8:	05af1300 	streq	r1, [pc, #768]!	; db0 <startup-0x1ffff250>
     aac:	b2010000 	andlt	r0, r1, #0
     ab0:	0001cb07 	andeq	ip, r1, r7, lsl #22
     ab4:	00113800 	andseq	r3, r1, r0, lsl #16
     ab8:	00008020 	andeq	r8, r0, r0, lsr #32
     abc:	ba9c0100 	blt	fe700ec4 <_ctype_+0xde6fe5ff>
     ac0:	0f000002 	svceq	0x00000002
     ac4:	01006863 	tsteq	r0, r3, ror #16
     ac8:	02ba1bb2 	adcseq	r1, sl, #182272	; 0x2c800
     acc:	91020000 	mrsls	r0, (UNDEF: 2)
     ad0:	05da1477 	ldrbeq	r1, [sl, #1143]	; 0x477
     ad4:	00030000 	andeq	r0, r3, r0
     ad8:	0000007d 	andeq	r0, r0, sp, ror r0
     adc:	000002a9 	andeq	r0, r0, r9, lsr #5
     ae0:	72120015 	andsvc	r0, r2, #21
     ae4:	0db50100 	ldfeqs	f0, [r5]
     ae8:	000002c1 	andeq	r0, r0, r1, asr #5
     aec:	1c880305 	stcne	3, cr0, [r8], {5}
     af0:	0c002000 	stceq	0, cr2, [r0], {-0}
     af4:	01270801 			; <UNDEFINED> instruction: 0x01270801
     af8:	7d0a0000 	stcvc	0, cr0, [sl, #-0]
     afc:	d1000000 	mrsle	r0, (UNDEF: 0)
     b00:	0b000002 	bleq	b10 <startup-0x1ffff4f0>
     b04:	00000116 	andeq	r0, r0, r6, lsl r1
     b08:	830d0001 	movwhi	r0, #53249	; 0xd001
     b0c:	01000004 	tsteq	r0, r4
     b10:	1098069e 	umullsne	r0, r8, lr, r6
     b14:	00a02000 	adceq	r2, r0, r0
     b18:	9c010000 	stcls	0, cr0, [r1], {-0}
     b1c:	0000030e 	andeq	r0, r0, lr, lsl #6
     b20:	0100700f 	tsteq	r0, pc
     b24:	00251f9e 	mlaeq	r5, lr, pc, r1	; <UNPREDICTABLE>
     b28:	91020000 	mrsls	r0, (UNDEF: 2)
     b2c:	10c61170 	sbcne	r1, r6, r0, ror r1
     b30:	00222000 	eoreq	r2, r2, r0
     b34:	63120000 	tstvs	r2, #0
     b38:	01007368 	tsteq	r0, r8, ror #6
     b3c:	030e08a3 	movweq	r0, #59555	; 0xe8a3
     b40:	91020000 	mrsls	r0, (UNDEF: 2)
     b44:	0a000054 	beq	c9c <startup-0x1ffff364>
     b48:	000002ba 			; <UNDEFINED> instruction: 0x000002ba
     b4c:	0000031e 	andeq	r0, r0, lr, lsl r3
     b50:	0001160b 	andeq	r1, r1, fp, lsl #12
     b54:	16000900 	strne	r0, [r0], -r0, lsl #18
     b58:	0000058a 	andeq	r0, r0, sl, lsl #11
     b5c:	7d059501 	cfstr32vc	mvfx9, [r5, #-4]
     b60:	64000000 	strvs	r0, [r0], #-0
     b64:	34200010 	strtcc	r0, [r0], #-16
     b68:	01000000 	mrseq	r0, (UNDEF: 0)
     b6c:	0003539c 	muleq	r3, ip, r3
     b70:	00780f00 	rsbseq	r0, r8, r0, lsl #30
     b74:	7d129501 	cfldr32vc	mvfx9, [r2, #-4]
     b78:	02000000 	andeq	r0, r0, #0
     b7c:	790f7491 	stmdbvc	pc, {r0, r4, r7, sl, ip, sp, lr}	; <UNPREDICTABLE>
     b80:	19950100 	ldmibne	r5, {r8}
     b84:	0000007d 	andeq	r0, r0, sp, ror r0
     b88:	00709102 	rsbseq	r9, r0, r2, lsl #2
     b8c:	0004a913 	andeq	sl, r4, r3, lsl r9
     b90:	0f810100 	svceq	0x00810100
     b94:	00000096 	muleq	r0, r6, r0
     b98:	20000f94 	mulcs	r0, r4, pc	; <UNPREDICTABLE>
     b9c:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     ba0:	03b79c01 			; <UNDEFINED> instruction: 0x03b79c01
     ba4:	700f0000 	andvc	r0, pc, r0
     ba8:	28810100 	stmcs	r1, {r8}
     bac:	00000096 	muleq	r0, r6, r0
     bb0:	0e509102 	logeqs	f1, f2
     bb4:	000004bd 			; <UNDEFINED> instruction: 0x000004bd
     bb8:	ba308101 	blt	c20fc4 <startup-0x1f3df03c>
     bbc:	02000002 	andeq	r0, r0, #2
     bc0:	20170091 	mulscs	r7, r1, r0
     bc4:	01000005 	tsteq	r0, r5
     bc8:	01cb0785 	biceq	r0, fp, r5, lsl #15
     bcc:	91020000 	mrsls	r0, (UNDEF: 2)
     bd0:	0526176c 	streq	r1, [r6, #-1900]!	; 0xfffff894
     bd4:	89010000 	stmdbhi	r1, {}	; <UNPREDICTABLE>
     bd8:	00007d06 	andeq	r7, r0, r6, lsl #26
     bdc:	68910200 	ldmvs	r1, {r9}
     be0:	00052c17 	andeq	r2, r5, r7, lsl ip
     be4:	068a0100 	streq	r0, [sl], r0, lsl #2
     be8:	0000007d 	andeq	r0, r0, sp, ror r0
     bec:	00649102 	rsbeq	r9, r4, r2, lsl #2
     bf0:	00045516 	andeq	r5, r4, r6, lsl r5
     bf4:	057b0100 	ldrbeq	r0, [fp, #-256]!	; 0xffffff00
     bf8:	0000007d 	andeq	r0, r0, sp, ror r0
     bfc:	20000f6e 	andcs	r0, r0, lr, ror #30
     c00:	00000026 	andeq	r0, r0, r6, lsr #32
     c04:	03e19c01 	mvneq	r9, #256	; 0x100
     c08:	700f0000 	andvc	r0, pc, r0
     c0c:	0100736f 	tsteq	r0, pc, ror #6
     c10:	00251d7b 	eoreq	r1, r5, fp, ror sp
     c14:	91020000 	mrsls	r0, (UNDEF: 2)
     c18:	a2160070 	andsge	r0, r6, #112	; 0x70
     c1c:	01000004 	tsteq	r0, r4
     c20:	007d0577 	rsbseq	r0, sp, r7, ror r5
     c24:	0f480000 	svceq	0x00480000
     c28:	00262000 	eoreq	r2, r6, r0
     c2c:	9c010000 	stcls	0, cr0, [r1], {-0}
     c30:	0000040b 	andeq	r0, r0, fp, lsl #8
     c34:	736f700f 	cmnvc	pc, #15
     c38:	1d770100 	ldfnee	f0, [r7, #-0]
     c3c:	00000025 	andeq	r0, r0, r5, lsr #32
     c40:	00709102 	rsbseq	r9, r0, r2, lsl #2
     c44:	0005be13 	andeq	fp, r5, r3, lsl lr
     c48:	056d0100 	strbeq	r0, [sp, #-256]!	; 0xffffff00
     c4c:	0000007d 	andeq	r0, r0, sp, ror r0
     c50:	20000e94 	mulcs	r0, r4, lr
     c54:	000000b4 	strheq	r0, [r0], -r4
     c58:	048c9c01 	streq	r9, [ip], #3073	; 0xc01
     c5c:	780f0000 	stmdavc	pc, {}	; <UNPREDICTABLE>
     c60:	196d0100 	stmdbne	sp!, {r8}^
     c64:	0000007d 	andeq	r0, r0, sp, ror r0
     c68:	0f5c9102 	svceq	0x005c9102
     c6c:	6d010079 	stcvs	0, cr0, [r1, #-484]	; 0xfffffe1c
     c70:	00007d20 	andeq	r7, r0, r0, lsr #26
     c74:	58910200 	ldmpl	r1, {r9}
     c78:	0006070e 	andeq	r0, r6, lr, lsl #14
     c7c:	296d0100 	stmdbcs	sp!, {r8}^
     c80:	000000e8 	andeq	r0, r0, r8, ror #1
     c84:	17549102 	ldrbne	r9, [r4, -r2, lsl #2]
     c88:	00000593 	muleq	r0, r3, r5
     c8c:	7d066f01 	stcvc	15, cr6, [r6, #-4]
     c90:	02000000 	andeq	r0, r0, #0
     c94:	a4116c91 	ldrge	r6, [r1], #-3217	; 0xfffff36f
     c98:	9620000e 	strtls	r0, [r0], -lr
     c9c:	12000000 	andne	r0, r0, #0
     ca0:	70010069 	andvc	r0, r1, r9, rrx
     ca4:	00007d0a 	andeq	r7, r0, sl, lsl #26
     ca8:	68910200 	ldmvs	r1, {r9}
     cac:	000eac11 	andeq	sl, lr, r1, lsl ip
     cb0:	00008220 	andeq	r8, r0, r0, lsr #4
     cb4:	006a1200 	rsbeq	r1, sl, r0, lsl #4
     cb8:	7d0b7101 	stfvcs	f7, [fp, #-4]
     cbc:	02000000 	andeq	r0, r0, #0
     cc0:	00006491 	muleq	r0, r1, r4
     cc4:	05a70d00 	streq	r0, [r7, #3328]!	; 0xd00
     cc8:	4c010000 	stcmi	0, cr0, [r1], {-0}
     ccc:	000c3806 	andeq	r3, ip, r6, lsl #16
     cd0:	00025c20 	andeq	r5, r2, r0, lsr #24
     cd4:	5a9c0100 	bpl	fe7010dc <_ctype_+0xde6fe817>
     cd8:	0f000005 	svceq	0x00000005
     cdc:	4c010078 	stcmi	0, cr0, [r1], {120}	; 0x78
     ce0:	00007d12 	andeq	r7, r0, r2, lsl sp
     ce4:	54910200 	ldrpl	r0, [r1], #512	; 0x200
     ce8:	0100790f 	tsteq	r0, pc, lsl #18
     cec:	007d194c 	rsbseq	r1, sp, ip, asr #18
     cf0:	91020000 	mrsls	r0, (UNDEF: 2)
     cf4:	06001750 			; <UNDEFINED> instruction: 0x06001750
     cf8:	5b010000 	blpl	40d00 <startup-0x1ffbf300>
     cfc:	00007d06 	andeq	r7, r0, r6, lsl #26
     d00:	5c910200 	lfmpl	f0, 4, [r1], {0}
     d04:	0005be18 	andeq	fp, r5, r8, lsl lr
     d08:	202c0100 	eorcs	r0, ip, r0, lsl #2
     d0c:	0000007d 	andeq	r0, r0, sp, ror r0
     d10:	000004dd 	ldrdeq	r0, [r0], -sp
     d14:	68190015 	ldmdavs	r9, {r0, r2, r4}
     d18:	d220000c 	eorle	r0, r0, #12
     d1c:	2b000000 	blcs	d24 <startup-0x1ffff2dc>
     d20:	18000005 	stmdane	r0, {r0, r2}
     d24:	000005be 			; <UNDEFINED> instruction: 0x000005be
     d28:	7d202c01 	stcvc	12, cr2, [r0, #-4]!
     d2c:	fc000000 	stc2	0, cr0, [r0], {-0}
     d30:	15000004 	strne	r0, [r0, #-4]
     d34:	0cb01100 	ldfeqs	f1, [r0]
     d38:	00882000 	addeq	r2, r8, r0
     d3c:	69120000 	ldmdbvs	r2, {}	; <UNPREDICTABLE>
     d40:	0b530100 	bleq	14c1148 <startup-0x1eb3eeb8>
     d44:	0000007d 	andeq	r0, r0, sp, ror r0
     d48:	116c9102 	cmnne	ip, r2, lsl #2
     d4c:	20000cb8 			; <UNDEFINED> instruction: 0x20000cb8
     d50:	00000074 	andeq	r0, r0, r4, ror r0
     d54:	01006a12 	tsteq	r0, r2, lsl sl
     d58:	007d0c54 	rsbseq	r0, sp, r4, asr ip
     d5c:	91020000 	mrsls	r0, (UNDEF: 2)
     d60:	00000068 	andeq	r0, r0, r8, rrx
     d64:	000dd611 	andeq	sp, sp, r1, lsl r6
     d68:	0000aa20 	andeq	sl, r0, r0, lsr #20
     d6c:	00691200 	rsbeq	r1, r9, r0, lsl #4
     d70:	7d0b6401 	cfstrsvc	mvf6, [fp, #-4]
     d74:	02000000 	andeq	r0, r0, #0
     d78:	de116491 	cfcmpsle	r6, mvf1, mvf1
     d7c:	9420000d 	strtls	r0, [r0], #-13
     d80:	12000000 	andne	r0, r0, #0
     d84:	6501006a 	strvs	r0, [r1, #-106]	; 0xffffff96
     d88:	00007d0c 	andeq	r7, r0, ip, lsl #26
     d8c:	60910200 	addsvs	r0, r1, r0, lsl #4
     d90:	1a000000 	bne	d98 <startup-0x1ffff268>
     d94:	00000505 	andeq	r0, r0, r5, lsl #10
     d98:	20064601 	andcs	r4, r6, r1, lsl #12
     d9c:	1820000c 	stmdane	r0!, {r2, r3}
     da0:	01000000 	mrseq	r0, (UNDEF: 0)
     da4:	050e0d9c 	streq	r0, [lr, #-3484]	; 0xfffff264
     da8:	3d010000 	stccc	0, cr0, [r1, #-0]
     dac:	000ae406 	andeq	lr, sl, r6, lsl #8
     db0:	00013c20 	andeq	r3, r1, r0, lsr #24
     db4:	909c0100 	addsls	r0, ip, r0, lsl #2
     db8:	0f000005 	svceq	0x00000005
     dbc:	3d010070 	stccc	0, cr0, [r1, #-448]	; 0xfffffe40
     dc0:	0000961e 	andeq	r9, r0, lr, lsl r6
     dc4:	64910200 	ldrvs	r0, [r1], #512	; 0x200
     dc8:	042e1b00 	strteq	r1, [lr], #-2816	; 0xfffff500
     dcc:	33010000 	movwcc	r0, #4096	; 0x1000
     dd0:	000a6206 	andeq	r6, sl, r6, lsl #4
     dd4:	00008220 	andeq	r8, r0, r0, lsr #4
     dd8:	d59c0100 	ldrle	r0, [ip, #256]	; 0x100
     ddc:	11000005 	tstne	r0, r5
     de0:	20000a68 	andcs	r0, r0, r8, ror #20
     de4:	00000064 	andeq	r0, r0, r4, rrx
     de8:	01006912 	tsteq	r0, r2, lsl r9
     dec:	007d0a35 	rsbseq	r0, sp, r5, lsr sl
     df0:	91020000 	mrsls	r0, (UNDEF: 2)
     df4:	0a6e1174 	beq	1b853cc <startup-0x1e47ac34>
     df8:	00522000 	subseq	r2, r2, r0
     dfc:	6a120000 	bvs	480e04 <startup-0x1fb7f1fc>
     e00:	0b360100 	bleq	d81208 <startup-0x1f27edf8>
     e04:	0000007d 	andeq	r0, r0, sp, ror r0
     e08:	00709102 	rsbseq	r9, r0, r2, lsl #2
     e0c:	690d0000 	stmdbvs	sp, {}	; <UNPREDICTABLE>
     e10:	01000004 	tsteq	r0, r4
     e14:	0a30062e 	beq	c026d4 <startup-0x1f3fd92c>
     e18:	00322000 	eorseq	r2, r2, r0
     e1c:	9c010000 	stcls	0, cr0, [r1], {-0}
     e20:	000005f9 	strdeq	r0, [r0], -r9
     e24:	0100700f 	tsteq	r0, pc
     e28:	0096222e 	addseq	r2, r6, lr, lsr #4
     e2c:	91020000 	mrsls	r0, (UNDEF: 2)
     e30:	230d006c 	movwcs	r0, #53356	; 0xd06c
     e34:	01000004 	tsteq	r0, r4
     e38:	091c0619 	ldmdbeq	ip, {r0, r3, r4, r9, sl}
     e3c:	01142000 	tsteq	r4, r0
     e40:	9c010000 	stcls	0, cr0, [r1], {-0}
     e44:	000006e1 	andeq	r0, r0, r1, ror #13
     e48:	0100700f 	tsteq	r0, pc
     e4c:	00961f19 	addseq	r1, r6, r9, lsl pc
     e50:	91020000 	mrsls	r0, (UNDEF: 2)
     e54:	05ce174c 	strbeq	r1, [lr, #1868]	; 0x74c
     e58:	1c010000 	stcne	0, cr0, [r1], {-0}
     e5c:	00007d06 	andeq	r7, r0, r6, lsl #26
     e60:	6c910200 	lfmvs	f0, 4, [r1], {0}
     e64:	00025818 	andeq	r5, r2, r8, lsl r8
     e68:	021d0100 	andseq	r0, sp, #0, 2
     e6c:	0000007d 	andeq	r0, r0, sp, ror r0
     e70:	0000063d 	andeq	r0, r0, sp, lsr r6
     e74:	43180015 	tstmi	r8, #21
     e78:	01000000 	mrseq	r0, (UNDEF: 0)
     e7c:	007d0229 	rsbseq	r0, sp, r9, lsr #4
     e80:	064f0000 	strbeq	r0, [pc], -r0
     e84:	00150000 	andseq	r0, r5, r0
     e88:	00093419 	andeq	r3, r9, r9, lsl r4
     e8c:	00008c20 	andeq	r8, r0, r0, lsr #24
     e90:	00069a00 	andeq	r9, r6, r0, lsl #20
     e94:	73741200 	cmnvc	r4, #0, 4
     e98:	20010074 	andcs	r0, r1, r4, ror r0
     e9c:	00007d07 	andeq	r7, r0, r7, lsl #26
     ea0:	60910200 	addsvs	r0, r1, r0, lsl #4
     ea4:	0003c118 	andeq	ip, r3, r8, lsl r1
     ea8:	0d200100 	stfeqs	f0, [r0, #-0]
     eac:	0000007d 	andeq	r0, r0, sp, ror r0
     eb0:	0000067d 	andeq	r0, r0, sp, ror r6
     eb4:	72120015 	andsvc	r0, r2, #21
     eb8:	21010078 	tstcs	r1, r8, ror r0
     ebc:	00007d07 	andeq	r7, r0, r7, lsl #26
     ec0:	5c910200 	lfmpl	f0, 4, [r1], {0}
     ec4:	00797212 	rsbseq	r7, r9, r2, lsl r2
     ec8:	7d072201 	sfmvc	f2, 4, [r7, #-4]
     ecc:	02000000 	andeq	r0, r0, #0
     ed0:	11005891 			; <UNDEFINED> instruction: 0x11005891
     ed4:	200009ca 	andcs	r0, r0, sl, asr #19
     ed8:	00000054 	andeq	r0, r0, r4, asr r0
     edc:	01006912 	tsteq	r0, r2, lsl r9
     ee0:	007d0a2a 	rsbseq	r0, sp, sl, lsr #20
     ee4:	91020000 	mrsls	r0, (UNDEF: 2)
     ee8:	09d01168 	ldmibeq	r0, {r3, r5, r6, r8, ip}^
     eec:	00422000 	subeq	r2, r2, r0
     ef0:	6a120000 	bvs	480ef8 <startup-0x1fb7f108>
     ef4:	0b2b0100 	bleq	ac12fc <startup-0x1f53ed04>
     ef8:	0000007d 	andeq	r0, r0, sp, ror r0
     efc:	11649102 	cmnne	r4, r2, lsl #2
     f00:	200009d6 	ldrdcs	r0, [r0], -r6
     f04:	00000030 	andeq	r0, r0, r0, lsr r0
     f08:	0005be1c 	andeq	fp, r5, ip, lsl lr
     f0c:	202c0100 	eorcs	r0, ip, r0, lsl #2
     f10:	0000007d 	andeq	r0, r0, sp, ror r0
     f14:	00000015 	andeq	r0, r0, r5, lsl r0
     f18:	8b1d0000 	blhi	740f20 <startup-0x1f8bf0e0>
     f1c:	01000004 	tsteq	r0, r4
     f20:	0880060c 	stmeq	r0, {r2, r3, r9, sl}
     f24:	009c2000 	addseq	r2, ip, r0
     f28:	9c010000 	stcls	0, cr0, [r1], {-0}
     f2c:	00049417 	andeq	r9, r4, r7, lsl r4
     f30:	060e0100 	streq	r0, [lr], -r0, lsl #2
     f34:	0000007d 	andeq	r0, r0, sp, ror r0
     f38:	17689102 	strbne	r9, [r8, -r2, lsl #2]!
     f3c:	000005e2 	andeq	r0, r0, r2, ror #11
     f40:	7d060f01 	stcvc	15, cr0, [r6, #-4]
     f44:	02000000 	andeq	r0, r0, #0
     f48:	8e117491 	cfcmpshi	r7, mvf1, mvf1
     f4c:	72200008 	eorvc	r0, r0, #8
     f50:	12000000 	andne	r0, r0, #0
     f54:	10010078 	andne	r0, r1, r8, ror r0
     f58:	00007d0a 	andeq	r7, r0, sl, lsl #26
     f5c:	70910200 	addsvc	r0, r1, r0, lsl #4
     f60:	00089411 	andeq	r9, r8, r1, lsl r4
     f64:	00006020 	andeq	r6, r0, r0, lsr #32
     f68:	00791200 	rsbseq	r1, r9, r0, lsl #4
     f6c:	7d0b1101 	stfvcs	f1, [fp, #-4]
     f70:	02000000 	andeq	r0, r0, #0
     f74:	00006c91 	muleq	r0, r1, ip
     f78:	06360000 	ldrteq	r0, [r6], -r0
     f7c:	00040000 	andeq	r0, r4, r0
     f80:	0000042d 	andeq	r0, r0, sp, lsr #8
     f84:	028d0104 	addeq	r0, sp, #4, 2
     f88:	300c0000 	andcc	r0, ip, r0
     f8c:	43000007 	movwmi	r0, #7
     f90:	18000001 	stmdane	r0, {r0}
     f94:	00000000 	andeq	r0, r0, r0
     f98:	4b000000 	blmi	fa0 <startup-0x1ffff060>
     f9c:	02000009 	andeq	r0, r0, #9
     fa0:	00000438 	andeq	r0, r0, r8, lsr r4
     fa4:	08020418 	stmdaeq	r2, {r3, r4, sl}
     fa8:	0000007d 	andeq	r0, r0, sp, ror r0
     fac:	04007803 	streq	r7, [r0], #-2051	; 0xfffff7fd
     fb0:	007d0604 	rsbseq	r0, sp, r4, lsl #12
     fb4:	03000000 	movweq	r0, #0
     fb8:	04040079 	streq	r0, [r4], #-121	; 0xffffff87
     fbc:	00007d08 	andeq	r7, r0, r8, lsl #26
     fc0:	99040400 	stmdbls	r4, {sl}
     fc4:	04000005 	streq	r0, [r0], #-5
     fc8:	007d0b04 	rsbseq	r0, sp, r4, lsl #22
     fcc:	04080000 	streq	r0, [r8], #-0
     fd0:	00000518 	andeq	r0, r0, r8, lsl r5
     fd4:	7d060504 	cfstr32vc	mvfx0, [r6, #-16]
     fd8:	0c000000 	stceq	0, cr0, [r0], {-0}
     fdc:	00041e04 	andeq	r1, r4, r4, lsl #28
     fe0:	0f050400 	svceq	0x00050400
     fe4:	0000007d 	andeq	r0, r0, sp, ror r0
     fe8:	044e0410 	strbeq	r0, [lr], #-1040	; 0xfffffbf0
     fec:	05040000 	streq	r0, [r4, #-0]
     ff0:	00007d15 	andeq	r7, r0, r5, lsl sp
     ff4:	05001400 	streq	r1, [r0, #-1024]	; 0xfffffc00
     ff8:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
     ffc:	7d060074 	stcvc	0, cr0, [r6, #-464]	; 0xfffffe30
    1000:	07000000 	streq	r0, [r0, -r0]
    1004:	000004f1 	strdeq	r0, [r0], -r1
    1008:	25020604 	strcs	r0, [r2, #-1540]	; 0xfffff9fc
    100c:	05000000 	streq	r0, [r0, #-0]
    1010:	00233403 	eoreq	r3, r3, r3, lsl #8
    1014:	04ad0220 	strteq	r0, [sp], #544	; 0x220
    1018:	040c0000 	streq	r0, [ip], #-0
    101c:	00cc0807 	sbceq	r0, ip, r7, lsl #16
    1020:	78030000 	stmdavc	r3, {}	; <UNPREDICTABLE>
    1024:	06090400 	streq	r0, [r9], -r0, lsl #8
    1028:	0000007d 	andeq	r0, r0, sp, ror r0
    102c:	00790300 	rsbseq	r0, r9, r0, lsl #6
    1030:	7d080904 	vstrvc.16	s0, [r8, #-8]	; <UNPREDICTABLE>
    1034:	04000000 	streq	r0, [r0], #-0
    1038:	00045c04 	andeq	r5, r4, r4, lsl #24
    103c:	060a0400 	streq	r0, [sl], -r0, lsl #8
    1040:	0000007d 	andeq	r0, r0, sp, ror r0
    1044:	7d080008 	stcvc	0, cr0, [r8, #-32]	; 0xffffffe0
    1048:	db000000 	blle	1050 <startup-0x1fffefb0>
    104c:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    1050:	00000025 	andeq	r0, r0, r5, lsr #32
    1054:	05f00700 	ldrbeq	r0, [r0, #1792]!	; 0x700
    1058:	2b040000 	blcs	101060 <startup-0x1fefefa0>
    105c:	0000ed07 	andeq	lr, r0, r7, lsl #26
    1060:	54030500 	strpl	r0, [r3], #-1280	; 0xfffffb00
    1064:	0a200023 	beq	8010f8 <startup-0x1f7fef08>
    1068:	0000cc04 	andeq	ip, r0, r4, lsl #24
    106c:	04d90700 	ldrbeq	r0, [r9], #1792	; 0x700
    1070:	2c040000 	stccs	0, cr0, [r4], {-0}
    1074:	0000ed07 	andeq	lr, r0, r7, lsl #26
    1078:	a0030500 	andge	r0, r3, r0, lsl #10
    107c:	0b20001c 	bleq	8010f4 <startup-0x1f7fef0c>
    1080:	00000025 	andeq	r0, r0, r5, lsr #32
    1084:	0000011b 	andeq	r0, r0, fp, lsl r1
    1088:	00011b0c 	andeq	r1, r1, ip, lsl #22
    108c:	1b0c0d00 	blne	304494 <startup-0x1fcfbb6c>
    1090:	04000001 	streq	r0, [r0], #-1
    1094:	07040d00 	streq	r0, [r4, -r0, lsl #26]
    1098:	00000243 	andeq	r0, r0, r3, asr #4
    109c:	0005fa07 	andeq	pc, r5, r7, lsl #20
    10a0:	122d0400 	eorne	r0, sp, #0, 8
    10a4:	00000105 	andeq	r0, r0, r5, lsl #2
    10a8:	1ca40305 	stcne	3, cr0, [r4], #20
    10ac:	77072000 	strvc	r2, [r7, -r0]
    10b0:	04000004 	streq	r0, [r0], #-4
    10b4:	007d052e 	rsbseq	r0, sp, lr, lsr #10
    10b8:	03050000 	movweq	r0, #20480	; 0x5000
    10bc:	20002350 	andcs	r2, r0, r0, asr r3
    10c0:	00047d07 	andeq	r7, r4, r7, lsl #26
    10c4:	052f0400 	streq	r0, [pc, #-1024]!	; ccc <startup-0x1ffff334>
    10c8:	0000007d 	andeq	r0, r0, sp, ror r0
    10cc:	1c980305 	ldcne	3, cr0, [r8], {5}
    10d0:	58072000 	stmdapl	r7, {sp}
    10d4:	04000006 	streq	r0, [r0], #-6
    10d8:	007d0530 	rsbseq	r0, sp, r0, lsr r5
    10dc:	03050000 	movweq	r0, #20480	; 0x5000
    10e0:	20001c9c 	mulcs	r0, ip, ip
    10e4:	0004b407 	andeq	fp, r4, r7, lsl #8
    10e8:	05310400 	ldreq	r0, [r1, #-1024]!	; 0xfffffc00
    10ec:	0000007d 	andeq	r0, r0, sp, ror r0
    10f0:	234c0305 	movtcs	r0, #49925	; 0xc305
    10f4:	e3072000 	movw	r2, #28672	; 0x7000
    10f8:	04000004 	streq	r0, [r0], #-4
    10fc:	007d0532 	rsbseq	r0, sp, r2, lsr r5
    1100:	03050000 	movweq	r0, #20480	; 0x5000
    1104:	20002358 	andcs	r2, r0, r8, asr r3
    1108:	00060c07 	andeq	r0, r6, r7, lsl #24
    110c:	0e180100 	mufeqe	f0, f0, f0
    1110:	00000084 	andeq	r0, r0, r4, lsl #1
    1114:	23600305 	cmncs	r0, #335544320	; 0x14000000
    1118:	f2072000 	vhadd.s8	d2, d7, d0
    111c:	01000006 	tsteq	r0, r6
    1120:	00840e19 	addeq	r0, r4, r9, lsl lr
    1124:	03050000 	movweq	r0, #20480	; 0x5000
    1128:	2000235c 	andcs	r2, r0, ip, asr r3
    112c:	00065207 	andeq	r5, r6, r7, lsl #4
    1130:	051a0100 	ldreq	r0, [sl, #-256]	; 0xffffff00
    1134:	0000007d 	andeq	r0, r0, sp, ror r0
    1138:	23640305 	cmncs	r4, #335544320	; 0x14000000
    113c:	270e2000 	strcs	r2, [lr, -r0]
    1140:	05000007 	streq	r0, [r0, #-7]
    1144:	011b1601 	tsteq	fp, r1, lsl #12
    1148:	b10e0000 	mrslt	r0, (UNDEF: 14)
    114c:	05000006 	streq	r0, [r0, #-6]
    1150:	01dc1702 	bicseq	r1, ip, r2, lsl #14
    1154:	010d0000 	mrseq	r0, (UNDEF: 13)
    1158:	00011e08 	andeq	r1, r1, r8, lsl #28
    115c:	05040f00 	streq	r0, [r4, #-3840]	; 0xfffff100
    1160:	0214020a 	andseq	r0, r4, #-1610612736	; 0xa0000000
    1164:	fa040000 	blx	10116c <startup-0x1fefee94>
    1168:	05000006 	streq	r0, [r0, #-6]
    116c:	01d00b0b 	bicseq	r0, r0, fp, lsl #22
    1170:	04000000 	streq	r0, [r0], #-0
    1174:	000006cc 	andeq	r0, r0, ip, asr #13
    1178:	d00b0c05 	andle	r0, fp, r5, lsl #24
    117c:	01000001 	tsteq	r0, r1
    1180:	00062f04 	andeq	r2, r6, r4, lsl #30
    1184:	090d0500 	stmdbeq	sp, {r8, sl}
    1188:	00000214 	andeq	r0, r0, r4, lsl r2
    118c:	020d0002 	andeq	r0, sp, #2
    1190:	00070e05 	andeq	r0, r7, r5, lsl #28
    1194:	05041000 	streq	r1, [r4, #-0]
    1198:	02360208 	eorseq	r0, r6, #8, 4	; 0x80000000
    119c:	69110000 	ldmdbvs	r1, {}	; <UNPREDICTABLE>
    11a0:	05007264 	streq	r7, [r0, #-612]	; 0xfffffd9c
    11a4:	01c40b09 	biceq	r0, r4, r9, lsl #22
    11a8:	e3120000 	tst	r2, #0
    11ac:	00000001 	andeq	r0, r0, r1
    11b0:	1205040f 	andne	r0, r5, #251658240	; 0xf000000
    11b4:	00026702 	andeq	r6, r2, r2, lsl #14
    11b8:	06b90400 	ldrteq	r0, [r9], r0, lsl #8
    11bc:	13050000 	movwne	r0, #20480	; 0x5000
    11c0:	0001d00b 	andeq	sp, r1, fp
    11c4:	d4040000 	strle	r0, [r4], #-0
    11c8:	05000006 	streq	r0, [r0, #-6]
    11cc:	01d00b14 	bicseq	r0, r0, r4, lsl fp
    11d0:	04010000 	streq	r0, [r1], #-0
    11d4:	000007a2 	andeq	r0, r0, r2, lsr #15
    11d8:	14091505 	strne	r1, [r9], #-1285	; 0xfffffafb
    11dc:	02000002 	andeq	r0, r0, #2
    11e0:	05041000 	streq	r1, [r4, #-0]
    11e4:	02820210 	addeq	r0, r2, #16, 4
    11e8:	6f110000 	svcvs	0x00110000
    11ec:	05007264 	streq	r7, [r0, #-612]	; 0xfffffd9c
    11f0:	01c40b11 	biceq	r0, r4, r1, lsl fp
    11f4:	36120000 	ldrcc	r0, [r2], -r0
    11f8:	00000002 	andeq	r0, r0, r2
    11fc:	00071e02 	andeq	r1, r7, r2, lsl #28
    1200:	03051800 	movweq	r1, #22528	; 0x5800
    1204:	0002d019 	andeq	sp, r2, r9, lsl r0
    1208:	07850400 	streq	r0, [r5, r0, lsl #8]
    120c:	04050000 	streq	r0, [r5], #-0
    1210:	0001c40b 	andeq	ip, r1, fp, lsl #8
    1214:	44040000 	strmi	r0, [r4], #-0
    1218:	05000006 	streq	r0, [r0, #-6]
    121c:	01c40b05 	biceq	r0, r4, r5, lsl #22
    1220:	04040000 	streq	r0, [r4], #-0
    1224:	00000665 	andeq	r0, r0, r5, ror #12
    1228:	c40b0605 	strgt	r0, [fp], #-1541	; 0xfffff9fb
    122c:	08000001 	stmdaeq	r0, {r0}
    1230:	00069204 	andeq	r9, r6, r4, lsl #4
    1234:	0b070500 	bleq	1c263c <startup-0x1fe3d9c4>
    1238:	000001c4 	andeq	r0, r0, r4, asr #3
    123c:	021b130c 	andseq	r1, fp, #12, 6	; 0x30000000
    1240:	13100000 	tstne	r0, #0
    1244:	00000267 	andeq	r0, r0, r7, ror #4
    1248:	82060014 	andhi	r0, r6, #20
    124c:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
    1250:	00000660 	andeq	r0, r0, r0, ror #12
    1254:	d0031905 	andle	r1, r3, r5, lsl #18
    1258:	07000002 	streq	r0, [r0, -r2]
    125c:	00000679 	andeq	r0, r0, r9, ror r6
    1260:	dc0f1902 			; <UNDEFINED> instruction: 0xdc0f1902
    1264:	05000001 	streq	r0, [r0, #-1]
    1268:	001c9003 	andseq	r9, ip, r3
    126c:	07091420 	streq	r1, [r9, -r0, lsr #8]
    1270:	1b020000 	blne	81278 <startup-0x1ff7ed88>
    1274:	00030518 	andeq	r0, r3, r8, lsl r5
    1278:	94030500 	strls	r0, [r3], #-1280	; 0xfffffb00
    127c:	0a20001c 	beq	8012f4 <startup-0x1f7fed0c>
    1280:	0002d504 	andeq	sp, r2, r4, lsl #10
    1284:	06a61500 	strteq	r1, [r6], r0, lsl #10
    1288:	7b030000 	blvc	c1290 <startup-0x1ff3ed70>
    128c:	00007d05 	andeq	r7, r0, r5, lsl #26
    1290:	0018e400 	andseq	lr, r8, r0, lsl #8
    1294:	00008020 	andeq	r8, r0, r0, lsr #32
    1298:	789c0100 	ldmvc	ip, {r8}
    129c:	14000003 	strne	r0, [r0], #-3
    12a0:	0000004c 	andeq	r0, r0, ip, asr #32
    12a4:	78077d03 	stmdavc	r7, {r0, r1, r8, sl, fp, ip, sp, lr}
    12a8:	02000003 	andeq	r0, r0, #3
    12ac:	dc145891 	ldcle	8, cr5, [r4], {145}	; 0x91
    12b0:	03000005 	movweq	r0, #5
    12b4:	038f077e 	orreq	r0, pc, #33030144	; 0x1f80000
    12b8:	91030000 	mrsls	r0, (UNDEF: 3)
    12bc:	74167fbc 	ldrvc	r7, [r6], #-4028	; 0xfffff044
    12c0:	03000002 	movweq	r0, #2
    12c4:	007d027f 	rsbseq	r0, sp, pc, ror r2
    12c8:	03560000 	cmpeq	r6, #0
    12cc:	00170000 	andseq	r0, r7, r0
    12d0:	00009416 	andeq	r9, r0, r6, lsl r4
    12d4:	02800300 	addeq	r0, r0, #0, 6
    12d8:	0000007d 	andeq	r0, r0, sp, ror r0
    12dc:	00000368 	andeq	r0, r0, r8, ror #6
    12e0:	18140017 	ldmdane	r4, {r0, r1, r2, r4}
    12e4:	03000007 	movweq	r0, #7
    12e8:	03880783 	orreq	r0, r8, #34340864	; 0x20c0000
    12ec:	91020000 	mrsls	r0, (UNDEF: 2)
    12f0:	880b006f 	stmdahi	fp, {r0, r1, r2, r3, r5, r6}
    12f4:	88000003 	stmdahi	r0, {r0, r1}
    12f8:	0c000003 	stceq	0, cr0, [r0], {3}
    12fc:	0000011b 	andeq	r0, r0, fp, lsl r1
    1300:	010d0014 	tsteq	sp, r4, lsl r0
    1304:	00012708 	andeq	r2, r1, r8, lsl #14
    1308:	03880b00 	orreq	r0, r8, #0, 22
    130c:	039f0000 	orrseq	r0, pc, #0
    1310:	1b0c0000 	blne	301318 <startup-0x1fcfece8>
    1314:	18000001 	stmdane	r0, {r0}
    1318:	069d1800 	ldreq	r1, [sp], r0, lsl #16
    131c:	68030000 	stmdavs	r3, {}	; <UNPREDICTABLE>
    1320:	00189c06 	andseq	r9, r8, r6, lsl #24
    1324:	00004820 	andeq	r4, r0, r0, lsr #16
    1328:	e89c0100 	ldm	ip, {r8}
    132c:	16000003 	strne	r0, [r0], -r3
    1330:	00000217 	andeq	r0, r0, r7, lsl r2
    1334:	7d027403 	cfstrsvc	mvf7, [r2, #-12]
    1338:	c7000000 	strgt	r0, [r0, -r0]
    133c:	17000003 	strne	r0, [r0, -r3]
    1340:	020a1600 	andeq	r1, sl, #0, 12
    1344:	75030000 	strvc	r0, [r3, #-0]
    1348:	00007d02 	andeq	r7, r0, r2, lsl #26
    134c:	0003d900 	andeq	sp, r3, r0, lsl #18
    1350:	19001700 	stmdbne	r0, {r8, r9, sl, ip}
    1354:	00000038 	andeq	r0, r0, r8, lsr r0
    1358:	7d027803 	stcvc	8, cr7, [r2, #-12]
    135c:	17000000 	strne	r0, [r0, -r0]
    1360:	981a0000 	ldmdals	sl, {}	; <UNPREDICTABLE>
    1364:	03000006 	movweq	r0, #6
    1368:	007d0524 	rsbseq	r0, sp, r4, lsr #10
    136c:	16d80000 	ldrbne	r0, [r8], r0
    1370:	01c42000 	biceq	r2, r4, r0
    1374:	9c010000 	stcls	0, cr0, [r1], {-0}
    1378:	00000498 	muleq	r0, r8, r4
    137c:	0004c414 	andeq	ip, r4, r4, lsl r4
    1380:	06290300 	strteq	r0, [r9], -r0, lsl #6
    1384:	0000007d 	andeq	r0, r0, sp, ror r0
    1388:	1b689102 	blne	1a25798 <startup-0x1e5da868>
    138c:	2a030070 	bcs	c1554 <startup-0x1ff3eaac>
    1390:	00009b10 	andeq	r9, r0, r0, lsl fp
    1394:	5c910200 	lfmpl	f0, 4, [r1], {0}
    1398:	00079c14 	andeq	r9, r7, r4, lsl ip
    139c:	072b0300 	streq	r0, [fp, -r0, lsl #6]!
    13a0:	00000388 	andeq	r0, r0, r8, lsl #7
    13a4:	146f9102 	strbtne	r9, [pc], #-258	; 13ac <startup-0x1fffec54>
    13a8:	00000701 	andeq	r0, r0, r1, lsl #14
    13ac:	88072c03 	stmdahi	r7, {r0, r1, sl, fp, sp}
    13b0:	02000003 	andeq	r0, r0, #3
    13b4:	d0146e91 	mulsle	r4, r1, lr
    13b8:	03000004 	movweq	r0, #4
    13bc:	007d062d 	rsbseq	r0, sp, sp, lsr #12
    13c0:	91020000 	mrsls	r0, (UNDEF: 2)
    13c4:	16fa1c58 	usatne	r1, #26, r8, asr #24
    13c8:	017a2000 	cmneq	sl, r0
    13cc:	a6160000 	ldrge	r0, [r6], -r0
    13d0:	03000006 	movweq	r0, #6
    13d4:	007d0d61 	rsbseq	r0, sp, r1, ror #26
    13d8:	04660000 	strbteq	r0, [r6], #-0
    13dc:	00170000 	andseq	r0, r7, r0
    13e0:	00170e1c 	andseq	r0, r7, ip, lsl lr
    13e4:	00013e20 	andeq	r3, r1, r0, lsr #28
    13e8:	00a71600 	adceq	r1, r7, r0, lsl #12
    13ec:	36030000 	strcc	r0, [r3], -r0
    13f0:	00007d04 	andeq	r7, r0, r4, lsl #26
    13f4:	00048100 	andeq	r8, r4, r0, lsl #2
    13f8:	1d001700 	stcne	7, cr1, [r0, #-0]
    13fc:	00000000 	andeq	r0, r0, r0
    1400:	00034619 	andeq	r4, r3, r9, lsl r6
    1404:	06510300 	ldrbeq	r0, [r1], -r0, lsl #6
    1408:	0000007d 	andeq	r0, r0, sp, ror r0
    140c:	00000017 	andeq	r0, r0, r7, lsl r0
    1410:	dc1e0000 	ldcle	0, cr0, [lr], {-0}
    1414:	03000006 	movweq	r0, #6
    1418:	00000611 	andeq	r0, r0, r1, lsl r6
    141c:	00122000 	andseq	r2, r2, r0
    1420:	9c010000 	stcls	0, cr0, [r1], {-0}
    1424:	0006871f 	andeq	r8, r6, pc, lsl r7
    1428:	05570200 	ldrbeq	r0, [r7, #-512]	; 0xfffffe00
    142c:	0000007d 	andeq	r0, r0, sp, ror r0
    1430:	20001680 	andcs	r1, r0, r0, lsl #13
    1434:	00000058 	andeq	r0, r0, r8, asr r0
    1438:	04d29c01 	ldrbeq	r9, [r2], #3073	; 0xc01
    143c:	631b0000 	tstvs	fp, #0
    1440:	105c0200 	subsne	r0, ip, r0, lsl #4
    1444:	000001dc 	ldrdeq	r0, [r0], -ip
    1448:	00779102 	rsbseq	r9, r7, r2, lsl #2
    144c:	00066d20 	andeq	r6, r6, r0, lsr #26
    1450:	06490200 	strbeq	r0, [r9], -r0, lsl #4
    1454:	20001618 	andcs	r1, r0, r8, lsl r6
    1458:	00000068 	andeq	r0, r0, r8, rrx
    145c:	04f89c01 	ldrbteq	r9, [r8], #3073	; 0xc01
    1460:	72210000 	eorvc	r0, r1, #0
    1464:	0200776f 	andeq	r7, r0, #29097984	; 0x1bc0000
    1468:	007d1649 	rsbseq	r1, sp, r9, asr #12
    146c:	91020000 	mrsls	r0, (UNDEF: 2)
    1470:	e41a0074 	ldr	r0, [sl], #-116	; 0xffffff8c
    1474:	02000006 	andeq	r0, r0, #6
    1478:	01dc0f36 	bicseq	r0, ip, r6, lsr pc
    147c:	15b80000 	ldrne	r0, [r8, #0]!
    1480:	00602000 	rsbeq	r2, r0, r0
    1484:	9c010000 	stcls	0, cr0, [r1], {-0}
    1488:	0000052a 	andeq	r0, r0, sl, lsr #10
    148c:	0015ea1c 	andseq	lr, r5, ip, lsl sl
    1490:	00001e20 	andeq	r1, r0, r0, lsr #28
    1494:	00631b00 	rsbeq	r1, r3, r0, lsl #22
    1498:	dc114102 	ldfles	f4, [r1], {2}
    149c:	02000001 	andeq	r0, r0, #1
    14a0:	00006f91 	muleq	r0, r1, pc	; <UNPREDICTABLE>
    14a4:	0006271a 	andeq	r2, r6, sl, lsl r7
    14a8:	0f250200 	svceq	0x00250200
    14ac:	000001dc 	ldrdeq	r0, [r0], -ip
    14b0:	20001550 	andcs	r1, r0, r0, asr r5
    14b4:	00000068 	andeq	r0, r0, r8, rrx
    14b8:	05869c01 	streq	r9, [r6, #3073]	; 0xc01
    14bc:	12140000 	andsne	r0, r4, #0
    14c0:	02000006 	andeq	r0, r0, #6
    14c4:	05861027 	streq	r1, [r6, #39]	; 0x27
    14c8:	91020000 	mrsls	r0, (UNDEF: 2)
    14cc:	15621c58 	strbne	r1, [r2, #-3160]!	; 0xfffff3a8
    14d0:	00402000 	subeq	r2, r0, r0
    14d4:	721b0000 	andsvc	r0, fp, #0
    14d8:	0200776f 	andeq	r7, r0, #29097984	; 0x1bc0000
    14dc:	007d0a28 	rsbseq	r0, sp, r8, lsr #20
    14e0:	91020000 	mrsls	r0, (UNDEF: 2)
    14e4:	15681c6c 	strbne	r1, [r8, #-3180]!	; 0xfffff394
    14e8:	002e2000 	eoreq	r2, lr, r0
    14ec:	631b0000 	tstvs	fp, #0
    14f0:	02006c6f 	andeq	r6, r0, #28416	; 0x6f00
    14f4:	007d072b 	rsbseq	r0, sp, fp, lsr #14
    14f8:	91020000 	mrsls	r0, (UNDEF: 2)
    14fc:	00000068 	andeq	r0, r0, r8, rrx
    1500:	0001dc0b 	andeq	sp, r1, fp, lsl #24
    1504:	00059600 	andeq	r9, r5, r0, lsl #12
    1508:	011b0c00 	tsteq	fp, r0, lsl #24
    150c:	000f0000 	andeq	r0, pc, r0
    1510:	00061b20 	andeq	r1, r6, r0, lsr #22
    1514:	061d0200 	ldreq	r0, [sp], -r0, lsl #4
    1518:	20001514 	andcs	r1, r0, r4, lsl r5
    151c:	0000003c 	andeq	r0, r0, ip, lsr r0
    1520:	05ba9c01 	ldreq	r9, [sl, #3073]!	; 0xc01
    1524:	70210000 	eorvc	r0, r1, r0
    1528:	191d0200 	ldmdbne	sp, {r9}
    152c:	00000305 	andeq	r0, r0, r5, lsl #6
    1530:	00749102 	rsbseq	r9, r4, r2, lsl #2
    1534:	0006c022 	andeq	ip, r6, r2, lsr #32
    1538:	06480100 	strbeq	r0, [r8], -r0, lsl #2
    153c:	200014f4 	strdcs	r1, [r0], -r4
    1540:	00000020 	andeq	r0, r0, r0, lsr #32
    1544:	ac209c01 	stcge	12, cr9, [r0], #-4
    1548:	01000007 	tsteq	r0, r7
    154c:	14ac0640 	strtne	r0, [ip], #1600	; 0x640
    1550:	00482000 	subeq	r2, r8, r0
    1554:	9c010000 	stcls	0, cr0, [r1], {-0}
    1558:	000005f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    155c:	01007221 	tsteq	r0, r1, lsr #4
    1560:	007d1640 	rsbseq	r1, sp, r0, asr #12
    1564:	91020000 	mrsls	r0, (UNDEF: 2)
    1568:	4b230074 	blmi	8c1740 <startup-0x1f73e8c0>
    156c:	01000006 	tsteq	r0, r6
    1570:	1484063a 	strne	r0, [r4], #1594	; 0x63a
    1574:	00282000 	eoreq	r2, r8, r0
    1578:	9c010000 	stcls	0, cr0, [r1], {-0}
    157c:	00000615 	andeq	r0, r0, r5, lsl r6
    1580:	0007ac19 	andeq	sl, r7, r9, lsl ip
    1584:	023d0100 	eorseq	r0, sp, #0, 2
    1588:	0000007d 	andeq	r0, r0, sp, ror r0
    158c:	22000017 	andcs	r0, r0, #23
    1590:	0000078b 	andeq	r0, r0, fp, lsl #15
    1594:	3c062f01 	stccc	15, cr2, [r6], {1}
    1598:	48200014 	stmdami	r0!, {r2, r4}
    159c:	01000000 	mrseq	r0, (UNDEF: 0)
    15a0:	0638229c 			; <UNDEFINED> instruction: 0x0638229c
    15a4:	1d010000 	stcne	0, cr0, [r1, #-0]
    15a8:	00139806 	andseq	r9, r3, r6, lsl #16
    15ac:	0000a420 	andeq	sl, r0, r0, lsr #8
    15b0:	009c0100 	addseq	r0, ip, r0, lsl #2

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	110e1b0e 	tstne	lr, lr, lsl #22
   c:	10061201 	andne	r1, r6, r1, lsl #4
  10:	02000017 	andeq	r0, r0, #23
  14:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
  18:	0b3a0b0b 	bleq	e82c4c <startup-0x1f17d3b4>
  1c:	0b390b3b 	bleq	e42d10 <startup-0x1f1bd2f0>
  20:	00001301 	andeq	r1, r0, r1, lsl #6
  24:	03000d03 	movweq	r0, #3331	; 0xd03
  28:	3b0b3a08 	blcc	2ce850 <startup-0x1fd317b0>
  2c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
  30:	000b3813 	andeq	r3, fp, r3, lsl r8
  34:	000d0400 	andeq	r0, sp, r0, lsl #8
  38:	0b3a0e03 	bleq	e8384c <startup-0x1f17c7b4>
  3c:	0b390b3b 	bleq	e42d30 <startup-0x1f1bd2d0>
  40:	0b381349 	bleq	e04d6c <startup-0x1f1fb294>
  44:	24050000 	strcs	r0, [r5], #-0
  48:	3e0b0b00 	vmlacc.f64	d0, d11, d0
  4c:	000e030b 	andeq	r0, lr, fp, lsl #6
  50:	01010600 	tsteq	r1, r0, lsl #12
  54:	13011349 	movwne	r1, #4937	; 0x1349
  58:	21070000 	mrscs	r0, (UNDEF: 7)
  5c:	2f134900 	svccs	0x00134900
  60:	0800000b 	stmdaeq	r0, {r0, r1, r3}
  64:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
  68:	0b3b0b3a 	bleq	ec2d58 <startup-0x1f13d2a8>
  6c:	13490b39 	movtne	r0, #39737	; 0x9b39
  70:	34090000 	strcc	r0, [r9], #-0
  74:	3a0e0300 	bcc	380c7c <startup-0x1fc7f384>
  78:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  7c:	3f13490b 	svccc	0x0013490b
  80:	00180219 	andseq	r0, r8, r9, lsl r2
  84:	00340a00 	eorseq	r0, r4, r0, lsl #20
  88:	0b3a0803 	bleq	e8209c <startup-0x1f17df64>
  8c:	0b390b3b 	bleq	e42d80 <startup-0x1f1bd280>
  90:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
  94:	00001802 	andeq	r1, r0, r2, lsl #16
  98:	0300340b 	movweq	r3, #1035	; 0x40b
  9c:	3b0b3a0e 	blcc	2ce8dc <startup-0x1fd31724>
  a0:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
  a4:	00180213 	andseq	r0, r8, r3, lsl r2
  a8:	00240c00 	eoreq	r0, r4, r0, lsl #24
  ac:	0b3e0b0b 	bleq	f82ce0 <startup-0x1f07d320>
  b0:	00000803 	andeq	r0, r0, r3, lsl #16
  b4:	4900350d 	stmdbmi	r0, {r0, r2, r3, r8, sl, ip, sp}
  b8:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
  bc:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
  c0:	0b3a0e03 	bleq	e838d4 <startup-0x1f17c72c>
  c4:	0b39053b 	bleq	e415b8 <startup-0x1f1bea48>
  c8:	01111927 	tsteq	r1, r7, lsr #18
  cc:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
  d0:	01194296 			; <UNDEFINED> instruction: 0x01194296
  d4:	0f000013 	svceq	0x00000013
  d8:	08030005 	stmdaeq	r3, {r0, r2}
  dc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
  e0:	13490b39 	movtne	r0, #39737	; 0x9b39
  e4:	00001802 	andeq	r1, r0, r2, lsl #16
  e8:	3f012e10 	svccc	0x00012e10
  ec:	3a0e0319 	bcc	380d58 <startup-0x1fc7f2a8>
  f0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  f4:	1119270b 	tstne	r9, fp, lsl #14
  f8:	40061201 	andmi	r1, r6, r1, lsl #4
  fc:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 100:	00001301 	andeq	r1, r0, r1, lsl #6
 104:	03000511 	movweq	r0, #1297	; 0x511
 108:	3b0b3a08 	blcc	2ce930 <startup-0x1fd316d0>
 10c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 110:	00180213 	andseq	r0, r8, r3, lsl r2
 114:	002e1200 	eoreq	r1, lr, r0, lsl #4
 118:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 11c:	0b3b0b3a 	bleq	ec2e0c <startup-0x1f13d1f4>
 120:	01110b39 	tsteq	r1, r9, lsr fp
 124:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 128:	00194297 	mulseq	r9, r7, r2
 12c:	012e1300 			; <UNDEFINED> instruction: 0x012e1300
 130:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 134:	0b3b0b3a 	bleq	ec2e24 <startup-0x1f13d1dc>
 138:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 13c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 140:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 144:	00130119 	andseq	r0, r3, r9, lsl r1
 148:	00341400 	eorseq	r1, r4, r0, lsl #8
 14c:	0b3a0803 	bleq	e82160 <startup-0x1f17dea0>
 150:	0b390b3b 	bleq	e42e44 <startup-0x1f1bd1bc>
 154:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 158:	05150000 	ldreq	r0, [r5, #-0]
 15c:	3a0e0300 	bcc	380d64 <startup-0x1fc7f29c>
 160:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 164:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 168:	16000018 			; <UNDEFINED> instruction: 0x16000018
 16c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 170:	0b3a0e03 	bleq	e83984 <startup-0x1f17c67c>
 174:	0b390b3b 	bleq	e42e68 <startup-0x1f1bd198>
 178:	01111349 	tsteq	r1, r9, asr #6
 17c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 180:	01194296 			; <UNDEFINED> instruction: 0x01194296
 184:	17000013 	smladne	r0, r3, r0, r0
 188:	0111010b 	tsteq	r1, fp, lsl #2
 18c:	00000612 	andeq	r0, r0, r2, lsl r6
 190:	0b000f18 	bleq	3df8 <startup-0x1fffc208>
 194:	0013490b 	andseq	r4, r3, fp, lsl #18
 198:	012e1900 			; <UNDEFINED> instruction: 0x012e1900
 19c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 1a0:	0b3b0b3a 	bleq	ec2e90 <startup-0x1f13d170>
 1a4:	01110b39 	tsteq	r1, r9, lsr fp
 1a8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 1ac:	01194296 			; <UNDEFINED> instruction: 0x01194296
 1b0:	1a000013 	bne	204 <startup-0x1ffffdfc>
 1b4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 1b8:	0b3a0e03 	bleq	e839cc <startup-0x1f17c634>
 1bc:	0b390b3b 	bleq	e42eb0 <startup-0x1f1bd150>
 1c0:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
 1c4:	181b0000 	ldmdane	fp, {}	; <UNPREDICTABLE>
 1c8:	1c000000 	stcne	0, cr0, [r0], {-0}
 1cc:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 1d0:	0b3a0e03 	bleq	e839e4 <startup-0x1f17c61c>
 1d4:	0b390b3b 	bleq	e42ec8 <startup-0x1f1bd138>
 1d8:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
 1dc:	00001301 	andeq	r1, r0, r1, lsl #6
 1e0:	11010b1d 	tstne	r1, sp, lsl fp
 1e4:	01061201 	tsteq	r6, r1, lsl #4
 1e8:	1e000013 	mcrne	0, 0, r0, cr0, cr3, {0}
 1ec:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 1f0:	0b3a0e03 	bleq	e83a04 <startup-0x1f17c5fc>
 1f4:	0b390b3b 	bleq	e42ee8 <startup-0x1f1bd118>
 1f8:	01111927 	tsteq	r1, r7, lsr #18
 1fc:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 200:	00194297 	mulseq	r9, r7, r2
 204:	002e1f00 	eoreq	r1, lr, r0, lsl #30
 208:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 20c:	0b3b0b3a 	bleq	ec2efc <startup-0x1f13d104>
 210:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 214:	06120111 			; <UNDEFINED> instruction: 0x06120111
 218:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 21c:	20000019 	andcs	r0, r0, r9, lsl r0
 220:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 224:	0b3a0e03 	bleq	e83a38 <startup-0x1f17c5c8>
 228:	0b390b3b 	bleq	e42f1c <startup-0x1f1bd0e4>
 22c:	01111349 	tsteq	r1, r9, asr #6
 230:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 234:	00194297 	mulseq	r9, r7, r2
 238:	11010000 	mrsne	r0, (UNDEF: 1)
 23c:	130e2501 	movwne	r2, #58625	; 0xe501
 240:	1b0e030b 	blne	380e74 <startup-0x1fc7f18c>
 244:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
 248:	00171006 	andseq	r1, r7, r6
 24c:	01130200 	tsteq	r3, r0, lsl #4
 250:	0b0b0e03 	bleq	2c3a64 <startup-0x1fd3c59c>
 254:	0b3b0b3a 	bleq	ec2f44 <startup-0x1f13d0bc>
 258:	13010b39 	movwne	r0, #6969	; 0x1b39
 25c:	0d030000 	stceq	0, cr0, [r3, #-0]
 260:	3a080300 	bcc	200e68 <startup-0x1fdff198>
 264:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 268:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 26c:	0400000b 	streq	r0, [r0], #-11
 270:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 274:	0b3b0b3a 	bleq	ec2f64 <startup-0x1f13d09c>
 278:	13490b39 	movtne	r0, #39737	; 0x9b39
 27c:	00000b38 	andeq	r0, r0, r8, lsr fp
 280:	0b002405 	bleq	929c <startup-0x1fff6d64>
 284:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 288:	06000008 	streq	r0, [r0], -r8
 28c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 290:	0b3b0b3a 	bleq	ec2f80 <startup-0x1f13d080>
 294:	13490b39 	movtne	r0, #39737	; 0x9b39
 298:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 29c:	15070000 	strne	r0, [r7, #-0]
 2a0:	49192701 	ldmdbmi	r9, {r0, r8, r9, sl, sp}
 2a4:	00130113 	andseq	r0, r3, r3, lsl r1
 2a8:	00050800 	andeq	r0, r5, r0, lsl #16
 2ac:	00001349 	andeq	r1, r0, r9, asr #6
 2b0:	0b000f09 	bleq	3edc <startup-0x1fffc124>
 2b4:	0013490b 	andseq	r4, r3, fp, lsl #18
 2b8:	01010a00 	tsteq	r1, r0, lsl #20
 2bc:	13011349 	movwne	r1, #4937	; 0x1349
 2c0:	210b0000 	mrscs	r0, (UNDEF: 11)
 2c4:	2f134900 	svccs	0x00134900
 2c8:	0c00000b 	stceq	0, cr0, [r0], {11}
 2cc:	0b0b0024 	bleq	2c0364 <startup-0x1fd3fc9c>
 2d0:	0e030b3e 	vmoveq.16	d3[0], r0
 2d4:	2e0d0000 	cdpcs	0, 0, cr0, cr13, cr0, {0}
 2d8:	03193f01 	tsteq	r9, #1, 30
 2dc:	3b0b3a0e 	blcc	2ceb1c <startup-0x1fd314e4>
 2e0:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 2e4:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 2e8:	96184006 	ldrls	r4, [r8], -r6
 2ec:	13011942 	movwne	r1, #6466	; 0x1942
 2f0:	050e0000 	streq	r0, [lr, #-0]
 2f4:	3a0e0300 	bcc	380efc <startup-0x1fc7f104>
 2f8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 2fc:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 300:	0f000018 	svceq	0x00000018
 304:	08030005 	stmdaeq	r3, {r0, r2}
 308:	0b3b0b3a 	bleq	ec2ff8 <startup-0x1f13d008>
 30c:	13490b39 	movtne	r0, #39737	; 0x9b39
 310:	00001802 	andeq	r1, r0, r2, lsl #16
 314:	3f012e10 	svccc	0x00012e10
 318:	3a0e0319 	bcc	380f84 <startup-0x1fc7f07c>
 31c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 320:	1119270b 	tstne	r9, fp, lsl #14
 324:	40061201 	andmi	r1, r6, r1, lsl #4
 328:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 32c:	00001301 	andeq	r1, r0, r1, lsl #6
 330:	11010b11 	tstne	r1, r1, lsl fp
 334:	00061201 	andeq	r1, r6, r1, lsl #4
 338:	00341200 	eorseq	r1, r4, r0, lsl #4
 33c:	0b3a0803 	bleq	e82350 <startup-0x1f17dcb0>
 340:	0b390b3b 	bleq	e43034 <startup-0x1f1bcfcc>
 344:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 348:	2e130000 	cdpcs	0, 1, cr0, cr3, cr0, {0}
 34c:	03193f01 	tsteq	r9, #1, 30
 350:	3b0b3a0e 	blcc	2ceb90 <startup-0x1fd31470>
 354:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 358:	11134919 	tstne	r3, r9, lsl r9
 35c:	40061201 	andmi	r1, r6, r1, lsl #4
 360:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 364:	00001301 	andeq	r1, r0, r1, lsl #6
 368:	3f012e14 	svccc	0x00012e14
 36c:	3a0e0319 	bcc	380fd8 <startup-0x1fc7f028>
 370:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 374:	01193c13 	tsteq	r9, r3, lsl ip
 378:	15000013 	strne	r0, [r0, #-19]	; 0xffffffed
 37c:	00000018 	andeq	r0, r0, r8, lsl r0
 380:	3f012e16 	svccc	0x00012e16
 384:	3a0e0319 	bcc	380ff0 <startup-0x1fc7f010>
 388:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 38c:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 390:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 394:	97184006 	ldrls	r4, [r8, -r6]
 398:	13011942 	movwne	r1, #6466	; 0x1942
 39c:	34170000 	ldrcc	r0, [r7], #-0
 3a0:	3a0e0300 	bcc	380fa8 <startup-0x1fc7f058>
 3a4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 3a8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 3ac:	18000018 	stmdane	r0, {r3, r4}
 3b0:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 3b4:	0b3a0e03 	bleq	e83bc8 <startup-0x1f17c438>
 3b8:	0b390b3b 	bleq	e430ac <startup-0x1f1bcf54>
 3bc:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
 3c0:	00001301 	andeq	r1, r0, r1, lsl #6
 3c4:	11010b19 	tstne	r1, r9, lsl fp
 3c8:	01061201 	tsteq	r6, r1, lsl #4
 3cc:	1a000013 	bne	420 <startup-0x1ffffbe0>
 3d0:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 3d4:	0b3a0e03 	bleq	e83be8 <startup-0x1f17c418>
 3d8:	0b390b3b 	bleq	e430cc <startup-0x1f1bcf34>
 3dc:	06120111 			; <UNDEFINED> instruction: 0x06120111
 3e0:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 3e4:	1b000019 	blne	450 <startup-0x1ffffbb0>
 3e8:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 3ec:	0b3a0e03 	bleq	e83c00 <startup-0x1f17c400>
 3f0:	0b390b3b 	bleq	e430e4 <startup-0x1f1bcf1c>
 3f4:	06120111 			; <UNDEFINED> instruction: 0x06120111
 3f8:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 3fc:	00130119 	andseq	r0, r3, r9, lsl r1
 400:	012e1c00 			; <UNDEFINED> instruction: 0x012e1c00
 404:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 408:	0b3b0b3a 	bleq	ec30f8 <startup-0x1f13cf08>
 40c:	13490b39 	movtne	r0, #39737	; 0x9b39
 410:	0000193c 	andeq	r1, r0, ip, lsr r9
 414:	3f012e1d 	svccc	0x00012e1d
 418:	3a0e0319 	bcc	381084 <startup-0x1fc7ef7c>
 41c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 420:	1201110b 	andne	r1, r1, #-1073741822	; 0xc0000002
 424:	97184006 	ldrls	r4, [r8, -r6]
 428:	00001942 	andeq	r1, r0, r2, asr #18
 42c:	01110100 	tsteq	r1, r0, lsl #2
 430:	0b130e25 	bleq	4c3ccc <startup-0x1fb3c334>
 434:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
 438:	01111755 	tsteq	r1, r5, asr r7
 43c:	00001710 	andeq	r1, r0, r0, lsl r7
 440:	03011302 	movweq	r1, #4866	; 0x1302
 444:	3a0b0b0e 	bcc	2c3084 <startup-0x1fd3cf7c>
 448:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 44c:	0013010b 	andseq	r0, r3, fp, lsl #2
 450:	000d0300 	andeq	r0, sp, r0, lsl #6
 454:	0b3a0803 	bleq	e82468 <startup-0x1f17db98>
 458:	0b390b3b 	bleq	e4314c <startup-0x1f1bceb4>
 45c:	0b381349 	bleq	e05188 <startup-0x1f1fae78>
 460:	0d040000 	stceq	0, cr0, [r4, #-0]
 464:	3a0e0300 	bcc	38106c <startup-0x1fc7ef94>
 468:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 46c:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 470:	0500000b 	streq	r0, [r0, #-11]
 474:	0b0b0024 	bleq	2c050c <startup-0x1fd3faf4>
 478:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 47c:	35060000 	strcc	r0, [r6, #-0]
 480:	00134900 	andseq	r4, r3, r0, lsl #18
 484:	00340700 	eorseq	r0, r4, r0, lsl #14
 488:	0b3a0e03 	bleq	e83c9c <startup-0x1f17c364>
 48c:	0b390b3b 	bleq	e43180 <startup-0x1f1bce80>
 490:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 494:	00001802 	andeq	r1, r0, r2, lsl #16
 498:	27011508 	strcs	r1, [r1, -r8, lsl #10]
 49c:	01134919 	tsteq	r3, r9, lsl r9
 4a0:	09000013 	stmdbeq	r0, {r0, r1, r4}
 4a4:	13490005 	movtne	r0, #36869	; 0x9005
 4a8:	0f0a0000 	svceq	0x000a0000
 4ac:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
 4b0:	0b000013 	bleq	504 <startup-0x1ffffafc>
 4b4:	13490101 	movtne	r0, #37121	; 0x9101
 4b8:	00001301 	andeq	r1, r0, r1, lsl #6
 4bc:	4900210c 	stmdbmi	r0, {r2, r3, r8, sp}
 4c0:	000b2f13 	andeq	r2, fp, r3, lsl pc
 4c4:	00240d00 	eoreq	r0, r4, r0, lsl #26
 4c8:	0b3e0b0b 	bleq	f830fc <startup-0x1f07cf04>
 4cc:	00000e03 	andeq	r0, r0, r3, lsl #28
 4d0:	0300160e 	movweq	r1, #1550	; 0x60e
 4d4:	3b0b3a0e 	blcc	2ced14 <startup-0x1fd312ec>
 4d8:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 4dc:	0f000013 	svceq	0x00000013
 4e0:	0b0b0113 	bleq	2c0934 <startup-0x1fd3f6cc>
 4e4:	0b3b0b3a 	bleq	ec31d4 <startup-0x1f13ce2c>
 4e8:	13010b39 	movwne	r0, #6969	; 0x1b39
 4ec:	17100000 	ldrne	r0, [r0, -r0]
 4f0:	3a0b0b01 	bcc	2c30fc <startup-0x1fd3cf04>
 4f4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 4f8:	0013010b 	andseq	r0, r3, fp, lsl #2
 4fc:	000d1100 	andeq	r1, sp, r0, lsl #2
 500:	0b3a0803 	bleq	e82514 <startup-0x1f17daec>
 504:	0b390b3b 	bleq	e431f8 <startup-0x1f1bce08>
 508:	00001349 	andeq	r1, r0, r9, asr #6
 50c:	49000d12 	stmdbmi	r0, {r1, r4, r8, sl, fp}
 510:	13000013 	movwne	r0, #19
 514:	1349000d 	movtne	r0, #36877	; 0x900d
 518:	00000b38 	andeq	r0, r0, r8, lsr fp
 51c:	03003414 	movweq	r3, #1044	; 0x414
 520:	3b0b3a0e 	blcc	2ced60 <startup-0x1fd312a0>
 524:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 528:	00180213 	andseq	r0, r8, r3, lsl r2
 52c:	012e1500 			; <UNDEFINED> instruction: 0x012e1500
 530:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 534:	0b3b0b3a 	bleq	ec3224 <startup-0x1f13cddc>
 538:	13490b39 	movtne	r0, #39737	; 0x9b39
 53c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 540:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 544:	00130119 	andseq	r0, r3, r9, lsl r1
 548:	012e1600 			; <UNDEFINED> instruction: 0x012e1600
 54c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 550:	0b3b0b3a 	bleq	ec3240 <startup-0x1f13cdc0>
 554:	13490b39 	movtne	r0, #39737	; 0x9b39
 558:	1301193c 	movwne	r1, #6460	; 0x193c
 55c:	18170000 	ldmdane	r7, {}	; <UNPREDICTABLE>
 560:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
 564:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 568:	0b3a0e03 	bleq	e83d7c <startup-0x1f17c284>
 56c:	0b390b3b 	bleq	e43260 <startup-0x1f1bcda0>
 570:	01111927 	tsteq	r1, r7, lsr #18
 574:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 578:	01194296 			; <UNDEFINED> instruction: 0x01194296
 57c:	19000013 	stmdbne	r0, {r0, r1, r4}
 580:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 584:	0b3a0e03 	bleq	e83d98 <startup-0x1f17c268>
 588:	0b390b3b 	bleq	e4327c <startup-0x1f1bcd84>
 58c:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
 590:	2e1a0000 	cdpcs	0, 1, cr0, cr10, cr0, {0}
 594:	03193f01 	tsteq	r9, #1, 30
 598:	3b0b3a0e 	blcc	2cedd8 <startup-0x1fd31228>
 59c:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 5a0:	11134919 	tstne	r3, r9, lsl r9
 5a4:	40061201 	andmi	r1, r6, r1, lsl #4
 5a8:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 5ac:	00001301 	andeq	r1, r0, r1, lsl #6
 5b0:	0300341b 	movweq	r3, #1051	; 0x41b
 5b4:	3b0b3a08 	blcc	2ceddc <startup-0x1fd31224>
 5b8:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 5bc:	00180213 	andseq	r0, r8, r3, lsl r2
 5c0:	010b1c00 	tsteq	fp, r0, lsl #24
 5c4:	06120111 			; <UNDEFINED> instruction: 0x06120111
 5c8:	0b1d0000 	bleq	7405d0 <startup-0x1f8bfa30>
 5cc:	00175501 	andseq	r5, r7, r1, lsl #10
 5d0:	002e1e00 	eoreq	r1, lr, r0, lsl #28
 5d4:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 5d8:	0b3b0b3a 	bleq	ec32c8 <startup-0x1f13cd38>
 5dc:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 5e0:	06120111 			; <UNDEFINED> instruction: 0x06120111
 5e4:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 5e8:	1f000019 	svcne	0x00000019
 5ec:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 5f0:	0b3a0e03 	bleq	e83e04 <startup-0x1f17c1fc>
 5f4:	0b390b3b 	bleq	e432e8 <startup-0x1f1bcd18>
 5f8:	13491927 	movtne	r1, #39207	; 0x9927
 5fc:	06120111 			; <UNDEFINED> instruction: 0x06120111
 600:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 604:	00130119 	andseq	r0, r3, r9, lsl r1
 608:	012e2000 			; <UNDEFINED> instruction: 0x012e2000
 60c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 610:	0b3b0b3a 	bleq	ec3300 <startup-0x1f13cd00>
 614:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 618:	06120111 			; <UNDEFINED> instruction: 0x06120111
 61c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 620:	00130119 	andseq	r0, r3, r9, lsl r1
 624:	00052100 	andeq	r2, r5, r0, lsl #2
 628:	0b3a0803 	bleq	e8263c <startup-0x1f17d9c4>
 62c:	0b390b3b 	bleq	e43320 <startup-0x1f1bcce0>
 630:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 634:	2e220000 	cdpcs	0, 2, cr0, cr2, cr0, {0}
 638:	03193f00 	tsteq	r9, #0, 30
 63c:	3b0b3a0e 	blcc	2cee7c <startup-0x1fd31184>
 640:	110b390b 	tstne	fp, fp, lsl #18
 644:	40061201 	andmi	r1, r6, r1, lsl #4
 648:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 64c:	2e230000 	cdpcs	0, 2, cr0, cr3, cr0, {0}
 650:	03193f01 	tsteq	r9, #1, 30
 654:	3b0b3a0e 	blcc	2cee94 <startup-0x1fd3116c>
 658:	110b390b 	tstne	fp, fp, lsl #18
 65c:	40061201 	andmi	r1, r6, r1, lsl #4
 660:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 664:	00001301 	andeq	r1, r0, r1, lsl #6
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	0000001c 	andeq	r0, r0, ip, lsl r0
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000014 	andcs	r0, r0, r4, lsl r0
  14:	0000086a 	andeq	r0, r0, sl, ror #16
	...
  20:	0000001c 	andeq	r0, r0, ip, lsl r0
  24:	08390002 	ldmdaeq	r9!, {r1}
  28:	00040000 	andeq	r0, r4, r0
  2c:	00000000 	andeq	r0, r0, r0
  30:	20000880 	andcs	r0, r0, r0, lsl #17
  34:	00000b18 	andeq	r0, r0, r8, lsl fp
	...
  40:	00000024 	andeq	r0, r0, r4, lsr #32
  44:	0f7a0002 	svceq	0x007a0002
  48:	00040000 	andeq	r0, r4, r0
  4c:	00000000 	andeq	r0, r0, r0
  50:	20001398 	mulcs	r0, r8, r3
  54:	000005cc 	andeq	r0, r0, ip, asr #11
  58:	20000000 	andcs	r0, r0, r0
  5c:	00000012 	andeq	r0, r0, r2, lsl r0
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	00000413 	andeq	r0, r0, r3, lsl r4
   4:	00910003 	addseq	r0, r1, r3
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	43010000 	movwmi	r0, #4096	; 0x1000
  1c:	68432f3a 	stmdavs	r3, {r1, r3, r4, r5, r8, r9, sl, fp, sp}^
  20:	656d6c61 	strbvs	r6, [sp, #-3169]!	; 0xfffff39f
  24:	592f7372 	stmdbpl	pc!, {r1, r4, r5, r6, r8, r9, ip, sp, lr}	; <UNPREDICTABLE>
  28:	31726165 	cmncc	r2, r5, ror #2
  2c:	34504c2f 	ldrbcc	r4, [r0], #-3119	; 0xfffff3d1
  30:	504f4d2f 	subpl	r4, pc, pc, lsr #26
  34:	504f4d2f 	subpl	r4, pc, pc, lsr #26
  38:	62614c2f 	rsbvs	r4, r1, #12032	; 0x2f00
  3c:	694d3562 	stmdbvs	sp, {r1, r5, r6, r8, sl, ip, sp}^
  40:	7753656e 	ldrbvc	r6, [r3, -lr, ror #10]
  44:	65706565 	ldrbvs	r6, [r0, #-1381]!	; 0xfffffa9b
  48:	696d2f72 	stmdbvs	sp!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
  4c:	7753656e 	ldrbvc	r6, [r3, -lr, ror #10]
  50:	65706565 	ldrbvs	r6, [r0, #-1381]!	; 0xfffffa9b
  54:	2f444772 	svccs	0x00444772
  58:	656e694d 	strbvs	r6, [lr, #-2381]!	; 0xfffff6b3
  5c:	65657753 	strbvs	r7, [r5, #-1875]!	; 0xfffff8ad
  60:	47726570 			; <UNDEFINED> instruction: 0x47726570
  64:	73000044 	movwvc	r0, #68	; 0x44
  68:	69747379 	ldmdbvs	r4!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}^
  6c:	682e6b63 	stmdavs	lr!, {r0, r1, r5, r6, r8, r9, fp, sp, lr}
  70:	00000100 	andeq	r0, r0, r0, lsl #2
  74:	70617267 	rsbvc	r7, r1, r7, ror #4
  78:	5f636968 	svcpl	0x00636968
  7c:	70736964 	rsbsvc	r6, r3, r4, ror #18
  80:	0100632e 	tsteq	r0, lr, lsr #6
  84:	68630000 	stmdavs	r3!, {}^	; <UNPREDICTABLE>
  88:	5f737261 	svcpl	0x00737261
  8c:	5f726f66 	svcpl	0x00726f66
  90:	70736964 	rsbsvc	r6, r3, r4, ror #18
  94:	0100682e 	tsteq	r0, lr, lsr #16
  98:	05000000 	streq	r0, [r0, #-0]
  9c:	02050001 	andeq	r0, r5, #1
  a0:	20000014 	andcs	r0, r0, r4, lsl r0
  a4:	05011603 	streq	r1, [r1, #-1539]	; 0xfffff9fd
  a8:	04052f05 	streq	r2, [r5], #-3845	; 0xfffff0fb
  ac:	2f10052e 	svccs	0x0010052e
  b0:	053d0205 	ldreq	r0, [sp, #-517]!	; 0xfffffdfb
  b4:	0205200c 	andeq	r2, r5, #12
  b8:	200c052f 	andcs	r0, ip, pc, lsr #10
  bc:	052f0205 	streq	r0, [pc, #-517]!	; fffffebf <_ctype_+0xdfffd5fa>
  c0:	0205200b 	andeq	r2, r5, #11
  c4:	200c052f 	andcs	r0, ip, pc, lsr #10
  c8:	05370f05 	ldreq	r0, [r7, #-3845]!	; 0xfffff0fb
  cc:	05ca2601 	strbeq	r2, [sl, #1537]	; 0x601
  d0:	04052f05 	streq	r2, [r5], #-3845	; 0xfffff0fb
  d4:	2f0a052e 	svccs	0x000a052e
  d8:	053d0e05 	ldreq	r0, [sp, #-3589]!	; 0xfffff1fb
  dc:	05842101 	streq	r2, [r4, #257]	; 0x101
  e0:	0c052f02 	stceq	15, cr2, [r5], {2}
  e4:	2f100520 	svccs	0x00100520
  e8:	853d0105 	ldrhi	r0, [sp, #-261]!	; 0xfffffefb
  ec:	05300205 	ldreq	r0, [r0, #-517]!	; 0xfffffdfb
  f0:	01052023 	tsteq	r5, r3, lsr #32
  f4:	0205772f 	andeq	r7, r5, #12320768	; 0xbc0000
  f8:	200c052f 	andcs	r0, ip, pc, lsr #10
  fc:	052f0205 	streq	r0, [pc, #-517]!	; fffffeff <_ctype_+0xdfffd63a>
 100:	0205200c 	andeq	r2, r5, #12
 104:	200b052f 	andcs	r0, fp, pc, lsr #10
 108:	052f0205 	streq	r0, [pc, #-517]!	; ffffff0b <_ctype_+0xdfffd646>
 10c:	0105200c 	tsteq	r5, ip
 110:	0505a12f 	streq	sl, [r5, #-303]	; 0xfffffed1
 114:	2e04052f 	cfsh32cs	mvfx0, mvfx4, #31
 118:	02001405 	andeq	r1, r0, #83886080	; 0x5000000
 11c:	052e0104 	streq	r0, [lr, #-260]!	; 0xfffffefc
 120:	04020001 	streq	r0, [r2], #-1
 124:	07053001 	streq	r3, [r5, -r1]
 128:	2f01051f 	svccs	0x0001051f
 12c:	2f02055b 	svccs	0x0002055b
 130:	05200c05 	streq	r0, [r0, #-3077]!	; 0xfffff3fb
 134:	12052f0e 	andne	r2, r5, #14, 30	; 0x38
 138:	2e040559 	cfrshl32cs	mvfx4, mvfx9, r0
 13c:	02001805 	andeq	r1, r0, #327680	; 0x50000
 140:	052e0104 	streq	r0, [lr, #-260]!	; 0xfffffefc
 144:	04020001 	streq	r0, [r2], #-1
 148:	11053401 	tstne	r5, r1, lsl #8
 14c:	3d0d051d 	cfstr32cc	mvfx0, [sp, #-116]	; 0xffffff8c
 150:	ae3e0105 	rsfgee	f0, f6, f5
 154:	052f0205 	streq	r0, [pc, #-517]!	; ffffff57 <_ctype_+0xdfffd692>
 158:	0205200c 	andeq	r2, r5, #12
 15c:	200c052f 	andcs	r0, ip, pc, lsr #10
 160:	052f0205 	streq	r0, [pc, #-517]!	; ffffff63 <_ctype_+0xdfffd69e>
 164:	0205200b 	andeq	r2, r5, #11
 168:	200c052f 	andcs	r0, ip, pc, lsr #10
 16c:	a02f0105 	eorge	r0, pc, r5, lsl #2
 170:	054b0505 	strbeq	r0, [fp, #-1285]	; 0xfffffafb
 174:	0b052e04 	bleq	14b98c <startup-0x1feb4674>
 178:	3d04052f 	cfstr32cc	mvfx0, [r4, #-188]	; 0xffffff44
 17c:	053d0e05 	ldreq	r0, [sp, #-3589]!	; 0xfffff1fb
 180:	02053d0f 	andeq	r3, r5, #960	; 0x3c0
 184:	3714053d 			; <UNDEFINED> instruction: 0x3714053d
 188:	05301305 	ldreq	r1, [r0, #-773]!	; 0xfffffcfb
 18c:	02042401 	andeq	r2, r4, #16777216	; 0x1000000
 190:	ba7fb303 	blt	1fecda4 <startup-0x1e01325c>
 194:	054b0405 	strbeq	r0, [fp, #-1029]	; 0xfffffbfb
 198:	01053d03 	tsteq	r5, r3, lsl #26
 19c:	1f030531 	svcne	0x00030531
 1a0:	05200e05 	streq	r0, [r0, #-3589]!	; 0xfffff1fb
 1a4:	05932f01 	ldreq	r2, [r3, #3841]	; 0xf01
 1a8:	0c057602 	stceq	6, cr7, [r5], {2}
 1ac:	910305a1 	smlatbls	r3, r1, r5, r0
 1b0:	05220c05 	streq	r0, [r2, #-3077]!	; 0xfffff3fb
 1b4:	0c059103 	stfeqd	f1, [r5], {3}
 1b8:	91030522 	tstls	r3, r2, lsr #10
 1bc:	05220c05 	streq	r0, [r2, #-3077]!	; 0xfffff3fb
 1c0:	0c059103 	stfeqd	f1, [r5], {3}
 1c4:	91030522 	tstls	r3, r2, lsr #10
 1c8:	05220c05 	streq	r0, [r2, #-3077]!	; 0xfffff3fb
 1cc:	0c059103 	stfeqd	f1, [r5], {3}
 1d0:	91030522 	tstls	r3, r2, lsr #10
 1d4:	05220c05 	streq	r0, [r2, #-3077]!	; 0xfffff3fb
 1d8:	0c059103 	stfeqd	f1, [r5], {3}
 1dc:	91030522 	tstls	r3, r2, lsr #10
 1e0:	05220205 	streq	r0, [r2, #-517]!	; 0xfffffdfb
 1e4:	08750801 	ldmdaeq	r5!, {r0, fp}^
 1e8:	9f0a0585 	svcls	0x000a0585
 1ec:	052e0205 	streq	r0, [lr, #-517]!	; 0xfffffdfb
 1f0:	0305210b 	movweq	r2, #20747	; 0x510b
 1f4:	2113052e 	tstcs	r3, lr, lsr #10
 1f8:	05900505 	ldreq	r0, [r0, #1285]	; 0x505
 1fc:	05a02f04 	streq	r2, [r0, #3844]!	; 0xf04
 200:	0402001f 	streq	r0, [r2], #-31	; 0xffffffe1
 204:	03058c02 	movweq	r8, #23554	; 0x5c02
 208:	01040200 	mrseq	r0, R12_usr
 20c:	001e053c 	andseq	r0, lr, ip, lsr r5
 210:	3b020402 	blcc	81220 <startup-0x1ff7ede0>
 214:	02000205 	andeq	r0, r0, #1342177280	; 0x50000000
 218:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 21c:	05874201 	streq	r4, [r7, #513]	; 0x201
 220:	05132102 	ldreq	r2, [r3, #-258]	; 0xfffffefe
 224:	05232101 	streq	r2, [r3, #-257]!	; 0xfffffeff
 228:	05132102 	ldreq	r2, [r3, #-258]	; 0xfffffefe
 22c:	05232101 	streq	r2, [r3, #-257]!	; 0xfffffeff
 230:	05132102 	ldreq	r2, [r3, #-258]	; 0xfffffefe
 234:	05232101 	streq	r2, [r3, #-257]!	; 0xfffffeff
 238:	05132102 	ldreq	r2, [r3, #-258]	; 0xfffffefe
 23c:	05252101 	streq	r2, [r5, #-257]!	; 0xfffffeff
 240:	07053d02 	streq	r3, [r5, -r2, lsl #26]
 244:	0205754b 	andeq	r7, r5, #314572800	; 0x12c00000
 248:	054b4b67 	strbeq	r4, [fp, #-2919]	; 0xfffff499
 24c:	05854b01 	streq	r4, [r5, #2817]	; 0xb01
 250:	03054b04 	movweq	r4, #23300	; 0x5b04
 254:	4b08053e 	blmi	201754 <startup-0x1fdfe8ac>
 258:	4c750305 	ldclmi	3, cr0, [r5], #-20	; 0xffffffec
 25c:	0301054b 	movweq	r0, #5451	; 0x154b
 260:	03054a09 	movweq	r4, #23049	; 0x5a09
 264:	4b207a03 	blmi	81ea78 <startup-0x1f7e1588>
 268:	053d0505 	ldreq	r0, [sp, #-1285]!	; 0xfffffafb
 26c:	01053d03 	tsteq	r5, r3, lsl #26
 270:	0205774d 	andeq	r7, r5, #20185088	; 0x1340000
 274:	3d4b4b59 	vstrcc	d20, [fp, #-356]	; 0xfffffe9c
 278:	4e4b0105 	dvfmie	f0, f3, f5
 27c:	052f0205 	streq	r0, [pc, #-517]!	; 7f <startup-0x1fffff81>
 280:	0205200d 	andeq	r2, r5, #13
 284:	053d3d2f 	ldreq	r3, [sp, #-3375]!	; 0xfffff2d1
 288:	05764b01 	ldrbeq	r4, [r6, #-2817]!	; 0xfffff4ff
 28c:	24055906 	strcs	r5, [r5], #-2310	; 0xfffff6fa
 290:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
 294:	003c0601 	eorseq	r0, ip, r1, lsl #12
 298:	3c020402 	cfstrscc	mvf0, [r2], {2}
 29c:	02000a05 	andeq	r0, r0, #20480	; 0x5000
 2a0:	20060404 	andcs	r0, r6, r4, lsl #8
 2a4:	02002205 	andeq	r2, r0, #1342177280	; 0x50000000
 2a8:	05210404 	streq	r0, [r1, #-1028]!	; 0xfffffbfc
 2ac:	04020002 	streq	r0, [r2], #-2
 2b0:	01056604 	tsteq	r5, r4, lsl #12
 2b4:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
 2b8:	07054c4b 	streq	r4, [r5, -fp, asr #24]
 2bc:	2116054b 	tstcs	r6, fp, asr #10
 2c0:	053c0305 	ldreq	r0, [ip, #-773]!	; 0xfffffcfb
 2c4:	07054908 	streq	r4, [r5, -r8, lsl #18]
 2c8:	3001052e 	andcc	r0, r1, lr, lsr #10
 2cc:	4b04055a 	blmi	10183c <startup-0x1fefe7c4>
 2d0:	053d0305 	ldreq	r0, [sp, #-773]!	; 0xfffffcfb
 2d4:	07057b01 	streq	r7, [r5, -r1, lsl #22]
 2d8:	0305751b 	movweq	r7, #21787	; 0x551b
 2dc:	01057575 	tsteq	r5, r5, ror r5
 2e0:	07054c76 	smlsdxeq	r5, r6, ip, r4
 2e4:	00090567 	andeq	r0, r9, r7, ror #10
 2e8:	20010402 	andcs	r0, r1, r2, lsl #8
 2ec:	02001d05 	andeq	r1, r0, #320	; 0x140
 2f0:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 2f4:	04020007 	streq	r0, [r2], #-7
 2f8:	02053c01 	andeq	r3, r5, #256	; 0x100
 2fc:	05593d2f 	ldrbeq	r3, [r9, #-3375]	; 0xfffff2d1
 300:	054c3d01 	strbeq	r3, [ip, #-3329]	; 0xfffff2ff
 304:	09056707 	stmdbeq	r5, {r0, r1, r2, r8, r9, sl, sp, lr}
 308:	01040200 	mrseq	r0, R12_usr
 30c:	001d0520 	andseq	r0, sp, r0, lsr #10
 310:	3c010402 	cfstrscc	mvf0, [r1], {2}
 314:	02000705 	andeq	r0, r0, #1310720	; 0x140000
 318:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 31c:	593d2f02 	ldmdbpl	sp!, {r1, r8, r9, sl, fp, sp}
 320:	4d3d0105 	ldfmis	f0, [sp, #-20]!	; 0xffffffec
 324:	053d0205 	ldreq	r0, [sp, #-517]!	; 0xfffffdfb
 328:	0205200d 	andeq	r2, r5, #13
 32c:	15053d2f 	strne	r3, [r5, #-3375]	; 0xfffff2d1
 330:	5902053d 	stmdbpl	r2, {r0, r2, r3, r4, r5, r8, sl}
 334:	05200d05 	streq	r0, [r0, #-3333]!	; 0xfffff2fb
 338:	01052f09 	tsteq	r5, r9, lsl #30
 33c:	0205a12f 	andeq	sl, r5, #-1073741813	; 0xc000000b
 340:	200d053d 	andcs	r0, sp, sp, lsr r5
 344:	3d2f0205 	sfmcc	f0, 4, [pc, #-20]!	; 338 <startup-0x1ffffcc8>
 348:	053d1505 	ldreq	r1, [sp, #-1285]!	; 0xfffffafb
 34c:	0d055902 	vstreq.16	s10, [r5, #-4]	; <UNPREDICTABLE>
 350:	2f090520 	svccs	0x00090520
 354:	a02f0105 	eorge	r0, pc, r5, lsl #2
 358:	3d3d0205 	lfmcc	f0, 4, [sp, #-20]!	; 0xffffffec
 35c:	2f15052f 	svccs	0x0015052f
 360:	05201005 	streq	r1, [r0, #-5]!
 364:	09053d02 	stmdbeq	r5, {r1, r8, sl, fp, ip, sp}
 368:	2f01053d 	svccs	0x0001053d
 36c:	67020576 	smlsdxvs	r2, r6, r5, r0
 370:	01053d3d 	tsteq	r5, sp, lsr sp
 374:	02054c59 	andeq	r4, r5, #22784	; 0x5900
 378:	053d3d67 	ldreq	r3, [sp, #-3431]!	; 0xfffff299
 37c:	054c5901 	strbeq	r5, [ip, #-2305]	; 0xfffff6ff
 380:	053d6702 	ldreq	r6, [sp, #-1794]!	; 0xfffff8fe
 384:	0205200f 	andeq	r2, r5, #15
 388:	01052f3d 	tsteq	r5, sp, lsr pc
 38c:	0605683d 			; <UNDEFINED> instruction: 0x0605683d
 390:	20040568 	andcs	r0, r4, r8, ror #10
 394:	054b0e05 	strbeq	r0, [fp, #-3589]	; 0xfffff1fb
 398:	0e056602 	cfmadd32eq	mvax0, mvfx6, mvfx5, mvfx2
 39c:	4b010520 	blmi	41824 <startup-0x1ffbe7dc>
 3a0:	68060568 	stmdavs	r6, {r3, r5, r6, r8, sl}
 3a4:	05200405 	streq	r0, [r0, #-1029]!	; 0xfffffbfb
 3a8:	04054b08 	streq	r4, [r5], #-2824	; 0xfffff4f8
 3ac:	2f02059e 	svccs	0x0002059e
 3b0:	05200e05 	streq	r0, [r0, #-3589]!	; 0xfffff1fb
 3b4:	056a6701 	strbeq	r6, [sl, #-1793]!	; 0xfffff8ff
 3b8:	0c053202 	sfmeq	f3, 4, [r5], {2}
 3bc:	2f020520 	svccs	0x00020520
 3c0:	05200c05 	streq	r0, [r0, #-3077]!	; 0xfffff3fb
 3c4:	0b052f02 	bleq	14bfd4 <startup-0x1feb402c>
 3c8:	2f020520 	svccs	0x00020520
 3cc:	05200c05 	streq	r0, [r0, #-3077]!	; 0xfffff3fb
 3d0:	09052f07 	stmdbeq	r5, {r0, r1, r2, r8, r9, sl, fp, sp}
 3d4:	01040200 	mrseq	r0, R12_usr
 3d8:	00130520 	andseq	r0, r3, r0, lsr #10
 3dc:	2e010402 	cdpcs	4, 0, cr0, cr1, cr2, {0}
 3e0:	02000705 	andeq	r0, r0, #1310720	; 0x140000
 3e4:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 3e8:	0c052102 	stfeqs	f2, [r5], {2}
 3ec:	2f010520 	svccs	0x00010520
 3f0:	4c0505a2 	cfstr32mi	mvfx0, [r5], {162}	; 0xa2
 3f4:	05830405 	streq	r0, [r3, #1029]	; 0x405
 3f8:	03053e07 	movweq	r3, #24071	; 0x5e07
 3fc:	2f2f2f22 	svccs	0x002f2f22
 400:	052f0505 	streq	r0, [pc, #-1285]!	; ffffff03 <_ctype_+0xdfffd63e>
 404:	3c7a0307 	ldclcc	3, cr0, [sl], #-28	; 0xffffffe4
 408:	5b440105 	blpl	1100824 <startup-0x1eeff7dc>
 40c:	054b0205 	strbeq	r0, [fp, #-517]	; 0xfffffdfb
 410:	04029f01 	streq	r9, [r2], #-3841	; 0xfffff0ff
 414:	30010100 	andcc	r0, r1, r0, lsl #2
 418:	03000005 	movweq	r0, #5
 41c:	00009900 	andeq	r9, r0, r0, lsl #18
 420:	fb010200 	blx	40c2a <startup-0x1ffbf3d6>
 424:	01000d0e 	tsteq	r0, lr, lsl #26
 428:	00010101 	andeq	r0, r1, r1, lsl #2
 42c:	00010000 	andeq	r0, r1, r0
 430:	3a430100 	bcc	10c0838 <startup-0x1ef3f7c8>
 434:	6168432f 	cmnvs	r8, pc, lsr #6
 438:	72656d6c 	rsbvc	r6, r5, #108, 26	; 0x1b00
 43c:	65592f73 	ldrbvs	r2, [r9, #-3955]	; 0xfffff08d
 440:	2f317261 	svccs	0x00317261
 444:	2f34504c 	svccs	0x0034504c
 448:	2f504f4d 	svccs	0x00504f4d
 44c:	2f504f4d 	svccs	0x00504f4d
 450:	6262614c 	rsbvs	r6, r2, #76, 2
 454:	6e694d35 	mcrvs	13, 3, r4, cr9, cr5, {1}
 458:	65775365 	ldrbvs	r5, [r7, #-869]!	; 0xfffffc9b
 45c:	72657065 	rsbvc	r7, r5, #101	; 0x65
 460:	6e696d2f 	cdpvs	13, 6, cr6, cr9, cr15, {1}
 464:	65775365 	ldrbvs	r5, [r7, #-869]!	; 0xfffffc9b
 468:	72657065 	rsbvc	r7, r5, #101	; 0x65
 46c:	4d2f4447 	cfstrsmi	mvf4, [pc, #-284]!	; 358 <startup-0x1ffffca8>
 470:	53656e69 	cmnpl	r5, #1680	; 0x690
 474:	70656577 	rsbvc	r6, r5, r7, ror r5
 478:	44477265 	strbmi	r7, [r7], #-613	; 0xfffffd9b
 47c:	61670000 	cmnvs	r7, r0
 480:	6c5f656d 	cfldr64vs	mvdx6, [pc], {109}	; 0x6d
 484:	6369676f 	cmnvs	r9, #29097984	; 0x1bc0000
 488:	0100632e 	tsteq	r0, lr, lsr #6
 48c:	61670000 	cmnvs	r7, r0
 490:	6c5f656d 	cfldr64vs	mvdx6, [pc], {109}	; 0x6d
 494:	6369676f 	cmnvs	r9, #29097984	; 0x1bc0000
 498:	6365645f 	cmnvs	r5, #1593835520	; 0x5f000000
 49c:	6172616c 	cmnvs	r2, ip, ror #2
 4a0:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 4a4:	00682e73 	rsbeq	r2, r8, r3, ror lr
 4a8:	3c000001 	stccc	0, cr0, [r0], {1}
 4ac:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
 4b0:	6e692d74 	mcrvs	13, 3, r2, cr9, cr4, {3}
 4b4:	0000003e 	andeq	r0, r0, lr, lsr r0
 4b8:	01050000 	mrseq	r0, (UNDEF: 5)
 4bc:	80020500 	andhi	r0, r2, r0, lsl #10
 4c0:	03200008 			; <UNDEFINED> instruction: 0x03200008
 4c4:	0605010c 	streq	r0, [r5], -ip, lsl #2
 4c8:	0a052f3d 	beq	14c1c4 <startup-0x1feb3e3c>
 4cc:	2e02052f 	cfsh32cs	mvfx0, mvfx2, #31
 4d0:	05210b05 	streq	r0, [r1, #-2821]!	; 0xfffff4fb
 4d4:	12052e03 	andne	r2, r5, #3, 28	; 0x30
 4d8:	f2060522 	vrshl.s8	d0, d18, d6
 4dc:	02002805 	andeq	r2, r0, #327680	; 0x50000
 4e0:	052e0104 	streq	r0, [lr, #-260]!	; 0xfffffefc
 4e4:	0402001a 	streq	r0, [r2], #-26	; 0xffffffe6
 4e8:	1205f201 	andne	pc, r5, #268435456	; 0x10000000
 4ec:	001e052f 	andseq	r0, lr, pc, lsr #10
 4f0:	39020402 	stmdbcc	r2, {r1, sl}
 4f4:	02000305 	andeq	r0, r0, #335544320	; 0x14000000
 4f8:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 4fc:	0402001d 	streq	r0, [r2], #-29	; 0xffffffe3
 500:	02053b02 	andeq	r3, r5, #2048	; 0x800
 504:	01040200 	mrseq	r0, R12_usr
 508:	4204053c 	andmi	r0, r4, #60, 10	; 0xf000000
 50c:	053d0c05 	ldreq	r0, [sp, #-3077]!	; 0xfffff3fb
 510:	05843d01 	streq	r3, [r4, #3329]	; 0xd01
 514:	02057606 	andeq	r7, r5, #6291456	; 0x600000
 518:	2f07052f 	svccs	0x0007052f
 51c:	05220d05 	streq	r0, [r2, #-3333]!	; 0xfffff2fb
 520:	07054b0c 	streq	r4, [r5, -ip, lsl #22]
 524:	670c053c 	smladxvs	ip, ip, r5, r0
 528:	053c0705 	ldreq	r0, [ip, #-1797]!	; 0xfffff8fb
 52c:	05056713 	streq	r6, [r5, #-1811]	; 0xfffff8ed
 530:	002905f2 	strdeq	r0, [r9], -r2	; <UNPREDICTABLE>
 534:	2e010402 	cdpcs	4, 0, cr0, cr1, cr2, {0}
 538:	02001e05 	andeq	r1, r0, #5, 28	; 0x50
 53c:	052e0104 	streq	r0, [lr, #-260]!	; 0xfffffefc
 540:	04020036 	streq	r0, [r2], #-54	; 0xffffffca
 544:	2c053c02 	stccs	12, cr3, [r5], {2}
 548:	02040200 	andeq	r0, r4, #0, 4
 54c:	3e17052e 	cfmul64cc	mvdx0, mvdx7, mvdx14
 550:	13080f05 	movwne	r0, #36613	; 0x8f05
 554:	78030705 	stmdavc	r3, {r0, r2, r8, r9, sl}
 558:	0302053c 	movweq	r0, #9532	; 0x253c
 55c:	0a053c0b 	beq	14f590 <startup-0x1feb0a70>
 560:	2e02052f 	cfsh32cs	mvfx0, mvfx2, #31
 564:	05210b05 	streq	r0, [r1, #-2821]!	; 0xfffff4fb
 568:	20052e03 	andcs	r2, r5, r3, lsl #28
 56c:	03040200 	movweq	r0, #16896	; 0x4200
 570:	001e0521 	andseq	r0, lr, r1, lsr #10
 574:	82030402 	andhi	r0, r3, #33554432	; 0x2000000
 578:	03040200 	movweq	r0, #16896	; 0x4200
 57c:	000305f1 	strdeq	r0, [r3], -r1
 580:	3c010402 	cfstrscc	mvf0, [r1], {2}
 584:	02001b05 	andeq	r1, r0, #5120	; 0x1400
 588:	053b0204 	ldreq	r0, [fp, #-516]!	; 0xfffffdfc
 58c:	04020002 	streq	r0, [r2], #-2
 590:	01053c01 	tsteq	r5, r1, lsl #24
 594:	0205923f 	andeq	r9, r5, #-268435453	; 0xf0000003
 598:	01056775 	tsteq	r5, r5, ror r7
 59c:	0a054c83 	beq	1537b0 <startup-0x1feac850>
 5a0:	2e02053d 	mcrcs	5, 0, r0, cr2, cr13, {1}
 5a4:	05210b05 	streq	r0, [r1, #-2821]!	; 0xfffff4fb
 5a8:	12052e03 	andne	r2, r5, #3, 28	; 0x30
 5ac:	f2060521 	vrshl.s8	d0, d17, d6
 5b0:	1e056730 	mcrne	7, 0, r6, cr5, cr0, {1}
 5b4:	02040200 	andeq	r0, r4, #0, 4
 5b8:	0003057e 	andeq	r0, r3, lr, ror r5
 5bc:	3c010402 	cfstrscc	mvf0, [r1], {2}
 5c0:	02001b05 	andeq	r1, r0, #5120	; 0x1400
 5c4:	053b0204 	ldreq	r0, [fp, #-516]!	; 0xfffffdfc
 5c8:	04020002 	streq	r0, [r2], #-2
 5cc:	01053c01 	tsteq	r5, r1, lsl #24
 5d0:	0c05bc43 	stceq	12, cr11, [r5], {67}	; 0x43
 5d4:	2e110575 	mrccs	5, 0, r0, cr1, cr5, {3}
 5d8:	052e1405 	streq	r1, [lr, #-1029]!	; 0xfffffbfb
 5dc:	2405d604 	strcs	sp, [r5], #-1540	; 0xfffff9fc
 5e0:	2e29053e 	mcrcs	5, 1, r0, cr9, cr14, {1}
 5e4:	052e2c05 	streq	r2, [lr, #-3077]!	; 0xfffff3fb
 5e8:	0905d635 	stmdbeq	r5, {r0, r2, r4, r5, r9, sl, ip, lr, pc}
 5ec:	2e0e0520 	cfsh32cs	mvfx0, mvfx14, #16
 5f0:	052e3a05 	streq	r3, [lr, #-2565]!	; 0xfffff5fb
 5f4:	05d7901a 	ldrbeq	r9, [r7, #26]
 5f8:	22052e1f 	andcs	r2, r5, #496	; 0x1f0
 5fc:	d640052e 	strble	r0, [r0], -lr, lsr #10
 600:	02002e05 	andeq	r2, r0, #5, 28	; 0x50
 604:	052e0104 	streq	r0, [lr, #-260]!	; 0xfffffefc
 608:	04020040 	streq	r0, [r2], #-64	; 0xffffffc0
 60c:	43052e01 	movwmi	r2, #24065	; 0x5e01
 610:	02040200 	andeq	r0, r4, #0, 4
 614:	0040052e 	subeq	r0, r0, lr, lsr #10
 618:	2e020402 	cdpcs	4, 0, cr0, cr2, cr2, {0}
 61c:	02001105 	andeq	r1, r0, #1073741825	; 0x40000001
 620:	05200404 	streq	r0, [r0, #-1028]!	; 0xfffffbfc
 624:	04020013 	streq	r0, [r2], #-19	; 0xffffffed
 628:	3a052f04 	bcc	14c240 <startup-0x1feb3dc0>
 62c:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
 630:	0036052e 	eorseq	r0, r6, lr, lsr #10
 634:	2e010402 	cdpcs	4, 0, cr0, cr1, cr2, {0}
 638:	02003a05 	andeq	r3, r0, #20480	; 0x5000
 63c:	052e0104 	streq	r0, [lr, #-260]!	; 0xfffffefc
 640:	0402004a 	streq	r0, [r2], #-74	; 0xffffffb6
 644:	3a052e02 	bcc	14be54 <startup-0x1feb41ac>
 648:	02040200 	andeq	r0, r4, #0, 4
 64c:	0010052e 	andseq	r0, r0, lr, lsr #10
 650:	20040402 	andcs	r0, r4, r2, lsl #8
 654:	02001105 	andeq	r1, r0, #1073741825	; 0x40000001
 658:	052f0404 	streq	r0, [pc, #-1028]!	; 25c <startup-0x1ffffda4>
 65c:	04020016 	streq	r0, [r2], #-22	; 0xffffffea
 660:	02052e04 	andeq	r2, r5, #4, 28	; 0x40
 664:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
 668:	0803052e 	stmdaeq	r3, {r1, r2, r3, r5, r8, sl}
 66c:	2501059a 	strcs	r0, [r1, #-1434]	; 0xfffffa66
 670:	2f0205a0 	svccs	0x000205a0
 674:	052f0b05 	streq	r0, [pc, #-2821]!	; fffffb77 <_ctype_+0xdfffd2b2>
 678:	055b3d01 	ldrbeq	r3, [fp, #-3329]	; 0xfffff2ff
 67c:	04055910 	streq	r5, [r5], #-2320	; 0xfffff6f0
 680:	3f1005f2 	svccc	0x001005f2
 684:	05f20405 	ldrbeq	r0, [r2, #1029]!	; 0x405
 688:	0402001c 	streq	r0, [r2], #-28	; 0xffffffe4
 68c:	3f052e01 	svccc	0x00052e01
 690:	01040200 	mrseq	r0, R12_usr
 694:	00180582 	andseq	r0, r8, r2, lsl #11
 698:	82010402 	andhi	r0, r1, #33554432	; 0x2000000
 69c:	05300b05 	ldreq	r0, [r0, #-2821]!	; 0xfffff4fb
 6a0:	0c053c03 	stceq	12, cr3, [r5], {3}
 6a4:	3c040521 	cfstr32cc	mvfx0, [r4], {33}	; 0x21
 6a8:	05210f05 	streq	r0, [r1, #-3845]!	; 0xfffff0fb
 6ac:	17053c14 	smladne	r5, r4, ip, r3
 6b0:	d607053c 			; <UNDEFINED> instruction: 0xd607053c
 6b4:	02002705 	andeq	r2, r0, #1310720	; 0x140000
 6b8:	052e0104 	streq	r0, [lr, #-260]!	; 0xfffffefc
 6bc:	04020024 	streq	r0, [r2], #-36	; 0xffffffdc
 6c0:	3a059e01 	bcc	167ecc <startup-0x1fe98134>
 6c4:	02040200 	andeq	r0, r4, #0, 4
 6c8:	003d0520 	eorseq	r0, sp, r0, lsr #10
 6cc:	3c030402 	cfstrscc	mvf0, [r3], {2}
 6d0:	053e0605 	ldreq	r0, [lr, #-1541]!	; 0xfffff9fb
 6d4:	0402001d 	streq	r0, [r2], #-29	; 0xffffffe3
 6d8:	04058d02 	streq	r8, [r5], #-3330	; 0xfffff2fe
 6dc:	01040200 	mrseq	r0, R12_usr
 6e0:	001b053c 	andseq	r0, fp, ip, lsr r5
 6e4:	3b020402 	blcc	816f4 <startup-0x1ff7e90c>
 6e8:	02000305 	andeq	r0, r0, #335544320	; 0x14000000
 6ec:	423c0104 	eorsmi	r0, ip, #4, 2
 6f0:	05220f05 	streq	r0, [r2, #-3845]!	; 0xfffff0fb
 6f4:	04059110 	streq	r9, [r5], #-272	; 0xfffffef0
 6f8:	300305f2 	strdcc	r0, [r3], -r2
 6fc:	2215052f 	andscs	r0, r5, #197132288	; 0xbc00000
 700:	13080205 	movwne	r0, #33285	; 0x8205
 704:	ad080405 	cfstrsge	mvf0, [r8, #-20]	; 0xffffffec
 708:	053d0b05 	ldreq	r0, [sp, #-2821]!	; 0xfffff4fb
 70c:	0c053c03 	stceq	12, cr3, [r5], {3}
 710:	3c040521 	cfstr32cc	mvfx0, [r4], {33}	; 0x21
 714:	05210805 	streq	r0, [r1, #-2053]!	; 0xfffff7fb
 718:	25059e07 	strcs	r9, [r5, #-3591]	; 0xfffff1f9
 71c:	01040200 	mrseq	r0, R12_usr
 720:	002a0520 	eoreq	r0, sl, r0, lsr #10
 724:	3c010402 	cfstrscc	mvf0, [r1], {2}
 728:	02002d05 	andeq	r2, r0, #320	; 0x140
 72c:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 730:	0402001b 	streq	r0, [r2], #-27	; 0xffffffe5
 734:	4405d601 	strmi	sp, [r5], #-1537	; 0xfffff9ff
 738:	02040200 	andeq	r0, r4, #0, 4
 73c:	0049052e 	subeq	r0, r9, lr, lsr #10
 740:	3c020402 	cfstrscc	mvf0, [r2], {2}
 744:	02004c05 	andeq	r4, r0, #1280	; 0x500
 748:	053c0204 	ldreq	r0, [ip, #-516]!	; 0xfffffdfc
 74c:	0402003a 	streq	r0, [r2], #-58	; 0xffffffc6
 750:	0605d602 	streq	sp, [r5], -r2, lsl #12
 754:	001d0531 	andseq	r0, sp, r1, lsr r5
 758:	8c020402 	cfstrshi	mvf0, [r2], {2}
 75c:	02000405 	andeq	r0, r0, #83886080	; 0x5000000
 760:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 764:	0402001c 	streq	r0, [r2], #-28	; 0xffffffe4
 768:	03053b02 	movweq	r3, #23298	; 0x5b02
 76c:	01040200 	mrseq	r0, R12_usr
 770:	4a6b033c 	bmi	1ac1468 <startup-0x1e53eb98>
 774:	1d030105 	stfnes	f0, [r3, #-20]	; 0xffffffec
 778:	06059220 	streq	r9, [r5], -r0, lsr #4
 77c:	2f0a0567 	svccs	0x000a0567
 780:	053c0205 	ldreq	r0, [ip, #-517]!	; 0xfffffdfb
 784:	0305210b 	movweq	r2, #20747	; 0x510b
 788:	2107053c 	tstcs	r7, ip, lsr r5
 78c:	059e0605 	ldreq	r0, [lr, #1541]	; 0x605
 790:	19052114 	stmdbne	r5, {r2, r4, r8, sp}
 794:	3c08053c 	cfstr32cc	mvfx0, [r8], {60}	; 0x3c
 798:	9e080705 	cdpls	7, 0, cr0, cr8, cr5, {0}
 79c:	02002305 	andeq	r2, r0, #335544320	; 0x14000000
 7a0:	052e0104 	streq	r0, [lr, #-260]!	; 0xfffffefc
 7a4:	04020026 	streq	r0, [r2], #-38	; 0xffffffda
 7a8:	0b053c02 	bleq	14f7b8 <startup-0x1feb0848>
 7ac:	001c053d 	andseq	r0, ip, sp, lsr r5
 7b0:	39020402 	stmdbcc	r2, {r1, sl}
 7b4:	02000305 	andeq	r0, r0, #335544320	; 0x14000000
 7b8:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 7bc:	0402001b 	streq	r0, [r2], #-27	; 0xffffffe5
 7c0:	02053b02 	andeq	r3, r5, #2048	; 0x800
 7c4:	01040200 	mrseq	r0, R12_usr
 7c8:	4109053c 	tstmi	r9, ip, lsr r5
 7cc:	68210105 	stmdavs	r1!, {r0, r2, r8}
 7d0:	059f0c05 	ldreq	r0, [pc, #3077]	; 13dd <startup-0x1fffec23>
 7d4:	05683d01 	strbeq	r3, [r8, #-3329]!	; 0xfffff2ff
 7d8:	01059f0c 	tsteq	r5, ip, lsl #30
 7dc:	11056a3d 	tstne	r5, sp, lsr sl
 7e0:	2e160584 	cdpcs	5, 1, cr0, cr6, cr4, {4}
 7e4:	052e0205 	streq	r0, [lr, #-517]!	; 0xfffffdfb
 7e8:	0592080a 	ldreq	r0, [r2, #2058]	; 0x80a
 7ec:	1405850f 	strne	r8, [r5], #-1295	; 0xfffffaf1
 7f0:	2e06052e 	cfsh32cs	mvfx0, mvfx6, #30
 7f4:	052f0f05 	streq	r0, [pc, #-3845]!	; fffff8f7 <_ctype_+0xdfffd032>
 7f8:	14052e1c 	strne	r2, [r5], #-3612	; 0xfffff1e4
 7fc:	2006052e 	andcs	r0, r6, lr, lsr #10
 800:	052f0505 	streq	r0, [pc, #-1285]!	; 303 <startup-0x1ffffcfd>
 804:	07057404 	streq	r7, [r5, -r4, lsl #8]
 808:	02053d22 	andeq	r3, r5, #2176	; 0x880
 80c:	0905833e 	stmdbeq	r5, {r1, r2, r3, r4, r5, r8, r9, pc}
 810:	4b010583 	blmi	41e24 <startup-0x1ffbe1dc>
 814:	590405af 	stmdbpl	r4, {r0, r1, r2, r3, r5, r7, r8, sl}
 818:	02000b05 	andeq	r0, r0, #5120	; 0x1400
 81c:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 820:	09053d0a 	stmdbeq	r5, {r1, r3, r8, sl, fp, ip, sp}
 824:	0010052f 	andseq	r0, r0, pc, lsr #10
 828:	3c010402 	cfstrscc	mvf0, [r1], {2}
 82c:	303d0a05 	eorscc	r0, sp, r5, lsl #20
 830:	4c210105 	stfmis	f0, [r1], #-20	; 0xffffffec
 834:	059f0205 	ldreq	r0, [pc, #517]	; a41 <startup-0x1ffff5bf>
 838:	04059106 	streq	r9, [r5], #-262	; 0xfffffefa
 83c:	3008052e 	andcc	r0, r8, lr, lsr #10
 840:	05670305 	strbeq	r0, [r7, #-773]!	; 0xfffffcfb
 844:	03054a20 	movweq	r4, #23072	; 0x5a20
 848:	0301052e 	movweq	r0, #5422	; 0x152e
 84c:	0b05580d 	bleq	156888 <startup-0x1fea9778>
 850:	05207903 	streq	r7, [r0, #-2307]!	; 0xfffff6fd
 854:	03053c09 	movweq	r3, #23561	; 0x5c09
 858:	87010530 	smladxhi	r1, r0, r5, r0
 85c:	051e0305 	ldreq	r0, [lr, #-773]	; 0xfffffcfb
 860:	05f49201 	ldrbeq	r9, [r4, #513]!	; 0x201
 864:	05056707 	streq	r6, [r5, #-1799]	; 0xfffff8f9
 868:	30020566 	andcc	r0, r2, r6, ror #10
 86c:	3dcb0905 	vstrcc.16	s1, [fp, #10]	; <UNPREDICTABLE>
 870:	054b0405 	strbeq	r0, [fp, #-1029]	; 0xfffffbfb
 874:	053d2209 	ldreq	r2, [sp, #-521]!	; 0xfffffdf7
 878:	09053d04 	stmdbeq	r5, {r2, r8, sl, fp, ip, sp}
 87c:	04054b22 	streq	r4, [r5], #-2850	; 0xfffff4de
 880:	2209053d 	andcs	r0, r9, #255852544	; 0xf400000
 884:	3d04053d 	cfstr32cc	mvfx0, [r4, #-244]	; 0xffffff0c
 888:	05220905 	streq	r0, [r2, #-2309]!	; 0xfffff6fb
 88c:	05692101 	strbeq	r2, [r9, #-257]!	; 0xfffffeff
 890:	02054b0a 	andeq	r4, r5, #10240	; 0x2800
 894:	220b052e 	andcs	r0, fp, #192937984	; 0xb800000
 898:	052e0305 	streq	r0, [lr, #-773]!	; 0xfffffcfb
 89c:	04020005 	streq	r0, [r2], #-5
 8a0:	0e052203 	cdpeq	2, 0, cr2, cr5, cr3, {0}
 8a4:	03040200 	movweq	r0, #16896	; 0x4200
 8a8:	00050582 	andeq	r0, r5, r2, lsl #11
 8ac:	75030402 	strvc	r0, [r3, #-1026]	; 0xfffffbfe
 8b0:	02000e05 	andeq	r0, r0, #5, 28	; 0x50
 8b4:	05820304 	streq	r0, [r2, #772]	; 0x304
 8b8:	04020005 	streq	r0, [r2], #-5
 8bc:	1a059103 	bne	164cd0 <startup-0x1fe9b330>
 8c0:	03040200 	movweq	r0, #16896	; 0x4200
 8c4:	00050582 	andeq	r0, r5, r2, lsl #11
 8c8:	91030402 	tstls	r3, r2, lsl #8
 8cc:	02001405 	andeq	r1, r0, #83886080	; 0x5000000
 8d0:	05820304 	streq	r0, [r2, #772]	; 0x304
 8d4:	04020005 	streq	r0, [r2], #-5
 8d8:	13059103 	movwne	r9, #20739	; 0x5103
 8dc:	03040200 	movweq	r0, #16896	; 0x4200
 8e0:	00050582 	andeq	r0, r5, r2, lsl #11
 8e4:	91030402 	tstls	r3, r2, lsl #8
 8e8:	02001105 	andeq	r1, r0, #1073741825	; 0x40000001
 8ec:	05820304 	streq	r0, [r2, #772]	; 0x304
 8f0:	0402001e 	streq	r0, [r2], #-30	; 0xffffffe2
 8f4:	90790303 	rsbsls	r0, r9, r3, lsl #6
 8f8:	02000305 	andeq	r0, r0, #335544320	; 0x14000000
 8fc:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 900:	0402001d 	streq	r0, [r2], #-29	; 0xffffffe3
 904:	02053a02 	andeq	r3, r5, #8192	; 0x2000
 908:	01040200 	mrseq	r0, R12_usr
 90c:	0301053c 	movweq	r0, #5436	; 0x153c
 910:	055c3c0c 	ldrbeq	r3, [ip, #-3084]	; 0xfffff3f4
 914:	053d5909 	ldreq	r5, [sp, #-2313]!	; 0xfffff6f7
 918:	05853d01 	streq	r3, [r5, #3329]	; 0xd01
 91c:	053d670c 	ldreq	r6, [sp, #-1804]!	; 0xfffff8f4
 920:	052f3d02 	streq	r3, [pc, #-3330]!	; fffffc26 <_ctype_+0xdfffd361>
 924:	07054b0f 	streq	r4, [r5, -pc, lsl #22]
 928:	0c053d3d 	stceq	13, cr3, [r5], {61}	; 0x3d
 92c:	3d02053d 	cfstr32cc	mvfx0, [r2, #-244]	; 0xffffff0c
 930:	052f834b 	streq	r8, [pc, #-843]!	; 5ed <startup-0x1ffffa13>
 934:	0805750b 	stmdaeq	r5, {r0, r1, r3, r8, sl, ip, sp, lr}
 938:	0a053d3d 	beq	14fe34 <startup-0x1feb01cc>
 93c:	3d0b053d 	cfstr32cc	mvfx0, [fp, #-244]	; 0xffffff0c
 940:	053d1005 	ldreq	r1, [sp, #-5]!
 944:	19023d01 	stmdbne	r2, {r0, r8, sl, fp, ip, sp}
 948:	4b010100 	blmi	40d50 <startup-0x1ffbf2b0>
 94c:	03000003 	movweq	r0, #3
 950:	0000aa00 	andeq	sl, r0, r0, lsl #20
 954:	fb010200 	blx	4115e <startup-0x1ffbeea2>
 958:	01000d0e 	tsteq	r0, lr, lsl #26
 95c:	00010101 	andeq	r0, r1, r1, lsl #2
 960:	00010000 	andeq	r0, r1, r0
 964:	3a430100 	bcc	10c0d6c <startup-0x1ef3f294>
 968:	6168432f 	cmnvs	r8, pc, lsr #6
 96c:	72656d6c 	rsbvc	r6, r5, #108, 26	; 0x1b00
 970:	65592f73 	ldrbvs	r2, [r9, #-3955]	; 0xfffff08d
 974:	2f317261 	svccs	0x00317261
 978:	2f34504c 	svccs	0x0034504c
 97c:	2f504f4d 	svccs	0x00504f4d
 980:	2f504f4d 	svccs	0x00504f4d
 984:	6262614c 	rsbvs	r6, r2, #76, 2
 988:	6e694d35 	mcrvs	13, 3, r4, cr9, cr5, {1}
 98c:	65775365 	ldrbvs	r5, [r7, #-869]!	; 0xfffffc9b
 990:	72657065 	rsbvc	r7, r5, #101	; 0x65
 994:	6e696d2f 	cdpvs	13, 6, cr6, cr9, cr15, {1}
 998:	65775365 	ldrbvs	r5, [r7, #-869]!	; 0xfffffc9b
 99c:	72657065 	rsbvc	r7, r5, #101	; 0x65
 9a0:	4d2f4447 	cfstrsmi	mvf4, [pc, #-284]!	; 88c <startup-0x1ffff774>
 9a4:	53656e69 	cmnpl	r5, #1680	; 0x690
 9a8:	70656577 	rsbvc	r6, r5, r7, ror r5
 9ac:	44477265 	strbmi	r7, [r7], #-613	; 0xfffffd9b
 9b0:	69740000 	ldmdbvs	r4!, {}^	; <UNPREDICTABLE>
 9b4:	3672656d 	ldrbtcc	r6, [r2], -sp, ror #10
 9b8:	0100682e 	tsteq	r0, lr, lsr #16
 9bc:	656b0000 	strbvs	r0, [fp, #-0]!
 9c0:	64617079 	strbtvs	r7, [r1], #-121	; 0xffffff87
 9c4:	0100682e 	tsteq	r0, lr, lsr #16
 9c8:	74730000 	ldrbtvc	r0, [r3], #-0
 9cc:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
 9d0:	00632e70 	rsbeq	r2, r3, r0, ror lr
 9d4:	67000001 	strvs	r0, [r0, -r1]
 9d8:	5f656d61 	svcpl	0x00656d61
 9dc:	69676f6c 	stmdbvs	r7!, {r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
 9e0:	65645f63 	strbvs	r5, [r4, #-3939]!	; 0xfffff09d
 9e4:	72616c63 	rsbvc	r6, r1, #25344	; 0x6300
 9e8:	6f697461 	svcvs	0x00697461
 9ec:	682e736e 	stmdavs	lr!, {r1, r2, r3, r5, r6, r8, r9, ip, sp, lr}
 9f0:	00000100 	andeq	r0, r0, r0, lsl #2
 9f4:	6f697067 	svcvs	0x00697067
 9f8:	0100682e 	tsteq	r0, lr, lsr #16
 9fc:	05000000 	streq	r0, [r0, #-0]
 a00:	02050001 	andeq	r0, r5, #1
 a04:	20001398 	mulcs	r0, r8, r3
 a08:	05011d03 	streq	r1, [r1, #-3331]	; 0xfffff2fd
 a0c:	0a052f08 	beq	14c634 <startup-0x1feb39cc>
 a10:	3d0c053d 	cfstr32cc	mvfx0, [ip, #-244]	; 0xffffff0c
 a14:	05840305 	streq	r0, [r4, #773]	; 0x305
 a18:	12054a0f 	andne	r4, r5, #61440	; 0xf000
 a1c:	7702052f 	strvc	r0, [r2, -pc, lsr #10]
 a20:	05200c05 	streq	r0, [r0, #-3077]!	; 0xfffff3fb
 a24:	0f052f05 	svceq	0x00052f05
 a28:	2f0d0520 	svccs	0x000d0520
 a2c:	05830c05 	streq	r0, [r3, #3077]	; 0xc05
 a30:	01058310 	tsteq	r5, r0, lsl r3
 a34:	05b0083d 	ldreq	r0, [r0, #2109]!	; 0x83d
 a38:	07052f0b 	streq	r2, [r5, -fp, lsl #30]
 a3c:	590b0583 	stmdbpl	fp, {r0, r1, r7, r8, sl}
 a40:	052e0405 	streq	r0, [lr, #-1029]!	; 0xfffffbfb
 a44:	0b053009 	bleq	14ca70 <startup-0x1feb3590>
 a48:	5a01053d 	bpl	41f44 <startup-0x1ffbe0bc>
 a4c:	2f120593 	svccs	0x00120593
 a50:	05661005 	strbeq	r1, [r6, #-5]!
 a54:	01052f02 	tsteq	r5, r2, lsl #30
 a58:	04055b59 	streq	r5, [r5], #-2905	; 0xfffff4a7
 a5c:	3d0d054b 	cfstr32cc	mvfx0, [sp, #-300]	; 0xfffffed4
 a60:	83100592 	tsthi	r0, #612368384	; 0x24800000
 a64:	923d0105 	eorsls	r0, sp, #1073741825	; 0x40000001
 a68:	052f0805 	streq	r0, [pc, #-2053]!	; 26b <startup-0x1ffffd95>
 a6c:	01053d0a 	tsteq	r5, sl, lsl #26
 a70:	0302043d 	movweq	r0, #9277	; 0x243d
 a74:	07058252 	smlsdeq	r5, r2, r2, r8
 a78:	3d06054b 	cfstr32cc	mvfx0, [r6, #-300]	; 0xfffffed4
 a7c:	052e0e05 	streq	r0, [lr, #-3589]!	; 0xfffff1fb
 a80:	0f053d06 	svceq	0x00053d06
 a84:	2f06052e 	svccs	0x0006052e
 a88:	052e0e05 	streq	r0, [lr, #-3589]!	; 0xfffff1fb
 a8c:	05933d01 	ldreq	r3, [r3, #3329]	; 0xd01
 a90:	0a053d10 	beq	14fed8 <startup-0x1feb0128>
 a94:	2e020567 	cfsh32cs	mvfx0, mvfx2, #55
 a98:	05220305 	streq	r0, [r2, #-773]!	; 0xfffffcfb
 a9c:	0505590d 	streq	r5, [r5, #-2317]	; 0xfffff6f3
 aa0:	3e04054b 	cfsh32cc	mvfx0, mvfx4, #43
 aa4:	053d1705 	ldreq	r1, [sp, #-1797]!	; 0xfffff8fb
 aa8:	1a052e20 	bne	14c330 <startup-0x1feb3cd0>
 aac:	2013052e 	andscs	r0, r3, lr, lsr #10
 ab0:	02001e05 	andeq	r1, r0, #5, 28	; 0x50
 ab4:	79030204 	stmdbvc	r3, {r2, r9}
 ab8:	0002053c 	andeq	r0, r2, ip, lsr r5
 abc:	3c010402 	cfstrscc	mvf0, [r1], {2}
 ac0:	053c0a03 	ldreq	r0, [ip, #-2563]!	; 0xfffff5fd
 ac4:	01053d09 	tsteq	r5, r9, lsl #26
 ac8:	01040200 	mrseq	r0, R12_usr
 acc:	13057721 	movwne	r7, #22305	; 0x5721
 ad0:	2e04053d 	mcrcs	5, 0, r0, cr4, cr13, {1}
 ad4:	05300305 	ldreq	r0, [r0, #-773]!	; 0xfffffcfb
 ad8:	05053d0a 	streq	r3, [r5, #-3338]	; 0xfffff2f6
 adc:	2f13054a 	svccs	0x0013054a
 ae0:	053d0a05 	ldreq	r0, [sp, #-2565]!	; 0xfffff5fb
 ae4:	04053013 	streq	r3, [r5], #-19	; 0xffffffed
 ae8:	3015052e 	andscc	r0, r5, lr, lsr #10
 aec:	05590505 	ldrbeq	r0, [r9, #-1285]	; 0xfffffafb
 af0:	0a054b12 	beq	153740 <startup-0x1feac8c0>
 af4:	3f01053d 	svccc	0x0001053d
 af8:	cd0f0585 	cfstr32gt	mvfx0, [pc, #-532]	; 8ec <startup-0x1ffff714>
 afc:	052e1905 	streq	r1, [lr, #-2309]!	; 0xfffff6fb
 b00:	0f052e03 	svceq	0x00052e03
 b04:	2e190521 	cfmul64cs	mvdx0, mvdx9, mvdx1
 b08:	052e0305 	streq	r0, [lr, #-773]!	; 0xfffffcfb
 b0c:	1905210f 	stmdbne	r5, {r0, r1, r2, r3, r8, sp}
 b10:	2e03052e 	cfsh32cs	mvfx0, mvfx3, #30
 b14:	05210f05 	streq	r0, [r1, #-3845]!	; 0xfffff0fb
 b18:	03052e19 	movweq	r2, #24089	; 0x5e19
 b1c:	210f052e 	tstcs	pc, lr, lsr #10
 b20:	052e1905 	streq	r1, [lr, #-2309]!	; 0xfffff6fb
 b24:	0f052e03 	svceq	0x00052e03
 b28:	2e190521 	cfmul64cs	mvdx0, mvdx9, mvdx1
 b2c:	052e0305 	streq	r0, [lr, #-773]!	; 0xfffffcfb
 b30:	05922201 	ldreq	r2, [r2, #513]	; 0x201
 b34:	0405410a 	streq	r4, [r5], #-266	; 0xfffffef6
 b38:	3d08052e 	cfstr32cc	mvfx0, [r8, #-184]	; 0xffffff48
 b3c:	054a0505 	strbeq	r0, [sl, #-1285]	; 0xfffffafb
 b40:	04020016 	streq	r0, [r2], #-22	; 0xffffffea
 b44:	08052001 	stmdaeq	r5, {r0, sp}
 b48:	4a05052f 	bmi	14200c <startup-0x1febdff4>
 b4c:	02001605 	andeq	r1, r0, #5242880	; 0x500000
 b50:	05200104 	streq	r0, [r0, #-260]!	; 0xfffffefc
 b54:	05052f08 	streq	r2, [r5, #-3848]	; 0xfffff0f8
 b58:	0016054a 	andseq	r0, r6, sl, asr #10
 b5c:	20010402 	andcs	r0, r1, r2, lsl #8
 b60:	052f0805 	streq	r0, [pc, #-2053]!	; 363 <startup-0x1ffffc9d>
 b64:	16054a05 	strne	r4, [r5], -r5, lsl #20
 b68:	01040200 	mrseq	r0, R12_usr
 b6c:	2f090520 	svccs	0x00090520
 b70:	04210105 	strteq	r0, [r1], #-261	; 0xfffffefb
 b74:	74420303 	strbvc	r0, [r2], #-771	; 0xfffffcfd
 b78:	053d0205 	ldreq	r0, [sp, #-517]!	; 0xfffffdfb
 b7c:	0605300a 	streq	r3, [r5], -sl
 b80:	3107053d 	tstcc	r7, sp, lsr r5
 b84:	054b0605 	strbeq	r0, [fp, #-1541]	; 0xfffff9fb
 b88:	03053207 	movweq	r3, #20999	; 0x5207
 b8c:	91080522 	tstls	r8, r2, lsr #10
 b90:	83220405 			; <UNDEFINED> instruction: 0x83220405
 b94:	052f0c05 	streq	r0, [pc, #-3077]!	; ffffff97 <_ctype_+0xdfffd6d2>
 b98:	11056706 	tstne	r5, r6, lsl #14
 b9c:	2007055a 	andcs	r0, r7, sl, asr r5
 ba0:	05300c05 	ldreq	r0, [r0, #-3077]!	; 0xfffff3fb
 ba4:	0705590f 	streq	r5, [r5, -pc, lsl #18]
 ba8:	590e0531 	stmdbpl	lr, {r0, r4, r5, r8, sl}
 bac:	05590505 	ldrbeq	r0, [r9, #-1285]	; 0xfffffafb
 bb0:	08058509 	stmdaeq	r5, {r0, r3, r8, sl, pc}
 bb4:	30070520 	andcc	r0, r7, r0, lsr #10
 bb8:	05751305 	ldrbeq	r1, [r5, #-773]!	; 0xfffffcfb
 bbc:	06052f07 	streq	r2, [r5], -r7, lsl #30
 bc0:	1f070532 	svcne	0x00070532
 bc4:	22910605 	addscs	r0, r1, #5242880	; 0x500000
 bc8:	08057575 	stmdaeq	r5, {r0, r2, r4, r5, r6, r8, sl, ip, sp, lr}
 bcc:	00160522 	andseq	r0, r6, r2, lsr #10
 bd0:	58010402 	stmdapl	r1, {r1, sl}
 bd4:	02002605 	andeq	r2, r0, #5242880	; 0x500000
 bd8:	054a0204 	strbeq	r0, [sl, #-516]	; 0xfffffdfc
 bdc:	04020036 	streq	r0, [r2], #-54	; 0xffffffca
 be0:	0b054a03 	bleq	1533f4 <startup-0x1feacc0c>
 be4:	0806054b 	stmdaeq	r6, {r0, r1, r3, r6, r8, sl}
 be8:	22040513 	andcs	r0, r4, #79691776	; 0x4c00000
 bec:	232c0605 			; <UNDEFINED> instruction: 0x232c0605
 bf0:	05590f05 	ldrbeq	r0, [r9, #-3845]	; 0xfffff0fb
 bf4:	1e052f06 	cdpne	15, 0, cr2, cr5, cr6, {0}
 bf8:	01040200 	mrseq	r0, R12_usr
 bfc:	00310558 	eorseq	r0, r1, r8, asr r5
 c00:	58020402 	stmdapl	r2, {r1, sl}
 c04:	02004305 	andeq	r4, r0, #335544320	; 0x14000000
 c08:	054a0304 	strbeq	r0, [sl, #-772]	; 0xfffffcfc
 c0c:	04020055 	streq	r0, [r2], #-85	; 0xffffffab
 c10:	0d054a04 	vstreq	s8, [r5, #-16]
 c14:	0309054b 	movweq	r0, #38219	; 0x954b
 c18:	08053c58 	stmdaeq	r5, {r3, r4, r6, sl, fp, ip, sp}
 c1c:	0303052e 	movweq	r0, #13614	; 0x352e
 c20:	052f3c2b 	streq	r3, [pc, #-3115]!	; fffffffd <_ctype_+0xdfffd738>
 c24:	0b052f0d 	bleq	14c860 <startup-0x1feb37a0>
 c28:	2f11053c 	svccs	0x0011053c
 c2c:	053d0c05 	ldreq	r0, [sp, #-3077]!	; 0xfffff3fb
 c30:	3c4e0308 	mcrrcc	3, 0, r0, lr, cr8
 c34:	052e0705 	streq	r0, [lr, #-1797]!	; 0xfffff8fb
 c38:	3c340309 	ldccc	3, cr0, [r4], #-36	; 0xffffffdc
 c3c:	d9210105 	stmdble	r1!, {r0, r2, r8}
 c40:	522f0205 	eorpl	r0, pc, #1342177280	; 0x50000000
 c44:	05201005 	streq	r1, [r0, #-5]!
 c48:	0c052f02 	stceq	15, cr2, [r5], {2}
 c4c:	2f020520 	svccs	0x00020520
 c50:	2f2f2f2f 	svccs	0x002f2f2f
 c54:	d92f0105 	stmdble	pc!, {r0, r2, r8}	; <UNPREDICTABLE>
 c58:	913d0705 	teqls	sp, r5, lsl #14
 c5c:	4b830205 	blmi	fe0c1478 <_ctype_+0xde0bebb3>
 c60:	054d0705 	strbeq	r0, [sp, #-1797]	; 0xfffff8fb
 c64:	05054d0b 	streq	r4, [r5, #-3339]	; 0xfffff2f5
 c68:	001d0567 	andseq	r0, sp, r7, ror #10
 c6c:	4a010402 	bmi	41c7c <startup-0x1ffbe384>
 c70:	05490905 	strbeq	r0, [r9, #-2309]	; 0xfffff6fb
 c74:	0f052204 	svceq	0x00052204
 c78:	76010522 	strvc	r0, [r1], -r2, lsr #10
 c7c:	01000902 	tsteq	r0, r2, lsl #18
 c80:	05030401 	streq	r0, [r3, #-1025]	; 0xfffffbff
 c84:	02050001 	andeq	r0, r5, #1
 c88:	20000000 	andcs	r0, r0, r0
 c8c:	13011103 	movwne	r1, #4355	; 0x1103
 c90:	4b302221 	blmi	c0951c <startup-0x1f3f6ae4>
 c94:	00010213 	andeq	r0, r1, r3, lsl r2
 c98:	Address 0x00000c98 is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	616c6564 	cmnvs	ip, r4, ror #10
   4:	6d315f79 	ldcvs	15, cr5, [r1, #-484]!	; 0xfffffe1c
   8:	6f726b69 	svcvs	0x00726b69
   c:	63736100 	cmnvs	r3, #0, 2
  10:	775f6969 	ldrbvc	r6, [pc, -r9, ror #18]
  14:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
  18:	6d6f635f 	stclvs	3, cr6, [pc, #-380]!	; fffffea4 <_ctype_+0xdfffd5df>
  1c:	646e616d 	strbtvs	r6, [lr], #-365	; 0xfffffe93
  20:	69727000 	ldmdbvs	r2!, {ip, sp, lr}^
  24:	635f746e 	cmpvs	pc, #1845493760	; 0x6e000000
  28:	74730068 	ldrbtvc	r0, [r3], #-104	; 0xffffff98
  2c:	44007261 	strmi	r7, [r0], #-609	; 0xfffffd9f
  30:	43505349 	cmpmi	r0, #603979777	; 0x24000001
  34:	00524148 	subseq	r4, r2, r8, asr #2
  38:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
  3c:	6e695f69 	cdpvs	15, 6, cr5, cr9, cr9, {3}
  40:	65007469 	strvs	r7, [r0, #-1129]	; 0xfffffb97
  44:	725f646e 	subsvc	r6, pc, #1845493760	; 0x6e000000
  48:	00646e61 	rsbeq	r6, r4, r1, ror #28
  4c:	65707075 	ldrbvs	r7, [r0, #-117]!	; 0xffffff8b
  50:	72670072 	rsbvc	r0, r7, #114	; 0x72
  54:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
  58:	69705f63 	ldmdbvs	r0!, {r0, r1, r5, r6, r8, r9, sl, fp, ip, lr}^
  5c:	5f6c6578 	svcpl	0x006c6578
  60:	61656c63 	cmnvs	r5, r3, ror #24
  64:	72700072 	rsbsvc	r0, r0, #114	; 0x72
  68:	5f746e69 	svcpl	0x00746e69
  6c:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
  70:	65745f74 	ldrbvs	r5, [r4, #-3956]!	; 0xfffff08c
  74:	615f7478 	cmpvs	pc, r8, ror r4	; <UNPREDICTABLE>
  78:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
  7c:	6c656400 	cfstrdvs	mvd6, [r5], #-0
  80:	6d5f7961 	vldrvs.16	s15, [pc, #-194]	; ffffffc6 <_ctype_+0xdfffd701>	; <UNPREDICTABLE>
  84:	6f726369 	svcvs	0x00726369
  88:	756f6600 	strbvc	r6, [pc, #-1536]!	; fffffa90 <_ctype_+0xdfffd1cb>
  8c:	65640072 	strbvs	r0, [r4, #-114]!	; 0xffffff8e
  90:	0079616c 	rsbseq	r6, r9, ip, ror #2
  94:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
  98:	72775f69 	rsbsvc	r5, r7, #420	; 0x1a4
  9c:	5f657469 	svcpl	0x00657469
  a0:	69727473 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
  a4:	7000676e 	andvc	r6, r0, lr, ror #14
  a8:	746e6972 	strbtvc	r6, [lr], #-2418	; 0xfffff68e
  ac:	6d69745f 	cfstrdvs	mvd7, [r9, #-380]!	; 0xfffffe84
  b0:	43007265 	movwmi	r7, #613	; 0x265
  b4:	68432f3a 	stmdavs	r3, {r1, r3, r4, r5, r8, r9, sl, fp, sp}^
  b8:	656d6c61 	strbvs	r6, [sp, #-3169]!	; 0xfffff39f
  bc:	592f7372 	stmdbpl	pc!, {r1, r4, r5, r6, r8, r9, ip, sp, lr}	; <UNPREDICTABLE>
  c0:	31726165 	cmncc	r2, r5, ror #2
  c4:	34504c2f 	ldrbcc	r4, [r0], #-3119	; 0xfffff3d1
  c8:	504f4d2f 	subpl	r4, pc, pc, lsr #26
  cc:	504f4d2f 	subpl	r4, pc, pc, lsr #26
  d0:	62614c2f 	rsbvs	r4, r1, #12032	; 0x2f00
  d4:	694d3562 	stmdbvs	sp, {r1, r5, r6, r8, sl, ip, sp}^
  d8:	7753656e 	ldrbvc	r6, [r3, -lr, ror #10]
  dc:	65706565 	ldrbvs	r6, [r0, #-1381]!	; 0xfffffa9b
  e0:	696d2f72 	stmdbvs	sp!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
  e4:	7753656e 	ldrbvc	r6, [r3, -lr, ror #10]
  e8:	65706565 	ldrbvs	r6, [r0, #-1381]!	; 0xfffffa9b
  ec:	2f444772 	svccs	0x00444772
  f0:	656e694d 	strbvs	r6, [lr, #-2381]!	; 0xfffff6b3
  f4:	65657753 	strbvs	r7, [r5, #-1875]!	; 0xfffff8ad
  f8:	47726570 			; <UNDEFINED> instruction: 0x47726570
  fc:	72672f44 	rsbvc	r2, r7, #68, 30	; 0x110
 100:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 104:	69645f63 	stmdbvs	r4!, {r0, r1, r5, r6, r8, r9, sl, fp, ip, lr}^
 108:	632e7073 			; <UNDEFINED> instruction: 0x632e7073
 10c:	72657a00 	rsbvc	r7, r5, #0, 20
 110:	6564006f 	strbvs	r0, [r4, #-111]!	; 0xffffff91
 114:	5f79616c 	svcpl	0x0079616c
 118:	6c6c696d 			; <UNDEFINED> instruction: 0x6c6c696d
 11c:	6e750069 	cdpvs	0, 7, cr0, cr5, cr9, {3}
 120:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
 124:	63206465 			; <UNDEFINED> instruction: 0x63206465
 128:	00726168 	rsbseq	r6, r2, r8, ror #2
 12c:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 130:	65725f69 	ldrbvs	r5, [r2, #-3945]!	; 0xfffff097
 134:	735f6461 	cmpvc	pc, #1627389952	; 0x61000000
 138:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
 13c:	6e6f0073 	mcrvs	0, 3, r0, cr15, cr3, {3}
 140:	43007365 	movwmi	r7, #869	; 0x365
 144:	68435c3a 	stmdavs	r3, {r1, r3, r4, r5, sl, fp, ip, lr}^
 148:	656d6c61 	strbvs	r6, [sp, #-3169]!	; 0xfffff39f
 14c:	595c7372 	ldmdbpl	ip, {r1, r4, r5, r6, r8, r9, ip, sp, lr}^
 150:	31726165 	cmncc	r2, r5, ror #2
 154:	34504c5c 	ldrbcc	r4, [r0], #-3164	; 0xfffff3a4
 158:	504f4d5c 	subpl	r4, pc, ip, asr sp	; <UNPREDICTABLE>
 15c:	504f4d5c 	subpl	r4, pc, ip, asr sp	; <UNPREDICTABLE>
 160:	62614c5c 	rsbvs	r4, r1, #92, 24	; 0x5c00
 164:	694d3562 	stmdbvs	sp, {r1, r5, r6, r8, sl, ip, sp}^
 168:	7753656e 	ldrbvc	r6, [r3, -lr, ror #10]
 16c:	65706565 	ldrbvs	r6, [r0, #-1381]!	; 0xfffffa9b
 170:	696d5c72 	stmdbvs	sp!, {r1, r4, r5, r6, sl, fp, ip, lr}^
 174:	7753656e 	ldrbvc	r6, [r3, -lr, ror #10]
 178:	65706565 	ldrbvs	r6, [r0, #-1381]!	; 0xfffffa9b
 17c:	5c444772 	mcrrpl	7, 7, r4, r4, cr2
 180:	656e694d 	strbvs	r6, [lr, #-2381]!	; 0xfffff6b3
 184:	65657753 	strbvs	r7, [r5, #-1875]!	; 0xfffff8ad
 188:	47726570 			; <UNDEFINED> instruction: 0x47726570
 18c:	72700044 	rsbsvc	r0, r0, #68	; 0x44
 190:	54746e69 	ldrbtpl	r6, [r4], #-3689	; 0xfffff197
 194:	0044476f 	subeq	r4, r4, pc, ror #14
 198:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0xfffff68d
 19c:	5f6b6369 	svcpl	0x006b6369
 1a0:	5f717269 	svcpl	0x00717269
 1a4:	646e6168 	strbtvs	r6, [lr], #-360	; 0xfffffe98
 1a8:	5f72656c 	svcpl	0x0072656c
 1ac:	6e756f63 	cdpvs	15, 7, cr6, cr5, cr3, {3}
 1b0:	676e6974 			; <UNDEFINED> instruction: 0x676e6974
 1b4:	65737500 	ldrbvs	r7, [r3, #-1280]!	; 0xfffffb00
 1b8:	6373615f 	cmnvs	r3, #-1073741801	; 0xc0000017
 1bc:	73006969 	movwvc	r6, #2409	; 0x969
 1c0:	00736365 	rsbseq	r6, r3, r5, ror #6
 1c4:	6e697270 	mcrvs	2, 3, r7, cr9, cr0, {3}
 1c8:	6d754e74 	ldclvs	14, cr4, [r5, #-464]!	; 0xfffffe30
 1cc:	61007441 	tstvs	r0, r1, asr #8
 1d0:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 1d4:	6165725f 	cmnvs	r5, pc, asr r2
 1d8:	6f635f64 	svcvs	0x00635f64
 1dc:	6f72746e 	svcvs	0x0072746e
 1e0:	72656c6c 	rsbvc	r6, r5, #108, 24	; 0x6c00
 1e4:	61726700 	cmnvs	r2, r0, lsl #14
 1e8:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 1ec:	7869705f 	stmdavc	r9!, {r0, r1, r2, r3, r4, r6, ip, sp, lr}^
 1f0:	735f6c65 	cmpvc	pc, #25856	; 0x6500
 1f4:	61007465 	tstvs	r0, r5, ror #8
 1f8:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 1fc:	7274635f 	rsbsvc	r6, r4, #2080374785	; 0x7c000001
 200:	69625f6c 	stmdbvs	r2!, {r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
 204:	65735f74 	ldrbvs	r5, [r3, #-3956]!	; 0xfffff08c
 208:	79730074 	ldmdbvc	r3!, {r2, r4, r5, r6}^
 20c:	63695473 	cmnvs	r9, #1929379840	; 0x73000000
 210:	6e695f6b 	cdpvs	15, 6, cr5, cr9, cr11, {3}
 214:	67007469 	strvs	r7, [r0, -r9, ror #8]
 218:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 21c:	695f6369 	ldmdbvs	pc, {r0, r3, r5, r6, r8, r9, sp, lr}^	; <UNPREDICTABLE>
 220:	6974696e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, fp, sp, lr}^
 224:	7a696c61 	bvc	1a5b3b0 <startup-0x1e5a4c50>
 228:	79730065 	ldmdbvc	r3!, {r0, r2, r5, r6}^
 22c:	63697473 	cmnvs	r9, #1929379840	; 0x73000000
 230:	72695f6b 	rsbvc	r5, r9, #428	; 0x1ac
 234:	61685f71 	smcvs	34289	; 0x85f1
 238:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0xfffffb92
 23c:	61725f72 	cmnvs	r2, r2, ror pc
 240:	7500646e 	strvc	r6, [r0, #-1134]	; 0xfffffb92
 244:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
 248:	2064656e 	rsbcs	r6, r4, lr, ror #10
 24c:	00746e69 	rsbseq	r6, r4, r9, ror #28
 250:	72646461 	rsbvc	r6, r4, #1627389952	; 0x61000000
 254:	00737365 	rsbseq	r7, r3, r5, ror #6
 258:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 25c:	61725f74 	cmnvs	r2, r4, ror pc
 260:	6100646e 	tstvs	r0, lr, ror #8
 264:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 268:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 26c:	645f6574 	ldrbvs	r6, [pc], #-1396	; 274 <startup-0x1ffffd8c>
 270:	00617461 	rsbeq	r7, r1, r1, ror #8
 274:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 278:	6f675f69 	svcvs	0x00675f69
 27c:	79786f74 	ldmdbvc	r8!, {r2, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 280:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 284:	325f7961 	subscc	r7, pc, #1589248	; 0x184000
 288:	736e3035 	cmnvc	lr, #53	; 0x35
 28c:	554e4700 	strbpl	r4, [lr, #-1792]	; 0xfffff900
 290:	39394320 	ldmdbcc	r9!, {r5, r8, r9, lr}
 294:	322e3920 	eorcc	r3, lr, #32, 18	; 0x80000
 298:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
 29c:	31393130 	teqcc	r9, r0, lsr r1
 2a0:	20353230 	eorscs	r3, r5, r0, lsr r2
 2a4:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
 2a8:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
 2ac:	415b2029 	cmpmi	fp, r9, lsr #32
 2b0:	612f4d52 			; <UNDEFINED> instruction: 0x612f4d52
 2b4:	392d6d72 	pushcc	{r1, r4, r5, r6, r8, sl, fp, sp, lr}
 2b8:	6172622d 	cmnvs	r2, sp, lsr #4
 2bc:	2068636e 	rsbcs	r6, r8, lr, ror #6
 2c0:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
 2c4:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
 2c8:	37373220 	ldrcc	r3, [r7, -r0, lsr #4]!
 2cc:	5d393935 			; <UNDEFINED> instruction: 0x5d393935
 2d0:	746d2d20 	strbtvc	r2, [sp], #-3360	; 0xfffff2e0
 2d4:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
 2d8:	666d2d20 	strbtvs	r2, [sp], -r0, lsr #26
 2dc:	74616f6c 	strbtvc	r6, [r1], #-3948	; 0xfffff094
 2e0:	6962612d 	stmdbvs	r2!, {r0, r2, r3, r5, r8, sp, lr}^
 2e4:	666f733d 			; <UNDEFINED> instruction: 0x666f733d
 2e8:	6d2d2074 	stcvs	0, cr2, [sp, #-464]!	; 0xfffffe30
 2ec:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
 2f0:	6d72613d 	ldfvse	f6, [r2, #-244]!	; 0xffffff0c
 2f4:	6d2d3676 	stcvs	6, cr3, [sp, #-472]!	; 0xfffffe28
 2f8:	20672d20 	rsbcs	r2, r7, r0, lsr #26
 2fc:	20304f2d 	eorscs	r4, r0, sp, lsr #30
 300:	6474732d 	ldrbtvs	r7, [r4], #-813	; 0xfffffcd3
 304:	3939633d 	ldmdbcc	r9!, {r0, r2, r3, r4, r5, r8, r9, sp, lr}
 308:	73797300 	cmnvc	r9, #0, 6
 30c:	6b636974 	blvs	18da8e4 <startup-0x1e72571c>
 310:	7172695f 	cmnvc	r2, pc, asr r9
 314:	6e61685f 	mcrvs	8, 3, r6, cr1, cr15, {2}
 318:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
 31c:	74617000 	strbtvc	r7, [r1], #-0
 320:	6e726574 	mrcvs	5, 3, r6, cr2, cr4, {3}
 324:	72687400 	rsbvc	r7, r8, #0, 8
 328:	61006565 	tstvs	r0, r5, ror #10
 32c:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 330:	7274635f 	rsbsvc	r6, r4, #2080374785	; 0x7c000001
 334:	69625f6c 	stmdbvs	r2!, {r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
 338:	6c635f74 	stclvs	15, cr5, [r3], #-464	; 0xfffffe30
 33c:	00726165 	rsbseq	r6, r2, r5, ror #2
 340:	6f727261 	svcvs	0x00727261
 344:	72700077 	rsbsvc	r0, r0, #119	; 0x77
 348:	5f746e69 	svcpl	0x00746e69
 34c:	67616c66 	strbvs	r6, [r1, -r6, ror #24]!
 350:	65740073 	ldrbvs	r0, [r4, #-115]!	; 0xffffff8d
 354:	7368746e 	cmnvc	r8, #1845493760	; 0x6e000000
 358:	63736100 	cmnvs	r3, #0, 2
 35c:	775f6969 	ldrbvc	r6, [pc, -r9, ror #18]
 360:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 364:	6d756e5f 	ldclvs	14, cr6, [r5, #-380]!	; 0xfffffe84
 368:	00726562 	rsbseq	r6, r2, r2, ror #10
 36c:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0xfffff68d
 370:	5f6b6369 	svcpl	0x006b6369
 374:	67616c66 	strbvs	r6, [r1, -r6, ror #24]!
 378:	61726700 	cmnvs	r2, r0, lsl #14
 37c:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 380:	656c635f 	strbvs	r6, [ip, #-863]!	; 0xfffffca1
 384:	735f7261 	cmpvc	pc, #268435462	; 0x10000006
 388:	65657263 	strbvs	r7, [r5, #-611]!	; 0xfffffd9d
 38c:	6e69006e 	cdpvs	0, 6, cr0, cr9, cr14, {3}
 390:	645f7469 	ldrbvs	r7, [pc], #-1129	; 398 <startup-0x1ffffc68>
 394:	00707369 	rsbseq	r7, r0, r9, ror #6
 398:	616c6564 	cmnvs	ip, r4, ror #10
 39c:	6f635f79 	svcvs	0x00635f79
 3a0:	00746e75 	rsbseq	r6, r4, r5, ror lr
 3a4:	70736964 	rsbsvc	r6, r3, r4, ror #18
 3a8:	72616843 	rsbvc	r6, r1, #4390912	; 0x430000
 3ac:	61707300 	cmnvs	r0, r0, lsl #6
 3b0:	61006563 	tstvs	r0, r3, ror #10
 3b4:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 3b8:	6d6f635f 	stclvs	3, cr6, [pc, #-380]!	; 244 <startup-0x1ffffdbc>
 3bc:	646e616d 	strbtvs	r6, [lr], #-365	; 0xfffffe93
 3c0:	74656700 	strbtvc	r6, [r5], #-1792	; 0xfffff900
 3c4:	6e61725f 	mcrvs	2, 3, r7, cr1, cr15, {2}
 3c8:	61765f64 	cmnvs	r6, r4, ror #30
 3cc:	6574006c 	ldrbvs	r0, [r4, #-108]!	; 0xffffff94
 3d0:	6100736e 	tstvs	r0, lr, ror #6
 3d4:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 3d8:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 3dc:	635f6574 	cmpvs	pc, #116, 10	; 0x1d000000
 3e0:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
 3e4:	656c6c6f 	strbvs	r6, [ip, #-3183]!	; 0xfffff391
 3e8:	73610072 	cmnvc	r1, #114	; 0x72
 3ec:	5f696963 	svcpl	0x00696963
 3f0:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
 3f4:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
 3f8:	73610061 	cmnvc	r1, #97	; 0x61
 3fc:	5f696963 	svcpl	0x00696963
 400:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 404:	68635f65 	stmdavs	r3!, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
 408:	75007261 	strvc	r7, [r0, #-609]	; 0xfffffd9f
 40c:	5f646573 	svcpl	0x00646573
 410:	5f726f66 	svcpl	0x00726f66
 414:	646e6172 	strbtvs	r6, [lr], #-370	; 0xfffffe8e
 418:	6c6f6400 	cfstrdvs	mvd6, [pc], #-0	; 420 <startup-0x1ffffbe0>
 41c:	6f62006c 	svcvs	0x0062006c
 420:	7000626d 	andvc	r6, r0, sp, ror #4
 424:	6563616c 	strbvs	r6, [r3, #-364]!	; 0xfffffe94
 428:	626d6f42 	rsbvs	r6, sp, #264	; 0x108
 42c:	68730073 	ldmdavs	r3!, {r0, r1, r4, r5, r6}^
 430:	6f42776f 	svcvs	0x0042776f
 434:	0073626d 	rsbseq	r6, r3, sp, ror #4
 438:	69736f50 	ldmdbvs	r3!, {r4, r6, r8, r9, sl, fp, sp, lr}^
 43c:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 440:	72630073 	rsbvc	r0, r3, #115	; 0x73
 444:	65746165 	ldrbvs	r6, [r4, #-357]!	; 0xfffffe9b
 448:	72616f42 	rsbvc	r6, r1, #264	; 0x108
 44c:	706f0064 	rsbvc	r0, pc, r4, rrx
 450:	64656e65 	strbtvs	r6, [r5], #-3685	; 0xfffff19b
 454:	46736900 	ldrbtmi	r6, [r3], -r0, lsl #18
 458:	0067616c 	rsbeq	r6, r7, ip, ror #2
 45c:	63616c70 	cmnvs	r1, #112, 24	; 0x7000
 460:	6c466465 	cfstrdvs	mvd6, [r6], {101}	; 0x65
 464:	73676761 	cmnvc	r7, #25427968	; 0x1840000
 468:	6b616d00 	blvs	185b870 <startup-0x1e7a4790>
 46c:	72694665 	rsbvc	r4, r9, #105906176	; 0x6500000
 470:	704f7473 	subvc	r7, pc, r3, ror r4	; <UNPREDICTABLE>
 474:	63006e65 	movwvs	r6, #3685	; 0xe65
 478:	58727275 	ldmdapl	r2!, {r0, r2, r4, r5, r6, r9, ip, sp, lr}^
 47c:	72756300 	rsbsvc	r6, r5, #0, 6
 480:	64005972 	strvs	r5, [r0], #-2418	; 0xfffff68e
 484:	50776172 	rsbspl	r6, r7, r2, ror r1
 488:	6300736f 	movwvs	r7, #879	; 0x36f
 48c:	6b636568 	blvs	18d9a34 <startup-0x1e7265cc>
 490:	006e6957 	rsbeq	r6, lr, r7, asr r9
 494:	61757173 	cmnvs	r5, r3, ror r1
 498:	54736572 	ldrbtpl	r6, [r3], #-1394	; 0xfffffa8e
 49c:	65704f6f 	ldrbvs	r4, [r0, #-3951]!	; 0xfffff091
 4a0:	7369006e 	cmnvc	r9, #110	; 0x6e
 4a4:	626d6f42 	rsbvs	r6, sp, #264	; 0x108
 4a8:	766f6d00 	strbtvc	r6, [pc], -r0, lsl #26
 4ac:	616c5065 	cmnvs	ip, r5, rrx
 4b0:	00726579 	rsbseq	r6, r2, r9, ror r5
 4b4:	656d6167 	strbvs	r6, [sp, #-359]!	; 0xfffffe99
 4b8:	7265766f 	rsbvc	r7, r5, #116391936	; 0x6f00000
 4bc:	766f6d00 	strbtvc	r6, [pc], -r0, lsl #26
 4c0:	00684365 	rsbeq	r4, r8, r5, ror #6
 4c4:	656d6167 	strbvs	r6, [sp, #-359]!	; 0xfffffe99
 4c8:	72617453 	rsbvc	r7, r1, #1392508928	; 0x53000000
 4cc:	00646574 	rsbeq	r6, r4, r4, ror r5
 4d0:	6d61536e 	stclvs	3, cr5, [r1, #-440]!	; 0xfffffe48
 4d4:	79654b65 	stmdbvc	r5!, {r0, r2, r5, r6, r8, r9, fp, lr}^
 4d8:	46736900 	ldrbtmi	r6, [r3], -r0, lsl #18
 4dc:	5067616c 	rsbpl	r6, r7, ip, ror #2
 4e0:	70007274 	andvc	r7, r0, r4, ror r2
 4e4:	6563616c 	strbvs	r6, [r3, #-364]!	; 0xfffffe94
 4e8:	6c665f64 	stclvs	15, cr5, [r6], #-400	; 0xfffffe70
 4ec:	73676761 	cmnvc	r7, #25427968	; 0x1840000
 4f0:	736f7000 	cmnvc	pc, #0
 4f4:	6f697469 	svcvs	0x00697469
 4f8:	6572006e 	ldrbvs	r0, [r2, #-110]!	; 0xffffff92
 4fc:	5f746573 	svcpl	0x00746573
 500:	656d6167 	strbvs	r6, [sp, #-359]!	; 0xfffffe99
 504:	6d616700 	stclvs	7, cr6, [r1, #-0]
 508:	65764f65 	ldrbvs	r4, [r6, #-3941]!	; 0xfffff09b
 50c:	6c700072 	ldclvs	0, cr0, [r0], #-456	; 0xfffffe38
 510:	46656361 	strbtmi	r6, [r5], -r1, ror #6
 514:	0067616c 	rsbeq	r6, r7, ip, ror #2
 518:	67616c66 	strbvs	r6, [r1, -r6, ror #24]!
 51c:	00646567 	rsbeq	r6, r4, r7, ror #10
 520:	5877656e 	ldmdapl	r7!, {r1, r2, r3, r5, r6, r8, sl, sp, lr}^
 524:	656e0059 	strbvs	r0, [lr, #-89]!	; 0xffffffa7
 528:	00587478 	subseq	r7, r8, r8, ror r4
 52c:	7478656e 	ldrbtvc	r6, [r8], #-1390	; 0xfffffa92
 530:	3a430059 	bcc	10c069c <startup-0x1ef3f964>
 534:	6168432f 	cmnvs	r8, pc, lsr #6
 538:	72656d6c 	rsbvc	r6, r5, #108, 26	; 0x1b00
 53c:	65592f73 	ldrbvs	r2, [r9, #-3955]	; 0xfffff08d
 540:	2f317261 	svccs	0x00317261
 544:	2f34504c 	svccs	0x0034504c
 548:	2f504f4d 	svccs	0x00504f4d
 54c:	2f504f4d 	svccs	0x00504f4d
 550:	6262614c 	rsbvs	r6, r2, #76, 2
 554:	6e694d35 	mcrvs	13, 3, r4, cr9, cr5, {1}
 558:	65775365 	ldrbvs	r5, [r7, #-869]!	; 0xfffffc9b
 55c:	72657065 	rsbvc	r7, r5, #101	; 0x65
 560:	6e696d2f 	cdpvs	13, 6, cr6, cr9, cr15, {1}
 564:	65775365 	ldrbvs	r5, [r7, #-869]!	; 0xfffffc9b
 568:	72657065 	rsbvc	r7, r5, #101	; 0x65
 56c:	4d2f4447 	cfstrsmi	mvf4, [pc, #-284]!	; 458 <startup-0x1ffffba8>
 570:	53656e69 	cmnpl	r5, #1680	; 0x690
 574:	70656577 	rsbvc	r6, r5, r7, ror r5
 578:	44477265 	strbmi	r7, [r7], #-613	; 0xfffffd9b
 57c:	6d61672f 	stclvs	7, cr6, [r1, #-188]!	; 0xffffff44
 580:	6f6c5f65 	svcvs	0x006c5f65
 584:	2e636967 	vnmulcs.f16	s13, s6, s15	; <UNPREDICTABLE>
 588:	61760063 	cmnvs	r6, r3, rrx
 58c:	5064696c 	rsbpl	r6, r4, ip, ror #18
 590:	6600736f 	strvs	r7, [r0], -pc, ror #6
 594:	646e756f 	strbtvs	r7, [lr], #-1391	; 0xfffffa91
 598:	6d756e00 	ldclvs	14, cr6, [r5, #-0]
 59c:	4f726562 	svcmi	0x00726562
 5a0:	6d6f4266 	sfmvs	f4, 2, [pc, #-408]!	; 410 <startup-0x1ffffbf0>
 5a4:	6f007362 	svcvs	0x00007362
 5a8:	506e6570 	rsbpl	r6, lr, r0, ror r5
 5ac:	6700736f 	strvs	r7, [r0, -pc, ror #6]
 5b0:	654e7465 	strbvs	r7, [lr, #-1125]	; 0xfffffb9b
 5b4:	46595877 			; <UNDEFINED> instruction: 0x46595877
 5b8:	436d6f72 	cmnmi	sp, #456	; 0x1c8
 5bc:	6f630068 	svcvs	0x00630068
 5c0:	42746e75 	rsbsmi	r6, r4, #1872	; 0x750
 5c4:	4f626d6f 	svcmi	0x00626d6f
 5c8:	616c4672 	smcvs	50274	; 0xc462
 5cc:	6c700067 	ldclvs	0, cr0, [r0], #-412	; 0xfffffe64
 5d0:	64656361 	strbtvs	r6, [r5], #-865	; 0xfffffc9f
 5d4:	626d6f42 	rsbvs	r6, sp, #264	; 0x108
 5d8:	6f740073 	svcvs	0x00740073
 5dc:	65776f6c 	ldrbvs	r6, [r7, #-3948]!	; 0xfffff094
 5e0:	706f0072 	rsbvc	r0, pc, r2, ror r0	; <UNPREDICTABLE>
 5e4:	64656e65 	strbtvs	r6, [r5], #-3685	; 0xfffff19b
 5e8:	61757153 	cmnvs	r5, r3, asr r1
 5ec:	00736572 	rsbseq	r6, r3, r2, ror r5
 5f0:	6f427369 	svcvs	0x00427369
 5f4:	7450626d 	ldrbvc	r6, [r0], #-621	; 0xfffffd93
 5f8:	6f620072 	svcvs	0x00620072
 5fc:	00647261 	rsbeq	r7, r4, r1, ror #4
 600:	6d6f426e 	sfmvs	f4, 2, [pc, #-440]!	; 450 <startup-0x1ffffbb0>
 604:	66007362 	strvs	r7, [r0], -r2, ror #6
 608:	00636e75 	rsbeq	r6, r3, r5, ror lr
 60c:	6b636974 	blvs	18dabe4 <startup-0x1e72541c>
 610:	656b0073 	strbvs	r0, [fp, #-115]!	; 0xffffff8d
 614:	6c615679 	stclvs	6, cr5, [r1], #-484	; 0xfffffe1c
 618:	69006575 	stmdbvs	r0, {r0, r2, r4, r5, r6, r8, sl, sp, lr}
 61c:	5f74696e 	svcpl	0x0074696e
 620:	7079656b 	rsbsvc	r6, r9, fp, ror #10
 624:	72006461 	andvc	r6, r0, #1627389952	; 0x61000000
 628:	4b646165 	blmi	1918bc4 <startup-0x1e6e743c>
 62c:	72007965 	andvc	r7, r0, #1654784	; 0x194000
 630:	72657365 	rsbvc	r7, r5, #-1811939327	; 0x94000001
 634:	00646576 	rsbeq	r6, r4, r6, ror r5
 638:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
 63c:	695f3672 	ldmdbvs	pc, {r1, r4, r5, r6, r9, sl, ip, sp}^	; <UNPREDICTABLE>
 640:	0074696e 	rsbseq	r6, r4, lr, ror #18
 644:	7079746f 	rsbsvc	r7, r9, pc, ror #8
 648:	74007265 	strvc	r7, [r0], #-613	; 0xfffffd9b
 64c:	6c67676f 	stclvs	7, cr6, [r7], #-444	; 0xfffffe44
 650:	69745f65 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
 654:	5f72656d 	svcpl	0x0072656d
 658:	6e6e7572 	mcrvs	5, 3, r7, cr14, cr2, {3}
 65c:	00676e69 	rsbeq	r6, r7, r9, ror #28
 660:	4f495047 	svcmi	0x00495047
 664:	70736f00 	rsbsvc	r6, r3, r0, lsl #30
 668:	72646565 	rsbvc	r6, r4, #423624704	; 0x19400000
 66c:	74636100 	strbtvc	r6, [r3], #-256	; 0xffffff00
 670:	74617669 	strbtvc	r7, [r1], #-1641	; 0xfffff997
 674:	776f5265 	strbvc	r5, [pc, -r5, ror #4]!
 678:	72756300 	rsbsvc	r6, r5, #0, 6
 67c:	746e6572 	strbtvc	r6, [lr], #-1394	; 0xfffffa8e
 680:	6174735f 	cmnvs	r4, pc, asr r3
 684:	72006574 	andvc	r6, r0, #116, 10	; 0x1d000000
 688:	43646165 	cmnmi	r4, #1073741849	; 0x40000019
 68c:	6d756c6f 	ldclvs	12, cr6, [r5, #-444]!	; 0xfffffe44
 690:	7570006e 	ldrbvc	r0, [r0, #-110]!	; 0xffffff92
 694:	00726470 	rsbseq	r6, r2, r0, ror r4
 698:	6e69616d 	powvsez	f6, f1, #5.0
 69c:	696e6900 	stmdbvs	lr!, {r8, fp, sp, lr}^
 6a0:	70615f74 	rsbvc	r5, r1, r4, ror pc
 6a4:	6c700070 	ldclvs	0, cr0, [r0], #-448	; 0xfffffe40
 6a8:	615f7961 	cmpvs	pc, r1, ror #18
 6ac:	6e696167 	powvsez	f6, f1, f7
 6b0:	6e697500 	cdpvs	5, 6, cr7, cr9, cr0, {0}
 6b4:	745f3874 	ldrbvc	r3, [pc], #-2164	; 6bc <startup-0x1ffff944>
 6b8:	72646f00 	rsbvc	r6, r4, #0, 30
 6bc:	00776f4c 	rsbseq	r6, r7, ip, asr #30
 6c0:	65736572 	ldrbvs	r6, [r3, #-1394]!	; 0xfffffa8e
 6c4:	69745f74 	ldmdbvs	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 6c8:	0072656d 	rsbseq	r6, r2, sp, ror #10
 6cc:	48726469 	ldmdami	r2!, {r0, r3, r5, r6, sl, sp, lr}^
 6d0:	00686769 	rsbeq	r6, r8, r9, ror #14
 6d4:	4872646f 	ldmdami	r2!, {r0, r1, r2, r3, r5, r6, sl, sp, lr}^
 6d8:	00686769 	rsbeq	r6, r8, r9, ror #14
 6dc:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 6e0:	00707574 	rsbseq	r7, r0, r4, ror r5
 6e4:	6279656b 	rsbsvs	r6, r9, #448790528	; 0x1ac00000
 6e8:	686e655f 	stmdavs	lr!, {r0, r1, r2, r3, r4, r6, r8, sl, sp, lr}^
 6ec:	65636e61 	strbvs	r6, [r3, #-3681]!	; 0xfffff19f
 6f0:	65730064 	ldrbvs	r0, [r3, #-100]!	; 0xffffff9c
 6f4:	646e6f63 	strbtvs	r6, [lr], #-3939	; 0xfffff09d
 6f8:	64690073 	strbtvs	r0, [r9], #-115	; 0xffffff8d
 6fc:	776f4c72 			; <UNDEFINED> instruction: 0x776f4c72
 700:	73616c00 	cmnvc	r1, #0, 24
 704:	79654b74 	stmdbvc	r5!, {r2, r4, r5, r6, r8, r9, fp, lr}^
 708:	726f7000 	rsbvc	r7, pc, #0
 70c:	68730074 	ldmdavs	r3!, {r2, r4, r5, r6}^
 710:	2074726f 	rsbscs	r7, r4, pc, ror #4
 714:	00746e69 	rsbseq	r6, r4, r9, ror #28
 718:	63746968 	cmnvs	r4, #104, 18	; 0x1a0000
 71c:	61740068 	cmnvs	r4, r8, rrx
 720:	70675f67 	rsbvc	r5, r7, r7, ror #30
 724:	75006f69 	strvc	r6, [r0, #-3945]	; 0xfffff097
 728:	33746e69 	cmncc	r4, #1680	; 0x690
 72c:	00745f32 	rsbseq	r5, r4, r2, lsr pc
 730:	432f3a43 			; <UNDEFINED> instruction: 0x432f3a43
 734:	6d6c6168 	stfvse	f6, [ip, #-416]!	; 0xfffffe60
 738:	2f737265 	svccs	0x00737265
 73c:	72616559 	rsbvc	r6, r1, #373293056	; 0x16400000
 740:	504c2f31 	subpl	r2, ip, r1, lsr pc
 744:	4f4d2f34 	svcmi	0x004d2f34
 748:	4f4d2f50 	svcmi	0x004d2f50
 74c:	614c2f50 	cmpvs	ip, r0, asr pc
 750:	4d356262 	lfmmi	f6, 4, [r5, #-392]!	; 0xfffffe78
 754:	53656e69 	cmnpl	r5, #1680	; 0x690
 758:	70656577 	rsbvc	r6, r5, r7, ror r5
 75c:	6d2f7265 	sfmvs	f7, 4, [pc, #-404]!	; 5d0 <startup-0x1ffffa30>
 760:	53656e69 	cmnpl	r5, #1680	; 0x690
 764:	70656577 	rsbvc	r6, r5, r7, ror r5
 768:	44477265 	strbmi	r7, [r7], #-613	; 0xfffffd9b
 76c:	6e694d2f 	cdpvs	13, 6, cr4, cr9, cr15, {1}
 770:	65775365 	ldrbvs	r5, [r7, #-869]!	; 0xfffffc9b
 774:	72657065 	rsbvc	r7, r5, #101	; 0x65
 778:	732f4447 			; <UNDEFINED> instruction: 0x732f4447
 77c:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
 780:	632e7075 			; <UNDEFINED> instruction: 0x632e7075
 784:	646f6d00 	strbtvs	r6, [pc], #-3328	; 78c <startup-0x1ffff874>
 788:	74007265 	strvc	r7, [r0], #-613	; 0xfffffd9b
 78c:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
 790:	6e695f36 	mcrvs	15, 3, r5, cr9, cr6, {1}
 794:	72726574 	rsbsvc	r6, r2, #116, 10	; 0x1d000000
 798:	00747075 	rsbseq	r7, r4, r5, ror r0
 79c:	43746968 	cmnmi	r4, #104, 18	; 0x1a0000
 7a0:	65720068 	ldrbvs	r0, [r2, #-104]!	; 0xffffff98
 7a4:	76726573 			; <UNDEFINED> instruction: 0x76726573
 7a8:	00326465 	eorseq	r6, r2, r5, ror #8
 7ac:	5f746573 	svcpl	0x00746573
 7b0:	6e6e7572 	mcrvs	5, 3, r7, cr14, cr2, {3}
 7b4:	00676e69 	rsbeq	r6, r7, r9, ror #28

Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	206d7241 	rsbcs	r7, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d39 	eorscc	r2, r2, r9, lsr sp
  30:	712d3931 			; <UNDEFINED> instruction: 0x712d3931
  34:	616d2d34 	cmnvs	sp, r4, lsr sp
  38:	29726f6a 	ldmdbcs	r2!, {r1, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
  3c:	322e3920 	eorcc	r3, lr, #32, 18	; 0x80000
  40:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  44:	31393130 	teqcc	r9, r0, lsr r1
  48:	20353230 	eorscs	r3, r5, r0, lsr r2
  4c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  50:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  54:	415b2029 	cmpmi	fp, r9, lsr #32
  58:	612f4d52 			; <UNDEFINED> instruction: 0x612f4d52
  5c:	392d6d72 	pushcc	{r1, r4, r5, r6, r8, sl, fp, sp, lr}
  60:	6172622d 	cmnvs	r2, sp, lsr #4
  64:	2068636e 	rsbcs	r6, r8, lr, ror #6
  68:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
  6c:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
  70:	37373220 	ldrcc	r3, [r7, -r0, lsr #4]!
  74:	5d393935 			; <UNDEFINED> instruction: 0x5d393935
	...

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002b41 	andeq	r2, r0, r1, asr #22
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000021 	andeq	r0, r0, r1, lsr #32
  10:	2d533605 	ldclcs	6, cr3, [r3, #-20]	; 0xffffffec
  14:	0c06004d 	stceq	0, cr0, [r6], {77}	; 0x4d
  18:	01094d07 	tsteq	r9, r7, lsl #26
  1c:	01140412 	tsteq	r4, r2, lsl r4
  20:	03170115 	tsteq	r7, #1073741829	; 0x40000005
  24:	01190118 	tsteq	r9, r8, lsl r1
  28:	061e011a 			; <UNDEFINED> instruction: 0x061e011a

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	00000018 	andeq	r0, r0, r8, lsl r0
  14:	00000000 	andeq	r0, r0, r0
  18:	20000014 	andcs	r0, r0, r4, lsl r0
  1c:	00000048 	andeq	r0, r0, r8, asr #32
  20:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  24:	41018e02 	tstmi	r1, r2, lsl #28
  28:	0000070d 	andeq	r0, r0, sp, lsl #14
  2c:	00000018 	andeq	r0, r0, r8, lsl r0
  30:	00000000 	andeq	r0, r0, r0
  34:	2000005c 	andcs	r0, r0, ip, asr r0
  38:	00000024 	andeq	r0, r0, r4, lsr #32
  3c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  40:	41018e02 	tstmi	r1, r2, lsl #28
  44:	0000070d 	andeq	r0, r0, sp, lsl #14
  48:	00000018 	andeq	r0, r0, r8, lsl r0
  4c:	00000000 	andeq	r0, r0, r0
  50:	20000080 	andcs	r0, r0, r0, lsl #1
  54:	00000020 	andeq	r0, r0, r0, lsr #32
  58:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  5c:	41018e02 	tstmi	r1, r2, lsl #28
  60:	0000070d 	andeq	r0, r0, sp, lsl #14
  64:	00000018 	andeq	r0, r0, r8, lsl r0
  68:	00000000 	andeq	r0, r0, r0
  6c:	200000a0 	andcs	r0, r0, r0, lsr #1
  70:	00000018 	andeq	r0, r0, r8, lsl r0
  74:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  78:	41018e02 	tstmi	r1, r2, lsl #28
  7c:	0000070d 	andeq	r0, r0, sp, lsl #14
  80:	00000018 	andeq	r0, r0, r8, lsl r0
  84:	00000000 	andeq	r0, r0, r0
  88:	200000b8 	strhcs	r0, [r0], -r8
  8c:	00000030 	andeq	r0, r0, r0, lsr r0
  90:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  94:	41018e02 	tstmi	r1, r2, lsl #28
  98:	0000070d 	andeq	r0, r0, sp, lsl #14
  9c:	00000018 	andeq	r0, r0, r8, lsl r0
  a0:	00000000 	andeq	r0, r0, r0
  a4:	200000e8 	andcs	r0, r0, r8, ror #1
  a8:	00000020 	andeq	r0, r0, r0, lsr #32
  ac:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  b0:	41018e02 	tstmi	r1, r2, lsl #28
  b4:	0000070d 	andeq	r0, r0, sp, lsl #14
  b8:	00000018 	andeq	r0, r0, r8, lsl r0
  bc:	00000000 	andeq	r0, r0, r0
  c0:	20000108 	andcs	r0, r0, r8, lsl #2
  c4:	00000044 	andeq	r0, r0, r4, asr #32
  c8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  cc:	41018e02 	tstmi	r1, r2, lsl #28
  d0:	0000070d 	andeq	r0, r0, sp, lsl #14
  d4:	00000018 	andeq	r0, r0, r8, lsl r0
  d8:	00000000 	andeq	r0, r0, r0
  dc:	2000014c 	andcs	r0, r0, ip, asr #2
  e0:	00000030 	andeq	r0, r0, r0, lsr r0
  e4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  e8:	41018e02 	tstmi	r1, r2, lsl #28
  ec:	0000070d 	andeq	r0, r0, sp, lsl #14
  f0:	0000001c 	andeq	r0, r0, ip, lsl r0
  f4:	00000000 	andeq	r0, r0, r0
  f8:	2000017c 	andcs	r0, r0, ip, ror r1
  fc:	0000004c 	andeq	r0, r0, ip, asr #32
 100:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 104:	41018e02 	tstmi	r1, r2, lsl #28
 108:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 10c:	00000007 	andeq	r0, r0, r7
 110:	0000001c 	andeq	r0, r0, ip, lsl r0
 114:	00000000 	andeq	r0, r0, r0
 118:	200001c8 	andcs	r0, r0, r8, asr #3
 11c:	0000002c 	andeq	r0, r0, ip, lsr #32
 120:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 124:	41018e02 	tstmi	r1, r2, lsl #28
 128:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 12c:	00000007 	andeq	r0, r0, r7
 130:	00000024 	andeq	r0, r0, r4, lsr #32
 134:	00000000 	andeq	r0, r0, r0
 138:	200001f4 	strdcs	r0, [r0], -r4
 13c:	00000138 	andeq	r0, r0, r8, lsr r1
 140:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
 144:	86048505 	strhi	r8, [r4], -r5, lsl #10
 148:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 14c:	f00e4101 			; <UNDEFINED> instruction: 0xf00e4101
 150:	070c4101 	streq	r4, [ip, -r1, lsl #2]
 154:	00000190 	muleq	r0, r0, r1
 158:	0000001c 	andeq	r0, r0, ip, lsl r0
 15c:	00000000 	andeq	r0, r0, r0
 160:	2000032c 	andcs	r0, r0, ip, lsr #6
 164:	00000084 	andeq	r0, r0, r4, lsl #1
 168:	41080e41 	tstmi	r8, r1, asr #28
 16c:	0487100e 	streq	r1, [r7], #14
 170:	0e41038e 	cdpeq	3, 4, cr0, cr1, cr14, {4}
 174:	070d4120 	streq	r4, [sp, -r0, lsr #2]
 178:	0000000c 	andeq	r0, r0, ip
 17c:	00000000 	andeq	r0, r0, r0
 180:	200003b0 			; <UNDEFINED> instruction: 0x200003b0
 184:	00000006 	andeq	r0, r0, r6
 188:	0000000c 	andeq	r0, r0, ip
 18c:	00000000 	andeq	r0, r0, r0
 190:	200003b6 			; <UNDEFINED> instruction: 0x200003b6
 194:	00000006 	andeq	r0, r0, r6
 198:	0000000c 	andeq	r0, r0, ip
 19c:	00000000 	andeq	r0, r0, r0
 1a0:	200003bc 			; <UNDEFINED> instruction: 0x200003bc
 1a4:	00000006 	andeq	r0, r0, r6
 1a8:	0000000c 	andeq	r0, r0, ip
 1ac:	00000000 	andeq	r0, r0, r0
 1b0:	200003c2 	andcs	r0, r0, r2, asr #7
 1b4:	00000006 	andeq	r0, r0, r6
 1b8:	00000020 	andeq	r0, r0, r0, lsr #32
 1bc:	00000000 	andeq	r0, r0, r0
 1c0:	200003c8 	andcs	r0, r0, r8, asr #7
 1c4:	00000050 	andeq	r0, r0, r0, asr r0
 1c8:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
 1cc:	87038504 	strhi	r8, [r3, -r4, lsl #10]
 1d0:	41018e02 	tstmi	r1, r2, lsl #28
 1d4:	0d41300e 	stcleq	0, cr3, [r1, #-56]	; 0xffffffc8
 1d8:	00000007 	andeq	r0, r0, r7
 1dc:	0000001c 	andeq	r0, r0, ip, lsl r0
 1e0:	00000000 	andeq	r0, r0, r0
 1e4:	20000418 	andcs	r0, r0, r8, lsl r4
 1e8:	00000068 	andeq	r0, r0, r8, rrx
 1ec:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 1f0:	41018e02 	tstmi	r1, r2, lsl #28
 1f4:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 1f8:	00000007 	andeq	r0, r0, r7
 1fc:	0000001c 	andeq	r0, r0, ip, lsl r0
 200:	00000000 	andeq	r0, r0, r0
 204:	20000480 	andcs	r0, r0, r0, lsl #9
 208:	00000030 	andeq	r0, r0, r0, lsr r0
 20c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 210:	41018e02 	tstmi	r1, r2, lsl #28
 214:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 218:	00000007 	andeq	r0, r0, r7
 21c:	00000018 	andeq	r0, r0, r8, lsl r0
 220:	00000000 	andeq	r0, r0, r0
 224:	200004b0 			; <UNDEFINED> instruction: 0x200004b0
 228:	0000002c 	andeq	r0, r0, ip, lsr #32
 22c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 230:	41018e02 	tstmi	r1, r2, lsl #28
 234:	0000070d 	andeq	r0, r0, sp, lsl #14
 238:	0000001c 	andeq	r0, r0, ip, lsl r0
 23c:	00000000 	andeq	r0, r0, r0
 240:	200004dc 	ldrdcs	r0, [r0], -ip
 244:	0000003c 	andeq	r0, r0, ip, lsr r0
 248:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 24c:	41018e02 	tstmi	r1, r2, lsl #28
 250:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 254:	00000007 	andeq	r0, r0, r7
 258:	0000001c 	andeq	r0, r0, ip, lsl r0
 25c:	00000000 	andeq	r0, r0, r0
 260:	20000518 	andcs	r0, r0, r8, lsl r5
 264:	0000002a 	andeq	r0, r0, sl, lsr #32
 268:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 26c:	41018e02 	tstmi	r1, r2, lsl #28
 270:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 274:	00000007 	andeq	r0, r0, r7
 278:	0000001c 	andeq	r0, r0, ip, lsl r0
 27c:	00000000 	andeq	r0, r0, r0
 280:	20000542 	andcs	r0, r0, r2, asr #10
 284:	0000005e 	andeq	r0, r0, lr, asr r0
 288:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 28c:	41018e02 	tstmi	r1, r2, lsl #28
 290:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 294:	00000007 	andeq	r0, r0, r7
 298:	0000001c 	andeq	r0, r0, ip, lsl r0
 29c:	00000000 	andeq	r0, r0, r0
 2a0:	200005a0 	andcs	r0, r0, r0, lsr #11
 2a4:	0000003c 	andeq	r0, r0, ip, lsr r0
 2a8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 2ac:	41018e02 	tstmi	r1, r2, lsl #28
 2b0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 2b4:	00000007 	andeq	r0, r0, r7
 2b8:	0000001c 	andeq	r0, r0, ip, lsl r0
 2bc:	00000000 	andeq	r0, r0, r0
 2c0:	200005dc 	ldrdcs	r0, [r0], -ip
 2c4:	0000003c 	andeq	r0, r0, ip, lsr r0
 2c8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 2cc:	41018e02 	tstmi	r1, r2, lsl #28
 2d0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 2d4:	00000007 	andeq	r0, r0, r7
 2d8:	0000001c 	andeq	r0, r0, ip, lsl r0
 2dc:	00000000 	andeq	r0, r0, r0
 2e0:	20000618 	andcs	r0, r0, r8, lsl r6
 2e4:	00000040 	andeq	r0, r0, r0, asr #32
 2e8:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
 2ec:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 2f0:	180e4101 	stmdane	lr, {r0, r8, lr}
 2f4:	00070d41 	andeq	r0, r7, r1, asr #26
 2f8:	0000001c 	andeq	r0, r0, ip, lsl r0
 2fc:	00000000 	andeq	r0, r0, r0
 300:	20000658 	andcs	r0, r0, r8, asr r6
 304:	00000040 	andeq	r0, r0, r0, asr #32
 308:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
 30c:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 310:	180e4101 	stmdane	lr, {r0, r8, lr}
 314:	00070d41 	andeq	r0, r7, r1, asr #26
 318:	0000001c 	andeq	r0, r0, ip, lsl r0
 31c:	00000000 	andeq	r0, r0, r0
 320:	20000698 	mulcs	r0, r8, r6
 324:	00000034 	andeq	r0, r0, r4, lsr r0
 328:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 32c:	41018e02 	tstmi	r1, r2, lsl #28
 330:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 334:	00000007 	andeq	r0, r0, r7
 338:	0000001c 	andeq	r0, r0, ip, lsl r0
 33c:	00000000 	andeq	r0, r0, r0
 340:	200006cc 	andcs	r0, r0, ip, asr #13
 344:	0000002a 	andeq	r0, r0, sl, lsr #32
 348:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 34c:	41018e02 	tstmi	r1, r2, lsl #28
 350:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 354:	00000007 	andeq	r0, r0, r7
 358:	0000001c 	andeq	r0, r0, ip, lsl r0
 35c:	00000000 	andeq	r0, r0, r0
 360:	200006f6 	strdcs	r0, [r0], -r6
 364:	0000002a 	andeq	r0, r0, sl, lsr #32
 368:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 36c:	41018e02 	tstmi	r1, r2, lsl #28
 370:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 374:	00000007 	andeq	r0, r0, r7
 378:	0000001c 	andeq	r0, r0, ip, lsl r0
 37c:	00000000 	andeq	r0, r0, r0
 380:	20000720 	andcs	r0, r0, r0, lsr #14
 384:	00000030 	andeq	r0, r0, r0, lsr r0
 388:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 38c:	41018e02 	tstmi	r1, r2, lsl #28
 390:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 394:	00000007 	andeq	r0, r0, r7
 398:	0000001c 	andeq	r0, r0, ip, lsl r0
 39c:	00000000 	andeq	r0, r0, r0
 3a0:	20000750 	andcs	r0, r0, r0, asr r7
 3a4:	00000038 	andeq	r0, r0, r8, lsr r0
 3a8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 3ac:	41018e02 	tstmi	r1, r2, lsl #28
 3b0:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 3b4:	00000007 	andeq	r0, r0, r7
 3b8:	0000001c 	andeq	r0, r0, ip, lsl r0
 3bc:	00000000 	andeq	r0, r0, r0
 3c0:	20000788 	andcs	r0, r0, r8, lsl #15
 3c4:	00000048 	andeq	r0, r0, r8, asr #32
 3c8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 3cc:	41018e02 	tstmi	r1, r2, lsl #28
 3d0:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 3d4:	00000007 	andeq	r0, r0, r7
 3d8:	00000018 	andeq	r0, r0, r8, lsl r0
 3dc:	00000000 	andeq	r0, r0, r0
 3e0:	200007d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 3e4:	00000044 	andeq	r0, r0, r4, asr #32
 3e8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 3ec:	41018e02 	tstmi	r1, r2, lsl #28
 3f0:	0000070d 	andeq	r0, r0, sp, lsl #14
 3f4:	0000001c 	andeq	r0, r0, ip, lsl r0
 3f8:	00000000 	andeq	r0, r0, r0
 3fc:	20000814 	andcs	r0, r0, r4, lsl r8
 400:	00000046 	andeq	r0, r0, r6, asr #32
 404:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 408:	41018e02 	tstmi	r1, r2, lsl #28
 40c:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 410:	00000007 	andeq	r0, r0, r7
 414:	0000001c 	andeq	r0, r0, ip, lsl r0
 418:	00000000 	andeq	r0, r0, r0
 41c:	2000085a 	andcs	r0, r0, sl, asr r8
 420:	00000024 	andeq	r0, r0, r4, lsr #32
 424:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 428:	41018e02 	tstmi	r1, r2, lsl #28
 42c:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 430:	00000007 	andeq	r0, r0, r7
 434:	0000000c 	andeq	r0, r0, ip
 438:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 43c:	7c020001 	stcvc	0, cr0, [r2], {1}
 440:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 444:	0000001c 	andeq	r0, r0, ip, lsl r0
 448:	00000434 	andeq	r0, r0, r4, lsr r4
 44c:	20000880 	andcs	r0, r0, r0, lsl #17
 450:	0000009c 	muleq	r0, ip, r0
 454:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 458:	41018e02 	tstmi	r1, r2, lsl #28
 45c:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 460:	00000007 	andeq	r0, r0, r7
 464:	0000001c 	andeq	r0, r0, ip, lsl r0
 468:	00000434 	andeq	r0, r0, r4, lsr r4
 46c:	2000091c 	andcs	r0, r0, ip, lsl r9
 470:	00000114 	andeq	r0, r0, r4, lsl r1
 474:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
 478:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 47c:	380e4101 	stmdacc	lr, {r0, r8, lr}
 480:	00070d41 	andeq	r0, r7, r1, asr #26
 484:	0000001c 	andeq	r0, r0, ip, lsl r0
 488:	00000434 	andeq	r0, r0, r4, lsr r4
 48c:	20000a30 	andcs	r0, r0, r0, lsr sl
 490:	00000032 	andeq	r0, r0, r2, lsr r0
 494:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 498:	41018e02 	tstmi	r1, r2, lsl #28
 49c:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 4a0:	00000007 	andeq	r0, r0, r7
 4a4:	0000001c 	andeq	r0, r0, ip, lsl r0
 4a8:	00000434 	andeq	r0, r0, r4, lsr r4
 4ac:	20000a62 	andcs	r0, r0, r2, ror #20
 4b0:	00000082 	andeq	r0, r0, r2, lsl #1
 4b4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 4b8:	41018e02 	tstmi	r1, r2, lsl #28
 4bc:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 4c0:	00000007 	andeq	r0, r0, r7
 4c4:	00000020 	andeq	r0, r0, r0, lsr #32
 4c8:	00000434 	andeq	r0, r0, r4, lsr r4
 4cc:	20000ae4 	andcs	r0, r0, r4, ror #21
 4d0:	0000013c 	andeq	r0, r0, ip, lsr r1
 4d4:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
 4d8:	87038504 	strhi	r8, [r3, -r4, lsl #10]
 4dc:	41018e02 	tstmi	r1, r2, lsl #28
 4e0:	0c41280e 	mcrreq	8, 0, r2, r1, cr14
 4e4:	00002007 	andeq	r2, r0, r7
 4e8:	00000018 	andeq	r0, r0, r8, lsl r0
 4ec:	00000434 	andeq	r0, r0, r4, lsr r4
 4f0:	20000c20 	andcs	r0, r0, r0, lsr #24
 4f4:	00000018 	andeq	r0, r0, r8, lsl r0
 4f8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 4fc:	41018e02 	tstmi	r1, r2, lsl #28
 500:	0000070d 	andeq	r0, r0, sp, lsl #14
 504:	00000020 	andeq	r0, r0, r0, lsr #32
 508:	00000434 	andeq	r0, r0, r4, lsr r4
 50c:	20000c38 	andcs	r0, r0, r8, lsr ip
 510:	0000025c 	andeq	r0, r0, ip, asr r2
 514:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
 518:	87038504 	strhi	r8, [r3, -r4, lsl #10]
 51c:	41018e02 	tstmi	r1, r2, lsl #28
 520:	0c41380e 	mcrreq	8, 0, r3, r1, cr14
 524:	00003007 	andeq	r3, r0, r7
 528:	00000020 	andeq	r0, r0, r0, lsr #32
 52c:	00000434 	andeq	r0, r0, r4, lsr r4
 530:	20000e94 	mulcs	r0, r4, lr
 534:	000000b4 	strheq	r0, [r0], -r4
 538:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
 53c:	87038504 	strhi	r8, [r3, -r4, lsl #10]
 540:	41018e02 	tstmi	r1, r2, lsl #28
 544:	0c41380e 	mcrreq	8, 0, r3, r1, cr14
 548:	00003007 	andeq	r3, r0, r7
 54c:	00000020 	andeq	r0, r0, r0, lsr #32
 550:	00000434 	andeq	r0, r0, r4, lsr r4
 554:	20000f48 	andcs	r0, r0, r8, asr #30
 558:	00000026 	andeq	r0, r0, r6, lsr #32
 55c:	41100e41 	tstmi	r0, r1, asr #28
 560:	0884200e 	stmeq	r4, {r1, r2, r3, sp}
 564:	06870785 	streq	r0, [r7], r5, lsl #15
 568:	0d41058e 	cfstr64eq	mvdx0, [r1, #-568]	; 0xfffffdc8
 56c:	00000007 	andeq	r0, r0, r7
 570:	00000020 	andeq	r0, r0, r0, lsr #32
 574:	00000434 	andeq	r0, r0, r4, lsr r4
 578:	20000f6e 	andcs	r0, r0, lr, ror #30
 57c:	00000026 	andeq	r0, r0, r6, lsr #32
 580:	41100e41 	tstmi	r0, r1, asr #28
 584:	0884200e 	stmeq	r4, {r1, r2, r3, sp}
 588:	06870785 	streq	r0, [r7], r5, lsl #15
 58c:	0d41058e 	cfstr64eq	mvdx0, [r1, #-568]	; 0xfffffdc8
 590:	00000007 	andeq	r0, r0, r7
 594:	00000020 	andeq	r0, r0, r0, lsr #32
 598:	00000434 	andeq	r0, r0, r4, lsr r4
 59c:	20000f94 	mulcs	r0, r4, pc	; <UNPREDICTABLE>
 5a0:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 5a4:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
 5a8:	87038504 	strhi	r8, [r3, -r4, lsl #10]
 5ac:	41018e02 	tstmi	r1, r2, lsl #28
 5b0:	0c41380e 	mcrreq	8, 0, r3, r1, cr14
 5b4:	00003007 	andeq	r3, r0, r7
 5b8:	0000001c 	andeq	r0, r0, ip, lsl r0
 5bc:	00000434 	andeq	r0, r0, r4, lsr r4
 5c0:	20001064 	andcs	r1, r0, r4, rrx
 5c4:	00000034 	andeq	r0, r0, r4, lsr r0
 5c8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 5cc:	41018e02 	tstmi	r1, r2, lsl #28
 5d0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 5d4:	00000007 	andeq	r0, r0, r7
 5d8:	00000020 	andeq	r0, r0, r0, lsr #32
 5dc:	00000434 	andeq	r0, r0, r4, lsr r4
 5e0:	20001098 	mulcs	r0, r8, r0
 5e4:	000000a0 	andeq	r0, r0, r0, lsr #1
 5e8:	41100e41 	tstmi	r0, r1, asr #28
 5ec:	0884200e 	stmeq	r4, {r1, r2, r3, sp}
 5f0:	06870785 	streq	r0, [r7], r5, lsl #15
 5f4:	0e41058e 	cdpeq	5, 4, cr0, cr1, cr14, {4}
 5f8:	070d4130 	smladxeq	sp, r0, r1, r4
 5fc:	0000001c 	andeq	r0, r0, ip, lsl r0
 600:	00000434 	andeq	r0, r0, r4, lsr r4
 604:	20001138 	andcs	r1, r0, r8, lsr r1
 608:	00000080 	andeq	r0, r0, r0, lsl #1
 60c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 610:	41018e02 	tstmi	r1, r2, lsl #28
 614:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 618:	00000007 	andeq	r0, r0, r7
 61c:	0000001c 	andeq	r0, r0, ip, lsl r0
 620:	00000434 	andeq	r0, r0, r4, lsr r4
 624:	200011b8 			; <UNDEFINED> instruction: 0x200011b8
 628:	000000fe 	strdeq	r0, [r0], -lr
 62c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 630:	41018e02 	tstmi	r1, r2, lsl #28
 634:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 638:	00000007 	andeq	r0, r0, r7
 63c:	0000001c 	andeq	r0, r0, ip, lsl r0
 640:	00000434 	andeq	r0, r0, r4, lsr r4
 644:	200012b6 			; <UNDEFINED> instruction: 0x200012b6
 648:	00000026 	andeq	r0, r0, r6, lsr #32
 64c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 650:	41018e02 	tstmi	r1, r2, lsl #28
 654:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 658:	00000007 	andeq	r0, r0, r7
 65c:	0000001c 	andeq	r0, r0, ip, lsl r0
 660:	00000434 	andeq	r0, r0, r4, lsr r4
 664:	200012dc 	ldrdcs	r1, [r0], -ip
 668:	000000bc 	strheq	r0, [r0], -ip
 66c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 670:	41018e02 	tstmi	r1, r2, lsl #28
 674:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 678:	00000007 	andeq	r0, r0, r7
 67c:	0000000c 	andeq	r0, r0, ip
 680:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 684:	7c020001 	stcvc	0, cr0, [r2], {1}
 688:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 68c:	00000018 	andeq	r0, r0, r8, lsl r0
 690:	0000067c 	andeq	r0, r0, ip, ror r6
 694:	20001398 	mulcs	r0, r8, r3
 698:	000000a4 	andeq	r0, r0, r4, lsr #1
 69c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 6a0:	41018e02 	tstmi	r1, r2, lsl #28
 6a4:	0000070d 	andeq	r0, r0, sp, lsl #14
 6a8:	00000018 	andeq	r0, r0, r8, lsl r0
 6ac:	0000067c 	andeq	r0, r0, ip, ror r6
 6b0:	2000143c 	andcs	r1, r0, ip, lsr r4
 6b4:	00000048 	andeq	r0, r0, r8, asr #32
 6b8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 6bc:	41018e02 	tstmi	r1, r2, lsl #28
 6c0:	0000070d 	andeq	r0, r0, sp, lsl #14
 6c4:	00000018 	andeq	r0, r0, r8, lsl r0
 6c8:	0000067c 	andeq	r0, r0, ip, ror r6
 6cc:	20001484 	andcs	r1, r0, r4, lsl #9
 6d0:	00000028 	andeq	r0, r0, r8, lsr #32
 6d4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 6d8:	41018e02 	tstmi	r1, r2, lsl #28
 6dc:	0000070d 	andeq	r0, r0, sp, lsl #14
 6e0:	0000001c 	andeq	r0, r0, ip, lsl r0
 6e4:	0000067c 	andeq	r0, r0, ip, ror r6
 6e8:	200014ac 	andcs	r1, r0, ip, lsr #9
 6ec:	00000048 	andeq	r0, r0, r8, asr #32
 6f0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 6f4:	41018e02 	tstmi	r1, r2, lsl #28
 6f8:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 6fc:	00000007 	andeq	r0, r0, r7
 700:	00000018 	andeq	r0, r0, r8, lsl r0
 704:	0000067c 	andeq	r0, r0, ip, ror r6
 708:	200014f4 	strdcs	r1, [r0], -r4
 70c:	00000020 	andeq	r0, r0, r0, lsr #32
 710:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 714:	41018e02 	tstmi	r1, r2, lsl #28
 718:	0000070d 	andeq	r0, r0, sp, lsl #14
 71c:	0000001c 	andeq	r0, r0, ip, lsl r0
 720:	0000067c 	andeq	r0, r0, ip, ror r6
 724:	20001514 	andcs	r1, r0, r4, lsl r5
 728:	0000003c 	andeq	r0, r0, ip, lsr r0
 72c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 730:	41018e02 	tstmi	r1, r2, lsl #28
 734:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 738:	00000007 	andeq	r0, r0, r7
 73c:	0000001c 	andeq	r0, r0, ip, lsl r0
 740:	0000067c 	andeq	r0, r0, ip, ror r6
 744:	20001550 	andcs	r1, r0, r0, asr r5
 748:	00000068 	andeq	r0, r0, r8, rrx
 74c:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
 750:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 754:	280e4101 	stmdacs	lr, {r0, r8, lr}
 758:	00070d41 	andeq	r0, r7, r1, asr #26
 75c:	0000001c 	andeq	r0, r0, ip, lsl r0
 760:	0000067c 	andeq	r0, r0, ip, ror r6
 764:	200015b8 			; <UNDEFINED> instruction: 0x200015b8
 768:	00000060 	andeq	r0, r0, r0, rrx
 76c:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
 770:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 774:	180e4101 	stmdane	lr, {r0, r8, lr}
 778:	00070d41 	andeq	r0, r7, r1, asr #26
 77c:	0000001c 	andeq	r0, r0, ip, lsl r0
 780:	0000067c 	andeq	r0, r0, ip, ror r6
 784:	20001618 	andcs	r1, r0, r8, lsl r6
 788:	00000068 	andeq	r0, r0, r8, rrx
 78c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 790:	41018e02 	tstmi	r1, r2, lsl #28
 794:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 798:	00000007 	andeq	r0, r0, r7
 79c:	0000001c 	andeq	r0, r0, ip, lsl r0
 7a0:	0000067c 	andeq	r0, r0, ip, ror r6
 7a4:	20001680 	andcs	r1, r0, r0, lsl #13
 7a8:	00000058 	andeq	r0, r0, r8, asr r0
 7ac:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 7b0:	41018e02 	tstmi	r1, r2, lsl #28
 7b4:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 7b8:	00000007 	andeq	r0, r0, r7
 7bc:	0000000c 	andeq	r0, r0, ip
 7c0:	0000067c 	andeq	r0, r0, ip, ror r6
 7c4:	20000000 	andcs	r0, r0, r0
 7c8:	00000012 	andeq	r0, r0, r2, lsl r0
 7cc:	00000020 	andeq	r0, r0, r0, lsr #32
 7d0:	0000067c 	andeq	r0, r0, ip, ror r6
 7d4:	200016d8 	ldrdcs	r1, [r0], -r8
 7d8:	000001c4 	andeq	r0, r0, r4, asr #3
 7dc:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
 7e0:	87038504 	strhi	r8, [r3, -r4, lsl #10]
 7e4:	41018e02 	tstmi	r1, r2, lsl #28
 7e8:	0c41400e 	mcrreq	0, 0, r4, r1, cr14
 7ec:	00003807 	andeq	r3, r0, r7, lsl #16
 7f0:	00000018 	andeq	r0, r0, r8, lsl r0
 7f4:	0000067c 	andeq	r0, r0, ip, ror r6
 7f8:	2000189c 	mulcs	r0, ip, r8
 7fc:	00000048 	andeq	r0, r0, r8, asr #32
 800:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 804:	41018e02 	tstmi	r1, r2, lsl #28
 808:	0000070d 	andeq	r0, r0, sp, lsl #14
 80c:	00000020 	andeq	r0, r0, r0, lsr #32
 810:	0000067c 	andeq	r0, r0, ip, ror r6
 814:	200018e4 	andcs	r1, r0, r4, ror #17
 818:	00000080 	andeq	r0, r0, r0, lsl #1
 81c:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
 820:	87038504 	strhi	r8, [r3, -r4, lsl #10]
 824:	41018e02 	tstmi	r1, r2, lsl #28
 828:	0d41480e 	stcleq	8, cr4, [r1, #-56]	; 0xffffffc8
 82c:	00000007 	andeq	r0, r0, r7
 830:	0000000c 	andeq	r0, r0, ip
 834:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 838:	7c010001 	stcvc	0, cr0, [r1], {1}
 83c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 840:	0000000c 	andeq	r0, r0, ip
 844:	00000830 	andeq	r0, r0, r0, lsr r8
 848:	20001965 	andcs	r1, r0, r5, ror #18
 84c:	0000010a 	andeq	r0, r0, sl, lsl #2
 850:	0000000c 	andeq	r0, r0, ip
 854:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 858:	7c010001 	stcvc	0, cr0, [r1], {1}
 85c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 860:	0000000c 	andeq	r0, r0, ip
 864:	00000850 	andeq	r0, r0, r0, asr r8
 868:	20001a79 	andcs	r1, r0, r9, ror sl
 86c:	000001cc 	andeq	r0, r0, ip, asr #3
 870:	0000000c 	andeq	r0, r0, ip
 874:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 878:	7c020001 	stcvc	0, cr0, [r2], {1}
 87c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 880:	00000014 	andeq	r0, r0, r4, lsl r0
 884:	00000870 	andeq	r0, r0, r0, ror r8
 888:	20001c50 	andcs	r1, r0, r0, asr ip
 88c:	00000012 	andeq	r0, r0, r2, lsl r0
 890:	84080e42 	strhi	r0, [r8], #-3650	; 0xfffff1be
 894:	00018e02 	andeq	r8, r1, r2, lsl #28
 898:	0000000c 	andeq	r0, r0, ip
 89c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 8a0:	7c020001 	stcvc	0, cr0, [r2], {1}
 8a4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 8a8:	0000000c 	andeq	r0, r0, ip
 8ac:	00000898 	muleq	r0, r8, r8
 8b0:	20001c64 	andcs	r1, r0, r4, ror #24
 8b4:	00000014 	andeq	r0, r0, r4, lsl r0

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20001770 	andcs	r1, r0, r0, ror r7
   4:	20001806 	andcs	r1, r0, r6, lsl #16
   8:	2000180a 	andcs	r1, r0, sl, lsl #16
   c:	2000180c 	andcs	r1, r0, ip, lsl #16
	...
  18:	20001398 	mulcs	r0, r8, r3
  1c:	20001964 	andcs	r1, r0, r4, ror #18
  20:	20000000 	andcs	r0, r0, r0
  24:	20000012 	andcs	r0, r0, r2, lsl r0
	...
